//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/angular:angular/angular.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * @license AngularJS v1.4.2                                                                                           // 2
 * (c) 2010-2015 Google, Inc. http://angularjs.org                                                                     // 3
 * License: MIT                                                                                                        // 4
 */                                                                                                                    // 5
(function(window, document, undefined) {'use strict';                                                                  // 6
                                                                                                                       // 7
/**                                                                                                                    // 8
 * @description                                                                                                        // 9
 *                                                                                                                     // 10
 * This object provides a utility for producing rich Error messages within                                             // 11
 * Angular. It can be called as follows:                                                                               // 12
 *                                                                                                                     // 13
 * var exampleMinErr = minErr('example');                                                                              // 14
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);                                                            // 15
 *                                                                                                                     // 16
 * The above creates an instance of minErr in the example namespace. The                                               // 17
 * resulting error will have a namespaced error code of example.one.  The                                              // 18
 * resulting error will replace {0} with the value of foo, and {1} with the                                            // 19
 * value of bar. The object is not restricted in the number of arguments it can                                        // 20
 * take.                                                                                                               // 21
 *                                                                                                                     // 22
 * If fewer arguments are specified than necessary for interpolation, the extra                                        // 23
 * interpolation markers will be preserved in the final string.                                                        // 24
 *                                                                                                                     // 25
 * Since data will be parsed statically during a build step, some restrictions                                         // 26
 * are applied with respect to how minErr instances are created and called.                                            // 27
 * Instances should have names of the form namespaceMinErr for a minErr created                                        // 28
 * using minErr('namespace') . Error codes, namespaces and template strings                                            // 29
 * should all be static strings, not variables or general expressions.                                                 // 30
 *                                                                                                                     // 31
 * @param {string} module The namespace to use for the new minErr instance.                                            // 32
 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning                       // 33
 *   error from returned function, for cases when a particular type of error is useful.                                // 34
 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance                           // 35
 */                                                                                                                    // 36
                                                                                                                       // 37
function minErr(module, ErrorConstructor) {                                                                            // 38
  ErrorConstructor = ErrorConstructor || Error;                                                                        // 39
  return function() {                                                                                                  // 40
    var SKIP_INDEXES = 2;                                                                                              // 41
                                                                                                                       // 42
    var templateArgs = arguments,                                                                                      // 43
      code = templateArgs[0],                                                                                          // 44
      message = '[' + (module ? module + ':' : '') + code + '] ',                                                      // 45
      template = templateArgs[1],                                                                                      // 46
      paramPrefix, i;                                                                                                  // 47
                                                                                                                       // 48
    message += template.replace(/\{\d+\}/g, function(match) {                                                          // 49
      var index = +match.slice(1, -1),                                                                                 // 50
        shiftedIndex = index + SKIP_INDEXES;                                                                           // 51
                                                                                                                       // 52
      if (shiftedIndex < templateArgs.length) {                                                                        // 53
        return toDebugString(templateArgs[shiftedIndex]);                                                              // 54
      }                                                                                                                // 55
                                                                                                                       // 56
      return match;                                                                                                    // 57
    });                                                                                                                // 58
                                                                                                                       // 59
    message += '\nhttp://errors.angularjs.org/1.4.2/' +                                                                // 60
      (module ? module + '/' : '') + code;                                                                             // 61
                                                                                                                       // 62
    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {                       // 63
      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +                                                        // 64
        encodeURIComponent(toDebugString(templateArgs[i]));                                                            // 65
    }                                                                                                                  // 66
                                                                                                                       // 67
    return new ErrorConstructor(message);                                                                              // 68
  };                                                                                                                   // 69
}                                                                                                                      // 70
                                                                                                                       // 71
/* We need to tell jshint what variables are being exported */                                                         // 72
/* global angular: true,                                                                                               // 73
  msie: true,                                                                                                          // 74
  jqLite: true,                                                                                                        // 75
  jQuery: true,                                                                                                        // 76
  slice: true,                                                                                                         // 77
  splice: true,                                                                                                        // 78
  push: true,                                                                                                          // 79
  toString: true,                                                                                                      // 80
  ngMinErr: true,                                                                                                      // 81
  angularModule: true,                                                                                                 // 82
  uid: true,                                                                                                           // 83
  REGEX_STRING_REGEXP: true,                                                                                           // 84
  VALIDITY_STATE_PROPERTY: true,                                                                                       // 85
                                                                                                                       // 86
  lowercase: true,                                                                                                     // 87
  uppercase: true,                                                                                                     // 88
  manualLowercase: true,                                                                                               // 89
  manualUppercase: true,                                                                                               // 90
  nodeName_: true,                                                                                                     // 91
  isArrayLike: true,                                                                                                   // 92
  forEach: true,                                                                                                       // 93
  forEachSorted: true,                                                                                                 // 94
  reverseParams: true,                                                                                                 // 95
  nextUid: true,                                                                                                       // 96
  setHashKey: true,                                                                                                    // 97
  extend: true,                                                                                                        // 98
  toInt: true,                                                                                                         // 99
  inherit: true,                                                                                                       // 100
  merge: true,                                                                                                         // 101
  noop: true,                                                                                                          // 102
  identity: true,                                                                                                      // 103
  valueFn: true,                                                                                                       // 104
  isUndefined: true,                                                                                                   // 105
  isDefined: true,                                                                                                     // 106
  isObject: true,                                                                                                      // 107
  isBlankObject: true,                                                                                                 // 108
  isString: true,                                                                                                      // 109
  isNumber: true,                                                                                                      // 110
  isDate: true,                                                                                                        // 111
  isArray: true,                                                                                                       // 112
  isFunction: true,                                                                                                    // 113
  isRegExp: true,                                                                                                      // 114
  isWindow: true,                                                                                                      // 115
  isScope: true,                                                                                                       // 116
  isFile: true,                                                                                                        // 117
  isFormData: true,                                                                                                    // 118
  isBlob: true,                                                                                                        // 119
  isBoolean: true,                                                                                                     // 120
  isPromiseLike: true,                                                                                                 // 121
  trim: true,                                                                                                          // 122
  escapeForRegexp: true,                                                                                               // 123
  isElement: true,                                                                                                     // 124
  makeMap: true,                                                                                                       // 125
  includes: true,                                                                                                      // 126
  arrayRemove: true,                                                                                                   // 127
  copy: true,                                                                                                          // 128
  shallowCopy: true,                                                                                                   // 129
  equals: true,                                                                                                        // 130
  csp: true,                                                                                                           // 131
  jq: true,                                                                                                            // 132
  concat: true,                                                                                                        // 133
  sliceArgs: true,                                                                                                     // 134
  bind: true,                                                                                                          // 135
  toJsonReplacer: true,                                                                                                // 136
  toJson: true,                                                                                                        // 137
  fromJson: true,                                                                                                      // 138
  convertTimezoneToLocal: true,                                                                                        // 139
  timezoneToOffset: true,                                                                                              // 140
  startingTag: true,                                                                                                   // 141
  tryDecodeURIComponent: true,                                                                                         // 142
  parseKeyValue: true,                                                                                                 // 143
  toKeyValue: true,                                                                                                    // 144
  encodeUriSegment: true,                                                                                              // 145
  encodeUriQuery: true,                                                                                                // 146
  angularInit: true,                                                                                                   // 147
  bootstrap: true,                                                                                                     // 148
  getTestability: true,                                                                                                // 149
  snake_case: true,                                                                                                    // 150
  bindJQuery: true,                                                                                                    // 151
  assertArg: true,                                                                                                     // 152
  assertArgFn: true,                                                                                                   // 153
  assertNotHasOwnProperty: true,                                                                                       // 154
  getter: true,                                                                                                        // 155
  getBlockNodes: true,                                                                                                 // 156
  hasOwnProperty: true,                                                                                                // 157
  createMap: true,                                                                                                     // 158
                                                                                                                       // 159
  NODE_TYPE_ELEMENT: true,                                                                                             // 160
  NODE_TYPE_ATTRIBUTE: true,                                                                                           // 161
  NODE_TYPE_TEXT: true,                                                                                                // 162
  NODE_TYPE_COMMENT: true,                                                                                             // 163
  NODE_TYPE_DOCUMENT: true,                                                                                            // 164
  NODE_TYPE_DOCUMENT_FRAGMENT: true,                                                                                   // 165
*/                                                                                                                     // 166
                                                                                                                       // 167
////////////////////////////////////                                                                                   // 168
                                                                                                                       // 169
/**                                                                                                                    // 170
 * @ngdoc module                                                                                                       // 171
 * @name ng                                                                                                            // 172
 * @module ng                                                                                                          // 173
 * @description                                                                                                        // 174
 *                                                                                                                     // 175
 * # ng (core module)                                                                                                  // 176
 * The ng module is loaded by default when an AngularJS application is started. The module itself                      // 177
 * contains the essential components for an AngularJS application to function. The table below                         // 178
 * lists a high level breakdown of each of the services/factories, filters, directives and testing                     // 179
 * components available within this core module.                                                                       // 180
 *                                                                                                                     // 181
 * <div doc-module-components="ng"></div>                                                                              // 182
 */                                                                                                                    // 183
                                                                                                                       // 184
var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;                                                                        // 185
                                                                                                                       // 186
// The name of a form control's ValidityState property.                                                                // 187
// This is used so that it's possible for internal tests to create mock ValidityStates.                                // 188
var VALIDITY_STATE_PROPERTY = 'validity';                                                                              // 189
                                                                                                                       // 190
/**                                                                                                                    // 191
 * @ngdoc function                                                                                                     // 192
 * @name angular.lowercase                                                                                             // 193
 * @module ng                                                                                                          // 194
 * @kind function                                                                                                      // 195
 *                                                                                                                     // 196
 * @description Converts the specified string to lowercase.                                                            // 197
 * @param {string} string String to be converted to lowercase.                                                         // 198
 * @returns {string} Lowercased string.                                                                                // 199
 */                                                                                                                    // 200
var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};                           // 201
var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 202
                                                                                                                       // 203
/**                                                                                                                    // 204
 * @ngdoc function                                                                                                     // 205
 * @name angular.uppercase                                                                                             // 206
 * @module ng                                                                                                          // 207
 * @kind function                                                                                                      // 208
 *                                                                                                                     // 209
 * @description Converts the specified string to uppercase.                                                            // 210
 * @param {string} string String to be converted to uppercase.                                                         // 211
 * @returns {string} Uppercased string.                                                                                // 212
 */                                                                                                                    // 213
var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};                           // 214
                                                                                                                       // 215
                                                                                                                       // 216
var manualLowercase = function(s) {                                                                                    // 217
  /* jshint bitwise: false */                                                                                          // 218
  return isString(s)                                                                                                   // 219
      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})                         // 220
      : s;                                                                                                             // 221
};                                                                                                                     // 222
var manualUppercase = function(s) {                                                                                    // 223
  /* jshint bitwise: false */                                                                                          // 224
  return isString(s)                                                                                                   // 225
      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})                        // 226
      : s;                                                                                                             // 227
};                                                                                                                     // 228
                                                                                                                       // 229
                                                                                                                       // 230
// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish                    // 231
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods                        // 232
// with correct but slower alternatives.                                                                               // 233
if ('i' !== 'I'.toLowerCase()) {                                                                                       // 234
  lowercase = manualLowercase;                                                                                         // 235
  uppercase = manualUppercase;                                                                                         // 236
}                                                                                                                      // 237
                                                                                                                       // 238
                                                                                                                       // 239
var                                                                                                                    // 240
    msie,             // holds major version number for IE, or NaN if UA is not IE.                                    // 241
    jqLite,           // delay binding since jQuery could be loaded after us.                                          // 242
    jQuery,           // delay binding                                                                                 // 243
    slice             = [].slice,                                                                                      // 244
    splice            = [].splice,                                                                                     // 245
    push              = [].push,                                                                                       // 246
    toString          = Object.prototype.toString,                                                                     // 247
    getPrototypeOf    = Object.getPrototypeOf,                                                                         // 248
    ngMinErr          = minErr('ng'),                                                                                  // 249
                                                                                                                       // 250
    /** @name angular */                                                                                               // 251
    angular           = window.angular || (window.angular = {}),                                                       // 252
    angularModule,                                                                                                     // 253
    uid               = 0;                                                                                             // 254
                                                                                                                       // 255
/**                                                                                                                    // 256
 * documentMode is an IE-only property                                                                                 // 257
 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx                                                   // 258
 */                                                                                                                    // 259
msie = document.documentMode;                                                                                          // 260
                                                                                                                       // 261
                                                                                                                       // 262
/**                                                                                                                    // 263
 * @private                                                                                                            // 264
 * @param {*} obj                                                                                                      // 265
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,                      // 266
 *                   String ...)                                                                                       // 267
 */                                                                                                                    // 268
function isArrayLike(obj) {                                                                                            // 269
  if (obj == null || isWindow(obj)) {                                                                                  // 270
    return false;                                                                                                      // 271
  }                                                                                                                    // 272
                                                                                                                       // 273
  // Support: iOS 8.2 (not reproducible in simulator)                                                                  // 274
  // "length" in obj used to prevent JIT error (gh-11508)                                                              // 275
  var length = "length" in Object(obj) && obj.length;                                                                  // 276
                                                                                                                       // 277
  if (obj.nodeType === NODE_TYPE_ELEMENT && length) {                                                                  // 278
    return true;                                                                                                       // 279
  }                                                                                                                    // 280
                                                                                                                       // 281
  return isString(obj) || isArray(obj) || length === 0 ||                                                              // 282
         typeof length === 'number' && length > 0 && (length - 1) in obj;                                              // 283
}                                                                                                                      // 284
                                                                                                                       // 285
/**                                                                                                                    // 286
 * @ngdoc function                                                                                                     // 287
 * @name angular.forEach                                                                                               // 288
 * @module ng                                                                                                          // 289
 * @kind function                                                                                                      // 290
 *                                                                                                                     // 291
 * @description                                                                                                        // 292
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an                      // 293
 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`              // 294
 * is the value of an object property or an array element, `key` is the object property key or                         // 295
 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.               // 296
 *                                                                                                                     // 297
 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters                    // 298
 * using the `hasOwnProperty` method.                                                                                  // 299
 *                                                                                                                     // 300
 * Unlike ES262's                                                                                                      // 301
 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),                           // 302
 * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just                        // 303
 * return the value provided.                                                                                          // 304
 *                                                                                                                     // 305
   ```js                                                                                                               // 306
     var values = {name: 'misko', gender: 'male'};                                                                     // 307
     var log = [];                                                                                                     // 308
     angular.forEach(values, function(value, key) {                                                                    // 309
       this.push(key + ': ' + value);                                                                                  // 310
     }, log);                                                                                                          // 311
     expect(log).toEqual(['name: misko', 'gender: male']);                                                             // 312
   ```                                                                                                                 // 313
 *                                                                                                                     // 314
 * @param {Object|Array} obj Object to iterate over.                                                                   // 315
 * @param {Function} iterator Iterator function.                                                                       // 316
 * @param {Object=} context Object to become context (`this`) for the iterator function.                               // 317
 * @returns {Object|Array} Reference to `obj`.                                                                         // 318
 */                                                                                                                    // 319
                                                                                                                       // 320
function forEach(obj, iterator, context) {                                                                             // 321
  var key, length;                                                                                                     // 322
  if (obj) {                                                                                                           // 323
    if (isFunction(obj)) {                                                                                             // 324
      for (key in obj) {                                                                                               // 325
        // Need to check if hasOwnProperty exists,                                                                     // 326
        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function                     // 327
        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
          iterator.call(context, obj[key], key, obj);                                                                  // 329
        }                                                                                                              // 330
      }                                                                                                                // 331
    } else if (isArray(obj) || isArrayLike(obj)) {                                                                     // 332
      var isPrimitive = typeof obj !== 'object';                                                                       // 333
      for (key = 0, length = obj.length; key < length; key++) {                                                        // 334
        if (isPrimitive || key in obj) {                                                                               // 335
          iterator.call(context, obj[key], key, obj);                                                                  // 336
        }                                                                                                              // 337
      }                                                                                                                // 338
    } else if (obj.forEach && obj.forEach !== forEach) {                                                               // 339
        obj.forEach(iterator, context, obj);                                                                           // 340
    } else if (isBlankObject(obj)) {                                                                                   // 341
      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty                 // 342
      for (key in obj) {                                                                                               // 343
        iterator.call(context, obj[key], key, obj);                                                                    // 344
      }                                                                                                                // 345
    } else if (typeof obj.hasOwnProperty === 'function') {                                                             // 346
      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed                                // 347
      for (key in obj) {                                                                                               // 348
        if (obj.hasOwnProperty(key)) {                                                                                 // 349
          iterator.call(context, obj[key], key, obj);                                                                  // 350
        }                                                                                                              // 351
      }                                                                                                                // 352
    } else {                                                                                                           // 353
      // Slow path for objects which do not have a method `hasOwnProperty`                                             // 354
      for (key in obj) {                                                                                               // 355
        if (hasOwnProperty.call(obj, key)) {                                                                           // 356
          iterator.call(context, obj[key], key, obj);                                                                  // 357
        }                                                                                                              // 358
      }                                                                                                                // 359
    }                                                                                                                  // 360
  }                                                                                                                    // 361
  return obj;                                                                                                          // 362
}                                                                                                                      // 363
                                                                                                                       // 364
function forEachSorted(obj, iterator, context) {                                                                       // 365
  var keys = Object.keys(obj).sort();                                                                                  // 366
  for (var i = 0; i < keys.length; i++) {                                                                              // 367
    iterator.call(context, obj[keys[i]], keys[i]);                                                                     // 368
  }                                                                                                                    // 369
  return keys;                                                                                                         // 370
}                                                                                                                      // 371
                                                                                                                       // 372
                                                                                                                       // 373
/**                                                                                                                    // 374
 * when using forEach the params are value, key, but it is often useful to have key, value.                            // 375
 * @param {function(string, *)} iteratorFn                                                                             // 376
 * @returns {function(*, string)}                                                                                      // 377
 */                                                                                                                    // 378
function reverseParams(iteratorFn) {                                                                                   // 379
  return function(value, key) { iteratorFn(key, value); };                                                             // 380
}                                                                                                                      // 381
                                                                                                                       // 382
/**                                                                                                                    // 383
 * A consistent way of creating unique IDs in angular.                                                                 // 384
 *                                                                                                                     // 385
 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before                   // 386
 * we hit number precision issues in JavaScript.                                                                       // 387
 *                                                                                                                     // 388
 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M                                                                    // 389
 *                                                                                                                     // 390
 * @returns {number} an unique alpha-numeric string                                                                    // 391
 */                                                                                                                    // 392
function nextUid() {                                                                                                   // 393
  return ++uid;                                                                                                        // 394
}                                                                                                                      // 395
                                                                                                                       // 396
                                                                                                                       // 397
/**                                                                                                                    // 398
 * Set or clear the hashkey for an object.                                                                             // 399
 * @param obj object                                                                                                   // 400
 * @param h the hashkey (!truthy to delete the hashkey)                                                                // 401
 */                                                                                                                    // 402
function setHashKey(obj, h) {                                                                                          // 403
  if (h) {                                                                                                             // 404
    obj.$$hashKey = h;                                                                                                 // 405
  } else {                                                                                                             // 406
    delete obj.$$hashKey;                                                                                              // 407
  }                                                                                                                    // 408
}                                                                                                                      // 409
                                                                                                                       // 410
                                                                                                                       // 411
function baseExtend(dst, objs, deep) {                                                                                 // 412
  var h = dst.$$hashKey;                                                                                               // 413
                                                                                                                       // 414
  for (var i = 0, ii = objs.length; i < ii; ++i) {                                                                     // 415
    var obj = objs[i];                                                                                                 // 416
    if (!isObject(obj) && !isFunction(obj)) continue;                                                                  // 417
    var keys = Object.keys(obj);                                                                                       // 418
    for (var j = 0, jj = keys.length; j < jj; j++) {                                                                   // 419
      var key = keys[j];                                                                                               // 420
      var src = obj[key];                                                                                              // 421
                                                                                                                       // 422
      if (deep && isObject(src)) {                                                                                     // 423
        if (isDate(src)) {                                                                                             // 424
          dst[key] = new Date(src.valueOf());                                                                          // 425
        } else {                                                                                                       // 426
          if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};                                                  // 427
          baseExtend(dst[key], [src], true);                                                                           // 428
        }                                                                                                              // 429
      } else {                                                                                                         // 430
        dst[key] = src;                                                                                                // 431
      }                                                                                                                // 432
    }                                                                                                                  // 433
  }                                                                                                                    // 434
                                                                                                                       // 435
  setHashKey(dst, h);                                                                                                  // 436
  return dst;                                                                                                          // 437
}                                                                                                                      // 438
                                                                                                                       // 439
/**                                                                                                                    // 440
 * @ngdoc function                                                                                                     // 441
 * @name angular.extend                                                                                                // 442
 * @module ng                                                                                                          // 443
 * @kind function                                                                                                      // 444
 *                                                                                                                     // 445
 * @description                                                                                                        // 446
 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)                  // 447
 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so           // 448
 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.                      // 449
 *                                                                                                                     // 450
 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use                      // 451
 * {@link angular.merge} for this.                                                                                     // 452
 *                                                                                                                     // 453
 * @param {Object} dst Destination object.                                                                             // 454
 * @param {...Object} src Source object(s).                                                                            // 455
 * @returns {Object} Reference to `dst`.                                                                               // 456
 */                                                                                                                    // 457
function extend(dst) {                                                                                                 // 458
  return baseExtend(dst, slice.call(arguments, 1), false);                                                             // 459
}                                                                                                                      // 460
                                                                                                                       // 461
                                                                                                                       // 462
/**                                                                                                                    // 463
* @ngdoc function                                                                                                      // 464
* @name angular.merge                                                                                                  // 465
* @module ng                                                                                                           // 466
* @kind function                                                                                                       // 467
*                                                                                                                      // 468
* @description                                                                                                         // 469
* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)            // 470
* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so            // 471
* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.                        // 472
*                                                                                                                      // 473
* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source              // 474
* objects, performing a deep copy.                                                                                     // 475
*                                                                                                                      // 476
* @param {Object} dst Destination object.                                                                              // 477
* @param {...Object} src Source object(s).                                                                             // 478
* @returns {Object} Reference to `dst`.                                                                                // 479
*/                                                                                                                     // 480
function merge(dst) {                                                                                                  // 481
  return baseExtend(dst, slice.call(arguments, 1), true);                                                              // 482
}                                                                                                                      // 483
                                                                                                                       // 484
                                                                                                                       // 485
                                                                                                                       // 486
function toInt(str) {                                                                                                  // 487
  return parseInt(str, 10);                                                                                            // 488
}                                                                                                                      // 489
                                                                                                                       // 490
                                                                                                                       // 491
function inherit(parent, extra) {                                                                                      // 492
  return extend(Object.create(parent), extra);                                                                         // 493
}                                                                                                                      // 494
                                                                                                                       // 495
/**                                                                                                                    // 496
 * @ngdoc function                                                                                                     // 497
 * @name angular.noop                                                                                                  // 498
 * @module ng                                                                                                          // 499
 * @kind function                                                                                                      // 500
 *                                                                                                                     // 501
 * @description                                                                                                        // 502
 * A function that performs no operations. This function can be useful when writing code in the                        // 503
 * functional style.                                                                                                   // 504
   ```js                                                                                                               // 505
     function foo(callback) {                                                                                          // 506
       var result = calculateResult();                                                                                 // 507
       (callback || angular.noop)(result);                                                                             // 508
     }                                                                                                                 // 509
   ```                                                                                                                 // 510
 */                                                                                                                    // 511
function noop() {}                                                                                                     // 512
noop.$inject = [];                                                                                                     // 513
                                                                                                                       // 514
                                                                                                                       // 515
/**                                                                                                                    // 516
 * @ngdoc function                                                                                                     // 517
 * @name angular.identity                                                                                              // 518
 * @module ng                                                                                                          // 519
 * @kind function                                                                                                      // 520
 *                                                                                                                     // 521
 * @description                                                                                                        // 522
 * A function that returns its first argument. This function is useful when writing code in the                        // 523
 * functional style.                                                                                                   // 524
 *                                                                                                                     // 525
   ```js                                                                                                               // 526
     function transformer(transformationFn, value) {                                                                   // 527
       return (transformationFn || angular.identity)(value);                                                           // 528
     };                                                                                                                // 529
   ```                                                                                                                 // 530
  * @param {*} value to be returned.                                                                                   // 531
  * @returns {*} the value passed in.                                                                                  // 532
 */                                                                                                                    // 533
function identity($) {return $;}                                                                                       // 534
identity.$inject = [];                                                                                                 // 535
                                                                                                                       // 536
                                                                                                                       // 537
function valueFn(value) {return function() {return value;};}                                                           // 538
                                                                                                                       // 539
function hasCustomToString(obj) {                                                                                      // 540
  return isFunction(obj.toString) && obj.toString !== Object.prototype.toString;                                       // 541
}                                                                                                                      // 542
                                                                                                                       // 543
                                                                                                                       // 544
/**                                                                                                                    // 545
 * @ngdoc function                                                                                                     // 546
 * @name angular.isUndefined                                                                                           // 547
 * @module ng                                                                                                          // 548
 * @kind function                                                                                                      // 549
 *                                                                                                                     // 550
 * @description                                                                                                        // 551
 * Determines if a reference is undefined.                                                                             // 552
 *                                                                                                                     // 553
 * @param {*} value Reference to check.                                                                                // 554
 * @returns {boolean} True if `value` is undefined.                                                                    // 555
 */                                                                                                                    // 556
function isUndefined(value) {return typeof value === 'undefined';}                                                     // 557
                                                                                                                       // 558
                                                                                                                       // 559
/**                                                                                                                    // 560
 * @ngdoc function                                                                                                     // 561
 * @name angular.isDefined                                                                                             // 562
 * @module ng                                                                                                          // 563
 * @kind function                                                                                                      // 564
 *                                                                                                                     // 565
 * @description                                                                                                        // 566
 * Determines if a reference is defined.                                                                               // 567
 *                                                                                                                     // 568
 * @param {*} value Reference to check.                                                                                // 569
 * @returns {boolean} True if `value` is defined.                                                                      // 570
 */                                                                                                                    // 571
function isDefined(value) {return typeof value !== 'undefined';}                                                       // 572
                                                                                                                       // 573
                                                                                                                       // 574
/**                                                                                                                    // 575
 * @ngdoc function                                                                                                     // 576
 * @name angular.isObject                                                                                              // 577
 * @module ng                                                                                                          // 578
 * @kind function                                                                                                      // 579
 *                                                                                                                     // 580
 * @description                                                                                                        // 581
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not                            // 582
 * considered to be objects. Note that JavaScript arrays are objects.                                                  // 583
 *                                                                                                                     // 584
 * @param {*} value Reference to check.                                                                                // 585
 * @returns {boolean} True if `value` is an `Object` but not `null`.                                                   // 586
 */                                                                                                                    // 587
function isObject(value) {                                                                                             // 588
  // http://jsperf.com/isobject4                                                                                       // 589
  return value !== null && typeof value === 'object';                                                                  // 590
}                                                                                                                      // 591
                                                                                                                       // 592
                                                                                                                       // 593
/**                                                                                                                    // 594
 * Determine if a value is an object with a null prototype                                                             // 595
 *                                                                                                                     // 596
 * @returns {boolean} True if `value` is an `Object` with a null prototype                                             // 597
 */                                                                                                                    // 598
function isBlankObject(value) {                                                                                        // 599
  return value !== null && typeof value === 'object' && !getPrototypeOf(value);                                        // 600
}                                                                                                                      // 601
                                                                                                                       // 602
                                                                                                                       // 603
/**                                                                                                                    // 604
 * @ngdoc function                                                                                                     // 605
 * @name angular.isString                                                                                              // 606
 * @module ng                                                                                                          // 607
 * @kind function                                                                                                      // 608
 *                                                                                                                     // 609
 * @description                                                                                                        // 610
 * Determines if a reference is a `String`.                                                                            // 611
 *                                                                                                                     // 612
 * @param {*} value Reference to check.                                                                                // 613
 * @returns {boolean} True if `value` is a `String`.                                                                   // 614
 */                                                                                                                    // 615
function isString(value) {return typeof value === 'string';}                                                           // 616
                                                                                                                       // 617
                                                                                                                       // 618
/**                                                                                                                    // 619
 * @ngdoc function                                                                                                     // 620
 * @name angular.isNumber                                                                                              // 621
 * @module ng                                                                                                          // 622
 * @kind function                                                                                                      // 623
 *                                                                                                                     // 624
 * @description                                                                                                        // 625
 * Determines if a reference is a `Number`.                                                                            // 626
 *                                                                                                                     // 627
 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.                                             // 628
 *                                                                                                                     // 629
 * If you wish to exclude these then you can use the native                                                            // 630
 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)             // 631
 * method.                                                                                                             // 632
 *                                                                                                                     // 633
 * @param {*} value Reference to check.                                                                                // 634
 * @returns {boolean} True if `value` is a `Number`.                                                                   // 635
 */                                                                                                                    // 636
function isNumber(value) {return typeof value === 'number';}                                                           // 637
                                                                                                                       // 638
                                                                                                                       // 639
/**                                                                                                                    // 640
 * @ngdoc function                                                                                                     // 641
 * @name angular.isDate                                                                                                // 642
 * @module ng                                                                                                          // 643
 * @kind function                                                                                                      // 644
 *                                                                                                                     // 645
 * @description                                                                                                        // 646
 * Determines if a value is a date.                                                                                    // 647
 *                                                                                                                     // 648
 * @param {*} value Reference to check.                                                                                // 649
 * @returns {boolean} True if `value` is a `Date`.                                                                     // 650
 */                                                                                                                    // 651
function isDate(value) {                                                                                               // 652
  return toString.call(value) === '[object Date]';                                                                     // 653
}                                                                                                                      // 654
                                                                                                                       // 655
                                                                                                                       // 656
/**                                                                                                                    // 657
 * @ngdoc function                                                                                                     // 658
 * @name angular.isArray                                                                                               // 659
 * @module ng                                                                                                          // 660
 * @kind function                                                                                                      // 661
 *                                                                                                                     // 662
 * @description                                                                                                        // 663
 * Determines if a reference is an `Array`.                                                                            // 664
 *                                                                                                                     // 665
 * @param {*} value Reference to check.                                                                                // 666
 * @returns {boolean} True if `value` is an `Array`.                                                                   // 667
 */                                                                                                                    // 668
var isArray = Array.isArray;                                                                                           // 669
                                                                                                                       // 670
/**                                                                                                                    // 671
 * @ngdoc function                                                                                                     // 672
 * @name angular.isFunction                                                                                            // 673
 * @module ng                                                                                                          // 674
 * @kind function                                                                                                      // 675
 *                                                                                                                     // 676
 * @description                                                                                                        // 677
 * Determines if a reference is a `Function`.                                                                          // 678
 *                                                                                                                     // 679
 * @param {*} value Reference to check.                                                                                // 680
 * @returns {boolean} True if `value` is a `Function`.                                                                 // 681
 */                                                                                                                    // 682
function isFunction(value) {return typeof value === 'function';}                                                       // 683
                                                                                                                       // 684
                                                                                                                       // 685
/**                                                                                                                    // 686
 * Determines if a value is a regular expression object.                                                               // 687
 *                                                                                                                     // 688
 * @private                                                                                                            // 689
 * @param {*} value Reference to check.                                                                                // 690
 * @returns {boolean} True if `value` is a `RegExp`.                                                                   // 691
 */                                                                                                                    // 692
function isRegExp(value) {                                                                                             // 693
  return toString.call(value) === '[object RegExp]';                                                                   // 694
}                                                                                                                      // 695
                                                                                                                       // 696
                                                                                                                       // 697
/**                                                                                                                    // 698
 * Checks if `obj` is a window object.                                                                                 // 699
 *                                                                                                                     // 700
 * @private                                                                                                            // 701
 * @param {*} obj Object to check                                                                                      // 702
 * @returns {boolean} True if `obj` is a window obj.                                                                   // 703
 */                                                                                                                    // 704
function isWindow(obj) {                                                                                               // 705
  return obj && obj.window === obj;                                                                                    // 706
}                                                                                                                      // 707
                                                                                                                       // 708
                                                                                                                       // 709
function isScope(obj) {                                                                                                // 710
  return obj && obj.$evalAsync && obj.$watch;                                                                          // 711
}                                                                                                                      // 712
                                                                                                                       // 713
                                                                                                                       // 714
function isFile(obj) {                                                                                                 // 715
  return toString.call(obj) === '[object File]';                                                                       // 716
}                                                                                                                      // 717
                                                                                                                       // 718
                                                                                                                       // 719
function isFormData(obj) {                                                                                             // 720
  return toString.call(obj) === '[object FormData]';                                                                   // 721
}                                                                                                                      // 722
                                                                                                                       // 723
                                                                                                                       // 724
function isBlob(obj) {                                                                                                 // 725
  return toString.call(obj) === '[object Blob]';                                                                       // 726
}                                                                                                                      // 727
                                                                                                                       // 728
                                                                                                                       // 729
function isBoolean(value) {                                                                                            // 730
  return typeof value === 'boolean';                                                                                   // 731
}                                                                                                                      // 732
                                                                                                                       // 733
                                                                                                                       // 734
function isPromiseLike(obj) {                                                                                          // 735
  return obj && isFunction(obj.then);                                                                                  // 736
}                                                                                                                      // 737
                                                                                                                       // 738
                                                                                                                       // 739
var TYPED_ARRAY_REGEXP = /^\[object (Uint8(Clamped)?)|(Uint16)|(Uint32)|(Int8)|(Int16)|(Int32)|(Float(32)|(64))Array\]$/;
function isTypedArray(value) {                                                                                         // 741
  return TYPED_ARRAY_REGEXP.test(toString.call(value));                                                                // 742
}                                                                                                                      // 743
                                                                                                                       // 744
                                                                                                                       // 745
var trim = function(value) {                                                                                           // 746
  return isString(value) ? value.trim() : value;                                                                       // 747
};                                                                                                                     // 748
                                                                                                                       // 749
// Copied from:                                                                                                        // 750
// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021             // 751
// Prereq: s is a string.                                                                                              // 752
var escapeForRegexp = function(s) {                                                                                    // 753
  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').                                                           // 754
           replace(/\x08/g, '\\x08');                                                                                  // 755
};                                                                                                                     // 756
                                                                                                                       // 757
                                                                                                                       // 758
/**                                                                                                                    // 759
 * @ngdoc function                                                                                                     // 760
 * @name angular.isElement                                                                                             // 761
 * @module ng                                                                                                          // 762
 * @kind function                                                                                                      // 763
 *                                                                                                                     // 764
 * @description                                                                                                        // 765
 * Determines if a reference is a DOM element (or wrapped jQuery element).                                             // 766
 *                                                                                                                     // 767
 * @param {*} value Reference to check.                                                                                // 768
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).                                    // 769
 */                                                                                                                    // 770
function isElement(node) {                                                                                             // 771
  return !!(node &&                                                                                                    // 772
    (node.nodeName  // we are a direct element                                                                         // 773
    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API                   // 774
}                                                                                                                      // 775
                                                                                                                       // 776
/**                                                                                                                    // 777
 * @param str 'key1,key2,...'                                                                                          // 778
 * @returns {object} in the form of {key1:true, key2:true, ...}                                                        // 779
 */                                                                                                                    // 780
function makeMap(str) {                                                                                                // 781
  var obj = {}, items = str.split(","), i;                                                                             // 782
  for (i = 0; i < items.length; i++) {                                                                                 // 783
    obj[items[i]] = true;                                                                                              // 784
  }                                                                                                                    // 785
  return obj;                                                                                                          // 786
}                                                                                                                      // 787
                                                                                                                       // 788
                                                                                                                       // 789
function nodeName_(element) {                                                                                          // 790
  return lowercase(element.nodeName || (element[0] && element[0].nodeName));                                           // 791
}                                                                                                                      // 792
                                                                                                                       // 793
function includes(array, obj) {                                                                                        // 794
  return Array.prototype.indexOf.call(array, obj) != -1;                                                               // 795
}                                                                                                                      // 796
                                                                                                                       // 797
function arrayRemove(array, value) {                                                                                   // 798
  var index = array.indexOf(value);                                                                                    // 799
  if (index >= 0) {                                                                                                    // 800
    array.splice(index, 1);                                                                                            // 801
  }                                                                                                                    // 802
  return index;                                                                                                        // 803
}                                                                                                                      // 804
                                                                                                                       // 805
/**                                                                                                                    // 806
 * @ngdoc function                                                                                                     // 807
 * @name angular.copy                                                                                                  // 808
 * @module ng                                                                                                          // 809
 * @kind function                                                                                                      // 810
 *                                                                                                                     // 811
 * @description                                                                                                        // 812
 * Creates a deep copy of `source`, which should be an object or an array.                                             // 813
 *                                                                                                                     // 814
 * * If no destination is supplied, a copy of the object or array is created.                                          // 815
 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)                        // 816
 *   are deleted and then all elements/properties from the source are copied to it.                                    // 817
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.                        // 818
 * * If `source` is identical to 'destination' an exception will be thrown.                                            // 819
 *                                                                                                                     // 820
 * @param {*} source The source that will be used to make a copy.                                                      // 821
 *                   Can be any type, including primitives, `null`, and `undefined`.                                   // 822
 * @param {(Object|Array)=} destination Destination into which the source is copied. If                                // 823
 *     provided, must be of the same type as `source`.                                                                 // 824
 * @returns {*} The copy or updated `destination`, if `destination` was specified.                                     // 825
 *                                                                                                                     // 826
 * @example                                                                                                            // 827
 <example module="copyExample">                                                                                        // 828
 <file name="index.html">                                                                                              // 829
 <div ng-controller="ExampleController">                                                                               // 830
 <form novalidate class="simple-form">                                                                                 // 831
 Name: <input type="text" ng-model="user.name" /><br />                                                                // 832
 E-mail: <input type="email" ng-model="user.email" /><br />                                                            // 833
 Gender: <input type="radio" ng-model="user.gender" value="male" />male                                                // 834
 <input type="radio" ng-model="user.gender" value="female" />female<br />                                              // 835
 <button ng-click="reset()">RESET</button>                                                                             // 836
 <button ng-click="update(user)">SAVE</button>                                                                         // 837
 </form>                                                                                                               // 838
 <pre>form = {{user | json}}</pre>                                                                                     // 839
 <pre>master = {{master | json}}</pre>                                                                                 // 840
 </div>                                                                                                                // 841
                                                                                                                       // 842
 <script>                                                                                                              // 843
  angular.module('copyExample', [])                                                                                    // 844
    .controller('ExampleController', ['$scope', function($scope) {                                                     // 845
      $scope.master= {};                                                                                               // 846
                                                                                                                       // 847
      $scope.update = function(user) {                                                                                 // 848
        // Example with 1 argument                                                                                     // 849
        $scope.master= angular.copy(user);                                                                             // 850
      };                                                                                                               // 851
                                                                                                                       // 852
      $scope.reset = function() {                                                                                      // 853
        // Example with 2 arguments                                                                                    // 854
        angular.copy($scope.master, $scope.user);                                                                      // 855
      };                                                                                                               // 856
                                                                                                                       // 857
      $scope.reset();                                                                                                  // 858
    }]);                                                                                                               // 859
 </script>                                                                                                             // 860
 </file>                                                                                                               // 861
 </example>                                                                                                            // 862
 */                                                                                                                    // 863
function copy(source, destination, stackSource, stackDest) {                                                           // 864
  if (isWindow(source) || isScope(source)) {                                                                           // 865
    throw ngMinErr('cpws',                                                                                             // 866
      "Can't copy! Making copies of Window or Scope instances is not supported.");                                     // 867
  }                                                                                                                    // 868
  if (isTypedArray(destination)) {                                                                                     // 869
    throw ngMinErr('cpta',                                                                                             // 870
      "Can't copy! TypedArray destination cannot be mutated.");                                                        // 871
  }                                                                                                                    // 872
                                                                                                                       // 873
  if (!destination) {                                                                                                  // 874
    destination = source;                                                                                              // 875
    if (isObject(source)) {                                                                                            // 876
      var index;                                                                                                       // 877
      if (stackSource && (index = stackSource.indexOf(source)) !== -1) {                                               // 878
        return stackDest[index];                                                                                       // 879
      }                                                                                                                // 880
                                                                                                                       // 881
      // TypedArray, Date and RegExp have specific copy functionality and must be                                      // 882
      // pushed onto the stack before returning.                                                                       // 883
      // Array and other objects create the base object and recurse to copy child                                      // 884
      // objects. The array/object will be pushed onto the stack when recursed.                                        // 885
      if (isArray(source)) {                                                                                           // 886
        return copy(source, [], stackSource, stackDest);                                                               // 887
      } else if (isTypedArray(source)) {                                                                               // 888
        destination = new source.constructor(source);                                                                  // 889
      } else if (isDate(source)) {                                                                                     // 890
        destination = new Date(source.getTime());                                                                      // 891
      } else if (isRegExp(source)) {                                                                                   // 892
        destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);                                // 893
        destination.lastIndex = source.lastIndex;                                                                      // 894
      } else {                                                                                                         // 895
        var emptyObject = Object.create(getPrototypeOf(source));                                                       // 896
        return copy(source, emptyObject, stackSource, stackDest);                                                      // 897
      }                                                                                                                // 898
                                                                                                                       // 899
      if (stackDest) {                                                                                                 // 900
        stackSource.push(source);                                                                                      // 901
        stackDest.push(destination);                                                                                   // 902
      }                                                                                                                // 903
    }                                                                                                                  // 904
  } else {                                                                                                             // 905
    if (source === destination) throw ngMinErr('cpi',                                                                  // 906
      "Can't copy! Source and destination are identical.");                                                            // 907
                                                                                                                       // 908
    stackSource = stackSource || [];                                                                                   // 909
    stackDest = stackDest || [];                                                                                       // 910
                                                                                                                       // 911
    if (isObject(source)) {                                                                                            // 912
      stackSource.push(source);                                                                                        // 913
      stackDest.push(destination);                                                                                     // 914
    }                                                                                                                  // 915
                                                                                                                       // 916
    var result, key;                                                                                                   // 917
    if (isArray(source)) {                                                                                             // 918
      destination.length = 0;                                                                                          // 919
      for (var i = 0; i < source.length; i++) {                                                                        // 920
        destination.push(copy(source[i], null, stackSource, stackDest));                                               // 921
      }                                                                                                                // 922
    } else {                                                                                                           // 923
      var h = destination.$$hashKey;                                                                                   // 924
      if (isArray(destination)) {                                                                                      // 925
        destination.length = 0;                                                                                        // 926
      } else {                                                                                                         // 927
        forEach(destination, function(value, key) {                                                                    // 928
          delete destination[key];                                                                                     // 929
        });                                                                                                            // 930
      }                                                                                                                // 931
      if (isBlankObject(source)) {                                                                                     // 932
        // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty               // 933
        for (key in source) {                                                                                          // 934
          destination[key] = copy(source[key], null, stackSource, stackDest);                                          // 935
        }                                                                                                              // 936
      } else if (source && typeof source.hasOwnProperty === 'function') {                                              // 937
        // Slow path, which must rely on hasOwnProperty                                                                // 938
        for (key in source) {                                                                                          // 939
          if (source.hasOwnProperty(key)) {                                                                            // 940
            destination[key] = copy(source[key], null, stackSource, stackDest);                                        // 941
          }                                                                                                            // 942
        }                                                                                                              // 943
      } else {                                                                                                         // 944
        // Slowest path --- hasOwnProperty can't be called as a method                                                 // 945
        for (key in source) {                                                                                          // 946
          if (hasOwnProperty.call(source, key)) {                                                                      // 947
            destination[key] = copy(source[key], null, stackSource, stackDest);                                        // 948
          }                                                                                                            // 949
        }                                                                                                              // 950
      }                                                                                                                // 951
      setHashKey(destination,h);                                                                                       // 952
    }                                                                                                                  // 953
  }                                                                                                                    // 954
  return destination;                                                                                                  // 955
}                                                                                                                      // 956
                                                                                                                       // 957
/**                                                                                                                    // 958
 * Creates a shallow copy of an object, an array or a primitive.                                                       // 959
 *                                                                                                                     // 960
 * Assumes that there are no proto properties for objects.                                                             // 961
 */                                                                                                                    // 962
function shallowCopy(src, dst) {                                                                                       // 963
  if (isArray(src)) {                                                                                                  // 964
    dst = dst || [];                                                                                                   // 965
                                                                                                                       // 966
    for (var i = 0, ii = src.length; i < ii; i++) {                                                                    // 967
      dst[i] = src[i];                                                                                                 // 968
    }                                                                                                                  // 969
  } else if (isObject(src)) {                                                                                          // 970
    dst = dst || {};                                                                                                   // 971
                                                                                                                       // 972
    for (var key in src) {                                                                                             // 973
      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {                                                         // 974
        dst[key] = src[key];                                                                                           // 975
      }                                                                                                                // 976
    }                                                                                                                  // 977
  }                                                                                                                    // 978
                                                                                                                       // 979
  return dst || src;                                                                                                   // 980
}                                                                                                                      // 981
                                                                                                                       // 982
                                                                                                                       // 983
/**                                                                                                                    // 984
 * @ngdoc function                                                                                                     // 985
 * @name angular.equals                                                                                                // 986
 * @module ng                                                                                                          // 987
 * @kind function                                                                                                      // 988
 *                                                                                                                     // 989
 * @description                                                                                                        // 990
 * Determines if two objects or two values are equivalent. Supports value types, regular                               // 991
 * expressions, arrays and objects.                                                                                    // 992
 *                                                                                                                     // 993
 * Two objects or values are considered equivalent if at least one of the following is true:                           // 994
 *                                                                                                                     // 995
 * * Both objects or values pass `===` comparison.                                                                     // 996
 * * Both objects or values are of the same type and all of their properties are equal by                              // 997
 *   comparing them with `angular.equals`.                                                                             // 998
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)                       // 999
 * * Both values represent the same regular expression (In JavaScript,                                                 // 1000
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual                      // 1001
 *   representation matches).                                                                                          // 1002
 *                                                                                                                     // 1003
 * During a property comparison, properties of `function` type and properties with names                               // 1004
 * that begin with `$` are ignored.                                                                                    // 1005
 *                                                                                                                     // 1006
 * Scope and DOMWindow objects are being compared only by identify (`===`).                                            // 1007
 *                                                                                                                     // 1008
 * @param {*} o1 Object or value to compare.                                                                           // 1009
 * @param {*} o2 Object or value to compare.                                                                           // 1010
 * @returns {boolean} True if arguments are equal.                                                                     // 1011
 */                                                                                                                    // 1012
function equals(o1, o2) {                                                                                              // 1013
  if (o1 === o2) return true;                                                                                          // 1014
  if (o1 === null || o2 === null) return false;                                                                        // 1015
  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN                                                              // 1016
  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;                                                             // 1017
  if (t1 == t2) {                                                                                                      // 1018
    if (t1 == 'object') {                                                                                              // 1019
      if (isArray(o1)) {                                                                                               // 1020
        if (!isArray(o2)) return false;                                                                                // 1021
        if ((length = o1.length) == o2.length) {                                                                       // 1022
          for (key = 0; key < length; key++) {                                                                         // 1023
            if (!equals(o1[key], o2[key])) return false;                                                               // 1024
          }                                                                                                            // 1025
          return true;                                                                                                 // 1026
        }                                                                                                              // 1027
      } else if (isDate(o1)) {                                                                                         // 1028
        if (!isDate(o2)) return false;                                                                                 // 1029
        return equals(o1.getTime(), o2.getTime());                                                                     // 1030
      } else if (isRegExp(o1)) {                                                                                       // 1031
        return isRegExp(o2) ? o1.toString() == o2.toString() : false;                                                  // 1032
      } else {                                                                                                         // 1033
        if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||                                              // 1034
          isArray(o2) || isDate(o2) || isRegExp(o2)) return false;                                                     // 1035
        keySet = createMap();                                                                                          // 1036
        for (key in o1) {                                                                                              // 1037
          if (key.charAt(0) === '$' || isFunction(o1[key])) continue;                                                  // 1038
          if (!equals(o1[key], o2[key])) return false;                                                                 // 1039
          keySet[key] = true;                                                                                          // 1040
        }                                                                                                              // 1041
        for (key in o2) {                                                                                              // 1042
          if (!(key in keySet) &&                                                                                      // 1043
              key.charAt(0) !== '$' &&                                                                                 // 1044
              o2[key] !== undefined &&                                                                                 // 1045
              !isFunction(o2[key])) return false;                                                                      // 1046
        }                                                                                                              // 1047
        return true;                                                                                                   // 1048
      }                                                                                                                // 1049
    }                                                                                                                  // 1050
  }                                                                                                                    // 1051
  return false;                                                                                                        // 1052
}                                                                                                                      // 1053
                                                                                                                       // 1054
var csp = function() {                                                                                                 // 1055
  if (isDefined(csp.isActive_)) return csp.isActive_;                                                                  // 1056
                                                                                                                       // 1057
  var active = !!(document.querySelector('[ng-csp]') ||                                                                // 1058
                  document.querySelector('[data-ng-csp]'));                                                            // 1059
                                                                                                                       // 1060
  if (!active) {                                                                                                       // 1061
    try {                                                                                                              // 1062
      /* jshint -W031, -W054 */                                                                                        // 1063
      new Function('');                                                                                                // 1064
      /* jshint +W031, +W054 */                                                                                        // 1065
    } catch (e) {                                                                                                      // 1066
      active = true;                                                                                                   // 1067
    }                                                                                                                  // 1068
  }                                                                                                                    // 1069
                                                                                                                       // 1070
  return (csp.isActive_ = active);                                                                                     // 1071
};                                                                                                                     // 1072
                                                                                                                       // 1073
/**                                                                                                                    // 1074
 * @ngdoc directive                                                                                                    // 1075
 * @module ng                                                                                                          // 1076
 * @name ngJq                                                                                                          // 1077
 *                                                                                                                     // 1078
 * @element ANY                                                                                                        // 1079
 * @param {string=} ngJq the name of the library available under `window`                                              // 1080
 * to be used for angular.element                                                                                      // 1081
 * @description                                                                                                        // 1082
 * Use this directive to force the angular.element library.  This should be                                            // 1083
 * used to force either jqLite by leaving ng-jq blank or setting the name of                                           // 1084
 * the jquery variable under window (eg. jQuery).                                                                      // 1085
 *                                                                                                                     // 1086
 * Since angular looks for this directive when it is loaded (doesn't wait for the                                      // 1087
 * DOMContentLoaded event), it must be placed on an element that comes before the script                               // 1088
 * which loads angular. Also, only the first instance of `ng-jq` will be used and all                                  // 1089
 * others ignored.                                                                                                     // 1090
 *                                                                                                                     // 1091
 * @example                                                                                                            // 1092
 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.                                // 1093
 ```html                                                                                                               // 1094
 <!doctype html>                                                                                                       // 1095
 <html ng-app ng-jq>                                                                                                   // 1096
 ...                                                                                                                   // 1097
 ...                                                                                                                   // 1098
 </html>                                                                                                               // 1099
 ```                                                                                                                   // 1100
 * @example                                                                                                            // 1101
 * This example shows how to use a jQuery based library of a different name.                                           // 1102
 * The library name must be available at the top most 'window'.                                                        // 1103
 ```html                                                                                                               // 1104
 <!doctype html>                                                                                                       // 1105
 <html ng-app ng-jq="jQueryLib">                                                                                       // 1106
 ...                                                                                                                   // 1107
 ...                                                                                                                   // 1108
 </html>                                                                                                               // 1109
 ```                                                                                                                   // 1110
 */                                                                                                                    // 1111
var jq = function() {                                                                                                  // 1112
  if (isDefined(jq.name_)) return jq.name_;                                                                            // 1113
  var el;                                                                                                              // 1114
  var i, ii = ngAttrPrefixes.length, prefix, name;                                                                     // 1115
  for (i = 0; i < ii; ++i) {                                                                                           // 1116
    prefix = ngAttrPrefixes[i];                                                                                        // 1117
    if (el = document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]')) {                                       // 1118
      name = el.getAttribute(prefix + 'jq');                                                                           // 1119
      break;                                                                                                           // 1120
    }                                                                                                                  // 1121
  }                                                                                                                    // 1122
                                                                                                                       // 1123
  return (jq.name_ = name);                                                                                            // 1124
};                                                                                                                     // 1125
                                                                                                                       // 1126
function concat(array1, array2, index) {                                                                               // 1127
  return array1.concat(slice.call(array2, index));                                                                     // 1128
}                                                                                                                      // 1129
                                                                                                                       // 1130
function sliceArgs(args, startIndex) {                                                                                 // 1131
  return slice.call(args, startIndex || 0);                                                                            // 1132
}                                                                                                                      // 1133
                                                                                                                       // 1134
                                                                                                                       // 1135
/* jshint -W101 */                                                                                                     // 1136
/**                                                                                                                    // 1137
 * @ngdoc function                                                                                                     // 1138
 * @name angular.bind                                                                                                  // 1139
 * @module ng                                                                                                          // 1140
 * @kind function                                                                                                      // 1141
 *                                                                                                                     // 1142
 * @description                                                                                                        // 1143
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for                         // 1144
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also                       // 1145
 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as                                // 1146
 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
 *                                                                                                                     // 1148
 * @param {Object} self Context which `fn` should be evaluated in.                                                     // 1149
 * @param {function()} fn Function to be bound.                                                                        // 1150
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.                                     // 1151
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.                                 // 1152
 */                                                                                                                    // 1153
/* jshint +W101 */                                                                                                     // 1154
function bind(self, fn) {                                                                                              // 1155
  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];                                                 // 1156
  if (isFunction(fn) && !(fn instanceof RegExp)) {                                                                     // 1157
    return curryArgs.length                                                                                            // 1158
      ? function() {                                                                                                   // 1159
          return arguments.length                                                                                      // 1160
            ? fn.apply(self, concat(curryArgs, arguments, 0))                                                          // 1161
            : fn.apply(self, curryArgs);                                                                               // 1162
        }                                                                                                              // 1163
      : function() {                                                                                                   // 1164
          return arguments.length                                                                                      // 1165
            ? fn.apply(self, arguments)                                                                                // 1166
            : fn.call(self);                                                                                           // 1167
        };                                                                                                             // 1168
  } else {                                                                                                             // 1169
    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)                   // 1170
    return fn;                                                                                                         // 1171
  }                                                                                                                    // 1172
}                                                                                                                      // 1173
                                                                                                                       // 1174
                                                                                                                       // 1175
function toJsonReplacer(key, value) {                                                                                  // 1176
  var val = value;                                                                                                     // 1177
                                                                                                                       // 1178
  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {                                     // 1179
    val = undefined;                                                                                                   // 1180
  } else if (isWindow(value)) {                                                                                        // 1181
    val = '$WINDOW';                                                                                                   // 1182
  } else if (value &&  document === value) {                                                                           // 1183
    val = '$DOCUMENT';                                                                                                 // 1184
  } else if (isScope(value)) {                                                                                         // 1185
    val = '$SCOPE';                                                                                                    // 1186
  }                                                                                                                    // 1187
                                                                                                                       // 1188
  return val;                                                                                                          // 1189
}                                                                                                                      // 1190
                                                                                                                       // 1191
                                                                                                                       // 1192
/**                                                                                                                    // 1193
 * @ngdoc function                                                                                                     // 1194
 * @name angular.toJson                                                                                                // 1195
 * @module ng                                                                                                          // 1196
 * @kind function                                                                                                      // 1197
 *                                                                                                                     // 1198
 * @description                                                                                                        // 1199
 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be                        // 1200
 * stripped since angular uses this notation internally.                                                               // 1201
 *                                                                                                                     // 1202
 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.                                      // 1203
 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.            // 1204
 *    If set to an integer, the JSON output will contain that many spaces per indentation.                             // 1205
 * @returns {string|undefined} JSON-ified string representing `obj`.                                                   // 1206
 */                                                                                                                    // 1207
function toJson(obj, pretty) {                                                                                         // 1208
  if (typeof obj === 'undefined') return undefined;                                                                    // 1209
  if (!isNumber(pretty)) {                                                                                             // 1210
    pretty = pretty ? 2 : null;                                                                                        // 1211
  }                                                                                                                    // 1212
  return JSON.stringify(obj, toJsonReplacer, pretty);                                                                  // 1213
}                                                                                                                      // 1214
                                                                                                                       // 1215
                                                                                                                       // 1216
/**                                                                                                                    // 1217
 * @ngdoc function                                                                                                     // 1218
 * @name angular.fromJson                                                                                              // 1219
 * @module ng                                                                                                          // 1220
 * @kind function                                                                                                      // 1221
 *                                                                                                                     // 1222
 * @description                                                                                                        // 1223
 * Deserializes a JSON string.                                                                                         // 1224
 *                                                                                                                     // 1225
 * @param {string} json JSON string to deserialize.                                                                    // 1226
 * @returns {Object|Array|string|number} Deserialized JSON string.                                                     // 1227
 */                                                                                                                    // 1228
function fromJson(json) {                                                                                              // 1229
  return isString(json)                                                                                                // 1230
      ? JSON.parse(json)                                                                                               // 1231
      : json;                                                                                                          // 1232
}                                                                                                                      // 1233
                                                                                                                       // 1234
                                                                                                                       // 1235
function timezoneToOffset(timezone, fallback) {                                                                        // 1236
  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;                               // 1237
  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;                                          // 1238
}                                                                                                                      // 1239
                                                                                                                       // 1240
                                                                                                                       // 1241
function addDateMinutes(date, minutes) {                                                                               // 1242
  date = new Date(date.getTime());                                                                                     // 1243
  date.setMinutes(date.getMinutes() + minutes);                                                                        // 1244
  return date;                                                                                                         // 1245
}                                                                                                                      // 1246
                                                                                                                       // 1247
                                                                                                                       // 1248
function convertTimezoneToLocal(date, timezone, reverse) {                                                             // 1249
  reverse = reverse ? -1 : 1;                                                                                          // 1250
  var timezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());                                           // 1251
  return addDateMinutes(date, reverse * (timezoneOffset - date.getTimezoneOffset()));                                  // 1252
}                                                                                                                      // 1253
                                                                                                                       // 1254
                                                                                                                       // 1255
/**                                                                                                                    // 1256
 * @returns {string} Returns the string representation of the element.                                                 // 1257
 */                                                                                                                    // 1258
function startingTag(element) {                                                                                        // 1259
  element = jqLite(element).clone();                                                                                   // 1260
  try {                                                                                                                // 1261
    // turns out IE does not let you set .html() on elements which                                                     // 1262
    // are not allowed to have children. So we just ignore it.                                                         // 1263
    element.empty();                                                                                                   // 1264
  } catch (e) {}                                                                                                       // 1265
  var elemHtml = jqLite('<div>').append(element).html();                                                               // 1266
  try {                                                                                                                // 1267
    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :                                              // 1268
        elemHtml.                                                                                                      // 1269
          match(/^(<[^>]+>)/)[1].                                                                                      // 1270
          replace(/^<([\w\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });                     // 1271
  } catch (e) {                                                                                                        // 1272
    return lowercase(elemHtml);                                                                                        // 1273
  }                                                                                                                    // 1274
                                                                                                                       // 1275
}                                                                                                                      // 1276
                                                                                                                       // 1277
                                                                                                                       // 1278
/////////////////////////////////////////////////                                                                      // 1279
                                                                                                                       // 1280
/**                                                                                                                    // 1281
 * Tries to decode the URI component without throwing an exception.                                                    // 1282
 *                                                                                                                     // 1283
 * @private                                                                                                            // 1284
 * @param str value potential URI component to check.                                                                  // 1285
 * @returns {boolean} True if `value` can be decoded                                                                   // 1286
 * with the decodeURIComponent function.                                                                               // 1287
 */                                                                                                                    // 1288
function tryDecodeURIComponent(value) {                                                                                // 1289
  try {                                                                                                                // 1290
    return decodeURIComponent(value);                                                                                  // 1291
  } catch (e) {                                                                                                        // 1292
    // Ignore any invalid uri component                                                                                // 1293
  }                                                                                                                    // 1294
}                                                                                                                      // 1295
                                                                                                                       // 1296
                                                                                                                       // 1297
/**                                                                                                                    // 1298
 * Parses an escaped url query string into key-value pairs.                                                            // 1299
 * @returns {Object.<string,boolean|Array>}                                                                            // 1300
 */                                                                                                                    // 1301
function parseKeyValue(/**string*/keyValue) {                                                                          // 1302
  var obj = {}, key_value, key;                                                                                        // 1303
  forEach((keyValue || "").split('&'), function(keyValue) {                                                            // 1304
    if (keyValue) {                                                                                                    // 1305
      key_value = keyValue.replace(/\+/g,'%20').split('=');                                                            // 1306
      key = tryDecodeURIComponent(key_value[0]);                                                                       // 1307
      if (isDefined(key)) {                                                                                            // 1308
        var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;                                // 1309
        if (!hasOwnProperty.call(obj, key)) {                                                                          // 1310
          obj[key] = val;                                                                                              // 1311
        } else if (isArray(obj[key])) {                                                                                // 1312
          obj[key].push(val);                                                                                          // 1313
        } else {                                                                                                       // 1314
          obj[key] = [obj[key],val];                                                                                   // 1315
        }                                                                                                              // 1316
      }                                                                                                                // 1317
    }                                                                                                                  // 1318
  });                                                                                                                  // 1319
  return obj;                                                                                                          // 1320
}                                                                                                                      // 1321
                                                                                                                       // 1322
function toKeyValue(obj) {                                                                                             // 1323
  var parts = [];                                                                                                      // 1324
  forEach(obj, function(value, key) {                                                                                  // 1325
    if (isArray(value)) {                                                                                              // 1326
      forEach(value, function(arrayValue) {                                                                            // 1327
        parts.push(encodeUriQuery(key, true) +                                                                         // 1328
                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));                               // 1329
      });                                                                                                              // 1330
    } else {                                                                                                           // 1331
    parts.push(encodeUriQuery(key, true) +                                                                             // 1332
               (value === true ? '' : '=' + encodeUriQuery(value, true)));                                             // 1333
    }                                                                                                                  // 1334
  });                                                                                                                  // 1335
  return parts.length ? parts.join('&') : '';                                                                          // 1336
}                                                                                                                      // 1337
                                                                                                                       // 1338
                                                                                                                       // 1339
/**                                                                                                                    // 1340
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow                           // 1341
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path                       // 1342
 * segments:                                                                                                           // 1343
 *    segment       = *pchar                                                                                           // 1344
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"                                                // 1345
 *    pct-encoded   = "%" HEXDIG HEXDIG                                                                                // 1346
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"                                                            // 1347
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"                                                                // 1348
 *                     / "*" / "+" / "," / ";" / "="                                                                   // 1349
 */                                                                                                                    // 1350
function encodeUriSegment(val) {                                                                                       // 1351
  return encodeUriQuery(val, true).                                                                                    // 1352
             replace(/%26/gi, '&').                                                                                    // 1353
             replace(/%3D/gi, '=').                                                                                    // 1354
             replace(/%2B/gi, '+');                                                                                    // 1355
}                                                                                                                      // 1356
                                                                                                                       // 1357
                                                                                                                       // 1358
/**                                                                                                                    // 1359
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom                    // 1360
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be                       // 1361
 * encoded per http://tools.ietf.org/html/rfc3986:                                                                     // 1362
 *    query       = *( pchar / "/" / "?" )                                                                             // 1363
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"                                                // 1364
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"                                                            // 1365
 *    pct-encoded   = "%" HEXDIG HEXDIG                                                                                // 1366
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"                                                                // 1367
 *                     / "*" / "+" / "," / ";" / "="                                                                   // 1368
 */                                                                                                                    // 1369
function encodeUriQuery(val, pctEncodeSpaces) {                                                                        // 1370
  return encodeURIComponent(val).                                                                                      // 1371
             replace(/%40/gi, '@').                                                                                    // 1372
             replace(/%3A/gi, ':').                                                                                    // 1373
             replace(/%24/g, '$').                                                                                     // 1374
             replace(/%2C/gi, ',').                                                                                    // 1375
             replace(/%3B/gi, ';').                                                                                    // 1376
             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));                                                         // 1377
}                                                                                                                      // 1378
                                                                                                                       // 1379
var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];                                                              // 1380
                                                                                                                       // 1381
function getNgAttribute(element, ngAttr) {                                                                             // 1382
  var attr, i, ii = ngAttrPrefixes.length;                                                                             // 1383
  for (i = 0; i < ii; ++i) {                                                                                           // 1384
    attr = ngAttrPrefixes[i] + ngAttr;                                                                                 // 1385
    if (isString(attr = element.getAttribute(attr))) {                                                                 // 1386
      return attr;                                                                                                     // 1387
    }                                                                                                                  // 1388
  }                                                                                                                    // 1389
  return null;                                                                                                         // 1390
}                                                                                                                      // 1391
                                                                                                                       // 1392
/**                                                                                                                    // 1393
 * @ngdoc directive                                                                                                    // 1394
 * @name ngApp                                                                                                         // 1395
 * @module ng                                                                                                          // 1396
 *                                                                                                                     // 1397
 * @element ANY                                                                                                        // 1398
 * @param {angular.Module} ngApp an optional application                                                               // 1399
 *   {@link angular.module module} name to load.                                                                       // 1400
 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be                  // 1401
 *   created in "strict-di" mode. This means that the application will fail to invoke functions which                  // 1402
 *   do not use explicit function annotation (and are thus unsuitable for minification), as described                  // 1403
 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in                      // 1404
 *   tracking down the root of these bugs.                                                                             // 1405
 *                                                                                                                     // 1406
 * @description                                                                                                        // 1407
 *                                                                                                                     // 1408
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive                            // 1409
 * designates the **root element** of the application and is typically placed near the root element                    // 1410
 * of the page - e.g. on the `<body>` or `<html>` tags.                                                                // 1411
 *                                                                                                                     // 1412
 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`                        // 1413
 * found in the document will be used to define the root element to auto-bootstrap as an                               // 1414
 * application. To run multiple applications in an HTML document you must manually bootstrap them using                // 1415
 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.                       // 1416
 *                                                                                                                     // 1417
 * You can specify an **AngularJS module** to be used as the root module for the application.  This                    // 1418
 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It                      // 1419
 * should contain the application code needed or have dependencies on other modules that will                          // 1420
 * contain the code. See {@link angular.module} for more information.                                                  // 1421
 *                                                                                                                     // 1422
 * In the example below if the `ngApp` directive were not placed on the `html` element then the                        // 1423
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`                   // 1424
 * would not be resolved to `3`.                                                                                       // 1425
 *                                                                                                                     // 1426
 * `ngApp` is the easiest, and most common way to bootstrap an application.                                            // 1427
 *                                                                                                                     // 1428
 <example module="ngAppDemo">                                                                                          // 1429
   <file name="index.html">                                                                                            // 1430
   <div ng-controller="ngAppDemoController">                                                                           // 1431
     I can add: {{a}} + {{b}} =  {{ a+b }}                                                                             // 1432
   </div>                                                                                                              // 1433
   </file>                                                                                                             // 1434
   <file name="script.js">                                                                                             // 1435
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {                                // 1436
     $scope.a = 1;                                                                                                     // 1437
     $scope.b = 2;                                                                                                     // 1438
   });                                                                                                                 // 1439
   </file>                                                                                                             // 1440
 </example>                                                                                                            // 1441
 *                                                                                                                     // 1442
 * Using `ngStrictDi`, you would see something like this:                                                              // 1443
 *                                                                                                                     // 1444
 <example ng-app-included="true">                                                                                      // 1445
   <file name="index.html">                                                                                            // 1446
   <div ng-app="ngAppStrictDemo" ng-strict-di>                                                                         // 1447
       <div ng-controller="GoodController1">                                                                           // 1448
           I can add: {{a}} + {{b}} =  {{ a+b }}                                                                       // 1449
                                                                                                                       // 1450
           <p>This renders because the controller does not fail to                                                     // 1451
              instantiate, by using explicit annotation style (see                                                     // 1452
              script.js for details)                                                                                   // 1453
           </p>                                                                                                        // 1454
       </div>                                                                                                          // 1455
                                                                                                                       // 1456
       <div ng-controller="GoodController2">                                                                           // 1457
           Name: <input ng-model="name"><br />                                                                         // 1458
           Hello, {{name}}!                                                                                            // 1459
                                                                                                                       // 1460
           <p>This renders because the controller does not fail to                                                     // 1461
              instantiate, by using explicit annotation style                                                          // 1462
              (see script.js for details)                                                                              // 1463
           </p>                                                                                                        // 1464
       </div>                                                                                                          // 1465
                                                                                                                       // 1466
       <div ng-controller="BadController">                                                                             // 1467
           I can add: {{a}} + {{b}} =  {{ a+b }}                                                                       // 1468
                                                                                                                       // 1469
           <p>The controller could not be instantiated, due to relying                                                 // 1470
              on automatic function annotations (which are disabled in                                                 // 1471
              strict mode). As such, the content of this section is not                                                // 1472
              interpolated, and there should be an error in your web console.                                          // 1473
           </p>                                                                                                        // 1474
       </div>                                                                                                          // 1475
   </div>                                                                                                              // 1476
   </file>                                                                                                             // 1477
   <file name="script.js">                                                                                             // 1478
   angular.module('ngAppStrictDemo', [])                                                                               // 1479
     // BadController will fail to instantiate, due to relying on automatic function annotation,                       // 1480
     // rather than an explicit annotation                                                                             // 1481
     .controller('BadController', function($scope) {                                                                   // 1482
       $scope.a = 1;                                                                                                   // 1483
       $scope.b = 2;                                                                                                   // 1484
     })                                                                                                                // 1485
     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,                    // 1486
     // due to using explicit annotations using the array style and $inject property, respectively.                    // 1487
     .controller('GoodController1', ['$scope', function($scope) {                                                      // 1488
       $scope.a = 1;                                                                                                   // 1489
       $scope.b = 2;                                                                                                   // 1490
     }])                                                                                                               // 1491
     .controller('GoodController2', GoodController2);                                                                  // 1492
     function GoodController2($scope) {                                                                                // 1493
       $scope.name = "World";                                                                                          // 1494
     }                                                                                                                 // 1495
     GoodController2.$inject = ['$scope'];                                                                             // 1496
   </file>                                                                                                             // 1497
   <file name="style.css">                                                                                             // 1498
   div[ng-controller] {                                                                                                // 1499
       margin-bottom: 1em;                                                                                             // 1500
       -webkit-border-radius: 4px;                                                                                     // 1501
       border-radius: 4px;                                                                                             // 1502
       border: 1px solid;                                                                                              // 1503
       padding: .5em;                                                                                                  // 1504
   }                                                                                                                   // 1505
   div[ng-controller^=Good] {                                                                                          // 1506
       border-color: #d6e9c6;                                                                                          // 1507
       background-color: #dff0d8;                                                                                      // 1508
       color: #3c763d;                                                                                                 // 1509
   }                                                                                                                   // 1510
   div[ng-controller^=Bad] {                                                                                           // 1511
       border-color: #ebccd1;                                                                                          // 1512
       background-color: #f2dede;                                                                                      // 1513
       color: #a94442;                                                                                                 // 1514
       margin-bottom: 0;                                                                                               // 1515
   }                                                                                                                   // 1516
   </file>                                                                                                             // 1517
 </example>                                                                                                            // 1518
 */                                                                                                                    // 1519
function angularInit(element, bootstrap) {                                                                             // 1520
  var appElement,                                                                                                      // 1521
      module,                                                                                                          // 1522
      config = {};                                                                                                     // 1523
                                                                                                                       // 1524
  // The element `element` has priority over any other element                                                         // 1525
  forEach(ngAttrPrefixes, function(prefix) {                                                                           // 1526
    var name = prefix + 'app';                                                                                         // 1527
                                                                                                                       // 1528
    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {                                           // 1529
      appElement = element;                                                                                            // 1530
      module = element.getAttribute(name);                                                                             // 1531
    }                                                                                                                  // 1532
  });                                                                                                                  // 1533
  forEach(ngAttrPrefixes, function(prefix) {                                                                           // 1534
    var name = prefix + 'app';                                                                                         // 1535
    var candidate;                                                                                                     // 1536
                                                                                                                       // 1537
    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {                    // 1538
      appElement = candidate;                                                                                          // 1539
      module = candidate.getAttribute(name);                                                                           // 1540
    }                                                                                                                  // 1541
  });                                                                                                                  // 1542
  if (appElement) {                                                                                                    // 1543
    config.strictDi = getNgAttribute(appElement, "strict-di") !== null;                                                // 1544
    bootstrap(appElement, module ? [module] : [], config);                                                             // 1545
  }                                                                                                                    // 1546
}                                                                                                                      // 1547
                                                                                                                       // 1548
/**                                                                                                                    // 1549
 * @ngdoc function                                                                                                     // 1550
 * @name angular.bootstrap                                                                                             // 1551
 * @module ng                                                                                                          // 1552
 * @description                                                                                                        // 1553
 * Use this function to manually start up angular application.                                                         // 1554
 *                                                                                                                     // 1555
 * See: {@link guide/bootstrap Bootstrap}                                                                              // 1556
 *                                                                                                                     // 1557
 * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.                         // 1558
 * They must use {@link ng.directive:ngApp ngApp}.                                                                     // 1559
 *                                                                                                                     // 1560
 * Angular will detect if it has been loaded into the browser more than once and only allow the                        // 1561
 * first loaded script to be bootstrapped and will report a warning to the browser console for                         // 1562
 * each of the subsequent scripts. This prevents strange results in applications, where otherwise                      // 1563
 * multiple instances of Angular try to work on the DOM.                                                               // 1564
 *                                                                                                                     // 1565
 * ```html                                                                                                             // 1566
 * <!doctype html>                                                                                                     // 1567
 * <html>                                                                                                              // 1568
 * <body>                                                                                                              // 1569
 * <div ng-controller="WelcomeController">                                                                             // 1570
 *   {{greeting}}                                                                                                      // 1571
 * </div>                                                                                                              // 1572
 *                                                                                                                     // 1573
 * <script src="angular.js"></script>                                                                                  // 1574
 * <script>                                                                                                            // 1575
 *   var app = angular.module('demo', [])                                                                              // 1576
 *   .controller('WelcomeController', function($scope) {                                                               // 1577
 *       $scope.greeting = 'Welcome!';                                                                                 // 1578
 *   });                                                                                                               // 1579
 *   angular.bootstrap(document, ['demo']);                                                                            // 1580
 * </script>                                                                                                           // 1581
 * </body>                                                                                                             // 1582
 * </html>                                                                                                             // 1583
 * ```                                                                                                                 // 1584
 *                                                                                                                     // 1585
 * @param {DOMElement} element DOM element which is the root of angular application.                                   // 1586
 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.                    // 1587
 *     Each item in the array should be the name of a predefined module or a (DI annotated)                            // 1588
 *     function that will be invoked by the injector as a `config` block.                                              // 1589
 *     See: {@link angular.module modules}                                                                             // 1590
 * @param {Object=} config an object for defining configuration options for the application. The                       // 1591
 *     following keys are supported:                                                                                   // 1592
 *                                                                                                                     // 1593
 * * `strictDi` - disable automatic function annotation for the application. This is meant to                          // 1594
 *   assist in finding bugs which break minified code. Defaults to `false`.                                            // 1595
 *                                                                                                                     // 1596
 * @returns {auto.$injector} Returns the newly created injector for this app.                                          // 1597
 */                                                                                                                    // 1598
function bootstrap(element, modules, config) {                                                                         // 1599
  if (!isObject(config)) config = {};                                                                                  // 1600
  var defaultConfig = {                                                                                                // 1601
    strictDi: false                                                                                                    // 1602
  };                                                                                                                   // 1603
  config = extend(defaultConfig, config);                                                                              // 1604
  var doBootstrap = function() {                                                                                       // 1605
    element = jqLite(element);                                                                                         // 1606
                                                                                                                       // 1607
    if (element.injector()) {                                                                                          // 1608
      var tag = (element[0] === document) ? 'document' : startingTag(element);                                         // 1609
      //Encode angle brackets to prevent input from being sanitized to empty string #8683                              // 1610
      throw ngMinErr(                                                                                                  // 1611
          'btstrpd',                                                                                                   // 1612
          "App Already Bootstrapped with this Element '{0}'",                                                          // 1613
          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));                                                                // 1614
    }                                                                                                                  // 1615
                                                                                                                       // 1616
    modules = modules || [];                                                                                           // 1617
    modules.unshift(['$provide', function($provide) {                                                                  // 1618
      $provide.value('$rootElement', element);                                                                         // 1619
    }]);                                                                                                               // 1620
                                                                                                                       // 1621
    if (config.debugInfoEnabled) {                                                                                     // 1622
      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.                        // 1623
      modules.push(['$compileProvider', function($compileProvider) {                                                   // 1624
        $compileProvider.debugInfoEnabled(true);                                                                       // 1625
      }]);                                                                                                             // 1626
    }                                                                                                                  // 1627
                                                                                                                       // 1628
    modules.unshift('ng');                                                                                             // 1629
    var injector = createInjector(modules, config.strictDi);                                                           // 1630
    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',                                            // 1631
       function bootstrapApply(scope, element, compile, injector) {                                                    // 1632
        scope.$apply(function() {                                                                                      // 1633
          element.data('$injector', injector);                                                                         // 1634
          compile(element)(scope);                                                                                     // 1635
        });                                                                                                            // 1636
      }]                                                                                                               // 1637
    );                                                                                                                 // 1638
    return injector;                                                                                                   // 1639
  };                                                                                                                   // 1640
                                                                                                                       // 1641
  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;                                                                 // 1642
  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;                                                                     // 1643
                                                                                                                       // 1644
  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {                                                              // 1645
    config.debugInfoEnabled = true;                                                                                    // 1646
    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');                                                       // 1647
  }                                                                                                                    // 1648
                                                                                                                       // 1649
  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {                                                               // 1650
    return doBootstrap();                                                                                              // 1651
  }                                                                                                                    // 1652
                                                                                                                       // 1653
  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');                                                           // 1654
  angular.resumeBootstrap = function(extraModules) {                                                                   // 1655
    forEach(extraModules, function(module) {                                                                           // 1656
      modules.push(module);                                                                                            // 1657
    });                                                                                                                // 1658
    return doBootstrap();                                                                                              // 1659
  };                                                                                                                   // 1660
                                                                                                                       // 1661
  if (isFunction(angular.resumeDeferredBootstrap)) {                                                                   // 1662
    angular.resumeDeferredBootstrap();                                                                                 // 1663
  }                                                                                                                    // 1664
}                                                                                                                      // 1665
                                                                                                                       // 1666
/**                                                                                                                    // 1667
 * @ngdoc function                                                                                                     // 1668
 * @name angular.reloadWithDebugInfo                                                                                   // 1669
 * @module ng                                                                                                          // 1670
 * @description                                                                                                        // 1671
 * Use this function to reload the current application with debug information turned on.                               // 1672
 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.                                    // 1673
 *                                                                                                                     // 1674
 * See {@link ng.$compileProvider#debugInfoEnabled} for more.                                                          // 1675
 */                                                                                                                    // 1676
function reloadWithDebugInfo() {                                                                                       // 1677
  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;                                                                 // 1678
  window.location.reload();                                                                                            // 1679
}                                                                                                                      // 1680
                                                                                                                       // 1681
/**                                                                                                                    // 1682
 * @name angular.getTestability                                                                                        // 1683
 * @module ng                                                                                                          // 1684
 * @description                                                                                                        // 1685
 * Get the testability service for the instance of Angular on the given                                                // 1686
 * element.                                                                                                            // 1687
 * @param {DOMElement} element DOM element which is the root of angular application.                                   // 1688
 */                                                                                                                    // 1689
function getTestability(rootElement) {                                                                                 // 1690
  var injector = angular.element(rootElement).injector();                                                              // 1691
  if (!injector) {                                                                                                     // 1692
    throw ngMinErr('test',                                                                                             // 1693
      'no injector found for element argument to getTestability');                                                     // 1694
  }                                                                                                                    // 1695
  return injector.get('$$testability');                                                                                // 1696
}                                                                                                                      // 1697
                                                                                                                       // 1698
var SNAKE_CASE_REGEXP = /[A-Z]/g;                                                                                      // 1699
function snake_case(name, separator) {                                                                                 // 1700
  separator = separator || '_';                                                                                        // 1701
  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {                                                       // 1702
    return (pos ? separator : '') + letter.toLowerCase();                                                              // 1703
  });                                                                                                                  // 1704
}                                                                                                                      // 1705
                                                                                                                       // 1706
var bindJQueryFired = false;                                                                                           // 1707
var skipDestroyOnNextJQueryCleanData;                                                                                  // 1708
function bindJQuery() {                                                                                                // 1709
  var originalCleanData;                                                                                               // 1710
                                                                                                                       // 1711
  if (bindJQueryFired) {                                                                                               // 1712
    return;                                                                                                            // 1713
  }                                                                                                                    // 1714
                                                                                                                       // 1715
  // bind to jQuery if present;                                                                                        // 1716
  var jqName = jq();                                                                                                   // 1717
  jQuery = window.jQuery; // use default jQuery.                                                                       // 1718
  if (isDefined(jqName)) { // `ngJq` present                                                                           // 1719
    jQuery = jqName === null ? undefined : window[jqName]; // if empty; use jqLite. if not empty, use jQuery specified by `ngJq`.
  }                                                                                                                    // 1721
                                                                                                                       // 1722
  // Use jQuery if it exists with proper functionality, otherwise default to us.                                       // 1723
  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.                                                         // 1724
  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older                                 // 1725
  // versions. It will not work for sure with jQuery <1.7, though.                                                     // 1726
  if (jQuery && jQuery.fn.on) {                                                                                        // 1727
    jqLite = jQuery;                                                                                                   // 1728
    extend(jQuery.fn, {                                                                                                // 1729
      scope: JQLitePrototype.scope,                                                                                    // 1730
      isolateScope: JQLitePrototype.isolateScope,                                                                      // 1731
      controller: JQLitePrototype.controller,                                                                          // 1732
      injector: JQLitePrototype.injector,                                                                              // 1733
      inheritedData: JQLitePrototype.inheritedData                                                                     // 1734
    });                                                                                                                // 1735
                                                                                                                       // 1736
    // All nodes removed from the DOM via various jQuery APIs like .remove()                                           // 1737
    // are passed through jQuery.cleanData. Monkey-patch this method to fire                                           // 1738
    // the $destroy event on all removed nodes.                                                                        // 1739
    originalCleanData = jQuery.cleanData;                                                                              // 1740
    jQuery.cleanData = function(elems) {                                                                               // 1741
      var events;                                                                                                      // 1742
      if (!skipDestroyOnNextJQueryCleanData) {                                                                         // 1743
        for (var i = 0, elem; (elem = elems[i]) != null; i++) {                                                        // 1744
          events = jQuery._data(elem, "events");                                                                       // 1745
          if (events && events.$destroy) {                                                                             // 1746
            jQuery(elem).triggerHandler('$destroy');                                                                   // 1747
          }                                                                                                            // 1748
        }                                                                                                              // 1749
      } else {                                                                                                         // 1750
        skipDestroyOnNextJQueryCleanData = false;                                                                      // 1751
      }                                                                                                                // 1752
      originalCleanData(elems);                                                                                        // 1753
    };                                                                                                                 // 1754
  } else {                                                                                                             // 1755
    jqLite = JQLite;                                                                                                   // 1756
  }                                                                                                                    // 1757
                                                                                                                       // 1758
  angular.element = jqLite;                                                                                            // 1759
                                                                                                                       // 1760
  // Prevent double-proxying.                                                                                          // 1761
  bindJQueryFired = true;                                                                                              // 1762
}                                                                                                                      // 1763
                                                                                                                       // 1764
/**                                                                                                                    // 1765
 * throw error if the argument is falsy.                                                                               // 1766
 */                                                                                                                    // 1767
function assertArg(arg, name, reason) {                                                                                // 1768
  if (!arg) {                                                                                                          // 1769
    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));                            // 1770
  }                                                                                                                    // 1771
  return arg;                                                                                                          // 1772
}                                                                                                                      // 1773
                                                                                                                       // 1774
function assertArgFn(arg, name, acceptArrayAnnotation) {                                                               // 1775
  if (acceptArrayAnnotation && isArray(arg)) {                                                                         // 1776
      arg = arg[arg.length - 1];                                                                                       // 1777
  }                                                                                                                    // 1778
                                                                                                                       // 1779
  assertArg(isFunction(arg), name, 'not a function, got ' +                                                            // 1780
      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));                               // 1781
  return arg;                                                                                                          // 1782
}                                                                                                                      // 1783
                                                                                                                       // 1784
/**                                                                                                                    // 1785
 * throw error if the name given is hasOwnProperty                                                                     // 1786
 * @param  {String} name    the name to test                                                                           // 1787
 * @param  {String} context the context in which the name is used, such as module or directive                         // 1788
 */                                                                                                                    // 1789
function assertNotHasOwnProperty(name, context) {                                                                      // 1790
  if (name === 'hasOwnProperty') {                                                                                     // 1791
    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);                                      // 1792
  }                                                                                                                    // 1793
}                                                                                                                      // 1794
                                                                                                                       // 1795
/**                                                                                                                    // 1796
 * Return the value accessible from the object by path. Any undefined traversals are ignored                           // 1797
 * @param {Object} obj starting object                                                                                 // 1798
 * @param {String} path path to traverse                                                                               // 1799
 * @param {boolean} [bindFnToScope=true]                                                                               // 1800
 * @returns {Object} value as accessible by path                                                                       // 1801
 */                                                                                                                    // 1802
//TODO(misko): this function needs to be removed                                                                       // 1803
function getter(obj, path, bindFnToScope) {                                                                            // 1804
  if (!path) return obj;                                                                                               // 1805
  var keys = path.split('.');                                                                                          // 1806
  var key;                                                                                                             // 1807
  var lastInstance = obj;                                                                                              // 1808
  var len = keys.length;                                                                                               // 1809
                                                                                                                       // 1810
  for (var i = 0; i < len; i++) {                                                                                      // 1811
    key = keys[i];                                                                                                     // 1812
    if (obj) {                                                                                                         // 1813
      obj = (lastInstance = obj)[key];                                                                                 // 1814
    }                                                                                                                  // 1815
  }                                                                                                                    // 1816
  if (!bindFnToScope && isFunction(obj)) {                                                                             // 1817
    return bind(lastInstance, obj);                                                                                    // 1818
  }                                                                                                                    // 1819
  return obj;                                                                                                          // 1820
}                                                                                                                      // 1821
                                                                                                                       // 1822
/**                                                                                                                    // 1823
 * Return the DOM siblings between the first and last node in the given array.                                         // 1824
 * @param {Array} array like object                                                                                    // 1825
 * @returns {jqLite} jqLite collection containing the nodes                                                            // 1826
 */                                                                                                                    // 1827
function getBlockNodes(nodes) {                                                                                        // 1828
  // TODO(perf): just check if all items in `nodes` are siblings and if they are return the original                   // 1829
  //             collection, otherwise update the original collection.                                                 // 1830
  var node = nodes[0];                                                                                                 // 1831
  var endNode = nodes[nodes.length - 1];                                                                               // 1832
  var blockNodes = [node];                                                                                             // 1833
                                                                                                                       // 1834
  do {                                                                                                                 // 1835
    node = node.nextSibling;                                                                                           // 1836
    if (!node) break;                                                                                                  // 1837
    blockNodes.push(node);                                                                                             // 1838
  } while (node !== endNode);                                                                                          // 1839
                                                                                                                       // 1840
  return jqLite(blockNodes);                                                                                           // 1841
}                                                                                                                      // 1842
                                                                                                                       // 1843
                                                                                                                       // 1844
/**                                                                                                                    // 1845
 * Creates a new object without a prototype. This object is useful for lookup without having to                        // 1846
 * guard against prototypically inherited properties via hasOwnProperty.                                               // 1847
 *                                                                                                                     // 1848
 * Related micro-benchmarks:                                                                                           // 1849
 * - http://jsperf.com/object-create2                                                                                  // 1850
 * - http://jsperf.com/proto-map-lookup/2                                                                              // 1851
 * - http://jsperf.com/for-in-vs-object-keys2                                                                          // 1852
 *                                                                                                                     // 1853
 * @returns {Object}                                                                                                   // 1854
 */                                                                                                                    // 1855
function createMap() {                                                                                                 // 1856
  return Object.create(null);                                                                                          // 1857
}                                                                                                                      // 1858
                                                                                                                       // 1859
var NODE_TYPE_ELEMENT = 1;                                                                                             // 1860
var NODE_TYPE_ATTRIBUTE = 2;                                                                                           // 1861
var NODE_TYPE_TEXT = 3;                                                                                                // 1862
var NODE_TYPE_COMMENT = 8;                                                                                             // 1863
var NODE_TYPE_DOCUMENT = 9;                                                                                            // 1864
var NODE_TYPE_DOCUMENT_FRAGMENT = 11;                                                                                  // 1865
                                                                                                                       // 1866
/**                                                                                                                    // 1867
 * @ngdoc type                                                                                                         // 1868
 * @name angular.Module                                                                                                // 1869
 * @module ng                                                                                                          // 1870
 * @description                                                                                                        // 1871
 *                                                                                                                     // 1872
 * Interface for configuring angular {@link angular.module modules}.                                                   // 1873
 */                                                                                                                    // 1874
                                                                                                                       // 1875
function setupModuleLoader(window) {                                                                                   // 1876
                                                                                                                       // 1877
  var $injectorMinErr = minErr('$injector');                                                                           // 1878
  var ngMinErr = minErr('ng');                                                                                         // 1879
                                                                                                                       // 1880
  function ensure(obj, name, factory) {                                                                                // 1881
    return obj[name] || (obj[name] = factory());                                                                       // 1882
  }                                                                                                                    // 1883
                                                                                                                       // 1884
  var angular = ensure(window, 'angular', Object);                                                                     // 1885
                                                                                                                       // 1886
  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap           // 1887
  angular.$$minErr = angular.$$minErr || minErr;                                                                       // 1888
                                                                                                                       // 1889
  return ensure(angular, 'module', function() {                                                                        // 1890
    /** @type {Object.<string, angular.Module>} */                                                                     // 1891
    var modules = {};                                                                                                  // 1892
                                                                                                                       // 1893
    /**                                                                                                                // 1894
     * @ngdoc function                                                                                                 // 1895
     * @name angular.module                                                                                            // 1896
     * @module ng                                                                                                      // 1897
     * @description                                                                                                    // 1898
     *                                                                                                                 // 1899
     * The `angular.module` is a global place for creating, registering and retrieving Angular                         // 1900
     * modules.                                                                                                        // 1901
     * All modules (angular core or 3rd party) that should be available to an application must be                      // 1902
     * registered using this mechanism.                                                                                // 1903
     *                                                                                                                 // 1904
     * When passed two or more arguments, a new module is created.  If passed only one argument, an                    // 1905
     * existing module (the name passed as the first argument to `module`) is retrieved.                               // 1906
     *                                                                                                                 // 1907
     *                                                                                                                 // 1908
     * # Module                                                                                                        // 1909
     *                                                                                                                 // 1910
     * A module is a collection of services, directives, controllers, filters, and configuration information.          // 1911
     * `angular.module` is used to configure the {@link auto.$injector $injector}.                                     // 1912
     *                                                                                                                 // 1913
     * ```js                                                                                                           // 1914
     * // Create a new module                                                                                          // 1915
     * var myModule = angular.module('myModule', []);                                                                  // 1916
     *                                                                                                                 // 1917
     * // register a new service                                                                                       // 1918
     * myModule.value('appName', 'MyCoolApp');                                                                         // 1919
     *                                                                                                                 // 1920
     * // configure existing services inside initialization blocks.                                                    // 1921
     * myModule.config(['$locationProvider', function($locationProvider) {                                             // 1922
     *   // Configure existing providers                                                                               // 1923
     *   $locationProvider.hashPrefix('!');                                                                            // 1924
     * }]);                                                                                                            // 1925
     * ```                                                                                                             // 1926
     *                                                                                                                 // 1927
     * Then you can create an injector and load your modules like this:                                                // 1928
     *                                                                                                                 // 1929
     * ```js                                                                                                           // 1930
     * var injector = angular.injector(['ng', 'myModule'])                                                             // 1931
     * ```                                                                                                             // 1932
     *                                                                                                                 // 1933
     * However it's more likely that you'll just use                                                                   // 1934
     * {@link ng.directive:ngApp ngApp} or                                                                             // 1935
     * {@link angular.bootstrap} to simplify this process for you.                                                     // 1936
     *                                                                                                                 // 1937
     * @param {!string} name The name of the module to create or retrieve.                                             // 1938
     * @param {!Array.<string>=} requires If specified then new module is being created. If                            // 1939
     *        unspecified then the module is being retrieved for further configuration.                                // 1940
     * @param {Function=} configFn Optional configuration function for the module. Same as                             // 1941
     *        {@link angular.Module#config Module#config()}.                                                           // 1942
     * @returns {module} new module with the {@link angular.Module} api.                                               // 1943
     */                                                                                                                // 1944
    return function module(name, requires, configFn) {                                                                 // 1945
      var assertNotHasOwnProperty = function(name, context) {                                                          // 1946
        if (name === 'hasOwnProperty') {                                                                               // 1947
          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);                                // 1948
        }                                                                                                              // 1949
      };                                                                                                               // 1950
                                                                                                                       // 1951
      assertNotHasOwnProperty(name, 'module');                                                                         // 1952
      if (requires && modules.hasOwnProperty(name)) {                                                                  // 1953
        modules[name] = null;                                                                                          // 1954
      }                                                                                                                // 1955
      return ensure(modules, name, function() {                                                                        // 1956
        if (!requires) {                                                                                               // 1957
          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +                     // 1958
             "the module name or forgot to load it. If registering a module ensure that you " +                        // 1959
             "specify the dependencies as the second argument.", name);                                                // 1960
        }                                                                                                              // 1961
                                                                                                                       // 1962
        /** @type {!Array.<Array.<*>>} */                                                                              // 1963
        var invokeQueue = [];                                                                                          // 1964
                                                                                                                       // 1965
        /** @type {!Array.<Function>} */                                                                               // 1966
        var configBlocks = [];                                                                                         // 1967
                                                                                                                       // 1968
        /** @type {!Array.<Function>} */                                                                               // 1969
        var runBlocks = [];                                                                                            // 1970
                                                                                                                       // 1971
        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);                                         // 1972
                                                                                                                       // 1973
        /** @type {angular.Module} */                                                                                  // 1974
        var moduleInstance = {                                                                                         // 1975
          // Private state                                                                                             // 1976
          _invokeQueue: invokeQueue,                                                                                   // 1977
          _configBlocks: configBlocks,                                                                                 // 1978
          _runBlocks: runBlocks,                                                                                       // 1979
                                                                                                                       // 1980
          /**                                                                                                          // 1981
           * @ngdoc property                                                                                           // 1982
           * @name angular.Module#requires                                                                             // 1983
           * @module ng                                                                                                // 1984
           *                                                                                                           // 1985
           * @description                                                                                              // 1986
           * Holds the list of modules which the injector will load before the current module is                       // 1987
           * loaded.                                                                                                   // 1988
           */                                                                                                          // 1989
          requires: requires,                                                                                          // 1990
                                                                                                                       // 1991
          /**                                                                                                          // 1992
           * @ngdoc property                                                                                           // 1993
           * @name angular.Module#name                                                                                 // 1994
           * @module ng                                                                                                // 1995
           *                                                                                                           // 1996
           * @description                                                                                              // 1997
           * Name of the module.                                                                                       // 1998
           */                                                                                                          // 1999
          name: name,                                                                                                  // 2000
                                                                                                                       // 2001
                                                                                                                       // 2002
          /**                                                                                                          // 2003
           * @ngdoc method                                                                                             // 2004
           * @name angular.Module#provider                                                                             // 2005
           * @module ng                                                                                                // 2006
           * @param {string} name service name                                                                         // 2007
           * @param {Function} providerType Construction function for creating new instance of the                     // 2008
           *                                service.                                                                   // 2009
           * @description                                                                                              // 2010
           * See {@link auto.$provide#provider $provide.provider()}.                                                   // 2011
           */                                                                                                          // 2012
          provider: invokeLaterAndSetModuleName('$provide', 'provider'),                                               // 2013
                                                                                                                       // 2014
          /**                                                                                                          // 2015
           * @ngdoc method                                                                                             // 2016
           * @name angular.Module#factory                                                                              // 2017
           * @module ng                                                                                                // 2018
           * @param {string} name service name                                                                         // 2019
           * @param {Function} providerFunction Function for creating new instance of the service.                     // 2020
           * @description                                                                                              // 2021
           * See {@link auto.$provide#factory $provide.factory()}.                                                     // 2022
           */                                                                                                          // 2023
          factory: invokeLaterAndSetModuleName('$provide', 'factory'),                                                 // 2024
                                                                                                                       // 2025
          /**                                                                                                          // 2026
           * @ngdoc method                                                                                             // 2027
           * @name angular.Module#service                                                                              // 2028
           * @module ng                                                                                                // 2029
           * @param {string} name service name                                                                         // 2030
           * @param {Function} constructor A constructor function that will be instantiated.                           // 2031
           * @description                                                                                              // 2032
           * See {@link auto.$provide#service $provide.service()}.                                                     // 2033
           */                                                                                                          // 2034
          service: invokeLaterAndSetModuleName('$provide', 'service'),                                                 // 2035
                                                                                                                       // 2036
          /**                                                                                                          // 2037
           * @ngdoc method                                                                                             // 2038
           * @name angular.Module#value                                                                                // 2039
           * @module ng                                                                                                // 2040
           * @param {string} name service name                                                                         // 2041
           * @param {*} object Service instance object.                                                                // 2042
           * @description                                                                                              // 2043
           * See {@link auto.$provide#value $provide.value()}.                                                         // 2044
           */                                                                                                          // 2045
          value: invokeLater('$provide', 'value'),                                                                     // 2046
                                                                                                                       // 2047
          /**                                                                                                          // 2048
           * @ngdoc method                                                                                             // 2049
           * @name angular.Module#constant                                                                             // 2050
           * @module ng                                                                                                // 2051
           * @param {string} name constant name                                                                        // 2052
           * @param {*} object Constant value.                                                                         // 2053
           * @description                                                                                              // 2054
           * Because the constant are fixed, they get applied before other provide methods.                            // 2055
           * See {@link auto.$provide#constant $provide.constant()}.                                                   // 2056
           */                                                                                                          // 2057
          constant: invokeLater('$provide', 'constant', 'unshift'),                                                    // 2058
                                                                                                                       // 2059
           /**                                                                                                         // 2060
           * @ngdoc method                                                                                             // 2061
           * @name angular.Module#decorator                                                                            // 2062
           * @module ng                                                                                                // 2063
           * @param {string} The name of the service to decorate.                                                      // 2064
           * @param {Function} This function will be invoked when the service needs to be                              // 2065
           *                                    instantiated and should return the decorated service instance.         // 2066
           * @description                                                                                              // 2067
           * See {@link auto.$provide#decorator $provide.decorator()}.                                                 // 2068
           */                                                                                                          // 2069
          decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),                                             // 2070
                                                                                                                       // 2071
          /**                                                                                                          // 2072
           * @ngdoc method                                                                                             // 2073
           * @name angular.Module#animation                                                                            // 2074
           * @module ng                                                                                                // 2075
           * @param {string} name animation name                                                                       // 2076
           * @param {Function} animationFactory Factory function for creating new instance of an                       // 2077
           *                                    animation.                                                             // 2078
           * @description                                                                                              // 2079
           *                                                                                                           // 2080
           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.                              // 2081
           *                                                                                                           // 2082
           *                                                                                                           // 2083
           * Defines an animation hook that can be later used with                                                     // 2084
           * {@link $animate $animate} service and directives that use this service.                                   // 2085
           *                                                                                                           // 2086
           * ```js                                                                                                     // 2087
           * module.animation('.animation-name', function($inject1, $inject2) {                                        // 2088
           *   return {                                                                                                // 2089
           *     eventName : function(element, done) {                                                                 // 2090
           *       //code to run the animation                                                                         // 2091
           *       //once complete, then run done()                                                                    // 2092
           *       return function cancellationFunction(element) {                                                     // 2093
           *         //code to cancel the animation                                                                    // 2094
           *       }                                                                                                   // 2095
           *     }                                                                                                     // 2096
           *   }                                                                                                       // 2097
           * })                                                                                                        // 2098
           * ```                                                                                                       // 2099
           *                                                                                                           // 2100
           * See {@link ng.$animateProvider#register $animateProvider.register()} and                                  // 2101
           * {@link ngAnimate ngAnimate module} for more information.                                                  // 2102
           */                                                                                                          // 2103
          animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),                                      // 2104
                                                                                                                       // 2105
          /**                                                                                                          // 2106
           * @ngdoc method                                                                                             // 2107
           * @name angular.Module#filter                                                                               // 2108
           * @module ng                                                                                                // 2109
           * @param {string} name Filter name - this must be a valid angular expression identifier                     // 2110
           * @param {Function} filterFactory Factory function for creating new instance of filter.                     // 2111
           * @description                                                                                              // 2112
           * See {@link ng.$filterProvider#register $filterProvider.register()}.                                       // 2113
           *                                                                                                           // 2114
           * <div class="alert alert-warning">                                                                         // 2115
           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace        // 2117
           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                   // 2118
           * (`myapp_subsection_filterx`).                                                                             // 2119
           * </div>                                                                                                    // 2120
           */                                                                                                          // 2121
          filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),                                          // 2122
                                                                                                                       // 2123
          /**                                                                                                          // 2124
           * @ngdoc method                                                                                             // 2125
           * @name angular.Module#controller                                                                           // 2126
           * @module ng                                                                                                // 2127
           * @param {string|Object} name Controller name, or an object map of controllers where the                    // 2128
           *    keys are the names and the values are the constructors.                                                // 2129
           * @param {Function} constructor Controller constructor function.                                            // 2130
           * @description                                                                                              // 2131
           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.                               // 2132
           */                                                                                                          // 2133
          controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),                                  // 2134
                                                                                                                       // 2135
          /**                                                                                                          // 2136
           * @ngdoc method                                                                                             // 2137
           * @name angular.Module#directive                                                                            // 2138
           * @module ng                                                                                                // 2139
           * @param {string|Object} name Directive name, or an object map of directives where the                      // 2140
           *    keys are the names and the values are the factories.                                                   // 2141
           * @param {Function} directiveFactory Factory function for creating new instance of                          // 2142
           * directives.                                                                                               // 2143
           * @description                                                                                              // 2144
           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.                                   // 2145
           */                                                                                                          // 2146
          directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),                                     // 2147
                                                                                                                       // 2148
          /**                                                                                                          // 2149
           * @ngdoc method                                                                                             // 2150
           * @name angular.Module#config                                                                               // 2151
           * @module ng                                                                                                // 2152
           * @param {Function} configFn Execute this function on module load. Useful for service                       // 2153
           *    configuration.                                                                                         // 2154
           * @description                                                                                              // 2155
           * Use this method to register work which needs to be performed on module loading.                           // 2156
           * For more about how to configure services, see                                                             // 2157
           * {@link providers#provider-recipe Provider Recipe}.                                                        // 2158
           */                                                                                                          // 2159
          config: config,                                                                                              // 2160
                                                                                                                       // 2161
          /**                                                                                                          // 2162
           * @ngdoc method                                                                                             // 2163
           * @name angular.Module#run                                                                                  // 2164
           * @module ng                                                                                                // 2165
           * @param {Function} initializationFn Execute this function after injector creation.                         // 2166
           *    Useful for application initialization.                                                                 // 2167
           * @description                                                                                              // 2168
           * Use this method to register work which should be performed when the injector is done                      // 2169
           * loading all modules.                                                                                      // 2170
           */                                                                                                          // 2171
          run: function(block) {                                                                                       // 2172
            runBlocks.push(block);                                                                                     // 2173
            return this;                                                                                               // 2174
          }                                                                                                            // 2175
        };                                                                                                             // 2176
                                                                                                                       // 2177
        if (configFn) {                                                                                                // 2178
          config(configFn);                                                                                            // 2179
        }                                                                                                              // 2180
                                                                                                                       // 2181
        return moduleInstance;                                                                                         // 2182
                                                                                                                       // 2183
        /**                                                                                                            // 2184
         * @param {string} provider                                                                                    // 2185
         * @param {string} method                                                                                      // 2186
         * @param {String=} insertMethod                                                                               // 2187
         * @returns {angular.Module}                                                                                   // 2188
         */                                                                                                            // 2189
        function invokeLater(provider, method, insertMethod, queue) {                                                  // 2190
          if (!queue) queue = invokeQueue;                                                                             // 2191
          return function() {                                                                                          // 2192
            queue[insertMethod || 'push']([provider, method, arguments]);                                              // 2193
            return moduleInstance;                                                                                     // 2194
          };                                                                                                           // 2195
        }                                                                                                              // 2196
                                                                                                                       // 2197
        /**                                                                                                            // 2198
         * @param {string} provider                                                                                    // 2199
         * @param {string} method                                                                                      // 2200
         * @returns {angular.Module}                                                                                   // 2201
         */                                                                                                            // 2202
        function invokeLaterAndSetModuleName(provider, method) {                                                       // 2203
          return function(recipeName, factoryFunction) {                                                               // 2204
            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;                   // 2205
            invokeQueue.push([provider, method, arguments]);                                                           // 2206
            return moduleInstance;                                                                                     // 2207
          };                                                                                                           // 2208
        }                                                                                                              // 2209
      });                                                                                                              // 2210
    };                                                                                                                 // 2211
  });                                                                                                                  // 2212
                                                                                                                       // 2213
}                                                                                                                      // 2214
                                                                                                                       // 2215
/* global: toDebugString: true */                                                                                      // 2216
                                                                                                                       // 2217
function serializeObject(obj) {                                                                                        // 2218
  var seen = [];                                                                                                       // 2219
                                                                                                                       // 2220
  return JSON.stringify(obj, function(key, val) {                                                                      // 2221
    val = toJsonReplacer(key, val);                                                                                    // 2222
    if (isObject(val)) {                                                                                               // 2223
                                                                                                                       // 2224
      if (seen.indexOf(val) >= 0) return '<<already seen>>';                                                           // 2225
                                                                                                                       // 2226
      seen.push(val);                                                                                                  // 2227
    }                                                                                                                  // 2228
    return val;                                                                                                        // 2229
  });                                                                                                                  // 2230
}                                                                                                                      // 2231
                                                                                                                       // 2232
function toDebugString(obj) {                                                                                          // 2233
  if (typeof obj === 'function') {                                                                                     // 2234
    return obj.toString().replace(/ \{[\s\S]*$/, '');                                                                  // 2235
  } else if (typeof obj === 'undefined') {                                                                             // 2236
    return 'undefined';                                                                                                // 2237
  } else if (typeof obj !== 'string') {                                                                                // 2238
    return serializeObject(obj);                                                                                       // 2239
  }                                                                                                                    // 2240
  return obj;                                                                                                          // 2241
}                                                                                                                      // 2242
                                                                                                                       // 2243
/* global angularModule: true,                                                                                         // 2244
  version: true,                                                                                                       // 2245
                                                                                                                       // 2246
  $LocaleProvider,                                                                                                     // 2247
  $CompileProvider,                                                                                                    // 2248
                                                                                                                       // 2249
  htmlAnchorDirective,                                                                                                 // 2250
  inputDirective,                                                                                                      // 2251
  inputDirective,                                                                                                      // 2252
  formDirective,                                                                                                       // 2253
  scriptDirective,                                                                                                     // 2254
  selectDirective,                                                                                                     // 2255
  styleDirective,                                                                                                      // 2256
  optionDirective,                                                                                                     // 2257
  ngBindDirective,                                                                                                     // 2258
  ngBindHtmlDirective,                                                                                                 // 2259
  ngBindTemplateDirective,                                                                                             // 2260
  ngClassDirective,                                                                                                    // 2261
  ngClassEvenDirective,                                                                                                // 2262
  ngClassOddDirective,                                                                                                 // 2263
  ngCspDirective,                                                                                                      // 2264
  ngCloakDirective,                                                                                                    // 2265
  ngControllerDirective,                                                                                               // 2266
  ngFormDirective,                                                                                                     // 2267
  ngHideDirective,                                                                                                     // 2268
  ngIfDirective,                                                                                                       // 2269
  ngIncludeDirective,                                                                                                  // 2270
  ngIncludeFillContentDirective,                                                                                       // 2271
  ngInitDirective,                                                                                                     // 2272
  ngNonBindableDirective,                                                                                              // 2273
  ngPluralizeDirective,                                                                                                // 2274
  ngRepeatDirective,                                                                                                   // 2275
  ngShowDirective,                                                                                                     // 2276
  ngStyleDirective,                                                                                                    // 2277
  ngSwitchDirective,                                                                                                   // 2278
  ngSwitchWhenDirective,                                                                                               // 2279
  ngSwitchDefaultDirective,                                                                                            // 2280
  ngOptionsDirective,                                                                                                  // 2281
  ngTranscludeDirective,                                                                                               // 2282
  ngModelDirective,                                                                                                    // 2283
  ngListDirective,                                                                                                     // 2284
  ngChangeDirective,                                                                                                   // 2285
  patternDirective,                                                                                                    // 2286
  patternDirective,                                                                                                    // 2287
  requiredDirective,                                                                                                   // 2288
  requiredDirective,                                                                                                   // 2289
  minlengthDirective,                                                                                                  // 2290
  minlengthDirective,                                                                                                  // 2291
  maxlengthDirective,                                                                                                  // 2292
  maxlengthDirective,                                                                                                  // 2293
  ngValueDirective,                                                                                                    // 2294
  ngModelOptionsDirective,                                                                                             // 2295
  ngAttributeAliasDirectives,                                                                                          // 2296
  ngEventDirectives,                                                                                                   // 2297
                                                                                                                       // 2298
  $AnchorScrollProvider,                                                                                               // 2299
  $AnimateProvider,                                                                                                    // 2300
  $$CoreAnimateQueueProvider,                                                                                          // 2301
  $$CoreAnimateRunnerProvider,                                                                                         // 2302
  $BrowserProvider,                                                                                                    // 2303
  $CacheFactoryProvider,                                                                                               // 2304
  $ControllerProvider,                                                                                                 // 2305
  $DocumentProvider,                                                                                                   // 2306
  $ExceptionHandlerProvider,                                                                                           // 2307
  $FilterProvider,                                                                                                     // 2308
  $InterpolateProvider,                                                                                                // 2309
  $IntervalProvider,                                                                                                   // 2310
  $$HashMapProvider,                                                                                                   // 2311
  $HttpProvider,                                                                                                       // 2312
  $HttpParamSerializerProvider,                                                                                        // 2313
  $HttpParamSerializerJQLikeProvider,                                                                                  // 2314
  $HttpBackendProvider,                                                                                                // 2315
  $LocationProvider,                                                                                                   // 2316
  $LogProvider,                                                                                                        // 2317
  $ParseProvider,                                                                                                      // 2318
  $RootScopeProvider,                                                                                                  // 2319
  $QProvider,                                                                                                          // 2320
  $$QProvider,                                                                                                         // 2321
  $$SanitizeUriProvider,                                                                                               // 2322
  $SceProvider,                                                                                                        // 2323
  $SceDelegateProvider,                                                                                                // 2324
  $SnifferProvider,                                                                                                    // 2325
  $TemplateCacheProvider,                                                                                              // 2326
  $TemplateRequestProvider,                                                                                            // 2327
  $$TestabilityProvider,                                                                                               // 2328
  $TimeoutProvider,                                                                                                    // 2329
  $$RAFProvider,                                                                                                       // 2330
  $$AsyncCallbackProvider,                                                                                             // 2331
  $WindowProvider,                                                                                                     // 2332
  $$jqLiteProvider,                                                                                                    // 2333
  $$CookieReaderProvider                                                                                               // 2334
*/                                                                                                                     // 2335
                                                                                                                       // 2336
                                                                                                                       // 2337
/**                                                                                                                    // 2338
 * @ngdoc object                                                                                                       // 2339
 * @name angular.version                                                                                               // 2340
 * @module ng                                                                                                          // 2341
 * @description                                                                                                        // 2342
 * An object that contains information about the current AngularJS version. This object has the                        // 2343
 * following properties:                                                                                               // 2344
 *                                                                                                                     // 2345
 * - `full` – `{string}` – Full version string, such as "0.9.18".                                                      // 2346
 * - `major` – `{number}` – Major version number, such as "0".                                                         // 2347
 * - `minor` – `{number}` – Minor version number, such as "9".                                                         // 2348
 * - `dot` – `{number}` – Dot version number, such as "18".                                                            // 2349
 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".                                    // 2350
 */                                                                                                                    // 2351
var version = {                                                                                                        // 2352
  full: '1.4.2',    // all of these placeholder strings will be replaced by grunt's                                    // 2353
  major: 1,    // package task                                                                                         // 2354
  minor: 4,                                                                                                            // 2355
  dot: 2,                                                                                                              // 2356
  codeName: 'nebular-readjustment'                                                                                     // 2357
};                                                                                                                     // 2358
                                                                                                                       // 2359
                                                                                                                       // 2360
function publishExternalAPI(angular) {                                                                                 // 2361
  extend(angular, {                                                                                                    // 2362
    'bootstrap': bootstrap,                                                                                            // 2363
    'copy': copy,                                                                                                      // 2364
    'extend': extend,                                                                                                  // 2365
    'merge': merge,                                                                                                    // 2366
    'equals': equals,                                                                                                  // 2367
    'element': jqLite,                                                                                                 // 2368
    'forEach': forEach,                                                                                                // 2369
    'injector': createInjector,                                                                                        // 2370
    'noop': noop,                                                                                                      // 2371
    'bind': bind,                                                                                                      // 2372
    'toJson': toJson,                                                                                                  // 2373
    'fromJson': fromJson,                                                                                              // 2374
    'identity': identity,                                                                                              // 2375
    'isUndefined': isUndefined,                                                                                        // 2376
    'isDefined': isDefined,                                                                                            // 2377
    'isString': isString,                                                                                              // 2378
    'isFunction': isFunction,                                                                                          // 2379
    'isObject': isObject,                                                                                              // 2380
    'isNumber': isNumber,                                                                                              // 2381
    'isElement': isElement,                                                                                            // 2382
    'isArray': isArray,                                                                                                // 2383
    'version': version,                                                                                                // 2384
    'isDate': isDate,                                                                                                  // 2385
    'lowercase': lowercase,                                                                                            // 2386
    'uppercase': uppercase,                                                                                            // 2387
    'callbacks': {counter: 0},                                                                                         // 2388
    'getTestability': getTestability,                                                                                  // 2389
    '$$minErr': minErr,                                                                                                // 2390
    '$$csp': csp,                                                                                                      // 2391
    'reloadWithDebugInfo': reloadWithDebugInfo                                                                         // 2392
  });                                                                                                                  // 2393
                                                                                                                       // 2394
  angularModule = setupModuleLoader(window);                                                                           // 2395
  try {                                                                                                                // 2396
    angularModule('ngLocale');                                                                                         // 2397
  } catch (e) {                                                                                                        // 2398
    angularModule('ngLocale', []).provider('$locale', $LocaleProvider);                                                // 2399
  }                                                                                                                    // 2400
                                                                                                                       // 2401
  angularModule('ng', ['ngLocale'], ['$provide',                                                                       // 2402
    function ngModule($provide) {                                                                                      // 2403
      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.                                // 2404
      $provide.provider({                                                                                              // 2405
        $$sanitizeUri: $$SanitizeUriProvider                                                                           // 2406
      });                                                                                                              // 2407
      $provide.provider('$compile', $CompileProvider).                                                                 // 2408
        directive({                                                                                                    // 2409
            a: htmlAnchorDirective,                                                                                    // 2410
            input: inputDirective,                                                                                     // 2411
            textarea: inputDirective,                                                                                  // 2412
            form: formDirective,                                                                                       // 2413
            script: scriptDirective,                                                                                   // 2414
            select: selectDirective,                                                                                   // 2415
            style: styleDirective,                                                                                     // 2416
            option: optionDirective,                                                                                   // 2417
            ngBind: ngBindDirective,                                                                                   // 2418
            ngBindHtml: ngBindHtmlDirective,                                                                           // 2419
            ngBindTemplate: ngBindTemplateDirective,                                                                   // 2420
            ngClass: ngClassDirective,                                                                                 // 2421
            ngClassEven: ngClassEvenDirective,                                                                         // 2422
            ngClassOdd: ngClassOddDirective,                                                                           // 2423
            ngCloak: ngCloakDirective,                                                                                 // 2424
            ngController: ngControllerDirective,                                                                       // 2425
            ngForm: ngFormDirective,                                                                                   // 2426
            ngHide: ngHideDirective,                                                                                   // 2427
            ngIf: ngIfDirective,                                                                                       // 2428
            ngInclude: ngIncludeDirective,                                                                             // 2429
            ngInit: ngInitDirective,                                                                                   // 2430
            ngNonBindable: ngNonBindableDirective,                                                                     // 2431
            ngPluralize: ngPluralizeDirective,                                                                         // 2432
            ngRepeat: ngRepeatDirective,                                                                               // 2433
            ngShow: ngShowDirective,                                                                                   // 2434
            ngStyle: ngStyleDirective,                                                                                 // 2435
            ngSwitch: ngSwitchDirective,                                                                               // 2436
            ngSwitchWhen: ngSwitchWhenDirective,                                                                       // 2437
            ngSwitchDefault: ngSwitchDefaultDirective,                                                                 // 2438
            ngOptions: ngOptionsDirective,                                                                             // 2439
            ngTransclude: ngTranscludeDirective,                                                                       // 2440
            ngModel: ngModelDirective,                                                                                 // 2441
            ngList: ngListDirective,                                                                                   // 2442
            ngChange: ngChangeDirective,                                                                               // 2443
            pattern: patternDirective,                                                                                 // 2444
            ngPattern: patternDirective,                                                                               // 2445
            required: requiredDirective,                                                                               // 2446
            ngRequired: requiredDirective,                                                                             // 2447
            minlength: minlengthDirective,                                                                             // 2448
            ngMinlength: minlengthDirective,                                                                           // 2449
            maxlength: maxlengthDirective,                                                                             // 2450
            ngMaxlength: maxlengthDirective,                                                                           // 2451
            ngValue: ngValueDirective,                                                                                 // 2452
            ngModelOptions: ngModelOptionsDirective                                                                    // 2453
        }).                                                                                                            // 2454
        directive({                                                                                                    // 2455
          ngInclude: ngIncludeFillContentDirective                                                                     // 2456
        }).                                                                                                            // 2457
        directive(ngAttributeAliasDirectives).                                                                         // 2458
        directive(ngEventDirectives);                                                                                  // 2459
      $provide.provider({                                                                                              // 2460
        $anchorScroll: $AnchorScrollProvider,                                                                          // 2461
        $animate: $AnimateProvider,                                                                                    // 2462
        $$animateQueue: $$CoreAnimateQueueProvider,                                                                    // 2463
        $$AnimateRunner: $$CoreAnimateRunnerProvider,                                                                  // 2464
        $browser: $BrowserProvider,                                                                                    // 2465
        $cacheFactory: $CacheFactoryProvider,                                                                          // 2466
        $controller: $ControllerProvider,                                                                              // 2467
        $document: $DocumentProvider,                                                                                  // 2468
        $exceptionHandler: $ExceptionHandlerProvider,                                                                  // 2469
        $filter: $FilterProvider,                                                                                      // 2470
        $interpolate: $InterpolateProvider,                                                                            // 2471
        $interval: $IntervalProvider,                                                                                  // 2472
        $http: $HttpProvider,                                                                                          // 2473
        $httpParamSerializer: $HttpParamSerializerProvider,                                                            // 2474
        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,                                                // 2475
        $httpBackend: $HttpBackendProvider,                                                                            // 2476
        $location: $LocationProvider,                                                                                  // 2477
        $log: $LogProvider,                                                                                            // 2478
        $parse: $ParseProvider,                                                                                        // 2479
        $rootScope: $RootScopeProvider,                                                                                // 2480
        $q: $QProvider,                                                                                                // 2481
        $$q: $$QProvider,                                                                                              // 2482
        $sce: $SceProvider,                                                                                            // 2483
        $sceDelegate: $SceDelegateProvider,                                                                            // 2484
        $sniffer: $SnifferProvider,                                                                                    // 2485
        $templateCache: $TemplateCacheProvider,                                                                        // 2486
        $templateRequest: $TemplateRequestProvider,                                                                    // 2487
        $$testability: $$TestabilityProvider,                                                                          // 2488
        $timeout: $TimeoutProvider,                                                                                    // 2489
        $window: $WindowProvider,                                                                                      // 2490
        $$rAF: $$RAFProvider,                                                                                          // 2491
        $$asyncCallback: $$AsyncCallbackProvider,                                                                      // 2492
        $$jqLite: $$jqLiteProvider,                                                                                    // 2493
        $$HashMap: $$HashMapProvider,                                                                                  // 2494
        $$cookieReader: $$CookieReaderProvider                                                                         // 2495
      });                                                                                                              // 2496
    }                                                                                                                  // 2497
  ]);                                                                                                                  // 2498
}                                                                                                                      // 2499
                                                                                                                       // 2500
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 2501
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 2502
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 2503
 *          An approval from 2 Core members with history of modifying      *                                           // 2504
 *                         this file is required.                          *                                           // 2505
 *                                                                         *                                           // 2506
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 2507
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 2508
 *     Or gives undesired access to variables likes document or window?    *                                           // 2509
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 2510
                                                                                                                       // 2511
/* global JQLitePrototype: true,                                                                                       // 2512
  addEventListenerFn: true,                                                                                            // 2513
  removeEventListenerFn: true,                                                                                         // 2514
  BOOLEAN_ATTR: true,                                                                                                  // 2515
  ALIASED_ATTR: true,                                                                                                  // 2516
*/                                                                                                                     // 2517
                                                                                                                       // 2518
//////////////////////////////////                                                                                     // 2519
//JQLite                                                                                                               // 2520
//////////////////////////////////                                                                                     // 2521
                                                                                                                       // 2522
/**                                                                                                                    // 2523
 * @ngdoc function                                                                                                     // 2524
 * @name angular.element                                                                                               // 2525
 * @module ng                                                                                                          // 2526
 * @kind function                                                                                                      // 2527
 *                                                                                                                     // 2528
 * @description                                                                                                        // 2529
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.                                    // 2530
 *                                                                                                                     // 2531
 * If jQuery is available, `angular.element` is an alias for the                                                       // 2532
 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`                     // 2533
 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."                                 // 2534
 *                                                                                                                     // 2535
 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows                      // 2536
 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most                // 2537
 * commonly needed functionality with the goal of having a very small footprint.</div>                                 // 2538
 *                                                                                                                     // 2539
 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file.                                           // 2540
 *                                                                                                                     // 2541
 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or                    // 2542
 * jqLite; they are never raw DOM references.</div>                                                                    // 2543
 *                                                                                                                     // 2544
 * ## Angular's jqLite                                                                                                 // 2545
 * jqLite provides only the following jQuery methods:                                                                  // 2546
 *                                                                                                                     // 2547
 * - [`addClass()`](http://api.jquery.com/addClass/)                                                                   // 2548
 * - [`after()`](http://api.jquery.com/after/)                                                                         // 2549
 * - [`append()`](http://api.jquery.com/append/)                                                                       // 2550
 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters                                // 2551
 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData                     // 2552
 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors                                      // 2553
 * - [`clone()`](http://api.jquery.com/clone/)                                                                         // 2554
 * - [`contents()`](http://api.jquery.com/contents/)                                                                   // 2555
 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`. As a setter, does not convert numbers to strings or append 'px'.
 * - [`data()`](http://api.jquery.com/data/)                                                                           // 2557
 * - [`detach()`](http://api.jquery.com/detach/)                                                                       // 2558
 * - [`empty()`](http://api.jquery.com/empty/)                                                                         // 2559
 * - [`eq()`](http://api.jquery.com/eq/)                                                                               // 2560
 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name                                          // 2561
 * - [`hasClass()`](http://api.jquery.com/hasClass/)                                                                   // 2562
 * - [`html()`](http://api.jquery.com/html/)                                                                           // 2563
 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors                                              // 2564
 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData                         // 2565
 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces or selectors                                  // 2566
 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors                                  // 2567
 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors                                          // 2568
 * - [`prepend()`](http://api.jquery.com/prepend/)                                                                     // 2569
 * - [`prop()`](http://api.jquery.com/prop/)                                                                           // 2570
 * - [`ready()`](http://api.jquery.com/ready/)                                                                         // 2571
 * - [`remove()`](http://api.jquery.com/remove/)                                                                       // 2572
 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)                                                               // 2573
 * - [`removeClass()`](http://api.jquery.com/removeClass/)                                                             // 2574
 * - [`removeData()`](http://api.jquery.com/removeData/)                                                               // 2575
 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)                                                             // 2576
 * - [`text()`](http://api.jquery.com/text/)                                                                           // 2577
 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)                                                             // 2578
 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.            // 2579
 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces                                         // 2580
 * - [`val()`](http://api.jquery.com/val/)                                                                             // 2581
 * - [`wrap()`](http://api.jquery.com/wrap/)                                                                           // 2582
 *                                                                                                                     // 2583
 * ## jQuery/jqLite Extras                                                                                             // 2584
 * Angular also provides the following additional methods and events to both jQuery and jqLite:                        // 2585
 *                                                                                                                     // 2586
 * ### Events                                                                                                          // 2587
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event                   // 2588
 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM                  // 2589
 *    element before it is removed.                                                                                    // 2590
 *                                                                                                                     // 2591
 * ### Methods                                                                                                         // 2592
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default                    // 2593
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as                       // 2594
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.                          // 2595
 *   `'ngModel'`).                                                                                                     // 2596
 * - `injector()` - retrieves the injector of the current element or its parent.                                       // 2597
 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current                                        // 2598
 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to                       // 2599
 *   be enabled.                                                                                                       // 2600
 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the      // 2601
 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate  // 2602
 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.                           // 2603
 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.                                  // 2604
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top                      // 2605
 *   parent element is reached.                                                                                        // 2606
 *                                                                                                                     // 2607
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.                             // 2608
 * @returns {Object} jQuery object.                                                                                    // 2609
 */                                                                                                                    // 2610
                                                                                                                       // 2611
JQLite.expando = 'ng339';                                                                                              // 2612
                                                                                                                       // 2613
var jqCache = JQLite.cache = {},                                                                                       // 2614
    jqId = 1,                                                                                                          // 2615
    addEventListenerFn = function(element, type, fn) {                                                                 // 2616
      element.addEventListener(type, fn, false);                                                                       // 2617
    },                                                                                                                 // 2618
    removeEventListenerFn = function(element, type, fn) {                                                              // 2619
      element.removeEventListener(type, fn, false);                                                                    // 2620
    };                                                                                                                 // 2621
                                                                                                                       // 2622
/*                                                                                                                     // 2623
 * !!! This is an undocumented "private" function !!!                                                                  // 2624
 */                                                                                                                    // 2625
JQLite._data = function(node) {                                                                                        // 2626
  //jQuery always returns an object on cache miss                                                                      // 2627
  return this.cache[node[this.expando]] || {};                                                                         // 2628
};                                                                                                                     // 2629
                                                                                                                       // 2630
function jqNextId() { return ++jqId; }                                                                                 // 2631
                                                                                                                       // 2632
                                                                                                                       // 2633
var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;                                                                          // 2634
var MOZ_HACK_REGEXP = /^moz([A-Z])/;                                                                                   // 2635
var MOUSE_EVENT_MAP= { mouseleave: "mouseout", mouseenter: "mouseover"};                                               // 2636
var jqLiteMinErr = minErr('jqLite');                                                                                   // 2637
                                                                                                                       // 2638
/**                                                                                                                    // 2639
 * Converts snake_case to camelCase.                                                                                   // 2640
 * Also there is special case for Moz prefix starting with upper case letter.                                          // 2641
 * @param name Name to normalize                                                                                       // 2642
 */                                                                                                                    // 2643
function camelCase(name) {                                                                                             // 2644
  return name.                                                                                                         // 2645
    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {                                             // 2646
      return offset ? letter.toUpperCase() : letter;                                                                   // 2647
    }).                                                                                                                // 2648
    replace(MOZ_HACK_REGEXP, 'Moz$1');                                                                                 // 2649
}                                                                                                                      // 2650
                                                                                                                       // 2651
var SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;                                                                  // 2652
var HTML_REGEXP = /<|&#?\w+;/;                                                                                         // 2653
var TAG_NAME_REGEXP = /<([\w:]+)/;                                                                                     // 2654
var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;                      // 2655
                                                                                                                       // 2656
var wrapMap = {                                                                                                        // 2657
  'option': [1, '<select multiple="multiple">', '</select>'],                                                          // 2658
                                                                                                                       // 2659
  'thead': [1, '<table>', '</table>'],                                                                                 // 2660
  'col': [2, '<table><colgroup>', '</colgroup></table>'],                                                              // 2661
  'tr': [2, '<table><tbody>', '</tbody></table>'],                                                                     // 2662
  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],                                                            // 2663
  '_default': [0, "", ""]                                                                                              // 2664
};                                                                                                                     // 2665
                                                                                                                       // 2666
wrapMap.optgroup = wrapMap.option;                                                                                     // 2667
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;                                    // 2668
wrapMap.th = wrapMap.td;                                                                                               // 2669
                                                                                                                       // 2670
                                                                                                                       // 2671
function jqLiteIsTextNode(html) {                                                                                      // 2672
  return !HTML_REGEXP.test(html);                                                                                      // 2673
}                                                                                                                      // 2674
                                                                                                                       // 2675
function jqLiteAcceptsData(node) {                                                                                     // 2676
  // The window object can accept data but has no nodeType                                                             // 2677
  // Otherwise we are only interested in elements (1) and documents (9)                                                // 2678
  var nodeType = node.nodeType;                                                                                        // 2679
  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;                               // 2680
}                                                                                                                      // 2681
                                                                                                                       // 2682
function jqLiteHasData(node) {                                                                                         // 2683
  for (var key in jqCache[node.ng339]) {                                                                               // 2684
    return true;                                                                                                       // 2685
  }                                                                                                                    // 2686
  return false;                                                                                                        // 2687
}                                                                                                                      // 2688
                                                                                                                       // 2689
function jqLiteBuildFragment(html, context) {                                                                          // 2690
  var tmp, tag, wrap,                                                                                                  // 2691
      fragment = context.createDocumentFragment(),                                                                     // 2692
      nodes = [], i;                                                                                                   // 2693
                                                                                                                       // 2694
  if (jqLiteIsTextNode(html)) {                                                                                        // 2695
    // Convert non-html into a text node                                                                               // 2696
    nodes.push(context.createTextNode(html));                                                                          // 2697
  } else {                                                                                                             // 2698
    // Convert html into DOM nodes                                                                                     // 2699
    tmp = tmp || fragment.appendChild(context.createElement("div"));                                                   // 2700
    tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();                                                   // 2701
    wrap = wrapMap[tag] || wrapMap._default;                                                                           // 2702
    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];                                   // 2703
                                                                                                                       // 2704
    // Descend through wrappers to the right content                                                                   // 2705
    i = wrap[0];                                                                                                       // 2706
    while (i--) {                                                                                                      // 2707
      tmp = tmp.lastChild;                                                                                             // 2708
    }                                                                                                                  // 2709
                                                                                                                       // 2710
    nodes = concat(nodes, tmp.childNodes);                                                                             // 2711
                                                                                                                       // 2712
    tmp = fragment.firstChild;                                                                                         // 2713
    tmp.textContent = "";                                                                                              // 2714
  }                                                                                                                    // 2715
                                                                                                                       // 2716
  // Remove wrapper from fragment                                                                                      // 2717
  fragment.textContent = "";                                                                                           // 2718
  fragment.innerHTML = ""; // Clear inner HTML                                                                         // 2719
  forEach(nodes, function(node) {                                                                                      // 2720
    fragment.appendChild(node);                                                                                        // 2721
  });                                                                                                                  // 2722
                                                                                                                       // 2723
  return fragment;                                                                                                     // 2724
}                                                                                                                      // 2725
                                                                                                                       // 2726
function jqLiteParseHTML(html, context) {                                                                              // 2727
  context = context || document;                                                                                       // 2728
  var parsed;                                                                                                          // 2729
                                                                                                                       // 2730
  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {                                                                       // 2731
    return [context.createElement(parsed[1])];                                                                         // 2732
  }                                                                                                                    // 2733
                                                                                                                       // 2734
  if ((parsed = jqLiteBuildFragment(html, context))) {                                                                 // 2735
    return parsed.childNodes;                                                                                          // 2736
  }                                                                                                                    // 2737
                                                                                                                       // 2738
  return [];                                                                                                           // 2739
}                                                                                                                      // 2740
                                                                                                                       // 2741
/////////////////////////////////////////////                                                                          // 2742
function JQLite(element) {                                                                                             // 2743
  if (element instanceof JQLite) {                                                                                     // 2744
    return element;                                                                                                    // 2745
  }                                                                                                                    // 2746
                                                                                                                       // 2747
  var argIsString;                                                                                                     // 2748
                                                                                                                       // 2749
  if (isString(element)) {                                                                                             // 2750
    element = trim(element);                                                                                           // 2751
    argIsString = true;                                                                                                // 2752
  }                                                                                                                    // 2753
  if (!(this instanceof JQLite)) {                                                                                     // 2754
    if (argIsString && element.charAt(0) != '<') {                                                                     // 2755
      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
    }                                                                                                                  // 2757
    return new JQLite(element);                                                                                        // 2758
  }                                                                                                                    // 2759
                                                                                                                       // 2760
  if (argIsString) {                                                                                                   // 2761
    jqLiteAddNodes(this, jqLiteParseHTML(element));                                                                    // 2762
  } else {                                                                                                             // 2763
    jqLiteAddNodes(this, element);                                                                                     // 2764
  }                                                                                                                    // 2765
}                                                                                                                      // 2766
                                                                                                                       // 2767
function jqLiteClone(element) {                                                                                        // 2768
  return element.cloneNode(true);                                                                                      // 2769
}                                                                                                                      // 2770
                                                                                                                       // 2771
function jqLiteDealoc(element, onlyDescendants) {                                                                      // 2772
  if (!onlyDescendants) jqLiteRemoveData(element);                                                                     // 2773
                                                                                                                       // 2774
  if (element.querySelectorAll) {                                                                                      // 2775
    var descendants = element.querySelectorAll('*');                                                                   // 2776
    for (var i = 0, l = descendants.length; i < l; i++) {                                                              // 2777
      jqLiteRemoveData(descendants[i]);                                                                                // 2778
    }                                                                                                                  // 2779
  }                                                                                                                    // 2780
}                                                                                                                      // 2781
                                                                                                                       // 2782
function jqLiteOff(element, type, fn, unsupported) {                                                                   // 2783
  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');  // 2784
                                                                                                                       // 2785
  var expandoStore = jqLiteExpandoStore(element);                                                                      // 2786
  var events = expandoStore && expandoStore.events;                                                                    // 2787
  var handle = expandoStore && expandoStore.handle;                                                                    // 2788
                                                                                                                       // 2789
  if (!handle) return; //no listeners registered                                                                       // 2790
                                                                                                                       // 2791
  if (!type) {                                                                                                         // 2792
    for (type in events) {                                                                                             // 2793
      if (type !== '$destroy') {                                                                                       // 2794
        removeEventListenerFn(element, type, handle);                                                                  // 2795
      }                                                                                                                // 2796
      delete events[type];                                                                                             // 2797
    }                                                                                                                  // 2798
  } else {                                                                                                             // 2799
    forEach(type.split(' '), function(type) {                                                                          // 2800
      if (isDefined(fn)) {                                                                                             // 2801
        var listenerFns = events[type];                                                                                // 2802
        arrayRemove(listenerFns || [], fn);                                                                            // 2803
        if (listenerFns && listenerFns.length > 0) {                                                                   // 2804
          return;                                                                                                      // 2805
        }                                                                                                              // 2806
      }                                                                                                                // 2807
                                                                                                                       // 2808
      removeEventListenerFn(element, type, handle);                                                                    // 2809
      delete events[type];                                                                                             // 2810
    });                                                                                                                // 2811
  }                                                                                                                    // 2812
}                                                                                                                      // 2813
                                                                                                                       // 2814
function jqLiteRemoveData(element, name) {                                                                             // 2815
  var expandoId = element.ng339;                                                                                       // 2816
  var expandoStore = expandoId && jqCache[expandoId];                                                                  // 2817
                                                                                                                       // 2818
  if (expandoStore) {                                                                                                  // 2819
    if (name) {                                                                                                        // 2820
      delete expandoStore.data[name];                                                                                  // 2821
      return;                                                                                                          // 2822
    }                                                                                                                  // 2823
                                                                                                                       // 2824
    if (expandoStore.handle) {                                                                                         // 2825
      if (expandoStore.events.$destroy) {                                                                              // 2826
        expandoStore.handle({}, '$destroy');                                                                           // 2827
      }                                                                                                                // 2828
      jqLiteOff(element);                                                                                              // 2829
    }                                                                                                                  // 2830
    delete jqCache[expandoId];                                                                                         // 2831
    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it                               // 2832
  }                                                                                                                    // 2833
}                                                                                                                      // 2834
                                                                                                                       // 2835
                                                                                                                       // 2836
function jqLiteExpandoStore(element, createIfNecessary) {                                                              // 2837
  var expandoId = element.ng339,                                                                                       // 2838
      expandoStore = expandoId && jqCache[expandoId];                                                                  // 2839
                                                                                                                       // 2840
  if (createIfNecessary && !expandoStore) {                                                                            // 2841
    element.ng339 = expandoId = jqNextId();                                                                            // 2842
    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};                                     // 2843
  }                                                                                                                    // 2844
                                                                                                                       // 2845
  return expandoStore;                                                                                                 // 2846
}                                                                                                                      // 2847
                                                                                                                       // 2848
                                                                                                                       // 2849
function jqLiteData(element, key, value) {                                                                             // 2850
  if (jqLiteAcceptsData(element)) {                                                                                    // 2851
                                                                                                                       // 2852
    var isSimpleSetter = isDefined(value);                                                                             // 2853
    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);                                                     // 2854
    var massGetter = !key;                                                                                             // 2855
    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);                                                   // 2856
    var data = expandoStore && expandoStore.data;                                                                      // 2857
                                                                                                                       // 2858
    if (isSimpleSetter) { // data('key', value)                                                                        // 2859
      data[key] = value;                                                                                               // 2860
    } else {                                                                                                           // 2861
      if (massGetter) {  // data()                                                                                     // 2862
        return data;                                                                                                   // 2863
      } else {                                                                                                         // 2864
        if (isSimpleGetter) { // data('key')                                                                           // 2865
          // don't force creation of expandoStore if it doesn't exist yet                                              // 2866
          return data && data[key];                                                                                    // 2867
        } else { // mass-setter: data({key1: val1, key2: val2})                                                        // 2868
          extend(data, key);                                                                                           // 2869
        }                                                                                                              // 2870
      }                                                                                                                // 2871
    }                                                                                                                  // 2872
  }                                                                                                                    // 2873
}                                                                                                                      // 2874
                                                                                                                       // 2875
function jqLiteHasClass(element, selector) {                                                                           // 2876
  if (!element.getAttribute) return false;                                                                             // 2877
  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").                                 // 2878
      indexOf(" " + selector + " ") > -1);                                                                             // 2879
}                                                                                                                      // 2880
                                                                                                                       // 2881
function jqLiteRemoveClass(element, cssClasses) {                                                                      // 2882
  if (cssClasses && element.setAttribute) {                                                                            // 2883
    forEach(cssClasses.split(' '), function(cssClass) {                                                                // 2884
      element.setAttribute('class', trim(                                                                              // 2885
          (" " + (element.getAttribute('class') || '') + " ")                                                          // 2886
          .replace(/[\n\t]/g, " ")                                                                                     // 2887
          .replace(" " + trim(cssClass) + " ", " "))                                                                   // 2888
      );                                                                                                               // 2889
    });                                                                                                                // 2890
  }                                                                                                                    // 2891
}                                                                                                                      // 2892
                                                                                                                       // 2893
function jqLiteAddClass(element, cssClasses) {                                                                         // 2894
  if (cssClasses && element.setAttribute) {                                                                            // 2895
    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')                                          // 2896
                            .replace(/[\n\t]/g, " ");                                                                  // 2897
                                                                                                                       // 2898
    forEach(cssClasses.split(' '), function(cssClass) {                                                                // 2899
      cssClass = trim(cssClass);                                                                                       // 2900
      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {                                                      // 2901
        existingClasses += cssClass + ' ';                                                                             // 2902
      }                                                                                                                // 2903
    });                                                                                                                // 2904
                                                                                                                       // 2905
    element.setAttribute('class', trim(existingClasses));                                                              // 2906
  }                                                                                                                    // 2907
}                                                                                                                      // 2908
                                                                                                                       // 2909
                                                                                                                       // 2910
function jqLiteAddNodes(root, elements) {                                                                              // 2911
  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.                                                   // 2912
                                                                                                                       // 2913
  if (elements) {                                                                                                      // 2914
                                                                                                                       // 2915
    // if a Node (the most common case)                                                                                // 2916
    if (elements.nodeType) {                                                                                           // 2917
      root[root.length++] = elements;                                                                                  // 2918
    } else {                                                                                                           // 2919
      var length = elements.length;                                                                                    // 2920
                                                                                                                       // 2921
      // if an Array or NodeList and not a Window                                                                      // 2922
      if (typeof length === 'number' && elements.window !== elements) {                                                // 2923
        if (length) {                                                                                                  // 2924
          for (var i = 0; i < length; i++) {                                                                           // 2925
            root[root.length++] = elements[i];                                                                         // 2926
          }                                                                                                            // 2927
        }                                                                                                              // 2928
      } else {                                                                                                         // 2929
        root[root.length++] = elements;                                                                                // 2930
      }                                                                                                                // 2931
    }                                                                                                                  // 2932
  }                                                                                                                    // 2933
}                                                                                                                      // 2934
                                                                                                                       // 2935
                                                                                                                       // 2936
function jqLiteController(element, name) {                                                                             // 2937
  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');                                  // 2938
}                                                                                                                      // 2939
                                                                                                                       // 2940
function jqLiteInheritedData(element, name, value) {                                                                   // 2941
  // if element is the document object work with the html element instead                                              // 2942
  // this makes $(document).scope() possible                                                                           // 2943
  if (element.nodeType == NODE_TYPE_DOCUMENT) {                                                                        // 2944
    element = element.documentElement;                                                                                 // 2945
  }                                                                                                                    // 2946
  var names = isArray(name) ? name : [name];                                                                           // 2947
                                                                                                                       // 2948
  while (element) {                                                                                                    // 2949
    for (var i = 0, ii = names.length; i < ii; i++) {                                                                  // 2950
      if ((value = jqLite.data(element, names[i])) !== undefined) return value;                                        // 2951
    }                                                                                                                  // 2952
                                                                                                                       // 2953
    // If dealing with a document fragment node with a host element, and no parent, use the host                       // 2954
    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM                     // 2955
    // to lookup parent controllers.                                                                                   // 2956
    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);                // 2957
  }                                                                                                                    // 2958
}                                                                                                                      // 2959
                                                                                                                       // 2960
function jqLiteEmpty(element) {                                                                                        // 2961
  jqLiteDealoc(element, true);                                                                                         // 2962
  while (element.firstChild) {                                                                                         // 2963
    element.removeChild(element.firstChild);                                                                           // 2964
  }                                                                                                                    // 2965
}                                                                                                                      // 2966
                                                                                                                       // 2967
function jqLiteRemove(element, keepData) {                                                                             // 2968
  if (!keepData) jqLiteDealoc(element);                                                                                // 2969
  var parent = element.parentNode;                                                                                     // 2970
  if (parent) parent.removeChild(element);                                                                             // 2971
}                                                                                                                      // 2972
                                                                                                                       // 2973
                                                                                                                       // 2974
function jqLiteDocumentLoaded(action, win) {                                                                           // 2975
  win = win || window;                                                                                                 // 2976
  if (win.document.readyState === 'complete') {                                                                        // 2977
    // Force the action to be run async for consistent behaviour                                                       // 2978
    // from the action's point of view                                                                                 // 2979
    // i.e. it will definitely not be in a $apply                                                                      // 2980
    win.setTimeout(action);                                                                                            // 2981
  } else {                                                                                                             // 2982
    // No need to unbind this handler as load is only ever called once                                                 // 2983
    jqLite(win).on('load', action);                                                                                    // 2984
  }                                                                                                                    // 2985
}                                                                                                                      // 2986
                                                                                                                       // 2987
//////////////////////////////////////////                                                                             // 2988
// Functions which are declared directly.                                                                              // 2989
//////////////////////////////////////////                                                                             // 2990
var JQLitePrototype = JQLite.prototype = {                                                                             // 2991
  ready: function(fn) {                                                                                                // 2992
    var fired = false;                                                                                                 // 2993
                                                                                                                       // 2994
    function trigger() {                                                                                               // 2995
      if (fired) return;                                                                                               // 2996
      fired = true;                                                                                                    // 2997
      fn();                                                                                                            // 2998
    }                                                                                                                  // 2999
                                                                                                                       // 3000
    // check if document is already loaded                                                                             // 3001
    if (document.readyState === 'complete') {                                                                          // 3002
      setTimeout(trigger);                                                                                             // 3003
    } else {                                                                                                           // 3004
      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9                                       // 3005
      // we can not use jqLite since we are not done loading and jQuery could be loaded later.                         // 3006
      // jshint -W064                                                                                                  // 3007
      JQLite(window).on('load', trigger); // fallback to window.onload for others                                      // 3008
      // jshint +W064                                                                                                  // 3009
    }                                                                                                                  // 3010
  },                                                                                                                   // 3011
  toString: function() {                                                                                               // 3012
    var value = [];                                                                                                    // 3013
    forEach(this, function(e) { value.push('' + e);});                                                                 // 3014
    return '[' + value.join(', ') + ']';                                                                               // 3015
  },                                                                                                                   // 3016
                                                                                                                       // 3017
  eq: function(index) {                                                                                                // 3018
      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);                                   // 3019
  },                                                                                                                   // 3020
                                                                                                                       // 3021
  length: 0,                                                                                                           // 3022
  push: push,                                                                                                          // 3023
  sort: [].sort,                                                                                                       // 3024
  splice: [].splice                                                                                                    // 3025
};                                                                                                                     // 3026
                                                                                                                       // 3027
//////////////////////////////////////////                                                                             // 3028
// Functions iterating getter/setters.                                                                                 // 3029
// these functions return self on setter and                                                                           // 3030
// value on get.                                                                                                       // 3031
//////////////////////////////////////////                                                                             // 3032
var BOOLEAN_ATTR = {};                                                                                                 // 3033
forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {                      // 3034
  BOOLEAN_ATTR[lowercase(value)] = value;                                                                              // 3035
});                                                                                                                    // 3036
var BOOLEAN_ELEMENTS = {};                                                                                             // 3037
forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {                               // 3038
  BOOLEAN_ELEMENTS[value] = true;                                                                                      // 3039
});                                                                                                                    // 3040
var ALIASED_ATTR = {                                                                                                   // 3041
  'ngMinlength': 'minlength',                                                                                          // 3042
  'ngMaxlength': 'maxlength',                                                                                          // 3043
  'ngMin': 'min',                                                                                                      // 3044
  'ngMax': 'max',                                                                                                      // 3045
  'ngPattern': 'pattern'                                                                                               // 3046
};                                                                                                                     // 3047
                                                                                                                       // 3048
function getBooleanAttrName(element, name) {                                                                           // 3049
  // check dom last since we will most likely fail on name                                                             // 3050
  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];                                                                  // 3051
                                                                                                                       // 3052
  // booleanAttr is here twice to minimize DOM access                                                                  // 3053
  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;                                           // 3054
}                                                                                                                      // 3055
                                                                                                                       // 3056
function getAliasedAttrName(element, name) {                                                                           // 3057
  var nodeName = element.nodeName;                                                                                     // 3058
  return (nodeName === 'INPUT' || nodeName === 'TEXTAREA') && ALIASED_ATTR[name];                                      // 3059
}                                                                                                                      // 3060
                                                                                                                       // 3061
forEach({                                                                                                              // 3062
  data: jqLiteData,                                                                                                    // 3063
  removeData: jqLiteRemoveData,                                                                                        // 3064
  hasData: jqLiteHasData                                                                                               // 3065
}, function(fn, name) {                                                                                                // 3066
  JQLite[name] = fn;                                                                                                   // 3067
});                                                                                                                    // 3068
                                                                                                                       // 3069
forEach({                                                                                                              // 3070
  data: jqLiteData,                                                                                                    // 3071
  inheritedData: jqLiteInheritedData,                                                                                  // 3072
                                                                                                                       // 3073
  scope: function(element) {                                                                                           // 3074
    // Can't use jqLiteData here directly so we stay compatible with jQuery!                                           // 3075
    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
  },                                                                                                                   // 3077
                                                                                                                       // 3078
  isolateScope: function(element) {                                                                                    // 3079
    // Can't use jqLiteData here directly so we stay compatible with jQuery!                                           // 3080
    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');                   // 3081
  },                                                                                                                   // 3082
                                                                                                                       // 3083
  controller: jqLiteController,                                                                                        // 3084
                                                                                                                       // 3085
  injector: function(element) {                                                                                        // 3086
    return jqLiteInheritedData(element, '$injector');                                                                  // 3087
  },                                                                                                                   // 3088
                                                                                                                       // 3089
  removeAttr: function(element, name) {                                                                                // 3090
    element.removeAttribute(name);                                                                                     // 3091
  },                                                                                                                   // 3092
                                                                                                                       // 3093
  hasClass: jqLiteHasClass,                                                                                            // 3094
                                                                                                                       // 3095
  css: function(element, name, value) {                                                                                // 3096
    name = camelCase(name);                                                                                            // 3097
                                                                                                                       // 3098
    if (isDefined(value)) {                                                                                            // 3099
      element.style[name] = value;                                                                                     // 3100
    } else {                                                                                                           // 3101
      return element.style[name];                                                                                      // 3102
    }                                                                                                                  // 3103
  },                                                                                                                   // 3104
                                                                                                                       // 3105
  attr: function(element, name, value) {                                                                               // 3106
    var nodeType = element.nodeType;                                                                                   // 3107
    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {           // 3108
      return;                                                                                                          // 3109
    }                                                                                                                  // 3110
    var lowercasedName = lowercase(name);                                                                              // 3111
    if (BOOLEAN_ATTR[lowercasedName]) {                                                                                // 3112
      if (isDefined(value)) {                                                                                          // 3113
        if (!!value) {                                                                                                 // 3114
          element[name] = true;                                                                                        // 3115
          element.setAttribute(name, lowercasedName);                                                                  // 3116
        } else {                                                                                                       // 3117
          element[name] = false;                                                                                       // 3118
          element.removeAttribute(lowercasedName);                                                                     // 3119
        }                                                                                                              // 3120
      } else {                                                                                                         // 3121
        return (element[name] ||                                                                                       // 3122
                 (element.attributes.getNamedItem(name) || noop).specified)                                            // 3123
               ? lowercasedName                                                                                        // 3124
               : undefined;                                                                                            // 3125
      }                                                                                                                // 3126
    } else if (isDefined(value)) {                                                                                     // 3127
      element.setAttribute(name, value);                                                                               // 3128
    } else if (element.getAttribute) {                                                                                 // 3129
      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code                            // 3130
      // some elements (e.g. Document) don't have get attribute, so return undefined                                   // 3131
      var ret = element.getAttribute(name, 2);                                                                         // 3132
      // normalize non-existing attributes to undefined (as jQuery)                                                    // 3133
      return ret === null ? undefined : ret;                                                                           // 3134
    }                                                                                                                  // 3135
  },                                                                                                                   // 3136
                                                                                                                       // 3137
  prop: function(element, name, value) {                                                                               // 3138
    if (isDefined(value)) {                                                                                            // 3139
      element[name] = value;                                                                                           // 3140
    } else {                                                                                                           // 3141
      return element[name];                                                                                            // 3142
    }                                                                                                                  // 3143
  },                                                                                                                   // 3144
                                                                                                                       // 3145
  text: (function() {                                                                                                  // 3146
    getText.$dv = '';                                                                                                  // 3147
    return getText;                                                                                                    // 3148
                                                                                                                       // 3149
    function getText(element, value) {                                                                                 // 3150
      if (isUndefined(value)) {                                                                                        // 3151
        var nodeType = element.nodeType;                                                                               // 3152
        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';             // 3153
      }                                                                                                                // 3154
      element.textContent = value;                                                                                     // 3155
    }                                                                                                                  // 3156
  })(),                                                                                                                // 3157
                                                                                                                       // 3158
  val: function(element, value) {                                                                                      // 3159
    if (isUndefined(value)) {                                                                                          // 3160
      if (element.multiple && nodeName_(element) === 'select') {                                                       // 3161
        var result = [];                                                                                               // 3162
        forEach(element.options, function(option) {                                                                    // 3163
          if (option.selected) {                                                                                       // 3164
            result.push(option.value || option.text);                                                                  // 3165
          }                                                                                                            // 3166
        });                                                                                                            // 3167
        return result.length === 0 ? null : result;                                                                    // 3168
      }                                                                                                                // 3169
      return element.value;                                                                                            // 3170
    }                                                                                                                  // 3171
    element.value = value;                                                                                             // 3172
  },                                                                                                                   // 3173
                                                                                                                       // 3174
  html: function(element, value) {                                                                                     // 3175
    if (isUndefined(value)) {                                                                                          // 3176
      return element.innerHTML;                                                                                        // 3177
    }                                                                                                                  // 3178
    jqLiteDealoc(element, true);                                                                                       // 3179
    element.innerHTML = value;                                                                                         // 3180
  },                                                                                                                   // 3181
                                                                                                                       // 3182
  empty: jqLiteEmpty                                                                                                   // 3183
}, function(fn, name) {                                                                                                // 3184
  /**                                                                                                                  // 3185
   * Properties: writes return selection, reads return first value                                                     // 3186
   */                                                                                                                  // 3187
  JQLite.prototype[name] = function(arg1, arg2) {                                                                      // 3188
    var i, key;                                                                                                        // 3189
    var nodeCount = this.length;                                                                                       // 3190
                                                                                                                       // 3191
    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it                   // 3192
    // in a way that survives minification.                                                                            // 3193
    // jqLiteEmpty takes no arguments but is a setter.                                                                 // 3194
    if (fn !== jqLiteEmpty &&                                                                                          // 3195
        (((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2) === undefined)) {      // 3196
      if (isObject(arg1)) {                                                                                            // 3197
                                                                                                                       // 3198
        // we are a write, but the object properties are the key/values                                                // 3199
        for (i = 0; i < nodeCount; i++) {                                                                              // 3200
          if (fn === jqLiteData) {                                                                                     // 3201
            // data() takes the whole object in jQuery                                                                 // 3202
            fn(this[i], arg1);                                                                                         // 3203
          } else {                                                                                                     // 3204
            for (key in arg1) {                                                                                        // 3205
              fn(this[i], key, arg1[key]);                                                                             // 3206
            }                                                                                                          // 3207
          }                                                                                                            // 3208
        }                                                                                                              // 3209
        // return self for chaining                                                                                    // 3210
        return this;                                                                                                   // 3211
      } else {                                                                                                         // 3212
        // we are a read, so read the first child.                                                                     // 3213
        // TODO: do we still need this?                                                                                // 3214
        var value = fn.$dv;                                                                                            // 3215
        // Only if we have $dv do we iterate over all, otherwise it is just the first element.                         // 3216
        var jj = (value === undefined) ? Math.min(nodeCount, 1) : nodeCount;                                           // 3217
        for (var j = 0; j < jj; j++) {                                                                                 // 3218
          var nodeValue = fn(this[j], arg1, arg2);                                                                     // 3219
          value = value ? value + nodeValue : nodeValue;                                                               // 3220
        }                                                                                                              // 3221
        return value;                                                                                                  // 3222
      }                                                                                                                // 3223
    } else {                                                                                                           // 3224
      // we are a write, so apply to all children                                                                      // 3225
      for (i = 0; i < nodeCount; i++) {                                                                                // 3226
        fn(this[i], arg1, arg2);                                                                                       // 3227
      }                                                                                                                // 3228
      // return self for chaining                                                                                      // 3229
      return this;                                                                                                     // 3230
    }                                                                                                                  // 3231
  };                                                                                                                   // 3232
});                                                                                                                    // 3233
                                                                                                                       // 3234
function createEventHandler(element, events) {                                                                         // 3235
  var eventHandler = function(event, type) {                                                                           // 3236
    // jQuery specific api                                                                                             // 3237
    event.isDefaultPrevented = function() {                                                                            // 3238
      return event.defaultPrevented;                                                                                   // 3239
    };                                                                                                                 // 3240
                                                                                                                       // 3241
    var eventFns = events[type || event.type];                                                                         // 3242
    var eventFnsLength = eventFns ? eventFns.length : 0;                                                               // 3243
                                                                                                                       // 3244
    if (!eventFnsLength) return;                                                                                       // 3245
                                                                                                                       // 3246
    if (isUndefined(event.immediatePropagationStopped)) {                                                              // 3247
      var originalStopImmediatePropagation = event.stopImmediatePropagation;                                           // 3248
      event.stopImmediatePropagation = function() {                                                                    // 3249
        event.immediatePropagationStopped = true;                                                                      // 3250
                                                                                                                       // 3251
        if (event.stopPropagation) {                                                                                   // 3252
          event.stopPropagation();                                                                                     // 3253
        }                                                                                                              // 3254
                                                                                                                       // 3255
        if (originalStopImmediatePropagation) {                                                                        // 3256
          originalStopImmediatePropagation.call(event);                                                                // 3257
        }                                                                                                              // 3258
      };                                                                                                               // 3259
    }                                                                                                                  // 3260
                                                                                                                       // 3261
    event.isImmediatePropagationStopped = function() {                                                                 // 3262
      return event.immediatePropagationStopped === true;                                                               // 3263
    };                                                                                                                 // 3264
                                                                                                                       // 3265
    // Copy event handlers in case event handlers array is modified during execution.                                  // 3266
    if ((eventFnsLength > 1)) {                                                                                        // 3267
      eventFns = shallowCopy(eventFns);                                                                                // 3268
    }                                                                                                                  // 3269
                                                                                                                       // 3270
    for (var i = 0; i < eventFnsLength; i++) {                                                                         // 3271
      if (!event.isImmediatePropagationStopped()) {                                                                    // 3272
        eventFns[i].call(element, event);                                                                              // 3273
      }                                                                                                                // 3274
    }                                                                                                                  // 3275
  };                                                                                                                   // 3276
                                                                                                                       // 3277
  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all                     // 3278
  //       events on `element`                                                                                         // 3279
  eventHandler.elem = element;                                                                                         // 3280
  return eventHandler;                                                                                                 // 3281
}                                                                                                                      // 3282
                                                                                                                       // 3283
//////////////////////////////////////////                                                                             // 3284
// Functions iterating traversal.                                                                                      // 3285
// These functions chain results into a single                                                                         // 3286
// selector.                                                                                                           // 3287
//////////////////////////////////////////                                                                             // 3288
forEach({                                                                                                              // 3289
  removeData: jqLiteRemoveData,                                                                                        // 3290
                                                                                                                       // 3291
  on: function jqLiteOn(element, type, fn, unsupported) {                                                              // 3292
    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');
                                                                                                                       // 3294
    // Do not add event handlers to non-elements because they will not be cleaned up.                                  // 3295
    if (!jqLiteAcceptsData(element)) {                                                                                 // 3296
      return;                                                                                                          // 3297
    }                                                                                                                  // 3298
                                                                                                                       // 3299
    var expandoStore = jqLiteExpandoStore(element, true);                                                              // 3300
    var events = expandoStore.events;                                                                                  // 3301
    var handle = expandoStore.handle;                                                                                  // 3302
                                                                                                                       // 3303
    if (!handle) {                                                                                                     // 3304
      handle = expandoStore.handle = createEventHandler(element, events);                                              // 3305
    }                                                                                                                  // 3306
                                                                                                                       // 3307
    // http://jsperf.com/string-indexof-vs-split                                                                       // 3308
    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];                                                     // 3309
    var i = types.length;                                                                                              // 3310
                                                                                                                       // 3311
    while (i--) {                                                                                                      // 3312
      type = types[i];                                                                                                 // 3313
      var eventFns = events[type];                                                                                     // 3314
                                                                                                                       // 3315
      if (!eventFns) {                                                                                                 // 3316
        events[type] = [];                                                                                             // 3317
                                                                                                                       // 3318
        if (type === 'mouseenter' || type === 'mouseleave') {                                                          // 3319
          // Refer to jQuery's implementation of mouseenter & mouseleave                                               // 3320
          // Read about mouseenter and mouseleave:                                                                     // 3321
          // http://www.quirksmode.org/js/events_mouse.html#link8                                                      // 3322
                                                                                                                       // 3323
          jqLiteOn(element, MOUSE_EVENT_MAP[type], function(event) {                                                   // 3324
            var target = this, related = event.relatedTarget;                                                          // 3325
            // For mousenter/leave call the handler if related is outside the target.                                  // 3326
            // NB: No relatedTarget if the mouse left/entered the browser window                                       // 3327
            if (!related || (related !== target && !target.contains(related))) {                                       // 3328
              handle(event, type);                                                                                     // 3329
            }                                                                                                          // 3330
          });                                                                                                          // 3331
                                                                                                                       // 3332
        } else {                                                                                                       // 3333
          if (type !== '$destroy') {                                                                                   // 3334
            addEventListenerFn(element, type, handle);                                                                 // 3335
          }                                                                                                            // 3336
        }                                                                                                              // 3337
        eventFns = events[type];                                                                                       // 3338
      }                                                                                                                // 3339
      eventFns.push(fn);                                                                                               // 3340
    }                                                                                                                  // 3341
  },                                                                                                                   // 3342
                                                                                                                       // 3343
  off: jqLiteOff,                                                                                                      // 3344
                                                                                                                       // 3345
  one: function(element, type, fn) {                                                                                   // 3346
    element = jqLite(element);                                                                                         // 3347
                                                                                                                       // 3348
    //add the listener twice so that when it is called                                                                 // 3349
    //you can remove the original function and still be                                                                // 3350
    //able to call element.off(ev, fn) normally                                                                        // 3351
    element.on(type, function onFn() {                                                                                 // 3352
      element.off(type, fn);                                                                                           // 3353
      element.off(type, onFn);                                                                                         // 3354
    });                                                                                                                // 3355
    element.on(type, fn);                                                                                              // 3356
  },                                                                                                                   // 3357
                                                                                                                       // 3358
  replaceWith: function(element, replaceNode) {                                                                        // 3359
    var index, parent = element.parentNode;                                                                            // 3360
    jqLiteDealoc(element);                                                                                             // 3361
    forEach(new JQLite(replaceNode), function(node) {                                                                  // 3362
      if (index) {                                                                                                     // 3363
        parent.insertBefore(node, index.nextSibling);                                                                  // 3364
      } else {                                                                                                         // 3365
        parent.replaceChild(node, element);                                                                            // 3366
      }                                                                                                                // 3367
      index = node;                                                                                                    // 3368
    });                                                                                                                // 3369
  },                                                                                                                   // 3370
                                                                                                                       // 3371
  children: function(element) {                                                                                        // 3372
    var children = [];                                                                                                 // 3373
    forEach(element.childNodes, function(element) {                                                                    // 3374
      if (element.nodeType === NODE_TYPE_ELEMENT) {                                                                    // 3375
        children.push(element);                                                                                        // 3376
      }                                                                                                                // 3377
    });                                                                                                                // 3378
    return children;                                                                                                   // 3379
  },                                                                                                                   // 3380
                                                                                                                       // 3381
  contents: function(element) {                                                                                        // 3382
    return element.contentDocument || element.childNodes || [];                                                        // 3383
  },                                                                                                                   // 3384
                                                                                                                       // 3385
  append: function(element, node) {                                                                                    // 3386
    var nodeType = element.nodeType;                                                                                   // 3387
    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;                            // 3388
                                                                                                                       // 3389
    node = new JQLite(node);                                                                                           // 3390
                                                                                                                       // 3391
    for (var i = 0, ii = node.length; i < ii; i++) {                                                                   // 3392
      var child = node[i];                                                                                             // 3393
      element.appendChild(child);                                                                                      // 3394
    }                                                                                                                  // 3395
  },                                                                                                                   // 3396
                                                                                                                       // 3397
  prepend: function(element, node) {                                                                                   // 3398
    if (element.nodeType === NODE_TYPE_ELEMENT) {                                                                      // 3399
      var index = element.firstChild;                                                                                  // 3400
      forEach(new JQLite(node), function(child) {                                                                      // 3401
        element.insertBefore(child, index);                                                                            // 3402
      });                                                                                                              // 3403
    }                                                                                                                  // 3404
  },                                                                                                                   // 3405
                                                                                                                       // 3406
  wrap: function(element, wrapNode) {                                                                                  // 3407
    wrapNode = jqLite(wrapNode).eq(0).clone()[0];                                                                      // 3408
    var parent = element.parentNode;                                                                                   // 3409
    if (parent) {                                                                                                      // 3410
      parent.replaceChild(wrapNode, element);                                                                          // 3411
    }                                                                                                                  // 3412
    wrapNode.appendChild(element);                                                                                     // 3413
  },                                                                                                                   // 3414
                                                                                                                       // 3415
  remove: jqLiteRemove,                                                                                                // 3416
                                                                                                                       // 3417
  detach: function(element) {                                                                                          // 3418
    jqLiteRemove(element, true);                                                                                       // 3419
  },                                                                                                                   // 3420
                                                                                                                       // 3421
  after: function(element, newElement) {                                                                               // 3422
    var index = element, parent = element.parentNode;                                                                  // 3423
    newElement = new JQLite(newElement);                                                                               // 3424
                                                                                                                       // 3425
    for (var i = 0, ii = newElement.length; i < ii; i++) {                                                             // 3426
      var node = newElement[i];                                                                                        // 3427
      parent.insertBefore(node, index.nextSibling);                                                                    // 3428
      index = node;                                                                                                    // 3429
    }                                                                                                                  // 3430
  },                                                                                                                   // 3431
                                                                                                                       // 3432
  addClass: jqLiteAddClass,                                                                                            // 3433
  removeClass: jqLiteRemoveClass,                                                                                      // 3434
                                                                                                                       // 3435
  toggleClass: function(element, selector, condition) {                                                                // 3436
    if (selector) {                                                                                                    // 3437
      forEach(selector.split(' '), function(className) {                                                               // 3438
        var classCondition = condition;                                                                                // 3439
        if (isUndefined(classCondition)) {                                                                             // 3440
          classCondition = !jqLiteHasClass(element, className);                                                        // 3441
        }                                                                                                              // 3442
        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);                                     // 3443
      });                                                                                                              // 3444
    }                                                                                                                  // 3445
  },                                                                                                                   // 3446
                                                                                                                       // 3447
  parent: function(element) {                                                                                          // 3448
    var parent = element.parentNode;                                                                                   // 3449
    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;                                  // 3450
  },                                                                                                                   // 3451
                                                                                                                       // 3452
  next: function(element) {                                                                                            // 3453
    return element.nextElementSibling;                                                                                 // 3454
  },                                                                                                                   // 3455
                                                                                                                       // 3456
  find: function(element, selector) {                                                                                  // 3457
    if (element.getElementsByTagName) {                                                                                // 3458
      return element.getElementsByTagName(selector);                                                                   // 3459
    } else {                                                                                                           // 3460
      return [];                                                                                                       // 3461
    }                                                                                                                  // 3462
  },                                                                                                                   // 3463
                                                                                                                       // 3464
  clone: jqLiteClone,                                                                                                  // 3465
                                                                                                                       // 3466
  triggerHandler: function(element, event, extraParameters) {                                                          // 3467
                                                                                                                       // 3468
    var dummyEvent, eventFnsCopy, handlerArgs;                                                                         // 3469
    var eventName = event.type || event;                                                                               // 3470
    var expandoStore = jqLiteExpandoStore(element);                                                                    // 3471
    var events = expandoStore && expandoStore.events;                                                                  // 3472
    var eventFns = events && events[eventName];                                                                        // 3473
                                                                                                                       // 3474
    if (eventFns) {                                                                                                    // 3475
      // Create a dummy event to pass to the handlers                                                                  // 3476
      dummyEvent = {                                                                                                   // 3477
        preventDefault: function() { this.defaultPrevented = true; },                                                  // 3478
        isDefaultPrevented: function() { return this.defaultPrevented === true; },                                     // 3479
        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },                             // 3480
        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },               // 3481
        stopPropagation: noop,                                                                                         // 3482
        type: eventName,                                                                                               // 3483
        target: element                                                                                                // 3484
      };                                                                                                               // 3485
                                                                                                                       // 3486
      // If a custom event was provided then extend our dummy event with it                                            // 3487
      if (event.type) {                                                                                                // 3488
        dummyEvent = extend(dummyEvent, event);                                                                        // 3489
      }                                                                                                                // 3490
                                                                                                                       // 3491
      // Copy event handlers in case event handlers array is modified during execution.                                // 3492
      eventFnsCopy = shallowCopy(eventFns);                                                                            // 3493
      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];                             // 3494
                                                                                                                       // 3495
      forEach(eventFnsCopy, function(fn) {                                                                             // 3496
        if (!dummyEvent.isImmediatePropagationStopped()) {                                                             // 3497
          fn.apply(element, handlerArgs);                                                                              // 3498
        }                                                                                                              // 3499
      });                                                                                                              // 3500
    }                                                                                                                  // 3501
  }                                                                                                                    // 3502
}, function(fn, name) {                                                                                                // 3503
  /**                                                                                                                  // 3504
   * chaining functions                                                                                                // 3505
   */                                                                                                                  // 3506
  JQLite.prototype[name] = function(arg1, arg2, arg3) {                                                                // 3507
    var value;                                                                                                         // 3508
                                                                                                                       // 3509
    for (var i = 0, ii = this.length; i < ii; i++) {                                                                   // 3510
      if (isUndefined(value)) {                                                                                        // 3511
        value = fn(this[i], arg1, arg2, arg3);                                                                         // 3512
        if (isDefined(value)) {                                                                                        // 3513
          // any function which returns a value needs to be wrapped                                                    // 3514
          value = jqLite(value);                                                                                       // 3515
        }                                                                                                              // 3516
      } else {                                                                                                         // 3517
        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));                                                          // 3518
      }                                                                                                                // 3519
    }                                                                                                                  // 3520
    return isDefined(value) ? value : this;                                                                            // 3521
  };                                                                                                                   // 3522
                                                                                                                       // 3523
  // bind legacy bind/unbind to on/off                                                                                 // 3524
  JQLite.prototype.bind = JQLite.prototype.on;                                                                         // 3525
  JQLite.prototype.unbind = JQLite.prototype.off;                                                                      // 3526
});                                                                                                                    // 3527
                                                                                                                       // 3528
                                                                                                                       // 3529
// Provider for private $$jqLite service                                                                               // 3530
function $$jqLiteProvider() {                                                                                          // 3531
  this.$get = function $$jqLite() {                                                                                    // 3532
    return extend(JQLite, {                                                                                            // 3533
      hasClass: function(node, classes) {                                                                              // 3534
        if (node.attr) node = node[0];                                                                                 // 3535
        return jqLiteHasClass(node, classes);                                                                          // 3536
      },                                                                                                               // 3537
      addClass: function(node, classes) {                                                                              // 3538
        if (node.attr) node = node[0];                                                                                 // 3539
        return jqLiteAddClass(node, classes);                                                                          // 3540
      },                                                                                                               // 3541
      removeClass: function(node, classes) {                                                                           // 3542
        if (node.attr) node = node[0];                                                                                 // 3543
        return jqLiteRemoveClass(node, classes);                                                                       // 3544
      }                                                                                                                // 3545
    });                                                                                                                // 3546
  };                                                                                                                   // 3547
}                                                                                                                      // 3548
                                                                                                                       // 3549
/**                                                                                                                    // 3550
 * Computes a hash of an 'obj'.                                                                                        // 3551
 * Hash of a:                                                                                                          // 3552
 *  string is string                                                                                                   // 3553
 *  number is number as string                                                                                         // 3554
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,                      // 3555
 *         that is also assigned to the $$hashKey property of the object.                                              // 3556
 *                                                                                                                     // 3557
 * @param obj                                                                                                          // 3558
 * @returns {string} hash string such that the same input will have the same hash string.                              // 3559
 *         The resulting string key is in 'type:hashKey' format.                                                       // 3560
 */                                                                                                                    // 3561
function hashKey(obj, nextUidFn) {                                                                                     // 3562
  var key = obj && obj.$$hashKey;                                                                                      // 3563
                                                                                                                       // 3564
  if (key) {                                                                                                           // 3565
    if (typeof key === 'function') {                                                                                   // 3566
      key = obj.$$hashKey();                                                                                           // 3567
    }                                                                                                                  // 3568
    return key;                                                                                                        // 3569
  }                                                                                                                    // 3570
                                                                                                                       // 3571
  var objType = typeof obj;                                                                                            // 3572
  if (objType == 'function' || (objType == 'object' && obj !== null)) {                                                // 3573
    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();                                                    // 3574
  } else {                                                                                                             // 3575
    key = objType + ':' + obj;                                                                                         // 3576
  }                                                                                                                    // 3577
                                                                                                                       // 3578
  return key;                                                                                                          // 3579
}                                                                                                                      // 3580
                                                                                                                       // 3581
/**                                                                                                                    // 3582
 * HashMap which can use objects as keys                                                                               // 3583
 */                                                                                                                    // 3584
function HashMap(array, isolatedUid) {                                                                                 // 3585
  if (isolatedUid) {                                                                                                   // 3586
    var uid = 0;                                                                                                       // 3587
    this.nextUid = function() {                                                                                        // 3588
      return ++uid;                                                                                                    // 3589
    };                                                                                                                 // 3590
  }                                                                                                                    // 3591
  forEach(array, this.put, this);                                                                                      // 3592
}                                                                                                                      // 3593
HashMap.prototype = {                                                                                                  // 3594
  /**                                                                                                                  // 3595
   * Store key value pair                                                                                              // 3596
   * @param key key to store can be any type                                                                           // 3597
   * @param value value to store can be any type                                                                       // 3598
   */                                                                                                                  // 3599
  put: function(key, value) {                                                                                          // 3600
    this[hashKey(key, this.nextUid)] = value;                                                                          // 3601
  },                                                                                                                   // 3602
                                                                                                                       // 3603
  /**                                                                                                                  // 3604
   * @param key                                                                                                        // 3605
   * @returns {Object} the value for the key                                                                           // 3606
   */                                                                                                                  // 3607
  get: function(key) {                                                                                                 // 3608
    return this[hashKey(key, this.nextUid)];                                                                           // 3609
  },                                                                                                                   // 3610
                                                                                                                       // 3611
  /**                                                                                                                  // 3612
   * Remove the key/value pair                                                                                         // 3613
   * @param key                                                                                                        // 3614
   */                                                                                                                  // 3615
  remove: function(key) {                                                                                              // 3616
    var value = this[key = hashKey(key, this.nextUid)];                                                                // 3617
    delete this[key];                                                                                                  // 3618
    return value;                                                                                                      // 3619
  }                                                                                                                    // 3620
};                                                                                                                     // 3621
                                                                                                                       // 3622
var $$HashMapProvider = [function() {                                                                                  // 3623
  this.$get = [function() {                                                                                            // 3624
    return HashMap;                                                                                                    // 3625
  }];                                                                                                                  // 3626
}];                                                                                                                    // 3627
                                                                                                                       // 3628
/**                                                                                                                    // 3629
 * @ngdoc function                                                                                                     // 3630
 * @module ng                                                                                                          // 3631
 * @name angular.injector                                                                                              // 3632
 * @kind function                                                                                                      // 3633
 *                                                                                                                     // 3634
 * @description                                                                                                        // 3635
 * Creates an injector object that can be used for retrieving services as well as for                                  // 3636
 * dependency injection (see {@link guide/di dependency injection}).                                                   // 3637
 *                                                                                                                     // 3638
 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See                           // 3639
 *     {@link angular.module}. The `ng` module must be explicitly added.                                               // 3640
 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which                             // 3641
 *     disallows argument name annotation inference.                                                                   // 3642
 * @returns {injector} Injector object. See {@link auto.$injector $injector}.                                          // 3643
 *                                                                                                                     // 3644
 * @example                                                                                                            // 3645
 * Typical usage                                                                                                       // 3646
 * ```js                                                                                                               // 3647
 *   // create an injector                                                                                             // 3648
 *   var $injector = angular.injector(['ng']);                                                                         // 3649
 *                                                                                                                     // 3650
 *   // use the injector to kick off your application                                                                  // 3651
 *   // use the type inference to auto inject arguments, or use implicit injection                                     // 3652
 *   $injector.invoke(function($rootScope, $compile, $document) {                                                      // 3653
 *     $compile($document)($rootScope);                                                                                // 3654
 *     $rootScope.$digest();                                                                                           // 3655
 *   });                                                                                                               // 3656
 * ```                                                                                                                 // 3657
 *                                                                                                                     // 3658
 * Sometimes you want to get access to the injector of a currently running Angular app                                 // 3659
 * from outside Angular. Perhaps, you want to inject and compile some markup after the                                 // 3660
 * application has been bootstrapped. You can do this using the extra `injector()` added                               // 3661
 * to JQuery/jqLite elements. See {@link angular.element}.                                                             // 3662
 *                                                                                                                     // 3663
 * *This is fairly rare but could be the case if a third party library is injecting the                                // 3664
 * markup.*                                                                                                            // 3665
 *                                                                                                                     // 3666
 * In the following example a new block of HTML containing a `ng-controller`                                           // 3667
 * directive is added to the end of the document body by JQuery. We then compile and link                              // 3668
 * it into the current AngularJS scope.                                                                                // 3669
 *                                                                                                                     // 3670
 * ```js                                                                                                               // 3671
 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');                                                // 3672
 * $(document.body).append($div);                                                                                      // 3673
 *                                                                                                                     // 3674
 * angular.element(document).injector().invoke(function($compile) {                                                    // 3675
 *   var scope = angular.element($div).scope();                                                                        // 3676
 *   $compile($div)(scope);                                                                                            // 3677
 * });                                                                                                                 // 3678
 * ```                                                                                                                 // 3679
 */                                                                                                                    // 3680
                                                                                                                       // 3681
                                                                                                                       // 3682
/**                                                                                                                    // 3683
 * @ngdoc module                                                                                                       // 3684
 * @name auto                                                                                                          // 3685
 * @description                                                                                                        // 3686
 *                                                                                                                     // 3687
 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.                            // 3688
 */                                                                                                                    // 3689
                                                                                                                       // 3690
var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;                                                                    // 3691
var FN_ARG_SPLIT = /,/;                                                                                                // 3692
var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;                                                                                   // 3693
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;                                                               // 3694
var $injectorMinErr = minErr('$injector');                                                                             // 3695
                                                                                                                       // 3696
function anonFn(fn) {                                                                                                  // 3697
  // For anonymous functions, showing at the very least the function signature can help in                             // 3698
  // debugging.                                                                                                        // 3699
  var fnText = fn.toString().replace(STRIP_COMMENTS, ''),                                                              // 3700
      args = fnText.match(FN_ARGS);                                                                                    // 3701
  if (args) {                                                                                                          // 3702
    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';                                              // 3703
  }                                                                                                                    // 3704
  return 'fn';                                                                                                         // 3705
}                                                                                                                      // 3706
                                                                                                                       // 3707
function annotate(fn, strictDi, name) {                                                                                // 3708
  var $inject,                                                                                                         // 3709
      fnText,                                                                                                          // 3710
      argDecl,                                                                                                         // 3711
      last;                                                                                                            // 3712
                                                                                                                       // 3713
  if (typeof fn === 'function') {                                                                                      // 3714
    if (!($inject = fn.$inject)) {                                                                                     // 3715
      $inject = [];                                                                                                    // 3716
      if (fn.length) {                                                                                                 // 3717
        if (strictDi) {                                                                                                // 3718
          if (!isString(name) || !name) {                                                                              // 3719
            name = fn.name || anonFn(fn);                                                                              // 3720
          }                                                                                                            // 3721
          throw $injectorMinErr('strictdi',                                                                            // 3722
            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);                        // 3723
        }                                                                                                              // 3724
        fnText = fn.toString().replace(STRIP_COMMENTS, '');                                                            // 3725
        argDecl = fnText.match(FN_ARGS);                                                                               // 3726
        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {                                                        // 3727
          arg.replace(FN_ARG, function(all, underscore, name) {                                                        // 3728
            $inject.push(name);                                                                                        // 3729
          });                                                                                                          // 3730
        });                                                                                                            // 3731
      }                                                                                                                // 3732
      fn.$inject = $inject;                                                                                            // 3733
    }                                                                                                                  // 3734
  } else if (isArray(fn)) {                                                                                            // 3735
    last = fn.length - 1;                                                                                              // 3736
    assertArgFn(fn[last], 'fn');                                                                                       // 3737
    $inject = fn.slice(0, last);                                                                                       // 3738
  } else {                                                                                                             // 3739
    assertArgFn(fn, 'fn', true);                                                                                       // 3740
  }                                                                                                                    // 3741
  return $inject;                                                                                                      // 3742
}                                                                                                                      // 3743
                                                                                                                       // 3744
///////////////////////////////////////                                                                                // 3745
                                                                                                                       // 3746
/**                                                                                                                    // 3747
 * @ngdoc service                                                                                                      // 3748
 * @name $injector                                                                                                     // 3749
 *                                                                                                                     // 3750
 * @description                                                                                                        // 3751
 *                                                                                                                     // 3752
 * `$injector` is used to retrieve object instances as defined by                                                      // 3753
 * {@link auto.$provide provider}, instantiate types, invoke methods,                                                  // 3754
 * and load modules.                                                                                                   // 3755
 *                                                                                                                     // 3756
 * The following always holds true:                                                                                    // 3757
 *                                                                                                                     // 3758
 * ```js                                                                                                               // 3759
 *   var $injector = angular.injector();                                                                               // 3760
 *   expect($injector.get('$injector')).toBe($injector);                                                               // 3761
 *   expect($injector.invoke(function($injector) {                                                                     // 3762
 *     return $injector;                                                                                               // 3763
 *   })).toBe($injector);                                                                                              // 3764
 * ```                                                                                                                 // 3765
 *                                                                                                                     // 3766
 * # Injection Function Annotation                                                                                     // 3767
 *                                                                                                                     // 3768
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The                      // 3769
 * following are all valid ways of annotating function with injection arguments and are equivalent.                    // 3770
 *                                                                                                                     // 3771
 * ```js                                                                                                               // 3772
 *   // inferred (only works if code not minified/obfuscated)                                                          // 3773
 *   $injector.invoke(function(serviceA){});                                                                           // 3774
 *                                                                                                                     // 3775
 *   // annotated                                                                                                      // 3776
 *   function explicit(serviceA) {};                                                                                   // 3777
 *   explicit.$inject = ['serviceA'];                                                                                  // 3778
 *   $injector.invoke(explicit);                                                                                       // 3779
 *                                                                                                                     // 3780
 *   // inline                                                                                                         // 3781
 *   $injector.invoke(['serviceA', function(serviceA){}]);                                                             // 3782
 * ```                                                                                                                 // 3783
 *                                                                                                                     // 3784
 * ## Inference                                                                                                        // 3785
 *                                                                                                                     // 3786
 * In JavaScript calling `toString()` on a function returns the function definition. The definition                    // 3787
 * can then be parsed and the function arguments can be extracted. This method of discovering                          // 3788
 * annotations is disallowed when the injector is in strict mode.                                                      // 3789
 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the                    // 3790
 * argument names.                                                                                                     // 3791
 *                                                                                                                     // 3792
 * ## `$inject` Annotation                                                                                             // 3793
 * By adding an `$inject` property onto a function the injection parameters can be specified.                          // 3794
 *                                                                                                                     // 3795
 * ## Inline                                                                                                           // 3796
 * As an array of injection names, where the last item in the array is the function to call.                           // 3797
 */                                                                                                                    // 3798
                                                                                                                       // 3799
/**                                                                                                                    // 3800
 * @ngdoc method                                                                                                       // 3801
 * @name $injector#get                                                                                                 // 3802
 *                                                                                                                     // 3803
 * @description                                                                                                        // 3804
 * Return an instance of the service.                                                                                  // 3805
 *                                                                                                                     // 3806
 * @param {string} name The name of the instance to retrieve.                                                          // 3807
 * @param {string=} caller An optional string to provide the origin of the function call for error messages.           // 3808
 * @return {*} The instance.                                                                                           // 3809
 */                                                                                                                    // 3810
                                                                                                                       // 3811
/**                                                                                                                    // 3812
 * @ngdoc method                                                                                                       // 3813
 * @name $injector#invoke                                                                                              // 3814
 *                                                                                                                     // 3815
 * @description                                                                                                        // 3816
 * Invoke the method and supply the method arguments from the `$injector`.                                             // 3817
 *                                                                                                                     // 3818
 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are             // 3819
 *   injected according to the {@link guide/di $inject Annotation} rules.                                              // 3820
 * @param {Object=} self The `this` for the invoked method.                                                            // 3821
 * @param {Object=} locals Optional object. If preset then any argument names are read from this                       // 3822
 *                         object first, before the `$injector` is consulted.                                          // 3823
 * @returns {*} the value returned by the invoked `fn` function.                                                       // 3824
 */                                                                                                                    // 3825
                                                                                                                       // 3826
/**                                                                                                                    // 3827
 * @ngdoc method                                                                                                       // 3828
 * @name $injector#has                                                                                                 // 3829
 *                                                                                                                     // 3830
 * @description                                                                                                        // 3831
 * Allows the user to query if the particular service exists.                                                          // 3832
 *                                                                                                                     // 3833
 * @param {string} name Name of the service to query.                                                                  // 3834
 * @returns {boolean} `true` if injector has given service.                                                            // 3835
 */                                                                                                                    // 3836
                                                                                                                       // 3837
/**                                                                                                                    // 3838
 * @ngdoc method                                                                                                       // 3839
 * @name $injector#instantiate                                                                                         // 3840
 * @description                                                                                                        // 3841
 * Create a new instance of JS type. The method takes a constructor function, invokes the new                          // 3842
 * operator, and supplies all of the arguments to the constructor function as specified by the                         // 3843
 * constructor annotation.                                                                                             // 3844
 *                                                                                                                     // 3845
 * @param {Function} Type Annotated constructor function.                                                              // 3846
 * @param {Object=} locals Optional object. If preset then any argument names are read from this                       // 3847
 * object first, before the `$injector` is consulted.                                                                  // 3848
 * @returns {Object} new instance of `Type`.                                                                           // 3849
 */                                                                                                                    // 3850
                                                                                                                       // 3851
/**                                                                                                                    // 3852
 * @ngdoc method                                                                                                       // 3853
 * @name $injector#annotate                                                                                            // 3854
 *                                                                                                                     // 3855
 * @description                                                                                                        // 3856
 * Returns an array of service names which the function is requesting for injection. This API is                       // 3857
 * used by the injector to determine which services need to be injected into the function when the                     // 3858
 * function is invoked. There are three ways in which the function can be annotated with the needed                    // 3859
 * dependencies.                                                                                                       // 3860
 *                                                                                                                     // 3861
 * # Argument names                                                                                                    // 3862
 *                                                                                                                     // 3863
 * The simplest form is to extract the dependencies from the arguments of the function. This is done                   // 3864
 * by converting the function into a string using `toString()` method and extracting the argument                      // 3865
 * names.                                                                                                              // 3866
 * ```js                                                                                                               // 3867
 *   // Given                                                                                                          // 3868
 *   function MyController($scope, $route) {                                                                           // 3869
 *     // ...                                                                                                          // 3870
 *   }                                                                                                                 // 3871
 *                                                                                                                     // 3872
 *   // Then                                                                                                           // 3873
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);                                            // 3874
 * ```                                                                                                                 // 3875
 *                                                                                                                     // 3876
 * You can disallow this method by using strict injection mode.                                                        // 3877
 *                                                                                                                     // 3878
 * This method does not work with code minification / obfuscation. For this reason the following                       // 3879
 * annotation strategies are supported.                                                                                // 3880
 *                                                                                                                     // 3881
 * # The `$inject` property                                                                                            // 3882
 *                                                                                                                     // 3883
 * If a function has an `$inject` property and its value is an array of strings, then the strings                      // 3884
 * represent names of services to be injected into the function.                                                       // 3885
 * ```js                                                                                                               // 3886
 *   // Given                                                                                                          // 3887
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {                                                   // 3888
 *     // ...                                                                                                          // 3889
 *   }                                                                                                                 // 3890
 *   // Define function dependencies                                                                                   // 3891
 *   MyController['$inject'] = ['$scope', '$route'];                                                                   // 3892
 *                                                                                                                     // 3893
 *   // Then                                                                                                           // 3894
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);                                            // 3895
 * ```                                                                                                                 // 3896
 *                                                                                                                     // 3897
 * # The array notation                                                                                                // 3898
 *                                                                                                                     // 3899
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property                   // 3900
 * is very inconvenient. In these situations using the array notation to specify the dependencies in                   // 3901
 * a way that survives minification is a better choice:                                                                // 3902
 *                                                                                                                     // 3903
 * ```js                                                                                                               // 3904
 *   // We wish to write this (not minification / obfuscation safe)                                                    // 3905
 *   injector.invoke(function($compile, $rootScope) {                                                                  // 3906
 *     // ...                                                                                                          // 3907
 *   });                                                                                                               // 3908
 *                                                                                                                     // 3909
 *   // We are forced to write break inlining                                                                          // 3910
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {                                                    // 3911
 *     // ...                                                                                                          // 3912
 *   };                                                                                                                // 3913
 *   tmpFn.$inject = ['$compile', '$rootScope'];                                                                       // 3914
 *   injector.invoke(tmpFn);                                                                                           // 3915
 *                                                                                                                     // 3916
 *   // To better support inline function the inline annotation is supported                                           // 3917
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {                                   // 3918
 *     // ...                                                                                                          // 3919
 *   }]);                                                                                                              // 3920
 *                                                                                                                     // 3921
 *   // Therefore                                                                                                      // 3922
 *   expect(injector.annotate(                                                                                         // 3923
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])                                     // 3924
 *    ).toEqual(['$compile', '$rootScope']);                                                                           // 3925
 * ```                                                                                                                 // 3926
 *                                                                                                                     // 3927
 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to                     // 3928
 * be retrieved as described above.                                                                                    // 3929
 *                                                                                                                     // 3930
 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.                                     // 3931
 *                                                                                                                     // 3932
 * @returns {Array.<string>} The names of the services which the function requires.                                    // 3933
 */                                                                                                                    // 3934
                                                                                                                       // 3935
                                                                                                                       // 3936
                                                                                                                       // 3937
                                                                                                                       // 3938
/**                                                                                                                    // 3939
 * @ngdoc service                                                                                                      // 3940
 * @name $provide                                                                                                      // 3941
 *                                                                                                                     // 3942
 * @description                                                                                                        // 3943
 *                                                                                                                     // 3944
 * The {@link auto.$provide $provide} service has a number of methods for registering components                       // 3945
 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on                              // 3946
 * {@link angular.Module}.                                                                                             // 3947
 *                                                                                                                     // 3948
 * An Angular **service** is a singleton object created by a **service factory**.  These **service                     // 3949
 * factories** are functions which, in turn, are created by a **service provider**.                                    // 3950
 * The **service providers** are constructor functions. When instantiated they must contain a                          // 3951
 * property called `$get`, which holds the **service factory** function.                                               // 3952
 *                                                                                                                     // 3953
 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the                     // 3954
 * correct **service provider**, instantiating it and then calling its `$get` **service factory**                      // 3955
 * function to get the instance of the **service**.                                                                    // 3956
 *                                                                                                                     // 3957
 * Often services have no configuration options and there is no need to add methods to the service                     // 3958
 * provider.  The provider will be no more than a constructor function with a `$get` property. For                     // 3959
 * these cases the {@link auto.$provide $provide} service has additional helper methods to register                    // 3960
 * services without specifying a provider.                                                                             // 3961
 *                                                                                                                     // 3962
 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the                     // 3963
 *     {@link auto.$injector $injector}                                                                                // 3964
 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by                   // 3965
 *     providers and services.                                                                                         // 3966
 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by                    // 3967
 *     services, not providers.                                                                                        // 3968
 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,                       // 3969
 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the                   // 3970
 *     given factory function.                                                                                         // 3971
 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`                      // 3972
 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate                   // 3973
 *      a new object using the given constructor function.                                                             // 3974
 *                                                                                                                     // 3975
 * See the individual methods for more information and examples.                                                       // 3976
 */                                                                                                                    // 3977
                                                                                                                       // 3978
/**                                                                                                                    // 3979
 * @ngdoc method                                                                                                       // 3980
 * @name $provide#provider                                                                                             // 3981
 * @description                                                                                                        // 3982
 *                                                                                                                     // 3983
 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions                      // 3984
 * are constructor functions, whose instances are responsible for "providing" a factory for a                          // 3985
 * service.                                                                                                            // 3986
 *                                                                                                                     // 3987
 * Service provider names start with the name of the service they provide followed by `Provider`.                      // 3988
 * For example, the {@link ng.$log $log} service has a provider called                                                 // 3989
 * {@link ng.$logProvider $logProvider}.                                                                               // 3990
 *                                                                                                                     // 3991
 * Service provider objects can have additional methods which allow configuration of the provider                      // 3992
 * and its service. Importantly, you can configure what kind of service is created by the `$get`                       // 3993
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a                   // 3994
 * method {@link ng.$logProvider#debugEnabled debugEnabled}                                                            // 3995
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the                      // 3996
 * console or not.                                                                                                     // 3997
 *                                                                                                                     // 3998
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +                   // 3999
                        'Provider'` key.                                                                               // 4000
 * @param {(Object|function())} provider If the provider is:                                                           // 4001
 *                                                                                                                     // 4002
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using                          // 4003
 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.                          // 4004
 *   - `Constructor`: a new instance of the provider will be created using                                             // 4005
 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.                           // 4006
 *                                                                                                                     // 4007
 * @returns {Object} registered provider instance                                                                      // 4008
                                                                                                                       // 4009
 * @example                                                                                                            // 4010
 *                                                                                                                     // 4011
 * The following example shows how to create a simple event tracking service and register it using                     // 4012
 * {@link auto.$provide#provider $provide.provider()}.                                                                 // 4013
 *                                                                                                                     // 4014
 * ```js                                                                                                               // 4015
 *  // Define the eventTracker provider                                                                                // 4016
 *  function EventTrackerProvider() {                                                                                  // 4017
 *    var trackingUrl = '/track';                                                                                      // 4018
 *                                                                                                                     // 4019
 *    // A provider method for configuring where the tracked events should been saved                                  // 4020
 *    this.setTrackingUrl = function(url) {                                                                            // 4021
 *      trackingUrl = url;                                                                                             // 4022
 *    };                                                                                                               // 4023
 *                                                                                                                     // 4024
 *    // The service factory function                                                                                  // 4025
 *    this.$get = ['$http', function($http) {                                                                          // 4026
 *      var trackedEvents = {};                                                                                        // 4027
 *      return {                                                                                                       // 4028
 *        // Call this to track an event                                                                               // 4029
 *        event: function(event) {                                                                                     // 4030
 *          var count = trackedEvents[event] || 0;                                                                     // 4031
 *          count += 1;                                                                                                // 4032
 *          trackedEvents[event] = count;                                                                              // 4033
 *          return count;                                                                                              // 4034
 *        },                                                                                                           // 4035
 *        // Call this to save the tracked events to the trackingUrl                                                   // 4036
 *        save: function() {                                                                                           // 4037
 *          $http.post(trackingUrl, trackedEvents);                                                                    // 4038
 *        }                                                                                                            // 4039
 *      };                                                                                                             // 4040
 *    }];                                                                                                              // 4041
 *  }                                                                                                                  // 4042
 *                                                                                                                     // 4043
 *  describe('eventTracker', function() {                                                                              // 4044
 *    var postSpy;                                                                                                     // 4045
 *                                                                                                                     // 4046
 *    beforeEach(module(function($provide) {                                                                           // 4047
 *      // Register the eventTracker provider                                                                          // 4048
 *      $provide.provider('eventTracker', EventTrackerProvider);                                                       // 4049
 *    }));                                                                                                             // 4050
 *                                                                                                                     // 4051
 *    beforeEach(module(function(eventTrackerProvider) {                                                               // 4052
 *      // Configure eventTracker provider                                                                             // 4053
 *      eventTrackerProvider.setTrackingUrl('/custom-track');                                                          // 4054
 *    }));                                                                                                             // 4055
 *                                                                                                                     // 4056
 *    it('tracks events', inject(function(eventTracker) {                                                              // 4057
 *      expect(eventTracker.event('login')).toEqual(1);                                                                // 4058
 *      expect(eventTracker.event('login')).toEqual(2);                                                                // 4059
 *    }));                                                                                                             // 4060
 *                                                                                                                     // 4061
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {                                           // 4062
 *      postSpy = spyOn($http, 'post');                                                                                // 4063
 *      eventTracker.event('login');                                                                                   // 4064
 *      eventTracker.save();                                                                                           // 4065
 *      expect(postSpy).toHaveBeenCalled();                                                                            // 4066
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');                                                  // 4067
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');                                               // 4068
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });                                                // 4069
 *    }));                                                                                                             // 4070
 *  });                                                                                                                // 4071
 * ```                                                                                                                 // 4072
 */                                                                                                                    // 4073
                                                                                                                       // 4074
/**                                                                                                                    // 4075
 * @ngdoc method                                                                                                       // 4076
 * @name $provide#factory                                                                                              // 4077
 * @description                                                                                                        // 4078
 *                                                                                                                     // 4079
 * Register a **service factory**, which will be called to return the service instance.                                // 4080
 * This is short for registering a service where its provider consists of only a `$get` property,                      // 4081
 * which is the given service factory function.                                                                        // 4082
 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to                          // 4083
 * configure your service in a provider.                                                                               // 4084
 *                                                                                                                     // 4085
 * @param {string} name The name of the instance.                                                                      // 4086
 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.                   // 4087
 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.                 // 4088
 * @returns {Object} registered provider instance                                                                      // 4089
 *                                                                                                                     // 4090
 * @example                                                                                                            // 4091
 * Here is an example of registering a service                                                                         // 4092
 * ```js                                                                                                               // 4093
 *   $provide.factory('ping', ['$http', function($http) {                                                              // 4094
 *     return function ping() {                                                                                        // 4095
 *       return $http.send('/ping');                                                                                   // 4096
 *     };                                                                                                              // 4097
 *   }]);                                                                                                              // 4098
 * ```                                                                                                                 // 4099
 * You would then inject and use this service like this:                                                               // 4100
 * ```js                                                                                                               // 4101
 *   someModule.controller('Ctrl', ['ping', function(ping) {                                                           // 4102
 *     ping();                                                                                                         // 4103
 *   }]);                                                                                                              // 4104
 * ```                                                                                                                 // 4105
 */                                                                                                                    // 4106
                                                                                                                       // 4107
                                                                                                                       // 4108
/**                                                                                                                    // 4109
 * @ngdoc method                                                                                                       // 4110
 * @name $provide#service                                                                                              // 4111
 * @description                                                                                                        // 4112
 *                                                                                                                     // 4113
 * Register a **service constructor**, which will be invoked with `new` to create the service                          // 4114
 * instance.                                                                                                           // 4115
 * This is short for registering a service where its provider's `$get` property is the service                         // 4116
 * constructor function that will be used to instantiate the service instance.                                         // 4117
 *                                                                                                                     // 4118
 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service                     // 4119
 * as a type/class.                                                                                                    // 4120
 *                                                                                                                     // 4121
 * @param {string} name The name of the instance.                                                                      // 4122
 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)                    // 4123
 *     that will be instantiated.                                                                                      // 4124
 * @returns {Object} registered provider instance                                                                      // 4125
 *                                                                                                                     // 4126
 * @example                                                                                                            // 4127
 * Here is an example of registering a service using                                                                   // 4128
 * {@link auto.$provide#service $provide.service(class)}.                                                              // 4129
 * ```js                                                                                                               // 4130
 *   var Ping = function($http) {                                                                                      // 4131
 *     this.$http = $http;                                                                                             // 4132
 *   };                                                                                                                // 4133
 *                                                                                                                     // 4134
 *   Ping.$inject = ['$http'];                                                                                         // 4135
 *                                                                                                                     // 4136
 *   Ping.prototype.send = function() {                                                                                // 4137
 *     return this.$http.get('/ping');                                                                                 // 4138
 *   };                                                                                                                // 4139
 *   $provide.service('ping', Ping);                                                                                   // 4140
 * ```                                                                                                                 // 4141
 * You would then inject and use this service like this:                                                               // 4142
 * ```js                                                                                                               // 4143
 *   someModule.controller('Ctrl', ['ping', function(ping) {                                                           // 4144
 *     ping.send();                                                                                                    // 4145
 *   }]);                                                                                                              // 4146
 * ```                                                                                                                 // 4147
 */                                                                                                                    // 4148
                                                                                                                       // 4149
                                                                                                                       // 4150
/**                                                                                                                    // 4151
 * @ngdoc method                                                                                                       // 4152
 * @name $provide#value                                                                                                // 4153
 * @description                                                                                                        // 4154
 *                                                                                                                     // 4155
 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a                         // 4156
 * number, an array, an object or a function.  This is short for registering a service where its                       // 4157
 * provider's `$get` property is a factory function that takes no arguments and returns the **value                    // 4158
 * service**.                                                                                                          // 4159
 *                                                                                                                     // 4160
 * Value services are similar to constant services, except that they cannot be injected into a                         // 4161
 * module configuration function (see {@link angular.Module#config}) but they can be overridden by                     // 4162
 * an Angular                                                                                                          // 4163
 * {@link auto.$provide#decorator decorator}.                                                                          // 4164
 *                                                                                                                     // 4165
 * @param {string} name The name of the instance.                                                                      // 4166
 * @param {*} value The value.                                                                                         // 4167
 * @returns {Object} registered provider instance                                                                      // 4168
 *                                                                                                                     // 4169
 * @example                                                                                                            // 4170
 * Here are some examples of creating value services.                                                                  // 4171
 * ```js                                                                                                               // 4172
 *   $provide.value('ADMIN_USER', 'admin');                                                                            // 4173
 *                                                                                                                     // 4174
 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });                                                 // 4175
 *                                                                                                                     // 4176
 *   $provide.value('halfOf', function(value) {                                                                        // 4177
 *     return value / 2;                                                                                               // 4178
 *   });                                                                                                               // 4179
 * ```                                                                                                                 // 4180
 */                                                                                                                    // 4181
                                                                                                                       // 4182
                                                                                                                       // 4183
/**                                                                                                                    // 4184
 * @ngdoc method                                                                                                       // 4185
 * @name $provide#constant                                                                                             // 4186
 * @description                                                                                                        // 4187
 *                                                                                                                     // 4188
 * Register a **constant service**, such as a string, a number, an array, an object or a function,                     // 4189
 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be                       // 4190
 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot                     // 4191
 * be overridden by an Angular {@link auto.$provide#decorator decorator}.                                              // 4192
 *                                                                                                                     // 4193
 * @param {string} name The name of the constant.                                                                      // 4194
 * @param {*} value The constant value.                                                                                // 4195
 * @returns {Object} registered instance                                                                               // 4196
 *                                                                                                                     // 4197
 * @example                                                                                                            // 4198
 * Here a some examples of creating constants:                                                                         // 4199
 * ```js                                                                                                               // 4200
 *   $provide.constant('SHARD_HEIGHT', 306);                                                                           // 4201
 *                                                                                                                     // 4202
 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);                                                         // 4203
 *                                                                                                                     // 4204
 *   $provide.constant('double', function(value) {                                                                     // 4205
 *     return value * 2;                                                                                               // 4206
 *   });                                                                                                               // 4207
 * ```                                                                                                                 // 4208
 */                                                                                                                    // 4209
                                                                                                                       // 4210
                                                                                                                       // 4211
/**                                                                                                                    // 4212
 * @ngdoc method                                                                                                       // 4213
 * @name $provide#decorator                                                                                            // 4214
 * @description                                                                                                        // 4215
 *                                                                                                                     // 4216
 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator                     // 4217
 * intercepts the creation of a service, allowing it to override or modify the behaviour of the                        // 4218
 * service. The object returned by the decorator may be the original service, or a new service                         // 4219
 * object which replaces or wraps and delegates to the original service.                                               // 4220
 *                                                                                                                     // 4221
 * @param {string} name The name of the service to decorate.                                                           // 4222
 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be      // 4223
 *    instantiated and should return the decorated service instance. The function is called using                      // 4224
 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.                      // 4225
 *    Local injection arguments:                                                                                       // 4226
 *                                                                                                                     // 4227
 *    * `$delegate` - The original service instance, which can be monkey patched, configured,                          // 4228
 *      decorated or delegated to.                                                                                     // 4229
 *                                                                                                                     // 4230
 * @example                                                                                                            // 4231
 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting                     // 4232
 * calls to {@link ng.$log#error $log.warn()}.                                                                         // 4233
 * ```js                                                                                                               // 4234
 *   $provide.decorator('$log', ['$delegate', function($delegate) {                                                    // 4235
 *     $delegate.warn = $delegate.error;                                                                               // 4236
 *     return $delegate;                                                                                               // 4237
 *   }]);                                                                                                              // 4238
 * ```                                                                                                                 // 4239
 */                                                                                                                    // 4240
                                                                                                                       // 4241
                                                                                                                       // 4242
function createInjector(modulesToLoad, strictDi) {                                                                     // 4243
  strictDi = (strictDi === true);                                                                                      // 4244
  var INSTANTIATING = {},                                                                                              // 4245
      providerSuffix = 'Provider',                                                                                     // 4246
      path = [],                                                                                                       // 4247
      loadedModules = new HashMap([], true),                                                                           // 4248
      providerCache = {                                                                                                // 4249
        $provide: {                                                                                                    // 4250
            provider: supportObject(provider),                                                                         // 4251
            factory: supportObject(factory),                                                                           // 4252
            service: supportObject(service),                                                                           // 4253
            value: supportObject(value),                                                                               // 4254
            constant: supportObject(constant),                                                                         // 4255
            decorator: decorator                                                                                       // 4256
          }                                                                                                            // 4257
      },                                                                                                               // 4258
      providerInjector = (providerCache.$injector =                                                                    // 4259
          createInternalInjector(providerCache, function(serviceName, caller) {                                        // 4260
            if (angular.isString(caller)) {                                                                            // 4261
              path.push(caller);                                                                                       // 4262
            }                                                                                                          // 4263
            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));                                 // 4264
          })),                                                                                                         // 4265
      instanceCache = {},                                                                                              // 4266
      instanceInjector = (instanceCache.$injector =                                                                    // 4267
          createInternalInjector(instanceCache, function(serviceName, caller) {                                        // 4268
            var provider = providerInjector.get(serviceName + providerSuffix, caller);                                 // 4269
            return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);                           // 4270
          }));                                                                                                         // 4271
                                                                                                                       // 4272
                                                                                                                       // 4273
  forEach(loadModules(modulesToLoad), function(fn) { if (fn) instanceInjector.invoke(fn); });                          // 4274
                                                                                                                       // 4275
  return instanceInjector;                                                                                             // 4276
                                                                                                                       // 4277
  ////////////////////////////////////                                                                                 // 4278
  // $provider                                                                                                         // 4279
  ////////////////////////////////////                                                                                 // 4280
                                                                                                                       // 4281
  function supportObject(delegate) {                                                                                   // 4282
    return function(key, value) {                                                                                      // 4283
      if (isObject(key)) {                                                                                             // 4284
        forEach(key, reverseParams(delegate));                                                                         // 4285
      } else {                                                                                                         // 4286
        return delegate(key, value);                                                                                   // 4287
      }                                                                                                                // 4288
    };                                                                                                                 // 4289
  }                                                                                                                    // 4290
                                                                                                                       // 4291
  function provider(name, provider_) {                                                                                 // 4292
    assertNotHasOwnProperty(name, 'service');                                                                          // 4293
    if (isFunction(provider_) || isArray(provider_)) {                                                                 // 4294
      provider_ = providerInjector.instantiate(provider_);                                                             // 4295
    }                                                                                                                  // 4296
    if (!provider_.$get) {                                                                                             // 4297
      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);                          // 4298
    }                                                                                                                  // 4299
    return providerCache[name + providerSuffix] = provider_;                                                           // 4300
  }                                                                                                                    // 4301
                                                                                                                       // 4302
  function enforceReturnValue(name, factory) {                                                                         // 4303
    return function enforcedReturnValue() {                                                                            // 4304
      var result = instanceInjector.invoke(factory, this);                                                             // 4305
      if (isUndefined(result)) {                                                                                       // 4306
        throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);          // 4307
      }                                                                                                                // 4308
      return result;                                                                                                   // 4309
    };                                                                                                                 // 4310
  }                                                                                                                    // 4311
                                                                                                                       // 4312
  function factory(name, factoryFn, enforce) {                                                                         // 4313
    return provider(name, {                                                                                            // 4314
      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn                                        // 4315
    });                                                                                                                // 4316
  }                                                                                                                    // 4317
                                                                                                                       // 4318
  function service(name, constructor) {                                                                                // 4319
    return factory(name, ['$injector', function($injector) {                                                           // 4320
      return $injector.instantiate(constructor);                                                                       // 4321
    }]);                                                                                                               // 4322
  }                                                                                                                    // 4323
                                                                                                                       // 4324
  function value(name, val) { return factory(name, valueFn(val), false); }                                             // 4325
                                                                                                                       // 4326
  function constant(name, value) {                                                                                     // 4327
    assertNotHasOwnProperty(name, 'constant');                                                                         // 4328
    providerCache[name] = value;                                                                                       // 4329
    instanceCache[name] = value;                                                                                       // 4330
  }                                                                                                                    // 4331
                                                                                                                       // 4332
  function decorator(serviceName, decorFn) {                                                                           // 4333
    var origProvider = providerInjector.get(serviceName + providerSuffix),                                             // 4334
        orig$get = origProvider.$get;                                                                                  // 4335
                                                                                                                       // 4336
    origProvider.$get = function() {                                                                                   // 4337
      var origInstance = instanceInjector.invoke(orig$get, origProvider);                                              // 4338
      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});                                        // 4339
    };                                                                                                                 // 4340
  }                                                                                                                    // 4341
                                                                                                                       // 4342
  ////////////////////////////////////                                                                                 // 4343
  // Module Loading                                                                                                    // 4344
  ////////////////////////////////////                                                                                 // 4345
  function loadModules(modulesToLoad) {                                                                                // 4346
    var runBlocks = [], moduleFn;                                                                                      // 4347
    forEach(modulesToLoad, function(module) {                                                                          // 4348
      if (loadedModules.get(module)) return;                                                                           // 4349
      loadedModules.put(module, true);                                                                                 // 4350
                                                                                                                       // 4351
      function runInvokeQueue(queue) {                                                                                 // 4352
        var i, ii;                                                                                                     // 4353
        for (i = 0, ii = queue.length; i < ii; i++) {                                                                  // 4354
          var invokeArgs = queue[i],                                                                                   // 4355
              provider = providerInjector.get(invokeArgs[0]);                                                          // 4356
                                                                                                                       // 4357
          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);                                                      // 4358
        }                                                                                                              // 4359
      }                                                                                                                // 4360
                                                                                                                       // 4361
      try {                                                                                                            // 4362
        if (isString(module)) {                                                                                        // 4363
          moduleFn = angularModule(module);                                                                            // 4364
          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);                    // 4365
          runInvokeQueue(moduleFn._invokeQueue);                                                                       // 4366
          runInvokeQueue(moduleFn._configBlocks);                                                                      // 4367
        } else if (isFunction(module)) {                                                                               // 4368
            runBlocks.push(providerInjector.invoke(module));                                                           // 4369
        } else if (isArray(module)) {                                                                                  // 4370
            runBlocks.push(providerInjector.invoke(module));                                                           // 4371
        } else {                                                                                                       // 4372
          assertArgFn(module, 'module');                                                                               // 4373
        }                                                                                                              // 4374
      } catch (e) {                                                                                                    // 4375
        if (isArray(module)) {                                                                                         // 4376
          module = module[module.length - 1];                                                                          // 4377
        }                                                                                                              // 4378
        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {                                                // 4379
          // Safari & FF's stack traces don't contain error.message content                                            // 4380
          // unlike those of Chrome and IE                                                                             // 4381
          // So if stack doesn't contain message, we create a new string that contains both.                           // 4382
          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.                          // 4383
          /* jshint -W022 */                                                                                           // 4384
          e = e.message + '\n' + e.stack;                                                                              // 4385
        }                                                                                                              // 4386
        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",                             // 4387
                  module, e.stack || e.message || e);                                                                  // 4388
      }                                                                                                                // 4389
    });                                                                                                                // 4390
    return runBlocks;                                                                                                  // 4391
  }                                                                                                                    // 4392
                                                                                                                       // 4393
  ////////////////////////////////////                                                                                 // 4394
  // internal Injector                                                                                                 // 4395
  ////////////////////////////////////                                                                                 // 4396
                                                                                                                       // 4397
  function createInternalInjector(cache, factory) {                                                                    // 4398
                                                                                                                       // 4399
    function getService(serviceName, caller) {                                                                         // 4400
      if (cache.hasOwnProperty(serviceName)) {                                                                         // 4401
        if (cache[serviceName] === INSTANTIATING) {                                                                    // 4402
          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',                                              // 4403
                    serviceName + ' <- ' + path.join(' <- '));                                                         // 4404
        }                                                                                                              // 4405
        return cache[serviceName];                                                                                     // 4406
      } else {                                                                                                         // 4407
        try {                                                                                                          // 4408
          path.unshift(serviceName);                                                                                   // 4409
          cache[serviceName] = INSTANTIATING;                                                                          // 4410
          return cache[serviceName] = factory(serviceName, caller);                                                    // 4411
        } catch (err) {                                                                                                // 4412
          if (cache[serviceName] === INSTANTIATING) {                                                                  // 4413
            delete cache[serviceName];                                                                                 // 4414
          }                                                                                                            // 4415
          throw err;                                                                                                   // 4416
        } finally {                                                                                                    // 4417
          path.shift();                                                                                                // 4418
        }                                                                                                              // 4419
      }                                                                                                                // 4420
    }                                                                                                                  // 4421
                                                                                                                       // 4422
    function invoke(fn, self, locals, serviceName) {                                                                   // 4423
      if (typeof locals === 'string') {                                                                                // 4424
        serviceName = locals;                                                                                          // 4425
        locals = null;                                                                                                 // 4426
      }                                                                                                                // 4427
                                                                                                                       // 4428
      var args = [],                                                                                                   // 4429
          $inject = createInjector.$$annotate(fn, strictDi, serviceName),                                              // 4430
          length, i,                                                                                                   // 4431
          key;                                                                                                         // 4432
                                                                                                                       // 4433
      for (i = 0, length = $inject.length; i < length; i++) {                                                          // 4434
        key = $inject[i];                                                                                              // 4435
        if (typeof key !== 'string') {                                                                                 // 4436
          throw $injectorMinErr('itkn',                                                                                // 4437
                  'Incorrect injection token! Expected service name as string, got {0}', key);                         // 4438
        }                                                                                                              // 4439
        args.push(                                                                                                     // 4440
          locals && locals.hasOwnProperty(key)                                                                         // 4441
          ? locals[key]                                                                                                // 4442
          : getService(key, serviceName)                                                                               // 4443
        );                                                                                                             // 4444
      }                                                                                                                // 4445
      if (isArray(fn)) {                                                                                               // 4446
        fn = fn[length];                                                                                               // 4447
      }                                                                                                                // 4448
                                                                                                                       // 4449
      // http://jsperf.com/angularjs-invoke-apply-vs-switch                                                            // 4450
      // #5388                                                                                                         // 4451
      return fn.apply(self, args);                                                                                     // 4452
    }                                                                                                                  // 4453
                                                                                                                       // 4454
    function instantiate(Type, locals, serviceName) {                                                                  // 4455
      // Check if Type is annotated and use just the given function at n-1 as parameter                                // 4456
      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);                                 // 4457
      // Object creation: http://jsperf.com/create-constructor/2                                                       // 4458
      var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null);                  // 4459
      var returnedValue = invoke(Type, instance, locals, serviceName);                                                 // 4460
                                                                                                                       // 4461
      return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;                          // 4462
    }                                                                                                                  // 4463
                                                                                                                       // 4464
    return {                                                                                                           // 4465
      invoke: invoke,                                                                                                  // 4466
      instantiate: instantiate,                                                                                        // 4467
      get: getService,                                                                                                 // 4468
      annotate: createInjector.$$annotate,                                                                             // 4469
      has: function(name) {                                                                                            // 4470
        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);                      // 4471
      }                                                                                                                // 4472
    };                                                                                                                 // 4473
  }                                                                                                                    // 4474
}                                                                                                                      // 4475
                                                                                                                       // 4476
createInjector.$$annotate = annotate;                                                                                  // 4477
                                                                                                                       // 4478
/**                                                                                                                    // 4479
 * @ngdoc provider                                                                                                     // 4480
 * @name $anchorScrollProvider                                                                                         // 4481
 *                                                                                                                     // 4482
 * @description                                                                                                        // 4483
 * Use `$anchorScrollProvider` to disable automatic scrolling whenever                                                 // 4484
 * {@link ng.$location#hash $location.hash()} changes.                                                                 // 4485
 */                                                                                                                    // 4486
function $AnchorScrollProvider() {                                                                                     // 4487
                                                                                                                       // 4488
  var autoScrollingEnabled = true;                                                                                     // 4489
                                                                                                                       // 4490
  /**                                                                                                                  // 4491
   * @ngdoc method                                                                                                     // 4492
   * @name $anchorScrollProvider#disableAutoScrolling                                                                  // 4493
   *                                                                                                                   // 4494
   * @description                                                                                                      // 4495
   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to                         // 4496
   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />                 // 4497
   * Use this method to disable automatic scrolling.                                                                   // 4498
   *                                                                                                                   // 4499
   * If automatic scrolling is disabled, one must explicitly call                                                      // 4500
   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the                         // 4501
   * current hash.                                                                                                     // 4502
   */                                                                                                                  // 4503
  this.disableAutoScrolling = function() {                                                                             // 4504
    autoScrollingEnabled = false;                                                                                      // 4505
  };                                                                                                                   // 4506
                                                                                                                       // 4507
  /**                                                                                                                  // 4508
   * @ngdoc service                                                                                                    // 4509
   * @name $anchorScroll                                                                                               // 4510
   * @kind function                                                                                                    // 4511
   * @requires $window                                                                                                 // 4512
   * @requires $location                                                                                               // 4513
   * @requires $rootScope                                                                                              // 4514
   *                                                                                                                   // 4515
   * @description                                                                                                      // 4516
   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the                     // 4517
   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified                     // 4518
   * in the                                                                                                            // 4519
   * [HTML5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).                      // 4520
   *                                                                                                                   // 4521
   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to                       // 4522
   * match any anchor whenever it changes. This can be disabled by calling                                             // 4523
   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.               // 4524
   *                                                                                                                   // 4525
   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a                      // 4526
   * vertical scroll-offset (either fixed or dynamic).                                                                 // 4527
   *                                                                                                                   // 4528
   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of                      // 4529
   *                       {@link ng.$location#hash $location.hash()} will be used.                                    // 4530
   *                                                                                                                   // 4531
   * @property {(number|function|jqLite)} yOffset                                                                      // 4532
   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed                             // 4533
   * positioned elements at the top of the page, such as navbars, headers etc.                                         // 4534
   *                                                                                                                   // 4535
   * `yOffset` can be specified in various ways:                                                                       // 4536
   * - **number**: A fixed number of pixels to be used as offset.<br /><br />                                          // 4537
   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return                     // 4538
   *   a number representing the offset (in pixels).<br /><br />                                                       // 4539
   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from                     // 4540
   *   the top of the page to the element's bottom will be used as offset.<br />                                       // 4541
   *   **Note**: The element will be taken into account only as long as its `position` is set to                       // 4542
   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust                        // 4543
   *   their height and/or positioning according to the viewport's size.                                               // 4544
   *                                                                                                                   // 4545
   * <br />                                                                                                            // 4546
   * <div class="alert alert-warning">                                                                                 // 4547
   * In order for `yOffset` to work properly, scrolling should take place on the document's root and                   // 4548
   * not some child element.                                                                                           // 4549
   * </div>                                                                                                            // 4550
   *                                                                                                                   // 4551
   * @example                                                                                                          // 4552
     <example module="anchorScrollExample">                                                                            // 4553
       <file name="index.html">                                                                                        // 4554
         <div id="scrollArea" ng-controller="ScrollController">                                                        // 4555
           <a ng-click="gotoBottom()">Go to bottom</a>                                                                 // 4556
           <a id="bottom"></a> You're at the bottom!                                                                   // 4557
         </div>                                                                                                        // 4558
       </file>                                                                                                         // 4559
       <file name="script.js">                                                                                         // 4560
         angular.module('anchorScrollExample', [])                                                                     // 4561
           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',                                    // 4562
             function ($scope, $location, $anchorScroll) {                                                             // 4563
               $scope.gotoBottom = function() {                                                                        // 4564
                 // set the location.hash to the id of                                                                 // 4565
                 // the element you wish to scroll to.                                                                 // 4566
                 $location.hash('bottom');                                                                             // 4567
                                                                                                                       // 4568
                 // call $anchorScroll()                                                                               // 4569
                 $anchorScroll();                                                                                      // 4570
               };                                                                                                      // 4571
             }]);                                                                                                      // 4572
       </file>                                                                                                         // 4573
       <file name="style.css">                                                                                         // 4574
         #scrollArea {                                                                                                 // 4575
           height: 280px;                                                                                              // 4576
           overflow: auto;                                                                                             // 4577
         }                                                                                                             // 4578
                                                                                                                       // 4579
         #bottom {                                                                                                     // 4580
           display: block;                                                                                             // 4581
           margin-top: 2000px;                                                                                         // 4582
         }                                                                                                             // 4583
       </file>                                                                                                         // 4584
     </example>                                                                                                        // 4585
   *                                                                                                                   // 4586
   * <hr />                                                                                                            // 4587
   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).                   // 4588
   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.                                      // 4589
   *                                                                                                                   // 4590
   * @example                                                                                                          // 4591
     <example module="anchorScrollOffsetExample">                                                                      // 4592
       <file name="index.html">                                                                                        // 4593
         <div class="fixed-header" ng-controller="headerCtrl">                                                         // 4594
           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">                                           // 4595
             Go to anchor {{x}}                                                                                        // 4596
           </a>                                                                                                        // 4597
         </div>                                                                                                        // 4598
         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">                                            // 4599
           Anchor {{x}} of 5                                                                                           // 4600
         </div>                                                                                                        // 4601
       </file>                                                                                                         // 4602
       <file name="script.js">                                                                                         // 4603
         angular.module('anchorScrollOffsetExample', [])                                                               // 4604
           .run(['$anchorScroll', function($anchorScroll) {                                                            // 4605
             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels                                         // 4606
           }])                                                                                                         // 4607
           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',                                          // 4608
             function ($anchorScroll, $location, $scope) {                                                             // 4609
               $scope.gotoAnchor = function(x) {                                                                       // 4610
                 var newHash = 'anchor' + x;                                                                           // 4611
                 if ($location.hash() !== newHash) {                                                                   // 4612
                   // set the $location.hash to `newHash` and                                                          // 4613
                   // $anchorScroll will automatically scroll to it                                                    // 4614
                   $location.hash('anchor' + x);                                                                       // 4615
                 } else {                                                                                              // 4616
                   // call $anchorScroll() explicitly,                                                                 // 4617
                   // since $location.hash hasn't changed                                                              // 4618
                   $anchorScroll();                                                                                    // 4619
                 }                                                                                                     // 4620
               };                                                                                                      // 4621
             }                                                                                                         // 4622
           ]);                                                                                                         // 4623
       </file>                                                                                                         // 4624
       <file name="style.css">                                                                                         // 4625
         body {                                                                                                        // 4626
           padding-top: 50px;                                                                                          // 4627
         }                                                                                                             // 4628
                                                                                                                       // 4629
         .anchor {                                                                                                     // 4630
           border: 2px dashed DarkOrchid;                                                                              // 4631
           padding: 10px 10px 200px 10px;                                                                              // 4632
         }                                                                                                             // 4633
                                                                                                                       // 4634
         .fixed-header {                                                                                               // 4635
           background-color: rgba(0, 0, 0, 0.2);                                                                       // 4636
           height: 50px;                                                                                               // 4637
           position: fixed;                                                                                            // 4638
           top: 0; left: 0; right: 0;                                                                                  // 4639
         }                                                                                                             // 4640
                                                                                                                       // 4641
         .fixed-header > a {                                                                                           // 4642
           display: inline-block;                                                                                      // 4643
           margin: 5px 15px;                                                                                           // 4644
         }                                                                                                             // 4645
       </file>                                                                                                         // 4646
     </example>                                                                                                        // 4647
   */                                                                                                                  // 4648
  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {                        // 4649
    var document = $window.document;                                                                                   // 4650
                                                                                                                       // 4651
    // Helper function to get first anchor from a NodeList                                                             // 4652
    // (using `Array#some()` instead of `angular#forEach()` since it's more performant                                 // 4653
    //  and working in all supported browsers.)                                                                        // 4654
    function getFirstAnchor(list) {                                                                                    // 4655
      var result = null;                                                                                               // 4656
      Array.prototype.some.call(list, function(element) {                                                              // 4657
        if (nodeName_(element) === 'a') {                                                                              // 4658
          result = element;                                                                                            // 4659
          return true;                                                                                                 // 4660
        }                                                                                                              // 4661
      });                                                                                                              // 4662
      return result;                                                                                                   // 4663
    }                                                                                                                  // 4664
                                                                                                                       // 4665
    function getYOffset() {                                                                                            // 4666
                                                                                                                       // 4667
      var offset = scroll.yOffset;                                                                                     // 4668
                                                                                                                       // 4669
      if (isFunction(offset)) {                                                                                        // 4670
        offset = offset();                                                                                             // 4671
      } else if (isElement(offset)) {                                                                                  // 4672
        var elem = offset[0];                                                                                          // 4673
        var style = $window.getComputedStyle(elem);                                                                    // 4674
        if (style.position !== 'fixed') {                                                                              // 4675
          offset = 0;                                                                                                  // 4676
        } else {                                                                                                       // 4677
          offset = elem.getBoundingClientRect().bottom;                                                                // 4678
        }                                                                                                              // 4679
      } else if (!isNumber(offset)) {                                                                                  // 4680
        offset = 0;                                                                                                    // 4681
      }                                                                                                                // 4682
                                                                                                                       // 4683
      return offset;                                                                                                   // 4684
    }                                                                                                                  // 4685
                                                                                                                       // 4686
    function scrollTo(elem) {                                                                                          // 4687
      if (elem) {                                                                                                      // 4688
        elem.scrollIntoView();                                                                                         // 4689
                                                                                                                       // 4690
        var offset = getYOffset();                                                                                     // 4691
                                                                                                                       // 4692
        if (offset) {                                                                                                  // 4693
          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.                   // 4694
          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the                   // 4695
          // top of the viewport.                                                                                      // 4696
          //                                                                                                           // 4697
          // IF the number of pixels from the top of `elem` to the end of the page's content is less                   // 4698
          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some                  // 4699
          // way down the page.                                                                                        // 4700
          //                                                                                                           // 4701
          // This is often the case for elements near the bottom of the page.                                          // 4702
          //                                                                                                           // 4703
          // In such cases we do not need to scroll the whole `offset` up, just the difference between                 // 4704
          // the top of the element and the offset, which is enough to align the top of `elem` at the                  // 4705
          // desired position.                                                                                         // 4706
          var elemTop = elem.getBoundingClientRect().top;                                                              // 4707
          $window.scrollBy(0, elemTop - offset);                                                                       // 4708
        }                                                                                                              // 4709
      } else {                                                                                                         // 4710
        $window.scrollTo(0, 0);                                                                                        // 4711
      }                                                                                                                // 4712
    }                                                                                                                  // 4713
                                                                                                                       // 4714
    function scroll(hash) {                                                                                            // 4715
      hash = isString(hash) ? hash : $location.hash();                                                                 // 4716
      var elm;                                                                                                         // 4717
                                                                                                                       // 4718
      // empty hash, scroll to the top of the page                                                                     // 4719
      if (!hash) scrollTo(null);                                                                                       // 4720
                                                                                                                       // 4721
      // element with given id                                                                                         // 4722
      else if ((elm = document.getElementById(hash))) scrollTo(elm);                                                   // 4723
                                                                                                                       // 4724
      // first anchor with given name :-D                                                                              // 4725
      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);                                // 4726
                                                                                                                       // 4727
      // no element and hash == 'top', scroll to the top of the page                                                   // 4728
      else if (hash === 'top') scrollTo(null);                                                                         // 4729
    }                                                                                                                  // 4730
                                                                                                                       // 4731
    // does not scroll when user clicks on anchor link that is currently on                                            // 4732
    // (no url change, no $location.hash() change), browser native does scroll                                         // 4733
    if (autoScrollingEnabled) {                                                                                        // 4734
      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},                                         // 4735
        function autoScrollWatchAction(newVal, oldVal) {                                                               // 4736
          // skip the initial scroll if $location.hash is empty                                                        // 4737
          if (newVal === oldVal && newVal === '') return;                                                              // 4738
                                                                                                                       // 4739
          jqLiteDocumentLoaded(function() {                                                                            // 4740
            $rootScope.$evalAsync(scroll);                                                                             // 4741
          });                                                                                                          // 4742
        });                                                                                                            // 4743
    }                                                                                                                  // 4744
                                                                                                                       // 4745
    return scroll;                                                                                                     // 4746
  }];                                                                                                                  // 4747
}                                                                                                                      // 4748
                                                                                                                       // 4749
var $animateMinErr = minErr('$animate');                                                                               // 4750
var ELEMENT_NODE = 1;                                                                                                  // 4751
var NG_ANIMATE_CLASSNAME = 'ng-animate';                                                                               // 4752
                                                                                                                       // 4753
function mergeClasses(a,b) {                                                                                           // 4754
  if (!a && !b) return '';                                                                                             // 4755
  if (!a) return b;                                                                                                    // 4756
  if (!b) return a;                                                                                                    // 4757
  if (isArray(a)) a = a.join(' ');                                                                                     // 4758
  if (isArray(b)) b = b.join(' ');                                                                                     // 4759
  return a + ' ' + b;                                                                                                  // 4760
}                                                                                                                      // 4761
                                                                                                                       // 4762
function extractElementNode(element) {                                                                                 // 4763
  for (var i = 0; i < element.length; i++) {                                                                           // 4764
    var elm = element[i];                                                                                              // 4765
    if (elm.nodeType === ELEMENT_NODE) {                                                                               // 4766
      return elm;                                                                                                      // 4767
    }                                                                                                                  // 4768
  }                                                                                                                    // 4769
}                                                                                                                      // 4770
                                                                                                                       // 4771
function splitClasses(classes) {                                                                                       // 4772
  if (isString(classes)) {                                                                                             // 4773
    classes = classes.split(' ');                                                                                      // 4774
  }                                                                                                                    // 4775
                                                                                                                       // 4776
  // Use createMap() to prevent class assumptions involving property names in                                          // 4777
  // Object.prototype                                                                                                  // 4778
  var obj = createMap();                                                                                               // 4779
  forEach(classes, function(klass) {                                                                                   // 4780
    // sometimes the split leaves empty string values                                                                  // 4781
    // incase extra spaces were applied to the options                                                                 // 4782
    if (klass.length) {                                                                                                // 4783
      obj[klass] = true;                                                                                               // 4784
    }                                                                                                                  // 4785
  });                                                                                                                  // 4786
  return obj;                                                                                                          // 4787
}                                                                                                                      // 4788
                                                                                                                       // 4789
// if any other type of options value besides an Object value is                                                       // 4790
// passed into the $animate.method() animation then this helper code                                                   // 4791
// will be run which will ignore it. While this patch is not the                                                       // 4792
// greatest solution to this, a lot of existing plugins depend on                                                      // 4793
// $animate to either call the callback (< 1.2) or return a promise                                                    // 4794
// that can be changed. This helper function ensures that the options                                                  // 4795
// are wiped clean incase a callback function is provided.                                                             // 4796
function prepareAnimateOptions(options) {                                                                              // 4797
  return isObject(options)                                                                                             // 4798
      ? options                                                                                                        // 4799
      : {};                                                                                                            // 4800
}                                                                                                                      // 4801
                                                                                                                       // 4802
var $$CoreAnimateRunnerProvider = function() {                                                                         // 4803
  this.$get = ['$q', '$$rAF', function($q, $$rAF) {                                                                    // 4804
    function AnimateRunner() {}                                                                                        // 4805
    AnimateRunner.all = noop;                                                                                          // 4806
    AnimateRunner.chain = noop;                                                                                        // 4807
    AnimateRunner.prototype = {                                                                                        // 4808
      end: noop,                                                                                                       // 4809
      cancel: noop,                                                                                                    // 4810
      resume: noop,                                                                                                    // 4811
      pause: noop,                                                                                                     // 4812
      complete: noop,                                                                                                  // 4813
      then: function(pass, fail) {                                                                                     // 4814
        return $q(function(resolve) {                                                                                  // 4815
          $$rAF(function() {                                                                                           // 4816
            resolve();                                                                                                 // 4817
          });                                                                                                          // 4818
        }).then(pass, fail);                                                                                           // 4819
      }                                                                                                                // 4820
    };                                                                                                                 // 4821
    return AnimateRunner;                                                                                              // 4822
  }];                                                                                                                  // 4823
};                                                                                                                     // 4824
                                                                                                                       // 4825
// this is prefixed with Core since it conflicts with                                                                  // 4826
// the animateQueueProvider defined in ngAnimate/animateQueue.js                                                       // 4827
var $$CoreAnimateQueueProvider = function() {                                                                          // 4828
  var postDigestQueue = new HashMap();                                                                                 // 4829
  var postDigestElements = [];                                                                                         // 4830
                                                                                                                       // 4831
  this.$get = ['$$AnimateRunner', '$rootScope',                                                                        // 4832
       function($$AnimateRunner,   $rootScope) {                                                                       // 4833
    return {                                                                                                           // 4834
      enabled: noop,                                                                                                   // 4835
      on: noop,                                                                                                        // 4836
      off: noop,                                                                                                       // 4837
      pin: noop,                                                                                                       // 4838
                                                                                                                       // 4839
      push: function(element, event, options, domOperation) {                                                          // 4840
        domOperation        && domOperation();                                                                         // 4841
                                                                                                                       // 4842
        options = options || {};                                                                                       // 4843
        options.from        && element.css(options.from);                                                              // 4844
        options.to          && element.css(options.to);                                                                // 4845
                                                                                                                       // 4846
        if (options.addClass || options.removeClass) {                                                                 // 4847
          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);                                  // 4848
        }                                                                                                              // 4849
                                                                                                                       // 4850
        return new $$AnimateRunner(); // jshint ignore:line                                                            // 4851
      }                                                                                                                // 4852
    };                                                                                                                 // 4853
                                                                                                                       // 4854
    function addRemoveClassesPostDigest(element, add, remove) {                                                        // 4855
      var data = postDigestQueue.get(element);                                                                         // 4856
      var classVal;                                                                                                    // 4857
                                                                                                                       // 4858
      if (!data) {                                                                                                     // 4859
        postDigestQueue.put(element, data = {});                                                                       // 4860
        postDigestElements.push(element);                                                                              // 4861
      }                                                                                                                // 4862
                                                                                                                       // 4863
      if (add) {                                                                                                       // 4864
        forEach(add.split(' '), function(className) {                                                                  // 4865
          if (className) {                                                                                             // 4866
            data[className] = true;                                                                                    // 4867
          }                                                                                                            // 4868
        });                                                                                                            // 4869
      }                                                                                                                // 4870
                                                                                                                       // 4871
      if (remove) {                                                                                                    // 4872
        forEach(remove.split(' '), function(className) {                                                               // 4873
          if (className) {                                                                                             // 4874
            data[className] = false;                                                                                   // 4875
          }                                                                                                            // 4876
        });                                                                                                            // 4877
      }                                                                                                                // 4878
                                                                                                                       // 4879
      if (postDigestElements.length > 1) return;                                                                       // 4880
                                                                                                                       // 4881
      $rootScope.$$postDigest(function() {                                                                             // 4882
        forEach(postDigestElements, function(element) {                                                                // 4883
          var data = postDigestQueue.get(element);                                                                     // 4884
          if (data) {                                                                                                  // 4885
            var existing = splitClasses(element.attr('class'));                                                        // 4886
            var toAdd = '';                                                                                            // 4887
            var toRemove = '';                                                                                         // 4888
            forEach(data, function(status, className) {                                                                // 4889
              var hasClass = !!existing[className];                                                                    // 4890
              if (status !== hasClass) {                                                                               // 4891
                if (status) {                                                                                          // 4892
                  toAdd += (toAdd.length ? ' ' : '') + className;                                                      // 4893
                } else {                                                                                               // 4894
                  toRemove += (toRemove.length ? ' ' : '') + className;                                                // 4895
                }                                                                                                      // 4896
              }                                                                                                        // 4897
            });                                                                                                        // 4898
                                                                                                                       // 4899
            forEach(element, function(elm) {                                                                           // 4900
              toAdd    && jqLiteAddClass(elm, toAdd);                                                                  // 4901
              toRemove && jqLiteRemoveClass(elm, toRemove);                                                            // 4902
            });                                                                                                        // 4903
            postDigestQueue.remove(element);                                                                           // 4904
          }                                                                                                            // 4905
        });                                                                                                            // 4906
                                                                                                                       // 4907
        postDigestElements.length = 0;                                                                                 // 4908
      });                                                                                                              // 4909
    }                                                                                                                  // 4910
  }];                                                                                                                  // 4911
};                                                                                                                     // 4912
                                                                                                                       // 4913
/**                                                                                                                    // 4914
 * @ngdoc provider                                                                                                     // 4915
 * @name $animateProvider                                                                                              // 4916
 *                                                                                                                     // 4917
 * @description                                                                                                        // 4918
 * Default implementation of $animate that doesn't perform any animations, instead just                                // 4919
 * synchronously performs DOM updates and resolves the returned runner promise.                                        // 4920
 *                                                                                                                     // 4921
 * In order to enable animations the `ngAnimate` module has to be loaded.                                              // 4922
 *                                                                                                                     // 4923
 * To see the functional implementation check out `src/ngAnimate/animate.js`.                                          // 4924
 */                                                                                                                    // 4925
var $AnimateProvider = ['$provide', function($provide) {                                                               // 4926
  var provider = this;                                                                                                 // 4927
                                                                                                                       // 4928
  this.$$registeredAnimations = Object.create(null);                                                                   // 4929
                                                                                                                       // 4930
   /**                                                                                                                 // 4931
   * @ngdoc method                                                                                                     // 4932
   * @name $animateProvider#register                                                                                   // 4933
   *                                                                                                                   // 4934
   * @description                                                                                                      // 4935
   * Registers a new injectable animation factory function. The factory function produces the                          // 4936
   * animation object which contains callback functions for each event that is expected to be                          // 4937
   * animated.                                                                                                         // 4938
   *                                                                                                                   // 4939
   *   * `eventFn`: `function(element, ... , doneFunction, options)`                                                   // 4940
   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending                    // 4941
   *   on the type of animation additional arguments will be injected into the animation function. The                 // 4942
   *   list below explains the function signatures for the different animation methods:                                // 4943
   *                                                                                                                   // 4944
   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)                              // 4945
   *   - addClass: function(element, addedClasses, doneFunction, options)                                              // 4946
   *   - removeClass: function(element, removedClasses, doneFunction, options)                                         // 4947
   *   - enter, leave, move: function(element, doneFunction, options)                                                  // 4948
   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)                                       // 4949
   *                                                                                                                   // 4950
   *   Make sure to trigger the `doneFunction` once the animation is fully complete.                                   // 4951
   *                                                                                                                   // 4952
   * ```js                                                                                                             // 4953
   *   return {                                                                                                        // 4954
   *     //enter, leave, move signature                                                                                // 4955
   *     eventFn : function(element, done, options) {                                                                  // 4956
   *       //code to run the animation                                                                                 // 4957
   *       //once complete, then run done()                                                                            // 4958
   *       return function endFunction(wasCancelled) {                                                                 // 4959
   *         //code to cancel the animation                                                                            // 4960
   *       }                                                                                                           // 4961
   *     }                                                                                                             // 4962
   *   }                                                                                                               // 4963
   * ```                                                                                                               // 4964
   *                                                                                                                   // 4965
   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).      // 4966
   * @param {Function} factory The factory function that will be executed to return the animation                      // 4967
   *                           object.                                                                                 // 4968
   */                                                                                                                  // 4969
  this.register = function(name, factory) {                                                                            // 4970
    if (name && name.charAt(0) !== '.') {                                                                              // 4971
      throw $animateMinErr('notcsel', "Expecting class selector starting with '.' got '{0}'.", name);                  // 4972
    }                                                                                                                  // 4973
                                                                                                                       // 4974
    var key = name + '-animation';                                                                                     // 4975
    provider.$$registeredAnimations[name.substr(1)] = key;                                                             // 4976
    $provide.factory(key, factory);                                                                                    // 4977
  };                                                                                                                   // 4978
                                                                                                                       // 4979
  /**                                                                                                                  // 4980
   * @ngdoc method                                                                                                     // 4981
   * @name $animateProvider#classNameFilter                                                                            // 4982
   *                                                                                                                   // 4983
   * @description                                                                                                      // 4984
   * Sets and/or returns the CSS class regular expression that is checked when performing                              // 4985
   * an animation. Upon bootstrap the classNameFilter value is not set at all and will                                 // 4986
   * therefore enable $animate to attempt to perform an animation on any element that is triggered.                    // 4987
   * When setting the `classNameFilter` value, animations will only be performed on elements                           // 4988
   * that successfully match the filter expression. This in turn can boost performance                                 // 4989
   * for low-powered devices as well as applications containing a lot of structural operations.                        // 4990
   * @param {RegExp=} expression The className expression which will be checked against all animations                 // 4991
   * @return {RegExp} The current CSS className expression value. If null then there is no expression value            // 4992
   */                                                                                                                  // 4993
  this.classNameFilter = function(expression) {                                                                        // 4994
    if (arguments.length === 1) {                                                                                      // 4995
      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;                                     // 4996
      if (this.$$classNameFilter) {                                                                                    // 4997
        var reservedRegex = new RegExp("(\\s+|\\/)" + NG_ANIMATE_CLASSNAME + "(\\s+|\\/)");                            // 4998
        if (reservedRegex.test(this.$$classNameFilter.toString())) {                                                   // 4999
          throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);
                                                                                                                       // 5001
        }                                                                                                              // 5002
      }                                                                                                                // 5003
    }                                                                                                                  // 5004
    return this.$$classNameFilter;                                                                                     // 5005
  };                                                                                                                   // 5006
                                                                                                                       // 5007
  this.$get = ['$$animateQueue', function($$animateQueue) {                                                            // 5008
    function domInsert(element, parentElement, afterElement) {                                                         // 5009
      // if for some reason the previous element was removed                                                           // 5010
      // from the dom sometime before this code runs then let's                                                        // 5011
      // just stick to using the parent element as the anchor                                                          // 5012
      if (afterElement) {                                                                                              // 5013
        var afterNode = extractElementNode(afterElement);                                                              // 5014
        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {                                 // 5015
          afterElement = null;                                                                                         // 5016
        }                                                                                                              // 5017
      }                                                                                                                // 5018
      afterElement ? afterElement.after(element) : parentElement.prepend(element);                                     // 5019
    }                                                                                                                  // 5020
                                                                                                                       // 5021
    /**                                                                                                                // 5022
     * @ngdoc service                                                                                                  // 5023
     * @name $animate                                                                                                  // 5024
     * @description The $animate service exposes a series of DOM utility methods that provide support                  // 5025
     * for animation hooks. The default behavior is the application of DOM operations, however,                        // 5026
     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting                  // 5027
     * to ensure that animation runs with the triggered DOM operation.                                                 // 5028
     *                                                                                                                 // 5029
     * By default $animate doesn't trigger an animations. This is because the `ngAnimate` module isn't                 // 5030
     * included and only when it is active then the animation hooks that `$animate` triggers will be                   // 5031
     * functional. Once active then all structural `ng-` directives will trigger animations as they perform            // 5032
     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,                       // 5033
     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.                                        // 5034
     *                                                                                                                 // 5035
     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
     *                                                                                                                 // 5037
     * To learn more about enabling animation support, click here to visit the                                         // 5038
     * {@link ngAnimate ngAnimate module page}.                                                                        // 5039
     */                                                                                                                // 5040
    return {                                                                                                           // 5041
      // we don't call it directly since non-existant arguments may                                                    // 5042
      // be interpreted as null within the sub enabled function                                                        // 5043
                                                                                                                       // 5044
      /**                                                                                                              // 5045
       *                                                                                                               // 5046
       * @ngdoc method                                                                                                 // 5047
       * @name $animate#on                                                                                             // 5048
       * @kind function                                                                                                // 5049
       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)      // 5050
       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
       *    is fired with the following params:                                                                        // 5052
       *                                                                                                               // 5053
       * ```js                                                                                                         // 5054
       * $animate.on('enter', container,                                                                               // 5055
       *    function callback(element, phase) {                                                                        // 5056
       *      // cool we detected an enter animation within the container                                              // 5057
       *    }                                                                                                          // 5058
       * );                                                                                                            // 5059
       * ```                                                                                                           // 5060
       *                                                                                                               // 5061
       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
       *     as well as among its children                                                                             // 5064
       * @param {Function} callback the callback function that will be fired when the listener is triggered            // 5065
       *                                                                                                               // 5066
       * The arguments present in the callback function are:                                                           // 5067
       * * `element` - The captured DOM element that the animation was fired on.                                       // 5068
       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
       */                                                                                                              // 5070
      on: $$animateQueue.on,                                                                                           // 5071
                                                                                                                       // 5072
      /**                                                                                                              // 5073
       *                                                                                                               // 5074
       * @ngdoc method                                                                                                 // 5075
       * @name $animate#off                                                                                            // 5076
       * @kind function                                                                                                // 5077
       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
       * can be used in three different ways depending on the arguments:                                               // 5079
       *                                                                                                               // 5080
       * ```js                                                                                                         // 5081
       * // remove all the animation event listeners listening for `enter`                                             // 5082
       * $animate.off('enter');                                                                                        // 5083
       *                                                                                                               // 5084
       * // remove all the animation event listeners listening for `enter` on the given element and its children       // 5085
       * $animate.off('enter', container);                                                                             // 5086
       *                                                                                                               // 5087
       * // remove the event listener function provided by `listenerFn` that is set                                    // 5088
       * // to listen for `enter` on the given `element` as well as its children                                       // 5089
       * $animate.off('enter', container, callback);                                                                   // 5090
       * ```                                                                                                           // 5091
       *                                                                                                               // 5092
       * @param {string} event the animation event (e.g. enter, leave, move, addClass, removeClass, etc...)            // 5093
       * @param {DOMElement=} container the container element the event listener was placed on                         // 5094
       * @param {Function=} callback the callback function that was registered as the listener                         // 5095
       */                                                                                                              // 5096
      off: $$animateQueue.off,                                                                                         // 5097
                                                                                                                       // 5098
      /**                                                                                                              // 5099
       * @ngdoc method                                                                                                 // 5100
       * @name $animate#pin                                                                                            // 5101
       * @kind function                                                                                                // 5102
       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
       *    element despite being outside the realm of the application or within another application. Say for example if the application
       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
       *                                                                                                               // 5109
       *    Note that this feature is only active when the `ngAnimate` module is used.                                 // 5110
       *                                                                                                               // 5111
       * @param {DOMElement} element the external element that will be pinned                                          // 5112
       * @param {DOMElement} parentElement the host parent element that will be associated with the external element   // 5113
       */                                                                                                              // 5114
      pin: $$animateQueue.pin,                                                                                         // 5115
                                                                                                                       // 5116
      /**                                                                                                              // 5117
       *                                                                                                               // 5118
       * @ngdoc method                                                                                                 // 5119
       * @name $animate#enabled                                                                                        // 5120
       * @kind function                                                                                                // 5121
       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
       * function can be called in four ways:                                                                          // 5123
       *                                                                                                               // 5124
       * ```js                                                                                                         // 5125
       * // returns true or false                                                                                      // 5126
       * $animate.enabled();                                                                                           // 5127
       *                                                                                                               // 5128
       * // changes the enabled state for all animations                                                               // 5129
       * $animate.enabled(false);                                                                                      // 5130
       * $animate.enabled(true);                                                                                       // 5131
       *                                                                                                               // 5132
       * // returns true or false if animations are enabled for an element                                             // 5133
       * $animate.enabled(element);                                                                                    // 5134
       *                                                                                                               // 5135
       * // changes the enabled state for an element and its children                                                  // 5136
       * $animate.enabled(element, true);                                                                              // 5137
       * $animate.enabled(element, false);                                                                             // 5138
       * ```                                                                                                           // 5139
       *                                                                                                               // 5140
       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state       // 5141
       * @param {boolean=} enabled whether or not the animations will be enabled for the element                       // 5142
       *                                                                                                               // 5143
       * @return {boolean} whether or not animations are enabled                                                       // 5144
       */                                                                                                              // 5145
      enabled: $$animateQueue.enabled,                                                                                 // 5146
                                                                                                                       // 5147
      /**                                                                                                              // 5148
       * @ngdoc method                                                                                                 // 5149
       * @name $animate#cancel                                                                                         // 5150
       * @kind function                                                                                                // 5151
       * @description Cancels the provided animation.                                                                  // 5152
       *                                                                                                               // 5153
       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.        // 5154
       */                                                                                                              // 5155
      cancel: function(runner) {                                                                                       // 5156
        runner.end && runner.end();                                                                                    // 5157
      },                                                                                                               // 5158
                                                                                                                       // 5159
      /**                                                                                                              // 5160
       *                                                                                                               // 5161
       * @ngdoc method                                                                                                 // 5162
       * @name $animate#enter                                                                                          // 5163
       * @kind function                                                                                                // 5164
       * @description Inserts the element into the DOM either after the `after` element (if provided) or               // 5165
       *   as the first child within the `parent` element and then triggers an animation.                              // 5166
       *   A promise is returned that will be resolved during the next digest once the animation                       // 5167
       *   has completed.                                                                                              // 5168
       *                                                                                                               // 5169
       * @param {DOMElement} element the element which will be inserted into the DOM                                   // 5170
       * @param {DOMElement} parent the parent element which will append the element as                                // 5171
       *   a child (so long as the after element is not present)                                                       // 5172
       * @param {DOMElement=} after the sibling element after which the element will be appended                       // 5173
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5174
       *                                                                                                               // 5175
       * @return {Promise} the animation callback promise                                                              // 5176
       */                                                                                                              // 5177
      enter: function(element, parent, after, options) {                                                               // 5178
        parent = parent && jqLite(parent);                                                                             // 5179
        after = after && jqLite(after);                                                                                // 5180
        parent = parent || after.parent();                                                                             // 5181
        domInsert(element, parent, after);                                                                             // 5182
        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));                                  // 5183
      },                                                                                                               // 5184
                                                                                                                       // 5185
      /**                                                                                                              // 5186
       *                                                                                                               // 5187
       * @ngdoc method                                                                                                 // 5188
       * @name $animate#move                                                                                           // 5189
       * @kind function                                                                                                // 5190
       * @description Inserts (moves) the element into its new position in the DOM either after                        // 5191
       *   the `after` element (if provided) or as the first child within the `parent` element                         // 5192
       *   and then triggers an animation. A promise is returned that will be resolved                                 // 5193
       *   during the next digest once the animation has completed.                                                    // 5194
       *                                                                                                               // 5195
       * @param {DOMElement} element the element which will be moved into the new DOM position                         // 5196
       * @param {DOMElement} parent the parent element which will append the element as                                // 5197
       *   a child (so long as the after element is not present)                                                       // 5198
       * @param {DOMElement=} after the sibling element after which the element will be appended                       // 5199
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5200
       *                                                                                                               // 5201
       * @return {Promise} the animation callback promise                                                              // 5202
       */                                                                                                              // 5203
      move: function(element, parent, after, options) {                                                                // 5204
        parent = parent && jqLite(parent);                                                                             // 5205
        after = after && jqLite(after);                                                                                // 5206
        parent = parent || after.parent();                                                                             // 5207
        domInsert(element, parent, after);                                                                             // 5208
        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));                                   // 5209
      },                                                                                                               // 5210
                                                                                                                       // 5211
      /**                                                                                                              // 5212
       * @ngdoc method                                                                                                 // 5213
       * @name $animate#leave                                                                                          // 5214
       * @kind function                                                                                                // 5215
       * @description Triggers an animation and then removes the element from the DOM.                                 // 5216
       * When the function is called a promise is returned that will be resolved during the next                       // 5217
       * digest once the animation has completed.                                                                      // 5218
       *                                                                                                               // 5219
       * @param {DOMElement} element the element which will be removed from the DOM                                    // 5220
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5221
       *                                                                                                               // 5222
       * @return {Promise} the animation callback promise                                                              // 5223
       */                                                                                                              // 5224
      leave: function(element, options) {                                                                              // 5225
        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {                      // 5226
          element.remove();                                                                                            // 5227
        });                                                                                                            // 5228
      },                                                                                                               // 5229
                                                                                                                       // 5230
      /**                                                                                                              // 5231
       * @ngdoc method                                                                                                 // 5232
       * @name $animate#addClass                                                                                       // 5233
       * @kind function                                                                                                // 5234
       *                                                                                                               // 5235
       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon      // 5236
       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an     // 5237
       *   animation if element already contains the CSS class or if the class is removed at a later step.             // 5238
       *   Note that class-based animations are treated differently compared to structural animations                  // 5239
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points                 // 5240
       *   depending if CSS or JavaScript animations are used.                                                         // 5241
       *                                                                                                               // 5242
       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5243
       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)    // 5244
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5245
       *                                                                                                               // 5246
       * @return {Promise} the animation callback promise                                                              // 5247
       */                                                                                                              // 5248
      addClass: function(element, className, options) {                                                                // 5249
        options = prepareAnimateOptions(options);                                                                      // 5250
        options.addClass = mergeClasses(options.addclass, className);                                                  // 5251
        return $$animateQueue.push(element, 'addClass', options);                                                      // 5252
      },                                                                                                               // 5253
                                                                                                                       // 5254
      /**                                                                                                              // 5255
       * @ngdoc method                                                                                                 // 5256
       * @name $animate#removeClass                                                                                    // 5257
       * @kind function                                                                                                // 5258
       *                                                                                                               // 5259
       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon     // 5260
       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an  // 5261
       *   animation if element does not contain the CSS class or if the class is added at a later step.               // 5262
       *   Note that class-based animations are treated differently compared to structural animations                  // 5263
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points                 // 5264
       *   depending if CSS or JavaScript animations are used.                                                         // 5265
       *                                                                                                               // 5266
       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5267
       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)  // 5268
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5269
       *                                                                                                               // 5270
       * @return {Promise} the animation callback promise                                                              // 5271
       */                                                                                                              // 5272
      removeClass: function(element, className, options) {                                                             // 5273
        options = prepareAnimateOptions(options);                                                                      // 5274
        options.removeClass = mergeClasses(options.removeClass, className);                                            // 5275
        return $$animateQueue.push(element, 'removeClass', options);                                                   // 5276
      },                                                                                                               // 5277
                                                                                                                       // 5278
      /**                                                                                                              // 5279
       * @ngdoc method                                                                                                 // 5280
       * @name $animate#setClass                                                                                       // 5281
       * @kind function                                                                                                // 5282
       *                                                                                                               // 5283
       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)   // 5284
       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and            // 5285
       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has    // 5286
       *    passed. Note that class-based animations are treated differently compared to structural animations         // 5287
       *    (like enter, move and leave) since the CSS classes may be added/removed at different points                // 5288
       *    depending if CSS or JavaScript animations are used.                                                        // 5289
       *                                                                                                               // 5290
       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5291
       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)          // 5292
       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)     // 5293
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5294
       *                                                                                                               // 5295
       * @return {Promise} the animation callback promise                                                              // 5296
       */                                                                                                              // 5297
      setClass: function(element, add, remove, options) {                                                              // 5298
        options = prepareAnimateOptions(options);                                                                      // 5299
        options.addClass = mergeClasses(options.addClass, add);                                                        // 5300
        options.removeClass = mergeClasses(options.removeClass, remove);                                               // 5301
        return $$animateQueue.push(element, 'setClass', options);                                                      // 5302
      },                                                                                                               // 5303
                                                                                                                       // 5304
      /**                                                                                                              // 5305
       * @ngdoc method                                                                                                 // 5306
       * @name $animate#animate                                                                                        // 5307
       * @kind function                                                                                                // 5308
       *                                                                                                               // 5309
       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
       * If any detected CSS transition, keyframe or JavaScript matches the provided className value then the animation will take
       * on the provided styles. For example, if a transition animation is set for the given className then the provided from and
       * to styles will be applied alongside the given transition. If a JavaScript animation is detected then the provided styles
       * will be given in as function paramters into the `animate` method (or as apart of the `options` parameter).    // 5314
       *                                                                                                               // 5315
       * @param {DOMElement} element the element which the CSS styles will be applied to                               // 5316
       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.        // 5320
       *    (Note that if no animation is detected then this value will not be appplied to the element.)               // 5321
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5322
       *                                                                                                               // 5323
       * @return {Promise} the animation callback promise                                                              // 5324
       */                                                                                                              // 5325
      animate: function(element, from, to, className, options) {                                                       // 5326
        options = prepareAnimateOptions(options);                                                                      // 5327
        options.from = options.from ? extend(options.from, from) : from;                                               // 5328
        options.to   = options.to   ? extend(options.to, to)     : to;                                                 // 5329
                                                                                                                       // 5330
        className = className || 'ng-inline-animate';                                                                  // 5331
        options.tempClasses = mergeClasses(options.tempClasses, className);                                            // 5332
        return $$animateQueue.push(element, 'animate', options);                                                       // 5333
      }                                                                                                                // 5334
    };                                                                                                                 // 5335
  }];                                                                                                                  // 5336
}];                                                                                                                    // 5337
                                                                                                                       // 5338
function $$AsyncCallbackProvider() {                                                                                   // 5339
  this.$get = ['$$rAF', '$timeout', function($$rAF, $timeout) {                                                        // 5340
    return $$rAF.supported                                                                                             // 5341
      ? function(fn) { return $$rAF(fn); }                                                                             // 5342
      : function(fn) {                                                                                                 // 5343
        return $timeout(fn, 0, false);                                                                                 // 5344
      };                                                                                                               // 5345
  }];                                                                                                                  // 5346
}                                                                                                                      // 5347
                                                                                                                       // 5348
/* global stripHash: true */                                                                                           // 5349
                                                                                                                       // 5350
/**                                                                                                                    // 5351
 * ! This is a private undocumented service !                                                                          // 5352
 *                                                                                                                     // 5353
 * @name $browser                                                                                                      // 5354
 * @requires $log                                                                                                      // 5355
 * @description                                                                                                        // 5356
 * This object has two goals:                                                                                          // 5357
 *                                                                                                                     // 5358
 * - hide all the global state in the browser caused by the window object                                              // 5359
 * - abstract away all the browser specific features and inconsistencies                                               // 5360
 *                                                                                                                     // 5361
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`                                  // 5362
 * service, which can be used for convenient testing of the application without the interaction with                   // 5363
 * the real browser apis.                                                                                              // 5364
 */                                                                                                                    // 5365
/**                                                                                                                    // 5366
 * @param {object} window The global window object.                                                                    // 5367
 * @param {object} document jQuery wrapped document.                                                                   // 5368
 * @param {object} $log window.console or an object with the same interface.                                           // 5369
 * @param {object} $sniffer $sniffer service                                                                           // 5370
 */                                                                                                                    // 5371
function Browser(window, document, $log, $sniffer) {                                                                   // 5372
  var self = this,                                                                                                     // 5373
      rawDocument = document[0],                                                                                       // 5374
      location = window.location,                                                                                      // 5375
      history = window.history,                                                                                        // 5376
      setTimeout = window.setTimeout,                                                                                  // 5377
      clearTimeout = window.clearTimeout,                                                                              // 5378
      pendingDeferIds = {};                                                                                            // 5379
                                                                                                                       // 5380
  self.isMock = false;                                                                                                 // 5381
                                                                                                                       // 5382
  var outstandingRequestCount = 0;                                                                                     // 5383
  var outstandingRequestCallbacks = [];                                                                                // 5384
                                                                                                                       // 5385
  // TODO(vojta): remove this temporary api                                                                            // 5386
  self.$$completeOutstandingRequest = completeOutstandingRequest;                                                      // 5387
  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };                                       // 5388
                                                                                                                       // 5389
  /**                                                                                                                  // 5390
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`                    // 5391
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.                            // 5392
   */                                                                                                                  // 5393
  function completeOutstandingRequest(fn) {                                                                            // 5394
    try {                                                                                                              // 5395
      fn.apply(null, sliceArgs(arguments, 1));                                                                         // 5396
    } finally {                                                                                                        // 5397
      outstandingRequestCount--;                                                                                       // 5398
      if (outstandingRequestCount === 0) {                                                                             // 5399
        while (outstandingRequestCallbacks.length) {                                                                   // 5400
          try {                                                                                                        // 5401
            outstandingRequestCallbacks.pop()();                                                                       // 5402
          } catch (e) {                                                                                                // 5403
            $log.error(e);                                                                                             // 5404
          }                                                                                                            // 5405
        }                                                                                                              // 5406
      }                                                                                                                // 5407
    }                                                                                                                  // 5408
  }                                                                                                                    // 5409
                                                                                                                       // 5410
  function getHash(url) {                                                                                              // 5411
    var index = url.indexOf('#');                                                                                      // 5412
    return index === -1 ? '' : url.substr(index);                                                                      // 5413
  }                                                                                                                    // 5414
                                                                                                                       // 5415
  /**                                                                                                                  // 5416
   * @private                                                                                                          // 5417
   * Note: this method is used only by scenario runner                                                                 // 5418
   * TODO(vojta): prefix this method with $$ ?                                                                         // 5419
   * @param {function()} callback Function that will be called when no outstanding request                             // 5420
   */                                                                                                                  // 5421
  self.notifyWhenNoOutstandingRequests = function(callback) {                                                          // 5422
    if (outstandingRequestCount === 0) {                                                                               // 5423
      callback();                                                                                                      // 5424
    } else {                                                                                                           // 5425
      outstandingRequestCallbacks.push(callback);                                                                      // 5426
    }                                                                                                                  // 5427
  };                                                                                                                   // 5428
                                                                                                                       // 5429
  //////////////////////////////////////////////////////////////                                                       // 5430
  // URL API                                                                                                           // 5431
  //////////////////////////////////////////////////////////////                                                       // 5432
                                                                                                                       // 5433
  var cachedState, lastHistoryState,                                                                                   // 5434
      lastBrowserUrl = location.href,                                                                                  // 5435
      baseElement = document.find('base'),                                                                             // 5436
      reloadLocation = null;                                                                                           // 5437
                                                                                                                       // 5438
  cacheState();                                                                                                        // 5439
  lastHistoryState = cachedState;                                                                                      // 5440
                                                                                                                       // 5441
  /**                                                                                                                  // 5442
   * @name $browser#url                                                                                                // 5443
   *                                                                                                                   // 5444
   * @description                                                                                                      // 5445
   * GETTER:                                                                                                           // 5446
   * Without any argument, this method just returns current value of location.href.                                    // 5447
   *                                                                                                                   // 5448
   * SETTER:                                                                                                           // 5449
   * With at least one argument, this method sets url to new value.                                                    // 5450
   * If html5 history api supported, pushState/replaceState is used, otherwise                                         // 5451
   * location.href/location.replace is used.                                                                           // 5452
   * Returns its own instance to allow chaining                                                                        // 5453
   *                                                                                                                   // 5454
   * NOTE: this api is intended for use only by the $location service. Please use the                                  // 5455
   * {@link ng.$location $location service} to change url.                                                             // 5456
   *                                                                                                                   // 5457
   * @param {string} url New url (when used as setter)                                                                 // 5458
   * @param {boolean=} replace Should new url replace current history record?                                          // 5459
   * @param {object=} state object to use with pushState/replaceState                                                  // 5460
   */                                                                                                                  // 5461
  self.url = function(url, replace, state) {                                                                           // 5462
    // In modern browsers `history.state` is `null` by default; treating it separately                                 // 5463
    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`                                   // 5464
    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.                                 // 5465
    if (isUndefined(state)) {                                                                                          // 5466
      state = null;                                                                                                    // 5467
    }                                                                                                                  // 5468
                                                                                                                       // 5469
    // Android Browser BFCache causes location, history reference to become stale.                                     // 5470
    if (location !== window.location) location = window.location;                                                      // 5471
    if (history !== window.history) history = window.history;                                                          // 5472
                                                                                                                       // 5473
    // setter                                                                                                          // 5474
    if (url) {                                                                                                         // 5475
      var sameState = lastHistoryState === state;                                                                      // 5476
                                                                                                                       // 5477
      // Don't change anything if previous and current URLs and states match. This also prevents                       // 5478
      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.                                // 5479
      // See https://github.com/angular/angular.js/commit/ffb2701                                                      // 5480
      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {                                                // 5481
        return self;                                                                                                   // 5482
      }                                                                                                                // 5483
      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);                                   // 5484
      lastBrowserUrl = url;                                                                                            // 5485
      lastHistoryState = state;                                                                                        // 5486
      // Don't use history API if only the hash changed                                                                // 5487
      // due to a bug in IE10/IE11 which leads                                                                         // 5488
      // to not firing a `hashchange` nor `popstate` event                                                             // 5489
      // in some cases (see #9143).                                                                                    // 5490
      if ($sniffer.history && (!sameBase || !sameState)) {                                                             // 5491
        history[replace ? 'replaceState' : 'pushState'](state, '', url);                                               // 5492
        cacheState();                                                                                                  // 5493
        // Do the assignment again so that those two variables are referentially identical.                            // 5494
        lastHistoryState = cachedState;                                                                                // 5495
      } else {                                                                                                         // 5496
        if (!sameBase || reloadLocation) {                                                                             // 5497
          reloadLocation = url;                                                                                        // 5498
        }                                                                                                              // 5499
        if (replace) {                                                                                                 // 5500
          location.replace(url);                                                                                       // 5501
        } else if (!sameBase) {                                                                                        // 5502
          location.href = url;                                                                                         // 5503
        } else {                                                                                                       // 5504
          location.hash = getHash(url);                                                                                // 5505
        }                                                                                                              // 5506
      }                                                                                                                // 5507
      return self;                                                                                                     // 5508
    // getter                                                                                                          // 5509
    } else {                                                                                                           // 5510
      // - reloadLocation is needed as browsers don't allow to read out                                                // 5511
      //   the new location.href if a reload happened.                                                                 // 5512
      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172                     // 5513
      return reloadLocation || location.href.replace(/%27/g,"'");                                                      // 5514
    }                                                                                                                  // 5515
  };                                                                                                                   // 5516
                                                                                                                       // 5517
  /**                                                                                                                  // 5518
   * @name $browser#state                                                                                              // 5519
   *                                                                                                                   // 5520
   * @description                                                                                                      // 5521
   * This method is a getter.                                                                                          // 5522
   *                                                                                                                   // 5523
   * Return history.state or null if history.state is undefined.                                                       // 5524
   *                                                                                                                   // 5525
   * @returns {object} state                                                                                           // 5526
   */                                                                                                                  // 5527
  self.state = function() {                                                                                            // 5528
    return cachedState;                                                                                                // 5529
  };                                                                                                                   // 5530
                                                                                                                       // 5531
  var urlChangeListeners = [],                                                                                         // 5532
      urlChangeInit = false;                                                                                           // 5533
                                                                                                                       // 5534
  function cacheStateAndFireUrlChange() {                                                                              // 5535
    cacheState();                                                                                                      // 5536
    fireUrlChange();                                                                                                   // 5537
  }                                                                                                                    // 5538
                                                                                                                       // 5539
  function getCurrentState() {                                                                                         // 5540
    try {                                                                                                              // 5541
      return history.state;                                                                                            // 5542
    } catch (e) {                                                                                                      // 5543
      // MSIE can reportedly throw when there is no state (UNCONFIRMED).                                               // 5544
    }                                                                                                                  // 5545
  }                                                                                                                    // 5546
                                                                                                                       // 5547
  // This variable should be used *only* inside the cacheState function.                                               // 5548
  var lastCachedState = null;                                                                                          // 5549
  function cacheState() {                                                                                              // 5550
    // This should be the only place in $browser where `history.state` is read.                                        // 5551
    cachedState = getCurrentState();                                                                                   // 5552
    cachedState = isUndefined(cachedState) ? null : cachedState;                                                       // 5553
                                                                                                                       // 5554
    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.                                       // 5555
    if (equals(cachedState, lastCachedState)) {                                                                        // 5556
      cachedState = lastCachedState;                                                                                   // 5557
    }                                                                                                                  // 5558
    lastCachedState = cachedState;                                                                                     // 5559
  }                                                                                                                    // 5560
                                                                                                                       // 5561
  function fireUrlChange() {                                                                                           // 5562
    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {                                           // 5563
      return;                                                                                                          // 5564
    }                                                                                                                  // 5565
                                                                                                                       // 5566
    lastBrowserUrl = self.url();                                                                                       // 5567
    lastHistoryState = cachedState;                                                                                    // 5568
    forEach(urlChangeListeners, function(listener) {                                                                   // 5569
      listener(self.url(), cachedState);                                                                               // 5570
    });                                                                                                                // 5571
  }                                                                                                                    // 5572
                                                                                                                       // 5573
  /**                                                                                                                  // 5574
   * @name $browser#onUrlChange                                                                                        // 5575
   *                                                                                                                   // 5576
   * @description                                                                                                      // 5577
   * Register callback function that will be called, when url changes.                                                 // 5578
   *                                                                                                                   // 5579
   * It's only called when the url is changed from outside of angular:                                                 // 5580
   * - user types different url into address bar                                                                       // 5581
   * - user clicks on history (forward/back) button                                                                    // 5582
   * - user clicks on a link                                                                                           // 5583
   *                                                                                                                   // 5584
   * It's not called when url is changed by $browser.url() method                                                      // 5585
   *                                                                                                                   // 5586
   * The listener gets called with new url as parameter.                                                               // 5587
   *                                                                                                                   // 5588
   * NOTE: this api is intended for use only by the $location service. Please use the                                  // 5589
   * {@link ng.$location $location service} to monitor url changes in angular apps.                                    // 5590
   *                                                                                                                   // 5591
   * @param {function(string)} listener Listener function to be called when url changes.                               // 5592
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.                     // 5593
   */                                                                                                                  // 5594
  self.onUrlChange = function(callback) {                                                                              // 5595
    // TODO(vojta): refactor to use node's syntax for events                                                           // 5596
    if (!urlChangeInit) {                                                                                              // 5597
      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)                         // 5598
      // don't fire popstate when user change the address bar and don't fire hashchange when url                       // 5599
      // changed by push/replaceState                                                                                  // 5600
                                                                                                                       // 5601
      // html5 history api - popstate event                                                                            // 5602
      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);                                 // 5603
      // hashchange event                                                                                              // 5604
      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);                                                     // 5605
                                                                                                                       // 5606
      urlChangeInit = true;                                                                                            // 5607
    }                                                                                                                  // 5608
                                                                                                                       // 5609
    urlChangeListeners.push(callback);                                                                                 // 5610
    return callback;                                                                                                   // 5611
  };                                                                                                                   // 5612
                                                                                                                       // 5613
  /**                                                                                                                  // 5614
   * @private                                                                                                          // 5615
   * Remove popstate and hashchange handler from window.                                                               // 5616
   *                                                                                                                   // 5617
   * NOTE: this api is intended for use only by $rootScope.                                                            // 5618
   */                                                                                                                  // 5619
  self.$$applicationDestroyed = function() {                                                                           // 5620
    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);                                             // 5621
  };                                                                                                                   // 5622
                                                                                                                       // 5623
  /**                                                                                                                  // 5624
   * Checks whether the url has changed outside of Angular.                                                            // 5625
   * Needs to be exported to be able to check for changes that have been done in sync,                                 // 5626
   * as hashchange/popstate events fire in async.                                                                      // 5627
   */                                                                                                                  // 5628
  self.$$checkUrlChange = fireUrlChange;                                                                               // 5629
                                                                                                                       // 5630
  //////////////////////////////////////////////////////////////                                                       // 5631
  // Misc API                                                                                                          // 5632
  //////////////////////////////////////////////////////////////                                                       // 5633
                                                                                                                       // 5634
  /**                                                                                                                  // 5635
   * @name $browser#baseHref                                                                                           // 5636
   *                                                                                                                   // 5637
   * @description                                                                                                      // 5638
   * Returns current <base href>                                                                                       // 5639
   * (always relative - without domain)                                                                                // 5640
   *                                                                                                                   // 5641
   * @returns {string} The current base href                                                                           // 5642
   */                                                                                                                  // 5643
  self.baseHref = function() {                                                                                         // 5644
    var href = baseElement.attr('href');                                                                               // 5645
    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';                                                     // 5646
  };                                                                                                                   // 5647
                                                                                                                       // 5648
  /**                                                                                                                  // 5649
   * @name $browser#defer                                                                                              // 5650
   * @param {function()} fn A function, who's execution should be deferred.                                            // 5651
   * @param {number=} [delay=0] of milliseconds to defer the function execution.                                       // 5652
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.                           // 5653
   *                                                                                                                   // 5654
   * @description                                                                                                      // 5655
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.                                                         // 5656
   *                                                                                                                   // 5657
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using                   // 5658
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed                      // 5659
   * via `$browser.defer.flush()`.                                                                                     // 5660
   *                                                                                                                   // 5661
   */                                                                                                                  // 5662
  self.defer = function(fn, delay) {                                                                                   // 5663
    var timeoutId;                                                                                                     // 5664
    outstandingRequestCount++;                                                                                         // 5665
    timeoutId = setTimeout(function() {                                                                                // 5666
      delete pendingDeferIds[timeoutId];                                                                               // 5667
      completeOutstandingRequest(fn);                                                                                  // 5668
    }, delay || 0);                                                                                                    // 5669
    pendingDeferIds[timeoutId] = true;                                                                                 // 5670
    return timeoutId;                                                                                                  // 5671
  };                                                                                                                   // 5672
                                                                                                                       // 5673
                                                                                                                       // 5674
  /**                                                                                                                  // 5675
   * @name $browser#defer.cancel                                                                                       // 5676
   *                                                                                                                   // 5677
   * @description                                                                                                      // 5678
   * Cancels a deferred task identified with `deferId`.                                                                // 5679
   *                                                                                                                   // 5680
   * @param {*} deferId Token returned by the `$browser.defer` function.                                               // 5681
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully                            // 5682
   *                    canceled.                                                                                      // 5683
   */                                                                                                                  // 5684
  self.defer.cancel = function(deferId) {                                                                              // 5685
    if (pendingDeferIds[deferId]) {                                                                                    // 5686
      delete pendingDeferIds[deferId];                                                                                 // 5687
      clearTimeout(deferId);                                                                                           // 5688
      completeOutstandingRequest(noop);                                                                                // 5689
      return true;                                                                                                     // 5690
    }                                                                                                                  // 5691
    return false;                                                                                                      // 5692
  };                                                                                                                   // 5693
                                                                                                                       // 5694
}                                                                                                                      // 5695
                                                                                                                       // 5696
function $BrowserProvider() {                                                                                          // 5697
  this.$get = ['$window', '$log', '$sniffer', '$document',                                                             // 5698
      function($window, $log, $sniffer, $document) {                                                                   // 5699
        return new Browser($window, $document, $log, $sniffer);                                                        // 5700
      }];                                                                                                              // 5701
}                                                                                                                      // 5702
                                                                                                                       // 5703
/**                                                                                                                    // 5704
 * @ngdoc service                                                                                                      // 5705
 * @name $cacheFactory                                                                                                 // 5706
 *                                                                                                                     // 5707
 * @description                                                                                                        // 5708
 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to                               // 5709
 * them.                                                                                                               // 5710
 *                                                                                                                     // 5711
 * ```js                                                                                                               // 5712
 *                                                                                                                     // 5713
 *  var cache = $cacheFactory('cacheId');                                                                              // 5714
 *  expect($cacheFactory.get('cacheId')).toBe(cache);                                                                  // 5715
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();                                                      // 5716
 *                                                                                                                     // 5717
 *  cache.put("key", "value");                                                                                         // 5718
 *  cache.put("another key", "another value");                                                                         // 5719
 *                                                                                                                     // 5720
 *  // We've specified no options on creation                                                                          // 5721
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});                                                            // 5722
 *                                                                                                                     // 5723
 * ```                                                                                                                 // 5724
 *                                                                                                                     // 5725
 *                                                                                                                     // 5726
 * @param {string} cacheId Name or id of the newly created cache.                                                      // 5727
 * @param {object=} options Options object that specifies the cache behavior. Properties:                              // 5728
 *                                                                                                                     // 5729
 *   - `{number=}` `capacity` — turns the cache into LRU cache.                                                        // 5730
 *                                                                                                                     // 5731
 * @returns {object} Newly created cache object with the following set of methods:                                     // 5732
 *                                                                                                                     // 5733
 * - `{object}` `info()` — Returns id, size, and options of cache.                                                     // 5734
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns                     // 5735
 *   it.                                                                                                               // 5736
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.                         // 5737
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.                                        // 5738
 * - `{void}` `removeAll()` — Removes all cached values.                                                               // 5739
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.                                       // 5740
 *                                                                                                                     // 5741
 * @example                                                                                                            // 5742
   <example module="cacheExampleApp">                                                                                  // 5743
     <file name="index.html">                                                                                          // 5744
       <div ng-controller="CacheController">                                                                           // 5745
         <input ng-model="newCacheKey" placeholder="Key">                                                              // 5746
         <input ng-model="newCacheValue" placeholder="Value">                                                          // 5747
         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>                                             // 5748
                                                                                                                       // 5749
         <p ng-if="keys.length">Cached Values</p>                                                                      // 5750
         <div ng-repeat="key in keys">                                                                                 // 5751
           <span ng-bind="key"></span>                                                                                 // 5752
           <span>: </span>                                                                                             // 5753
           <b ng-bind="cache.get(key)"></b>                                                                            // 5754
         </div>                                                                                                        // 5755
                                                                                                                       // 5756
         <p>Cache Info</p>                                                                                             // 5757
         <div ng-repeat="(key, value) in cache.info()">                                                                // 5758
           <span ng-bind="key"></span>                                                                                 // 5759
           <span>: </span>                                                                                             // 5760
           <b ng-bind="value"></b>                                                                                     // 5761
         </div>                                                                                                        // 5762
       </div>                                                                                                          // 5763
     </file>                                                                                                           // 5764
     <file name="script.js">                                                                                           // 5765
       angular.module('cacheExampleApp', []).                                                                          // 5766
         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {                   // 5767
           $scope.keys = [];                                                                                           // 5768
           $scope.cache = $cacheFactory('cacheId');                                                                    // 5769
           $scope.put = function(key, value) {                                                                         // 5770
             if ($scope.cache.get(key) === undefined) {                                                                // 5771
               $scope.keys.push(key);                                                                                  // 5772
             }                                                                                                         // 5773
             $scope.cache.put(key, value === undefined ? null : value);                                                // 5774
           };                                                                                                          // 5775
         }]);                                                                                                          // 5776
     </file>                                                                                                           // 5777
     <file name="style.css">                                                                                           // 5778
       p {                                                                                                             // 5779
         margin: 10px 0 3px;                                                                                           // 5780
       }                                                                                                               // 5781
     </file>                                                                                                           // 5782
   </example>                                                                                                          // 5783
 */                                                                                                                    // 5784
function $CacheFactoryProvider() {                                                                                     // 5785
                                                                                                                       // 5786
  this.$get = function() {                                                                                             // 5787
    var caches = {};                                                                                                   // 5788
                                                                                                                       // 5789
    function cacheFactory(cacheId, options) {                                                                          // 5790
      if (cacheId in caches) {                                                                                         // 5791
        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);                              // 5792
      }                                                                                                                // 5793
                                                                                                                       // 5794
      var size = 0,                                                                                                    // 5795
          stats = extend({}, options, {id: cacheId}),                                                                  // 5796
          data = {},                                                                                                   // 5797
          capacity = (options && options.capacity) || Number.MAX_VALUE,                                                // 5798
          lruHash = {},                                                                                                // 5799
          freshEnd = null,                                                                                             // 5800
          staleEnd = null;                                                                                             // 5801
                                                                                                                       // 5802
      /**                                                                                                              // 5803
       * @ngdoc type                                                                                                   // 5804
       * @name $cacheFactory.Cache                                                                                     // 5805
       *                                                                                                               // 5806
       * @description                                                                                                  // 5807
       * A cache object used to store and retrieve data, primarily used by                                             // 5808
       * {@link $http $http} and the {@link ng.directive:script script} directive to cache                             // 5809
       * templates and other data.                                                                                     // 5810
       *                                                                                                               // 5811
       * ```js                                                                                                         // 5812
       *  angular.module('superCache')                                                                                 // 5813
       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {                                         // 5814
       *      return $cacheFactory('super-cache');                                                                     // 5815
       *    }]);                                                                                                       // 5816
       * ```                                                                                                           // 5817
       *                                                                                                               // 5818
       * Example test:                                                                                                 // 5819
       *                                                                                                               // 5820
       * ```js                                                                                                         // 5821
       *  it('should behave like a cache', inject(function(superCache) {                                               // 5822
       *    superCache.put('key', 'value');                                                                            // 5823
       *    superCache.put('another key', 'another value');                                                            // 5824
       *                                                                                                               // 5825
       *    expect(superCache.info()).toEqual({                                                                        // 5826
       *      id: 'super-cache',                                                                                       // 5827
       *      size: 2                                                                                                  // 5828
       *    });                                                                                                        // 5829
       *                                                                                                               // 5830
       *    superCache.remove('another key');                                                                          // 5831
       *    expect(superCache.get('another key')).toBeUndefined();                                                     // 5832
       *                                                                                                               // 5833
       *    superCache.removeAll();                                                                                    // 5834
       *    expect(superCache.info()).toEqual({                                                                        // 5835
       *      id: 'super-cache',                                                                                       // 5836
       *      size: 0                                                                                                  // 5837
       *    });                                                                                                        // 5838
       *  }));                                                                                                         // 5839
       * ```                                                                                                           // 5840
       */                                                                                                              // 5841
      return caches[cacheId] = {                                                                                       // 5842
                                                                                                                       // 5843
        /**                                                                                                            // 5844
         * @ngdoc method                                                                                               // 5845
         * @name $cacheFactory.Cache#put                                                                               // 5846
         * @kind function                                                                                              // 5847
         *                                                                                                             // 5848
         * @description                                                                                                // 5849
         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be                               // 5850
         * retrieved later, and incrementing the size of the cache if the key was not already                          // 5851
         * present in the cache. If behaving like an LRU cache, it will also remove stale                              // 5852
         * entries from the set.                                                                                       // 5853
         *                                                                                                             // 5854
         * It will not insert undefined values into the cache.                                                         // 5855
         *                                                                                                             // 5856
         * @param {string} key the key under which the cached data is stored.                                          // 5857
         * @param {*} value the value to store alongside the key. If it is undefined, the key                          // 5858
         *    will not be stored.                                                                                      // 5859
         * @returns {*} the value stored.                                                                              // 5860
         */                                                                                                            // 5861
        put: function(key, value) {                                                                                    // 5862
          if (isUndefined(value)) return;                                                                              // 5863
          if (capacity < Number.MAX_VALUE) {                                                                           // 5864
            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});                                                // 5865
                                                                                                                       // 5866
            refresh(lruEntry);                                                                                         // 5867
          }                                                                                                            // 5868
                                                                                                                       // 5869
          if (!(key in data)) size++;                                                                                  // 5870
          data[key] = value;                                                                                           // 5871
                                                                                                                       // 5872
          if (size > capacity) {                                                                                       // 5873
            this.remove(staleEnd.key);                                                                                 // 5874
          }                                                                                                            // 5875
                                                                                                                       // 5876
          return value;                                                                                                // 5877
        },                                                                                                             // 5878
                                                                                                                       // 5879
        /**                                                                                                            // 5880
         * @ngdoc method                                                                                               // 5881
         * @name $cacheFactory.Cache#get                                                                               // 5882
         * @kind function                                                                                              // 5883
         *                                                                                                             // 5884
         * @description                                                                                                // 5885
         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.                                // 5886
         *                                                                                                             // 5887
         * @param {string} key the key of the data to be retrieved                                                     // 5888
         * @returns {*} the value stored.                                                                              // 5889
         */                                                                                                            // 5890
        get: function(key) {                                                                                           // 5891
          if (capacity < Number.MAX_VALUE) {                                                                           // 5892
            var lruEntry = lruHash[key];                                                                               // 5893
                                                                                                                       // 5894
            if (!lruEntry) return;                                                                                     // 5895
                                                                                                                       // 5896
            refresh(lruEntry);                                                                                         // 5897
          }                                                                                                            // 5898
                                                                                                                       // 5899
          return data[key];                                                                                            // 5900
        },                                                                                                             // 5901
                                                                                                                       // 5902
                                                                                                                       // 5903
        /**                                                                                                            // 5904
         * @ngdoc method                                                                                               // 5905
         * @name $cacheFactory.Cache#remove                                                                            // 5906
         * @kind function                                                                                              // 5907
         *                                                                                                             // 5908
         * @description                                                                                                // 5909
         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.                                         // 5910
         *                                                                                                             // 5911
         * @param {string} key the key of the entry to be removed                                                      // 5912
         */                                                                                                            // 5913
        remove: function(key) {                                                                                        // 5914
          if (capacity < Number.MAX_VALUE) {                                                                           // 5915
            var lruEntry = lruHash[key];                                                                               // 5916
                                                                                                                       // 5917
            if (!lruEntry) return;                                                                                     // 5918
                                                                                                                       // 5919
            if (lruEntry == freshEnd) freshEnd = lruEntry.p;                                                           // 5920
            if (lruEntry == staleEnd) staleEnd = lruEntry.n;                                                           // 5921
            link(lruEntry.n,lruEntry.p);                                                                               // 5922
                                                                                                                       // 5923
            delete lruHash[key];                                                                                       // 5924
          }                                                                                                            // 5925
                                                                                                                       // 5926
          delete data[key];                                                                                            // 5927
          size--;                                                                                                      // 5928
        },                                                                                                             // 5929
                                                                                                                       // 5930
                                                                                                                       // 5931
        /**                                                                                                            // 5932
         * @ngdoc method                                                                                               // 5933
         * @name $cacheFactory.Cache#removeAll                                                                         // 5934
         * @kind function                                                                                              // 5935
         *                                                                                                             // 5936
         * @description                                                                                                // 5937
         * Clears the cache object of any entries.                                                                     // 5938
         */                                                                                                            // 5939
        removeAll: function() {                                                                                        // 5940
          data = {};                                                                                                   // 5941
          size = 0;                                                                                                    // 5942
          lruHash = {};                                                                                                // 5943
          freshEnd = staleEnd = null;                                                                                  // 5944
        },                                                                                                             // 5945
                                                                                                                       // 5946
                                                                                                                       // 5947
        /**                                                                                                            // 5948
         * @ngdoc method                                                                                               // 5949
         * @name $cacheFactory.Cache#destroy                                                                           // 5950
         * @kind function                                                                                              // 5951
         *                                                                                                             // 5952
         * @description                                                                                                // 5953
         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,                                             // 5954
         * removing it from the {@link $cacheFactory $cacheFactory} set.                                               // 5955
         */                                                                                                            // 5956
        destroy: function() {                                                                                          // 5957
          data = null;                                                                                                 // 5958
          stats = null;                                                                                                // 5959
          lruHash = null;                                                                                              // 5960
          delete caches[cacheId];                                                                                      // 5961
        },                                                                                                             // 5962
                                                                                                                       // 5963
                                                                                                                       // 5964
        /**                                                                                                            // 5965
         * @ngdoc method                                                                                               // 5966
         * @name $cacheFactory.Cache#info                                                                              // 5967
         * @kind function                                                                                              // 5968
         *                                                                                                             // 5969
         * @description                                                                                                // 5970
         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.                              // 5971
         *                                                                                                             // 5972
         * @returns {object} an object with the following properties:                                                  // 5973
         *   <ul>                                                                                                      // 5974
         *     <li>**id**: the id of the cache instance</li>                                                           // 5975
         *     <li>**size**: the number of entries kept in the cache instance</li>                                     // 5976
         *     <li>**...**: any additional properties from the options object when creating the                        // 5977
         *       cache.</li>                                                                                           // 5978
         *   </ul>                                                                                                     // 5979
         */                                                                                                            // 5980
        info: function() {                                                                                             // 5981
          return extend({}, stats, {size: size});                                                                      // 5982
        }                                                                                                              // 5983
      };                                                                                                               // 5984
                                                                                                                       // 5985
                                                                                                                       // 5986
      /**                                                                                                              // 5987
       * makes the `entry` the freshEnd of the LRU linked list                                                         // 5988
       */                                                                                                              // 5989
      function refresh(entry) {                                                                                        // 5990
        if (entry != freshEnd) {                                                                                       // 5991
          if (!staleEnd) {                                                                                             // 5992
            staleEnd = entry;                                                                                          // 5993
          } else if (staleEnd == entry) {                                                                              // 5994
            staleEnd = entry.n;                                                                                        // 5995
          }                                                                                                            // 5996
                                                                                                                       // 5997
          link(entry.n, entry.p);                                                                                      // 5998
          link(entry, freshEnd);                                                                                       // 5999
          freshEnd = entry;                                                                                            // 6000
          freshEnd.n = null;                                                                                           // 6001
        }                                                                                                              // 6002
      }                                                                                                                // 6003
                                                                                                                       // 6004
                                                                                                                       // 6005
      /**                                                                                                              // 6006
       * bidirectionally links two entries of the LRU linked list                                                      // 6007
       */                                                                                                              // 6008
      function link(nextEntry, prevEntry) {                                                                            // 6009
        if (nextEntry != prevEntry) {                                                                                  // 6010
          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify                        // 6011
          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify                            // 6012
        }                                                                                                              // 6013
      }                                                                                                                // 6014
    }                                                                                                                  // 6015
                                                                                                                       // 6016
                                                                                                                       // 6017
  /**                                                                                                                  // 6018
   * @ngdoc method                                                                                                     // 6019
   * @name $cacheFactory#info                                                                                          // 6020
   *                                                                                                                   // 6021
   * @description                                                                                                      // 6022
   * Get information about all the caches that have been created                                                       // 6023
   *                                                                                                                   // 6024
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`                              // 6025
   */                                                                                                                  // 6026
    cacheFactory.info = function() {                                                                                   // 6027
      var info = {};                                                                                                   // 6028
      forEach(caches, function(cache, cacheId) {                                                                       // 6029
        info[cacheId] = cache.info();                                                                                  // 6030
      });                                                                                                              // 6031
      return info;                                                                                                     // 6032
    };                                                                                                                 // 6033
                                                                                                                       // 6034
                                                                                                                       // 6035
  /**                                                                                                                  // 6036
   * @ngdoc method                                                                                                     // 6037
   * @name $cacheFactory#get                                                                                           // 6038
   *                                                                                                                   // 6039
   * @description                                                                                                      // 6040
   * Get access to a cache object by the `cacheId` used when it was created.                                           // 6041
   *                                                                                                                   // 6042
   * @param {string} cacheId Name or id of a cache to access.                                                          // 6043
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.                           // 6044
   */                                                                                                                  // 6045
    cacheFactory.get = function(cacheId) {                                                                             // 6046
      return caches[cacheId];                                                                                          // 6047
    };                                                                                                                 // 6048
                                                                                                                       // 6049
                                                                                                                       // 6050
    return cacheFactory;                                                                                               // 6051
  };                                                                                                                   // 6052
}                                                                                                                      // 6053
                                                                                                                       // 6054
/**                                                                                                                    // 6055
 * @ngdoc service                                                                                                      // 6056
 * @name $templateCache                                                                                                // 6057
 *                                                                                                                     // 6058
 * @description                                                                                                        // 6059
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You                      // 6060
 * can load templates directly into the cache in a `script` tag, or by consuming the                                   // 6061
 * `$templateCache` service directly.                                                                                  // 6062
 *                                                                                                                     // 6063
 * Adding via the `script` tag:                                                                                        // 6064
 *                                                                                                                     // 6065
 * ```html                                                                                                             // 6066
 *   <script type="text/ng-template" id="templateId.html">                                                             // 6067
 *     <p>This is the content of the template</p>                                                                      // 6068
 *   </script>                                                                                                         // 6069
 * ```                                                                                                                 // 6070
 *                                                                                                                     // 6071
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of                    // 6072
 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,                          // 6073
 * element with ng-app attribute), otherwise the template will be ignored.                                             // 6074
 *                                                                                                                     // 6075
 * Adding via the `$templateCache` service:                                                                            // 6076
 *                                                                                                                     // 6077
 * ```js                                                                                                               // 6078
 * var myApp = angular.module('myApp', []);                                                                            // 6079
 * myApp.run(function($templateCache) {                                                                                // 6080
 *   $templateCache.put('templateId.html', 'This is the content of the template');                                     // 6081
 * });                                                                                                                 // 6082
 * ```                                                                                                                 // 6083
 *                                                                                                                     // 6084
 * To retrieve the template later, simply use it in your HTML:                                                         // 6085
 * ```html                                                                                                             // 6086
 * <div ng-include=" 'templateId.html' "></div>                                                                        // 6087
 * ```                                                                                                                 // 6088
 *                                                                                                                     // 6089
 * or get it via Javascript:                                                                                           // 6090
 * ```js                                                                                                               // 6091
 * $templateCache.get('templateId.html')                                                                               // 6092
 * ```                                                                                                                 // 6093
 *                                                                                                                     // 6094
 * See {@link ng.$cacheFactory $cacheFactory}.                                                                         // 6095
 *                                                                                                                     // 6096
 */                                                                                                                    // 6097
function $TemplateCacheProvider() {                                                                                    // 6098
  this.$get = ['$cacheFactory', function($cacheFactory) {                                                              // 6099
    return $cacheFactory('templates');                                                                                 // 6100
  }];                                                                                                                  // 6101
}                                                                                                                      // 6102
                                                                                                                       // 6103
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 6104
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 6105
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 6106
 *          An approval from 2 Core members with history of modifying      *                                           // 6107
 *                         this file is required.                          *                                           // 6108
 *                                                                         *                                           // 6109
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 6110
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 6111
 *     Or gives undesired access to variables likes document or window?    *                                           // 6112
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 6113
                                                                                                                       // 6114
/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!                                                     // 6115
 *                                                                                                                     // 6116
 * DOM-related variables:                                                                                              // 6117
 *                                                                                                                     // 6118
 * - "node" - DOM Node                                                                                                 // 6119
 * - "element" - DOM Element or Node                                                                                   // 6120
 * - "$node" or "$element" - jqLite-wrapped node or element                                                            // 6121
 *                                                                                                                     // 6122
 *                                                                                                                     // 6123
 * Compiler related stuff:                                                                                             // 6124
 *                                                                                                                     // 6125
 * - "linkFn" - linking fn of a single directive                                                                       // 6126
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node                                     // 6127
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node                    // 6128
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)                    // 6129
 */                                                                                                                    // 6130
                                                                                                                       // 6131
                                                                                                                       // 6132
/**                                                                                                                    // 6133
 * @ngdoc service                                                                                                      // 6134
 * @name $compile                                                                                                      // 6135
 * @kind function                                                                                                      // 6136
 *                                                                                                                     // 6137
 * @description                                                                                                        // 6138
 * Compiles an HTML string or DOM into a template and produces a template function, which                              // 6139
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.                             // 6140
 *                                                                                                                     // 6141
 * The compilation is a process of walking the DOM tree and matching DOM elements to                                   // 6142
 * {@link ng.$compileProvider#directive directives}.                                                                   // 6143
 *                                                                                                                     // 6144
 * <div class="alert alert-warning">                                                                                   // 6145
 * **Note:** This document is an in-depth reference of all directive options.                                          // 6146
 * For a gentle introduction to directives with examples of common use cases,                                          // 6147
 * see the {@link guide/directive directive guide}.                                                                    // 6148
 * </div>                                                                                                              // 6149
 *                                                                                                                     // 6150
 * ## Comprehensive Directive API                                                                                      // 6151
 *                                                                                                                     // 6152
 * There are many different options for a directive.                                                                   // 6153
 *                                                                                                                     // 6154
 * The difference resides in the return value of the factory function.                                                 // 6155
 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,            // 6156
 * or just the `postLink` function (all other properties will have the default values).                                // 6157
 *                                                                                                                     // 6158
 * <div class="alert alert-success">                                                                                   // 6159
 * **Best Practice:** It's recommended to use the "directive definition object" form.                                  // 6160
 * </div>                                                                                                              // 6161
 *                                                                                                                     // 6162
 * Here's an example directive declared with a Directive Definition Object:                                            // 6163
 *                                                                                                                     // 6164
 * ```js                                                                                                               // 6165
 *   var myModule = angular.module(...);                                                                               // 6166
 *                                                                                                                     // 6167
 *   myModule.directive('directiveName', function factory(injectables) {                                               // 6168
 *     var directiveDefinitionObject = {                                                                               // 6169
 *       priority: 0,                                                                                                  // 6170
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },                                         // 6171
 *       // or                                                                                                         // 6172
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },                                // 6173
 *       transclude: false,                                                                                            // 6174
 *       restrict: 'A',                                                                                                // 6175
 *       templateNamespace: 'html',                                                                                    // 6176
 *       scope: false,                                                                                                 // 6177
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },                        // 6178
 *       controllerAs: 'stringIdentifier',                                                                             // 6179
 *       bindToController: false,                                                                                      // 6180
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {                                                     // 6182
 *         return {                                                                                                    // 6183
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },                                       // 6184
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }                                      // 6185
 *         }                                                                                                           // 6186
 *         // or                                                                                                       // 6187
 *         // return function postLink( ... ) { ... }                                                                  // 6188
 *       },                                                                                                            // 6189
 *       // or                                                                                                         // 6190
 *       // link: {                                                                                                    // 6191
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },                                       // 6192
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }                                      // 6193
 *       // }                                                                                                          // 6194
 *       // or                                                                                                         // 6195
 *       // link: function postLink( ... ) { ... }                                                                     // 6196
 *     };                                                                                                              // 6197
 *     return directiveDefinitionObject;                                                                               // 6198
 *   });                                                                                                               // 6199
 * ```                                                                                                                 // 6200
 *                                                                                                                     // 6201
 * <div class="alert alert-warning">                                                                                   // 6202
 * **Note:** Any unspecified options will use the default value. You can see the default values below.                 // 6203
 * </div>                                                                                                              // 6204
 *                                                                                                                     // 6205
 * Therefore the above can be simplified as:                                                                           // 6206
 *                                                                                                                     // 6207
 * ```js                                                                                                               // 6208
 *   var myModule = angular.module(...);                                                                               // 6209
 *                                                                                                                     // 6210
 *   myModule.directive('directiveName', function factory(injectables) {                                               // 6211
 *     var directiveDefinitionObject = {                                                                               // 6212
 *       link: function postLink(scope, iElement, iAttrs) { ... }                                                      // 6213
 *     };                                                                                                              // 6214
 *     return directiveDefinitionObject;                                                                               // 6215
 *     // or                                                                                                           // 6216
 *     // return function postLink(scope, iElement, iAttrs) { ... }                                                    // 6217
 *   });                                                                                                               // 6218
 * ```                                                                                                                 // 6219
 *                                                                                                                     // 6220
 *                                                                                                                     // 6221
 *                                                                                                                     // 6222
 * ### Directive Definition Object                                                                                     // 6223
 *                                                                                                                     // 6224
 * The directive definition object provides instructions to the {@link ng.$compile                                     // 6225
 * compiler}. The attributes are:                                                                                      // 6226
 *                                                                                                                     // 6227
 * #### `multiElement`                                                                                                 // 6228
 * When this property is set to true, the HTML compiler will collect DOM nodes between                                 // 6229
 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them                           // 6230
 * together as the directive elements. It is recommended that this feature be used on directives                       // 6231
 * which are not strictly behavioural (such as {@link ngClick}), and which                                             // 6232
 * do not manipulate or replace child nodes (such as {@link ngInclude}).                                               // 6233
 *                                                                                                                     // 6234
 * #### `priority`                                                                                                     // 6235
 * When there are multiple directives defined on a single DOM element, sometimes it                                    // 6236
 * is necessary to specify the order in which the directives are applied. The `priority` is used                       // 6237
 * to sort the directives before their `compile` functions get called. Priority is defined as a                        // 6238
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions                         // 6239
 * are also run in priority order, but post-link functions are run in reverse order. The order                         // 6240
 * of directives with the same priority is undefined. The default priority is `0`.                                     // 6241
 *                                                                                                                     // 6242
 * #### `terminal`                                                                                                     // 6243
 * If set to true then the current `priority` will be the last set of directives                                       // 6244
 * which will execute (any directives at the current priority will still execute                                       // 6245
 * as the order of execution on same `priority` is undefined). Note that expressions                                   // 6246
 * and other directives used in the directive's template will also be excluded from execution.                         // 6247
 *                                                                                                                     // 6248
 * #### `scope`                                                                                                        // 6249
 * **If set to `true`,** then a new scope will be created for this directive. If multiple directives on the            // 6250
 * same element request a new scope, only one new scope is created. The new scope rule does not                        // 6251
 * apply for the root of the template since the root of the template always gets a new scope.                          // 6252
 *                                                                                                                     // 6253
 * **If set to `{}` (object hash),** then a new "isolate" scope is created. The 'isolate' scope differs from           // 6254
 * normal scope in that it does not prototypically inherit from the parent scope. This is useful                       // 6255
 * when creating reusable components, which should not accidentally read or modify data in the                         // 6256
 * parent scope.                                                                                                       // 6257
 *                                                                                                                     // 6258
 * The 'isolate' scope takes an object hash which defines a set of local scope properties                              // 6259
 * derived from the parent scope. These local properties are useful for aliasing values for                            // 6260
 * templates. Locals definition is a hash of local scope property to its source:                                       // 6261
 *                                                                                                                     // 6262
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is                         // 6263
 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the                        // 6264
 *   attribute name is assumed to be the same as the local name.                                                       // 6265
 *   Given `<widget my-attr="hello {{name}}">` and widget definition                                                   // 6266
 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect                          // 6267
 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the                           // 6268
 *   `localName` property on the widget scope. The `name` is read from the parent scope (not                           // 6269
 *   component scope).                                                                                                 // 6270
 *                                                                                                                     // 6271
 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the                             // 6272
 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`                         // 6273
 *   name is specified then the attribute name is assumed to be the same as the local name.                            // 6274
 *   Given `<widget my-attr="parentModel">` and widget definition of                                                   // 6275
 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the                       // 6276
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected                        // 6277
 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent                      // 6278
 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You                      // 6279
 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If                      // 6280
 *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use                       // 6281
 *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).                                                // 6282
 *                                                                                                                     // 6283
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.                      // 6284
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the                           // 6285
 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of                             // 6286
 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to                               // 6287
 *   a function wrapper for the `count = count + value` expression. Often it's desirable to                            // 6288
 *   pass data from the isolated scope via an expression to the parent scope, this can be                              // 6289
 *   done by passing a map of local variable names and values into the expression wrapper fn.                          // 6290
 *   For example, if the expression is `increment(amount)` then we can specify the amount value                        // 6291
 *   by calling the `localFn` as `localFn({amount: 22})`.                                                              // 6292
 *                                                                                                                     // 6293
 *                                                                                                                     // 6294
 * #### `bindToController`                                                                                             // 6295
 * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will
 * allow a component to have its properties bound to the controller, rather than to scope. When the controller         // 6297
 * is instantiated, the initial values of the isolate scope bindings are already available.                            // 6298
 *                                                                                                                     // 6299
 * #### `controller`                                                                                                   // 6300
 * Controller constructor function. The controller is instantiated before the                                          // 6301
 * pre-linking phase and it is shared with other directives (see                                                       // 6302
 * `require` attribute). This allows the directives to communicate with each other and augment                         // 6303
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:      // 6304
 *                                                                                                                     // 6305
 * * `$scope` - Current scope associated with the element                                                              // 6306
 * * `$element` - Current element                                                                                      // 6307
 * * `$attrs` - Current attributes object for the element                                                              // 6308
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:                        // 6309
 *   `function([scope], cloneLinkingFn, futureParentElement)`.                                                         // 6310
 *    * `scope`: optional argument to override the scope.                                                              // 6311
 *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.                      // 6312
 *    * `futureParentElement`:                                                                                         // 6313
 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.                             // 6314
 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.          // 6315
 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)              // 6316
 *          and when the `cloneLinkinFn` is passed,                                                                    // 6317
 *          as those elements need to created and cloned in a special way when they are defined outside their          // 6318
 *          usual containers (e.g. like `<svg>`).                                                                      // 6319
 *        * See also the `directive.templateNamespace` property.                                                       // 6320
 *                                                                                                                     // 6321
 *                                                                                                                     // 6322
 * #### `require`                                                                                                      // 6323
 * Require another directive and inject its controller as the fourth argument to the linking function. The             // 6324
 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the        // 6325
 * injected argument will be an array in corresponding order. If no such directive can be                              // 6326
 * found, or if the directive does not have a controller, then an error is raised (unless no link function             // 6327
 * is specified, in which case error checking is skipped). The name can be prefixed with:                              // 6328
 *                                                                                                                     // 6329
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.                 // 6330
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.                     // 6331
 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.       // 6332
 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.            // 6333
 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass                 // 6334
 *   `null` to the `link` fn if not found.                                                                             // 6335
 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass                     // 6336
 *   `null` to the `link` fn if not found.                                                                             // 6337
 *                                                                                                                     // 6338
 *                                                                                                                     // 6339
 * #### `controllerAs`                                                                                                 // 6340
 * Identifier name for a reference to the controller in the directive's scope.                                         // 6341
 * This allows the controller to be referenced from the directive template. The directive                              // 6342
 * needs to define a scope for this configuration to be used. Useful in the case when                                  // 6343
 * directive is used as component.                                                                                     // 6344
 *                                                                                                                     // 6345
 *                                                                                                                     // 6346
 * #### `restrict`                                                                                                     // 6347
 * String of subset of `EACM` which restricts the directive to a specific directive                                    // 6348
 * declaration style. If omitted, the defaults (elements and attributes) are used.                                     // 6349
 *                                                                                                                     // 6350
 * * `E` - Element name (default): `<my-directive></my-directive>`                                                     // 6351
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`                                                       // 6352
 * * `C` - Class: `<div class="my-directive: exp;"></div>`                                                             // 6353
 * * `M` - Comment: `<!-- directive: my-directive exp -->`                                                             // 6354
 *                                                                                                                     // 6355
 *                                                                                                                     // 6356
 * #### `templateNamespace`                                                                                            // 6357
 * String representing the document type used by the markup in the template.                                           // 6358
 * AngularJS needs this information as those elements need to be created and cloned                                    // 6359
 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.                    // 6360
 *                                                                                                                     // 6361
 * * `html` - All root nodes in the template are HTML. Root nodes may also be                                          // 6362
 *   top-level elements such as `<svg>` or `<math>`.                                                                   // 6363
 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).                                     // 6364
 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).                                  // 6365
 *                                                                                                                     // 6366
 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.                              // 6367
 *                                                                                                                     // 6368
 * #### `template`                                                                                                     // 6369
 * HTML markup that may:                                                                                               // 6370
 * * Replace the contents of the directive's element (default).                                                        // 6371
 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).                                       // 6372
 * * Wrap the contents of the directive's element (if `transclude` is true).                                           // 6373
 *                                                                                                                     // 6374
 * Value may be:                                                                                                       // 6375
 *                                                                                                                     // 6376
 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.                                                   // 6377
 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`                          // 6378
 *   function api below) and returns a string value.                                                                   // 6379
 *                                                                                                                     // 6380
 *                                                                                                                     // 6381
 * #### `templateUrl`                                                                                                  // 6382
 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.                    // 6383
 *                                                                                                                     // 6384
 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element        // 6385
 * for later when the template has been resolved.  In the meantime it will continue to compile and link                // 6386
 * sibling and parent elements as though this element had not contained any directives.                                // 6387
 *                                                                                                                     // 6388
 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this                // 6389
 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the                // 6390
 * case when only one deeply nested directive has `templateUrl`.                                                       // 6391
 *                                                                                                                     // 6392
 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}            // 6393
 *                                                                                                                     // 6394
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two                     // 6395
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns                       // 6396
 * a string value representing the url.  In either case, the template URL is passed through {@link                     // 6397
 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.                                                             // 6398
 *                                                                                                                     // 6399
 *                                                                                                                     // 6400
 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)                                 // 6401
 * specify what the template should replace. Defaults to `false`.                                                      // 6402
 *                                                                                                                     // 6403
 * * `true` - the template will replace the directive's element.                                                       // 6404
 * * `false` - the template will replace the contents of the directive's element.                                      // 6405
 *                                                                                                                     // 6406
 * The replacement process migrates all of the attributes / classes from the old element to the new                    // 6407
 * one. See the {@link guide/directive#template-expanding-directive                                                    // 6408
 * Directives Guide} for an example.                                                                                   // 6409
 *                                                                                                                     // 6410
 * There are very few scenarios where element replacement is required for the application function,                    // 6411
 * the main one being reusable custom components that are used within SVG contexts                                     // 6412
 * (because SVG doesn't work with custom elements in the DOM tree).                                                    // 6413
 *                                                                                                                     // 6414
 * #### `transclude`                                                                                                   // 6415
 * Extract the contents of the element where the directive appears and make it available to the directive.             // 6416
 * The contents are compiled and provided to the directive as a **transclusion function**. See the                     // 6417
 * {@link $compile#transclusion Transclusion} section below.                                                           // 6418
 *                                                                                                                     // 6419
 * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the          // 6420
 * directive's element or the entire element:                                                                          // 6421
 *                                                                                                                     // 6422
 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.                                // 6423
 * * `'element'` - transclude the whole of the directive's element including any directives on this                    // 6424
 *   element that defined at a lower priority than this directive. When used, the `template`                           // 6425
 *   property is ignored.                                                                                              // 6426
 *                                                                                                                     // 6427
 *                                                                                                                     // 6428
 * #### `compile`                                                                                                      // 6429
 *                                                                                                                     // 6430
 * ```js                                                                                                               // 6431
 *   function compile(tElement, tAttrs, transclude) { ... }                                                            // 6432
 * ```                                                                                                                 // 6433
 *                                                                                                                     // 6434
 * The compile function deals with transforming the template DOM. Since most directives do not do                      // 6435
 * template transformation, it is not used often. The compile function takes the following arguments:                  // 6436
 *                                                                                                                     // 6437
 *   * `tElement` - template element - The element where the directive has been declared. It is                        // 6438
 *     safe to do template transformation on the element and child elements only.                                      // 6439
 *                                                                                                                     // 6440
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared                  // 6441
 *     between all directive compile functions.                                                                        // 6442
 *                                                                                                                     // 6443
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`                // 6444
 *                                                                                                                     // 6445
 * <div class="alert alert-warning">                                                                                   // 6446
 * **Note:** The template instance and the link instance may be different objects if the template has                  // 6447
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that                  // 6448
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration                  // 6449
 * should be done in a linking function rather than in a compile function.                                             // 6450
 * </div>                                                                                                              // 6451
                                                                                                                       // 6452
 * <div class="alert alert-warning">                                                                                   // 6453
 * **Note:** The compile function cannot handle directives that recursively use themselves in their                    // 6454
 * own templates or compile functions. Compiling these directives results in an infinite loop and a                    // 6455
 * stack overflow errors.                                                                                              // 6456
 *                                                                                                                     // 6457
 * This can be avoided by manually using $compile in the postLink function to imperatively compile                     // 6458
 * a directive's template instead of relying on automatic template compilation via `template` or                       // 6459
 * `templateUrl` declaration or manual compilation inside the compile function.                                        // 6460
 * </div>                                                                                                              // 6461
 *                                                                                                                     // 6462
 * <div class="alert alert-danger">                                                                                    // 6463
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it                     // 6464
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed                 // 6465
 *   to the link function instead.                                                                                     // 6466
 * </div>                                                                                                              // 6467
                                                                                                                       // 6468
 * A compile function can have a return value which can be either a function or an object.                             // 6469
 *                                                                                                                     // 6470
 * * returning a (post-link) function - is equivalent to registering the linking function via the                      // 6471
 *   `link` property of the config object when the compile function is empty.                                          // 6472
 *                                                                                                                     // 6473
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to                   // 6474
 *   control when a linking function should be called during the linking phase. See info about                         // 6475
 *   pre-linking and post-linking functions below.                                                                     // 6476
 *                                                                                                                     // 6477
 *                                                                                                                     // 6478
 * #### `link`                                                                                                         // 6479
 * This property is used only if the `compile` property is not defined.                                                // 6480
 *                                                                                                                     // 6481
 * ```js                                                                                                               // 6482
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }                                          // 6483
 * ```                                                                                                                 // 6484
 *                                                                                                                     // 6485
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is                   // 6486
 * executed after the template has been cloned. This is where most of the directive logic will be                      // 6487
 * put.                                                                                                                // 6488
 *                                                                                                                     // 6489
 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the                                       // 6490
 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.                                           // 6491
 *                                                                                                                     // 6492
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to                    // 6493
 *     manipulate the children of the element only in `postLink` function since the children have                      // 6494
 *     already been linked.                                                                                            // 6495
 *                                                                                                                     // 6496
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared                  // 6497
 *     between all directive linking functions.                                                                        // 6498
 *                                                                                                                     // 6499
 *   * `controller` - the directive's required controller instance(s) - Instances are shared                           // 6500
 *     among all directives, which allows the directives to use the controllers as a communication                     // 6501
 *     channel. The exact value depends on the directive's `require` property:                                         // 6502
 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one            // 6503
 *       * `string`: the controller instance                                                                           // 6504
 *       * `array`: array of controller instances                                                                      // 6505
 *                                                                                                                     // 6506
 *     If a required controller cannot be found, and it is optional, the instance is `null`,                           // 6507
 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.                         // 6508
 *                                                                                                                     // 6509
 *     Note that you can also require the directive's own controller - it will be made available like                  // 6510
 *     like any other controller.                                                                                      // 6511
 *                                                                                                                     // 6512
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.                     // 6513
 *     This is the same as the `$transclude`                                                                           // 6514
 *     parameter of directive controllers, see there for details.                                                      // 6515
 *     `function([scope], cloneLinkingFn, futureParentElement)`.                                                       // 6516
 *                                                                                                                     // 6517
 * #### Pre-linking function                                                                                           // 6518
 *                                                                                                                     // 6519
 * Executed before the child elements are linked. Not safe to do DOM transformation since the                          // 6520
 * compiler linking function will fail to locate the correct elements for linking.                                     // 6521
 *                                                                                                                     // 6522
 * #### Post-linking function                                                                                          // 6523
 *                                                                                                                     // 6524
 * Executed after the child elements are linked.                                                                       // 6525
 *                                                                                                                     // 6526
 * Note that child elements that contain `templateUrl` directives will not have been compiled                          // 6527
 * and linked since they are waiting for their template to load asynchronously and their own                           // 6528
 * compilation and linking has been suspended until that occurs.                                                       // 6529
 *                                                                                                                     // 6530
 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting                   // 6531
 * for their async templates to be resolved.                                                                           // 6532
 *                                                                                                                     // 6533
 *                                                                                                                     // 6534
 * ### Transclusion                                                                                                    // 6535
 *                                                                                                                     // 6536
 * Transclusion is the process of extracting a collection of DOM element from one part of the DOM and                  // 6537
 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS               // 6538
 * scope from where they were taken.                                                                                   // 6539
 *                                                                                                                     // 6540
 * Transclusion is used (often with {@link ngTransclude}) to insert the                                                // 6541
 * original contents of a directive's element into a specified place in the template of the directive.                 // 6542
 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded                  // 6543
 * content has access to the properties on the scope from which it was taken, even if the directive                    // 6544
 * has isolated scope.                                                                                                 // 6545
 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.                    // 6546
 *                                                                                                                     // 6547
 * This makes it possible for the widget to have private state for its template, while the transcluded                 // 6548
 * content has access to its originating scope.                                                                        // 6549
 *                                                                                                                     // 6550
 * <div class="alert alert-warning">                                                                                   // 6551
 * **Note:** When testing an element transclude directive you must not place the directive at the root of the          // 6552
 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives                  // 6553
 * Testing Transclusion Directives}.                                                                                   // 6554
 * </div>                                                                                                              // 6555
 *                                                                                                                     // 6556
 * #### Transclusion Functions                                                                                         // 6557
 *                                                                                                                     // 6558
 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion            // 6559
 * function** to the directive's `link` function and `controller`. This transclusion function is a special             // 6560
 * **linking function** that will return the compiled contents linked to a new transclusion scope.                     // 6561
 *                                                                                                                     // 6562
 * <div class="alert alert-info">                                                                                      // 6563
 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since                  // 6564
 * ngTransclude will deal with it for us.                                                                              // 6565
 * </div>                                                                                                              // 6566
 *                                                                                                                     // 6567
 * If you want to manually control the insertion and removal of the transcluded content in your directive              // 6568
 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery        // 6569
 * object that contains the compiled DOM, which is linked to the correct transclusion scope.                           // 6570
 *                                                                                                                     // 6571
 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts            // 6572
 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded    // 6573
 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.                       // 6574
 *                                                                                                                     // 6575
 * <div class="alert alert-info">                                                                                      // 6576
 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function            // 6577
 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.            // 6578
 * </div>                                                                                                              // 6579
 *                                                                                                                     // 6580
 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone                   // 6581
 * attach function**:                                                                                                  // 6582
 *                                                                                                                     // 6583
 * ```js                                                                                                               // 6584
 * var transcludedContent, transclusionScope;                                                                          // 6585
 *                                                                                                                     // 6586
 * $transclude(function(clone, scope) {                                                                                // 6587
 *   element.append(clone);                                                                                            // 6588
 *   transcludedContent = clone;                                                                                       // 6589
 *   transclusionScope = scope;                                                                                        // 6590
 * });                                                                                                                 // 6591
 * ```                                                                                                                 // 6592
 *                                                                                                                     // 6593
 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the                 // 6594
 * associated transclusion scope:                                                                                      // 6595
 *                                                                                                                     // 6596
 * ```js                                                                                                               // 6597
 * transcludedContent.remove();                                                                                        // 6598
 * transclusionScope.$destroy();                                                                                       // 6599
 * ```                                                                                                                 // 6600
 *                                                                                                                     // 6601
 * <div class="alert alert-info">                                                                                      // 6602
 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive                   // 6603
 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),                    // 6604
 * then you are also responsible for calling `$destroy` on the transclusion scope.                                     // 6605
 * </div>                                                                                                              // 6606
 *                                                                                                                     // 6607
 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}               // 6608
 * automatically destroy their transluded clones as necessary so you do not need to worry about this if                // 6609
 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.                           // 6610
 *                                                                                                                     // 6611
 *                                                                                                                     // 6612
 * #### Transclusion Scopes                                                                                            // 6613
 *                                                                                                                     // 6614
 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion                 // 6615
 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed               // 6616
 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it                // 6617
 * was taken.                                                                                                          // 6618
 *                                                                                                                     // 6619
 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look            // 6620
 * like this:                                                                                                          // 6621
 *                                                                                                                     // 6622
 * ```html                                                                                                             // 6623
 * <div ng-app>                                                                                                        // 6624
 *   <div isolate>                                                                                                     // 6625
 *     <div transclusion>                                                                                              // 6626
 *     </div>                                                                                                          // 6627
 *   </div>                                                                                                            // 6628
 * </div>                                                                                                              // 6629
 * ```                                                                                                                 // 6630
 *                                                                                                                     // 6631
 * The `$parent` scope hierarchy will look like this:                                                                  // 6632
 *                                                                                                                     // 6633
 * ```                                                                                                                 // 6634
 * - $rootScope                                                                                                        // 6635
 *   - isolate                                                                                                         // 6636
 *     - transclusion                                                                                                  // 6637
 * ```                                                                                                                 // 6638
 *                                                                                                                     // 6639
 * but the scopes will inherit prototypically from different scopes to their `$parent`.                                // 6640
 *                                                                                                                     // 6641
 * ```                                                                                                                 // 6642
 * - $rootScope                                                                                                        // 6643
 *   - transclusion                                                                                                    // 6644
 * - isolate                                                                                                           // 6645
 * ```                                                                                                                 // 6646
 *                                                                                                                     // 6647
 *                                                                                                                     // 6648
 * ### Attributes                                                                                                      // 6649
 *                                                                                                                     // 6650
 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the                       // 6651
 * `link()` or `compile()` functions. It has a variety of uses.                                                        // 6652
 *                                                                                                                     // 6653
 * accessing *Normalized attribute names:*                                                                             // 6654
 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.                  // 6655
 * the attributes object allows for normalized access to                                                               // 6656
 *   the attributes.                                                                                                   // 6657
 *                                                                                                                     // 6658
 * * *Directive inter-communication:* All directives share the same instance of the attributes                         // 6659
 *   object which allows the directives to use the attributes object as inter directive                                // 6660
 *   communication.                                                                                                    // 6661
 *                                                                                                                     // 6662
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object                           // 6663
 *   allowing other directives to read the interpolated value.                                                         // 6664
 *                                                                                                                     // 6665
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes                    // 6666
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also                  // 6667
 *   the only way to easily get the actual value because during the linking phase the interpolation                    // 6668
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.                                    // 6669
 *                                                                                                                     // 6670
 * ```js                                                                                                               // 6671
 * function linkingFn(scope, elm, attrs, ctrl) {                                                                       // 6672
 *   // get the attribute value                                                                                        // 6673
 *   console.log(attrs.ngModel);                                                                                       // 6674
 *                                                                                                                     // 6675
 *   // change the attribute                                                                                           // 6676
 *   attrs.$set('ngModel', 'new value');                                                                               // 6677
 *                                                                                                                     // 6678
 *   // observe changes to interpolated attribute                                                                      // 6679
 *   attrs.$observe('ngModel', function(value) {                                                                       // 6680
 *     console.log('ngModel has changed value to ' + value);                                                           // 6681
 *   });                                                                                                               // 6682
 * }                                                                                                                   // 6683
 * ```                                                                                                                 // 6684
 *                                                                                                                     // 6685
 * ## Example                                                                                                          // 6686
 *                                                                                                                     // 6687
 * <div class="alert alert-warning">                                                                                   // 6688
 * **Note**: Typically directives are registered with `module.directive`. The example below is                         // 6689
 * to illustrate how `$compile` works.                                                                                 // 6690
 * </div>                                                                                                              // 6691
 *                                                                                                                     // 6692
 <example module="compileExample">                                                                                     // 6693
   <file name="index.html">                                                                                            // 6694
    <script>                                                                                                           // 6695
      angular.module('compileExample', [], function($compileProvider) {                                                // 6696
        // configure new 'compile' directive by passing a directive                                                    // 6697
        // factory function. The factory function injects the '$compile'                                               // 6698
        $compileProvider.directive('compile', function($compile) {                                                     // 6699
          // directive factory creates a link function                                                                 // 6700
          return function(scope, element, attrs) {                                                                     // 6701
            scope.$watch(                                                                                              // 6702
              function(scope) {                                                                                        // 6703
                 // watch the 'compile' expression for changes                                                         // 6704
                return scope.$eval(attrs.compile);                                                                     // 6705
              },                                                                                                       // 6706
              function(value) {                                                                                        // 6707
                // when the 'compile' expression changes                                                               // 6708
                // assign it into the current DOM                                                                      // 6709
                element.html(value);                                                                                   // 6710
                                                                                                                       // 6711
                // compile the new DOM and link it to the current                                                      // 6712
                // scope.                                                                                              // 6713
                // NOTE: we only compile .childNodes so that                                                           // 6714
                // we don't get into infinite loop compiling ourselves                                                 // 6715
                $compile(element.contents())(scope);                                                                   // 6716
              }                                                                                                        // 6717
            );                                                                                                         // 6718
          };                                                                                                           // 6719
        });                                                                                                            // 6720
      })                                                                                                               // 6721
      .controller('GreeterController', ['$scope', function($scope) {                                                   // 6722
        $scope.name = 'Angular';                                                                                       // 6723
        $scope.html = 'Hello {{name}}';                                                                                // 6724
      }]);                                                                                                             // 6725
    </script>                                                                                                          // 6726
    <div ng-controller="GreeterController">                                                                            // 6727
      <input ng-model="name"> <br/>                                                                                    // 6728
      <textarea ng-model="html"></textarea> <br/>                                                                      // 6729
      <div compile="html"></div>                                                                                       // 6730
    </div>                                                                                                             // 6731
   </file>                                                                                                             // 6732
   <file name="protractor.js" type="protractor">                                                                       // 6733
     it('should auto compile', function() {                                                                            // 6734
       var textarea = $('textarea');                                                                                   // 6735
       var output = $('div[compile]');                                                                                 // 6736
       // The initial state reads 'Hello Angular'.                                                                     // 6737
       expect(output.getText()).toBe('Hello Angular');                                                                 // 6738
       textarea.clear();                                                                                               // 6739
       textarea.sendKeys('{{name}}!');                                                                                 // 6740
       expect(output.getText()).toBe('Angular!');                                                                      // 6741
     });                                                                                                               // 6742
   </file>                                                                                                             // 6743
 </example>                                                                                                            // 6744
                                                                                                                       // 6745
 *                                                                                                                     // 6746
 *                                                                                                                     // 6747
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.                      // 6748
 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.          // 6749
 *                                                                                                                     // 6750
 * <div class="alert alert-danger">                                                                                    // 6751
 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it                             // 6752
 *   e.g. will not use the right outer scope. Please pass the transclude function as a                                 // 6753
 *   `parentBoundTranscludeFn` to the link function instead.                                                           // 6754
 * </div>                                                                                                              // 6755
 *                                                                                                                     // 6756
 * @param {number} maxPriority only apply directives lower than given priority (Only effects the                       // 6757
 *                 root element(s), not their children)                                                                // 6758
 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template                 // 6759
 * (a DOM element/tree) to a scope. Where:                                                                             // 6760
 *                                                                                                                     // 6761
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.                                                        // 6762
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the                          // 6763
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the                                 // 6764
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is                               // 6765
 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:                                                      // 6766
 *                                                                                                                     // 6767
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.                             // 6768
 *      * `scope` - is the current scope with which the linking function is working with.                              // 6769
 *                                                                                                                     // 6770
 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following           // 6771
 *  keys may be used to control linking behavior:                                                                      // 6772
 *                                                                                                                     // 6773
 *      * `parentBoundTranscludeFn` - the transclude function made available to                                        // 6774
 *        directives; if given, it will be passed through to the link functions of                                     // 6775
 *        directives found in `element` during compilation.                                                            // 6776
 *      * `transcludeControllers` - an object hash with keys that map controller names                                 // 6777
 *        to controller instances; if given, it will make the controllers                                              // 6778
 *        available to directives.                                                                                     // 6779
 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add                             // 6780
 *        the cloned elements; only needed for transcludes that are allowed to contain non html                        // 6781
 *        elements (e.g. SVG elements). See also the directive.controller property.                                    // 6782
 *                                                                                                                     // 6783
 * Calling the linking function returns the element of the template. It is either the original                         // 6784
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.                                  // 6785
 *                                                                                                                     // 6786
 * After linking the view is not updated until after a call to $digest which typically is done by                      // 6787
 * Angular automatically.                                                                                              // 6788
 *                                                                                                                     // 6789
 * If you need access to the bound view, there are two ways to do it:                                                  // 6790
 *                                                                                                                     // 6791
 * - If you are not asking the linking function to clone the template, create the DOM element(s)                       // 6792
 *   before you send them to the compiler and keep this reference around.                                              // 6793
 *   ```js                                                                                                             // 6794
 *     var element = $compile('<p>{{total}}</p>')(scope);                                                              // 6795
 *   ```                                                                                                               // 6796
 *                                                                                                                     // 6797
 * - if on the other hand, you need the element to be cloned, the view reference from the original                     // 6798
 *   example would not point to the clone, but rather to the original template that was cloned. In                     // 6799
 *   this case, you can access the clone via the cloneAttachFn:                                                        // 6800
 *   ```js                                                                                                             // 6801
 *     var templateElement = angular.element('<p>{{total}}</p>'),                                                      // 6802
 *         scope = ....;                                                                                               // 6803
 *                                                                                                                     // 6804
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {                           // 6805
 *       //attach the clone to DOM document at the right place                                                         // 6806
 *     });                                                                                                             // 6807
 *                                                                                                                     // 6808
 *     //now we have reference to the cloned DOM via `clonedElement`                                                   // 6809
 *   ```                                                                                                               // 6810
 *                                                                                                                     // 6811
 *                                                                                                                     // 6812
 * For information on how the compiler works, see the                                                                  // 6813
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.                                        // 6814
 */                                                                                                                    // 6815
                                                                                                                       // 6816
var $compileMinErr = minErr('$compile');                                                                               // 6817
                                                                                                                       // 6818
/**                                                                                                                    // 6819
 * @ngdoc provider                                                                                                     // 6820
 * @name $compileProvider                                                                                              // 6821
 *                                                                                                                     // 6822
 * @description                                                                                                        // 6823
 */                                                                                                                    // 6824
$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];                                                      // 6825
function $CompileProvider($provide, $$sanitizeUriProvider) {                                                           // 6826
  var hasDirectives = {},                                                                                              // 6827
      Suffix = 'Directive',                                                                                            // 6828
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,                                                // 6829
      CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,                                                          // 6830
      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),                                                     // 6831
      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;                                                           // 6832
                                                                                                                       // 6833
  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes                                    // 6834
  // The assumption is that future DOM event attribute names will begin with                                           // 6835
  // 'on' and be composed of only English letters.                                                                     // 6836
  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;                                                           // 6837
                                                                                                                       // 6838
  function parseIsolateBindings(scope, directiveName, isController) {                                                  // 6839
    var LOCAL_REGEXP = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/;                                                           // 6840
                                                                                                                       // 6841
    var bindings = {};                                                                                                 // 6842
                                                                                                                       // 6843
    forEach(scope, function(definition, scopeName) {                                                                   // 6844
      var match = definition.match(LOCAL_REGEXP);                                                                      // 6845
                                                                                                                       // 6846
      if (!match) {                                                                                                    // 6847
        throw $compileMinErr('iscp',                                                                                   // 6848
            "Invalid {3} for directive '{0}'." +                                                                       // 6849
            " Definition: {... {1}: '{2}' ...}",                                                                       // 6850
            directiveName, scopeName, definition,                                                                      // 6851
            (isController ? "controller bindings definition" :                                                         // 6852
            "isolate scope definition"));                                                                              // 6853
      }                                                                                                                // 6854
                                                                                                                       // 6855
      bindings[scopeName] = {                                                                                          // 6856
        mode: match[1][0],                                                                                             // 6857
        collection: match[2] === '*',                                                                                  // 6858
        optional: match[3] === '?',                                                                                    // 6859
        attrName: match[4] || scopeName                                                                                // 6860
      };                                                                                                               // 6861
    });                                                                                                                // 6862
                                                                                                                       // 6863
    return bindings;                                                                                                   // 6864
  }                                                                                                                    // 6865
                                                                                                                       // 6866
  function parseDirectiveBindings(directive, directiveName) {                                                          // 6867
    var bindings = {                                                                                                   // 6868
      isolateScope: null,                                                                                              // 6869
      bindToController: null                                                                                           // 6870
    };                                                                                                                 // 6871
    if (isObject(directive.scope)) {                                                                                   // 6872
      if (directive.bindToController === true) {                                                                       // 6873
        bindings.bindToController = parseIsolateBindings(directive.scope,                                              // 6874
                                                         directiveName, true);                                         // 6875
        bindings.isolateScope = {};                                                                                    // 6876
      } else {                                                                                                         // 6877
        bindings.isolateScope = parseIsolateBindings(directive.scope,                                                  // 6878
                                                     directiveName, false);                                            // 6879
      }                                                                                                                // 6880
    }                                                                                                                  // 6881
    if (isObject(directive.bindToController)) {                                                                        // 6882
      bindings.bindToController =                                                                                      // 6883
          parseIsolateBindings(directive.bindToController, directiveName, true);                                       // 6884
    }                                                                                                                  // 6885
    if (isObject(bindings.bindToController)) {                                                                         // 6886
      var controller = directive.controller;                                                                           // 6887
      var controllerAs = directive.controllerAs;                                                                       // 6888
      if (!controller) {                                                                                               // 6889
        // There is no controller, there may or may not be a controllerAs property                                     // 6890
        throw $compileMinErr('noctrl',                                                                                 // 6891
              "Cannot bind to controller without directive '{0}'s controller.",                                        // 6892
              directiveName);                                                                                          // 6893
      } else if (!identifierForController(controller, controllerAs)) {                                                 // 6894
        // There is a controller, but no identifier or controllerAs property                                           // 6895
        throw $compileMinErr('noident',                                                                                // 6896
              "Cannot bind to controller without identifier for directive '{0}'.",                                     // 6897
              directiveName);                                                                                          // 6898
      }                                                                                                                // 6899
    }                                                                                                                  // 6900
    return bindings;                                                                                                   // 6901
  }                                                                                                                    // 6902
                                                                                                                       // 6903
  function assertValidDirectiveName(name) {                                                                            // 6904
    var letter = name.charAt(0);                                                                                       // 6905
    if (!letter || letter !== lowercase(letter)) {                                                                     // 6906
      throw $compileMinErr('baddir', "Directive name '{0}' is invalid. The first character must be a lowercase letter", name);
    }                                                                                                                  // 6908
    if (name !== name.trim()) {                                                                                        // 6909
      throw $compileMinErr('baddir',                                                                                   // 6910
            "Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces",            // 6911
            name);                                                                                                     // 6912
    }                                                                                                                  // 6913
  }                                                                                                                    // 6914
                                                                                                                       // 6915
  /**                                                                                                                  // 6916
   * @ngdoc method                                                                                                     // 6917
   * @name $compileProvider#directive                                                                                  // 6918
   * @kind function                                                                                                    // 6919
   *                                                                                                                   // 6920
   * @description                                                                                                      // 6921
   * Register a new directive with the compiler.                                                                       // 6922
   *                                                                                                                   // 6923
   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which                   // 6924
   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the                     // 6925
   *    names and the values are the factories.                                                                        // 6926
   * @param {Function|Array} directiveFactory An injectable directive factory function. See                            // 6927
   *    {@link guide/directive} for more info.                                                                         // 6928
   * @returns {ng.$compileProvider} Self for chaining.                                                                 // 6929
   */                                                                                                                  // 6930
   this.directive = function registerDirective(name, directiveFactory) {                                               // 6931
    assertNotHasOwnProperty(name, 'directive');                                                                        // 6932
    if (isString(name)) {                                                                                              // 6933
      assertValidDirectiveName(name);                                                                                  // 6934
      assertArg(directiveFactory, 'directiveFactory');                                                                 // 6935
      if (!hasDirectives.hasOwnProperty(name)) {                                                                       // 6936
        hasDirectives[name] = [];                                                                                      // 6937
        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',                                             // 6938
          function($injector, $exceptionHandler) {                                                                     // 6939
            var directives = [];                                                                                       // 6940
            forEach(hasDirectives[name], function(directiveFactory, index) {                                           // 6941
              try {                                                                                                    // 6942
                var directive = $injector.invoke(directiveFactory);                                                    // 6943
                if (isFunction(directive)) {                                                                           // 6944
                  directive = { compile: valueFn(directive) };                                                         // 6945
                } else if (!directive.compile && directive.link) {                                                     // 6946
                  directive.compile = valueFn(directive.link);                                                         // 6947
                }                                                                                                      // 6948
                directive.priority = directive.priority || 0;                                                          // 6949
                directive.index = index;                                                                               // 6950
                directive.name = directive.name || name;                                                               // 6951
                directive.require = directive.require || (directive.controller && directive.name);                     // 6952
                directive.restrict = directive.restrict || 'EA';                                                       // 6953
                var bindings = directive.$$bindings =                                                                  // 6954
                    parseDirectiveBindings(directive, directive.name);                                                 // 6955
                if (isObject(bindings.isolateScope)) {                                                                 // 6956
                  directive.$$isolateBindings = bindings.isolateScope;                                                 // 6957
                }                                                                                                      // 6958
                directive.$$moduleName = directiveFactory.$$moduleName;                                                // 6959
                directives.push(directive);                                                                            // 6960
              } catch (e) {                                                                                            // 6961
                $exceptionHandler(e);                                                                                  // 6962
              }                                                                                                        // 6963
            });                                                                                                        // 6964
            return directives;                                                                                         // 6965
          }]);                                                                                                         // 6966
      }                                                                                                                // 6967
      hasDirectives[name].push(directiveFactory);                                                                      // 6968
    } else {                                                                                                           // 6969
      forEach(name, reverseParams(registerDirective));                                                                 // 6970
    }                                                                                                                  // 6971
    return this;                                                                                                       // 6972
  };                                                                                                                   // 6973
                                                                                                                       // 6974
                                                                                                                       // 6975
  /**                                                                                                                  // 6976
   * @ngdoc method                                                                                                     // 6977
   * @name $compileProvider#aHrefSanitizationWhitelist                                                                 // 6978
   * @kind function                                                                                                    // 6979
   *                                                                                                                   // 6980
   * @description                                                                                                      // 6981
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 6982
   * urls during a[href] sanitization.                                                                                 // 6983
   *                                                                                                                   // 6984
   * The sanitization is a security measure aimed at preventing XSS attacks via html links.                            // 6985
   *                                                                                                                   // 6986
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into                      // 6987
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`                          // 6988
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 6989
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 6990
   *                                                                                                                   // 6991
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 6992
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 6993
   *    chaining otherwise.                                                                                            // 6994
   */                                                                                                                  // 6995
  this.aHrefSanitizationWhitelist = function(regexp) {                                                                 // 6996
    if (isDefined(regexp)) {                                                                                           // 6997
      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);                                                        // 6998
      return this;                                                                                                     // 6999
    } else {                                                                                                           // 7000
      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();                                                       // 7001
    }                                                                                                                  // 7002
  };                                                                                                                   // 7003
                                                                                                                       // 7004
                                                                                                                       // 7005
  /**                                                                                                                  // 7006
   * @ngdoc method                                                                                                     // 7007
   * @name $compileProvider#imgSrcSanitizationWhitelist                                                                // 7008
   * @kind function                                                                                                    // 7009
   *                                                                                                                   // 7010
   * @description                                                                                                      // 7011
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 7012
   * urls during img[src] sanitization.                                                                                // 7013
   *                                                                                                                   // 7014
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 7015
   *                                                                                                                   // 7016
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into                     // 7017
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`                         // 7018
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 7019
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 7020
   *                                                                                                                   // 7021
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 7022
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 7023
   *    chaining otherwise.                                                                                            // 7024
   */                                                                                                                  // 7025
  this.imgSrcSanitizationWhitelist = function(regexp) {                                                                // 7026
    if (isDefined(regexp)) {                                                                                           // 7027
      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);                                                       // 7028
      return this;                                                                                                     // 7029
    } else {                                                                                                           // 7030
      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();                                                      // 7031
    }                                                                                                                  // 7032
  };                                                                                                                   // 7033
                                                                                                                       // 7034
  /**                                                                                                                  // 7035
   * @ngdoc method                                                                                                     // 7036
   * @name  $compileProvider#debugInfoEnabled                                                                          // 7037
   *                                                                                                                   // 7038
   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the                // 7039
   * current debugInfoEnabled state                                                                                    // 7040
   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 7041
   *                                                                                                                   // 7042
   * @kind function                                                                                                    // 7043
   *                                                                                                                   // 7044
   * @description                                                                                                      // 7045
   * Call this method to enable/disable various debug runtime information in the compiler such as adding               // 7046
   * binding information and a reference to the current scope on to DOM elements.                                      // 7047
   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope                 // 7048
   * * `ng-binding` CSS class                                                                                          // 7049
   * * `$binding` data property containing an array of the binding expressions                                         // 7050
   *                                                                                                                   // 7051
   * You may want to disable this in production for a significant performance boost. See                               // 7052
   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.                                      // 7053
   *                                                                                                                   // 7054
   * The default value is true.                                                                                        // 7055
   */                                                                                                                  // 7056
  var debugInfoEnabled = true;                                                                                         // 7057
  this.debugInfoEnabled = function(enabled) {                                                                          // 7058
    if (isDefined(enabled)) {                                                                                          // 7059
      debugInfoEnabled = enabled;                                                                                      // 7060
      return this;                                                                                                     // 7061
    }                                                                                                                  // 7062
    return debugInfoEnabled;                                                                                           // 7063
  };                                                                                                                   // 7064
                                                                                                                       // 7065
  this.$get = [                                                                                                        // 7066
            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',                            // 7067
            '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',                             // 7068
    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,                             // 7069
             $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {                            // 7070
                                                                                                                       // 7071
    var Attributes = function(element, attributesToCopy) {                                                             // 7072
      if (attributesToCopy) {                                                                                          // 7073
        var keys = Object.keys(attributesToCopy);                                                                      // 7074
        var i, l, key;                                                                                                 // 7075
                                                                                                                       // 7076
        for (i = 0, l = keys.length; i < l; i++) {                                                                     // 7077
          key = keys[i];                                                                                               // 7078
          this[key] = attributesToCopy[key];                                                                           // 7079
        }                                                                                                              // 7080
      } else {                                                                                                         // 7081
        this.$attr = {};                                                                                               // 7082
      }                                                                                                                // 7083
                                                                                                                       // 7084
      this.$$element = element;                                                                                        // 7085
    };                                                                                                                 // 7086
                                                                                                                       // 7087
    Attributes.prototype = {                                                                                           // 7088
      /**                                                                                                              // 7089
       * @ngdoc method                                                                                                 // 7090
       * @name $compile.directive.Attributes#$normalize                                                                // 7091
       * @kind function                                                                                                // 7092
       *                                                                                                               // 7093
       * @description                                                                                                  // 7094
       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or     // 7095
       * `data-`) to its normalized, camelCase form.                                                                   // 7096
       *                                                                                                               // 7097
       * Also there is special case for Moz prefix starting with upper case letter.                                    // 7098
       *                                                                                                               // 7099
       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
       *                                                                                                               // 7101
       * @param {string} name Name to normalize                                                                        // 7102
       */                                                                                                              // 7103
      $normalize: directiveNormalize,                                                                                  // 7104
                                                                                                                       // 7105
                                                                                                                       // 7106
      /**                                                                                                              // 7107
       * @ngdoc method                                                                                                 // 7108
       * @name $compile.directive.Attributes#$addClass                                                                 // 7109
       * @kind function                                                                                                // 7110
       *                                                                                                               // 7111
       * @description                                                                                                  // 7112
       * Adds the CSS class value specified by the classVal parameter to the element. If animations                    // 7113
       * are enabled then an animation will be triggered for the class addition.                                       // 7114
       *                                                                                                               // 7115
       * @param {string} classVal The className value that will be added to the element                                // 7116
       */                                                                                                              // 7117
      $addClass: function(classVal) {                                                                                  // 7118
        if (classVal && classVal.length > 0) {                                                                         // 7119
          $animate.addClass(this.$$element, classVal);                                                                 // 7120
        }                                                                                                              // 7121
      },                                                                                                               // 7122
                                                                                                                       // 7123
      /**                                                                                                              // 7124
       * @ngdoc method                                                                                                 // 7125
       * @name $compile.directive.Attributes#$removeClass                                                              // 7126
       * @kind function                                                                                                // 7127
       *                                                                                                               // 7128
       * @description                                                                                                  // 7129
       * Removes the CSS class value specified by the classVal parameter from the element. If                          // 7130
       * animations are enabled then an animation will be triggered for the class removal.                             // 7131
       *                                                                                                               // 7132
       * @param {string} classVal The className value that will be removed from the element                            // 7133
       */                                                                                                              // 7134
      $removeClass: function(classVal) {                                                                               // 7135
        if (classVal && classVal.length > 0) {                                                                         // 7136
          $animate.removeClass(this.$$element, classVal);                                                              // 7137
        }                                                                                                              // 7138
      },                                                                                                               // 7139
                                                                                                                       // 7140
      /**                                                                                                              // 7141
       * @ngdoc method                                                                                                 // 7142
       * @name $compile.directive.Attributes#$updateClass                                                              // 7143
       * @kind function                                                                                                // 7144
       *                                                                                                               // 7145
       * @description                                                                                                  // 7146
       * Adds and removes the appropriate CSS class values to the element based on the difference                      // 7147
       * between the new and old CSS class values (specified as newClasses and oldClasses).                            // 7148
       *                                                                                                               // 7149
       * @param {string} newClasses The current CSS className value                                                    // 7150
       * @param {string} oldClasses The former CSS className value                                                     // 7151
       */                                                                                                              // 7152
      $updateClass: function(newClasses, oldClasses) {                                                                 // 7153
        var toAdd = tokenDifference(newClasses, oldClasses);                                                           // 7154
        if (toAdd && toAdd.length) {                                                                                   // 7155
          $animate.addClass(this.$$element, toAdd);                                                                    // 7156
        }                                                                                                              // 7157
                                                                                                                       // 7158
        var toRemove = tokenDifference(oldClasses, newClasses);                                                        // 7159
        if (toRemove && toRemove.length) {                                                                             // 7160
          $animate.removeClass(this.$$element, toRemove);                                                              // 7161
        }                                                                                                              // 7162
      },                                                                                                               // 7163
                                                                                                                       // 7164
      /**                                                                                                              // 7165
       * Set a normalized attribute on the element in a way such that all directives                                   // 7166
       * can share the attribute. This function properly handles boolean attributes.                                   // 7167
       * @param {string} key Normalized key. (ie ngAttribute)                                                          // 7168
       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.                          // 7169
       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.                      // 7170
       *     Defaults to true.                                                                                         // 7171
       * @param {string=} attrName Optional none normalized name. Defaults to key.                                     // 7172
       */                                                                                                              // 7173
      $set: function(key, value, writeAttr, attrName) {                                                                // 7174
        // TODO: decide whether or not to throw an error if "class"                                                    // 7175
        //is set through this function since it may cause $updateClass to                                              // 7176
        //become unstable.                                                                                             // 7177
                                                                                                                       // 7178
        var node = this.$$element[0],                                                                                  // 7179
            booleanKey = getBooleanAttrName(node, key),                                                                // 7180
            aliasedKey = getAliasedAttrName(node, key),                                                                // 7181
            observer = key,                                                                                            // 7182
            nodeName;                                                                                                  // 7183
                                                                                                                       // 7184
        if (booleanKey) {                                                                                              // 7185
          this.$$element.prop(key, value);                                                                             // 7186
          attrName = booleanKey;                                                                                       // 7187
        } else if (aliasedKey) {                                                                                       // 7188
          this[aliasedKey] = value;                                                                                    // 7189
          observer = aliasedKey;                                                                                       // 7190
        }                                                                                                              // 7191
                                                                                                                       // 7192
        this[key] = value;                                                                                             // 7193
                                                                                                                       // 7194
        // translate normalized key to actual key                                                                      // 7195
        if (attrName) {                                                                                                // 7196
          this.$attr[key] = attrName;                                                                                  // 7197
        } else {                                                                                                       // 7198
          attrName = this.$attr[key];                                                                                  // 7199
          if (!attrName) {                                                                                             // 7200
            this.$attr[key] = attrName = snake_case(key, '-');                                                         // 7201
          }                                                                                                            // 7202
        }                                                                                                              // 7203
                                                                                                                       // 7204
        nodeName = nodeName_(this.$$element);                                                                          // 7205
                                                                                                                       // 7206
        if ((nodeName === 'a' && key === 'href') ||                                                                    // 7207
            (nodeName === 'img' && key === 'src')) {                                                                   // 7208
          // sanitize a[href] and img[src] values                                                                      // 7209
          this[key] = value = $$sanitizeUri(value, key === 'src');                                                     // 7210
        } else if (nodeName === 'img' && key === 'srcset') {                                                           // 7211
          // sanitize img[srcset] values                                                                               // 7212
          var result = "";                                                                                             // 7213
                                                                                                                       // 7214
          // first check if there are spaces because it's not the same pattern                                         // 7215
          var trimmedSrcset = trim(value);                                                                             // 7216
          //                (   999x   ,|   999w   ,|   ,|,   )                                                        // 7217
          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;                                                      // 7218
          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;                                                 // 7219
                                                                                                                       // 7220
          // split srcset into tuple of uri and descriptor except for the last item                                    // 7221
          var rawUris = trimmedSrcset.split(pattern);                                                                  // 7222
                                                                                                                       // 7223
          // for each tuples                                                                                           // 7224
          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);                                                      // 7225
          for (var i = 0; i < nbrUrisWith2parts; i++) {                                                                // 7226
            var innerIdx = i * 2;                                                                                      // 7227
            // sanitize the uri                                                                                        // 7228
            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);                                                    // 7229
            // add the descriptor                                                                                      // 7230
            result += (" " + trim(rawUris[innerIdx + 1]));                                                             // 7231
          }                                                                                                            // 7232
                                                                                                                       // 7233
          // split the last item into uri and descriptor                                                               // 7234
          var lastTuple = trim(rawUris[i * 2]).split(/\s/);                                                            // 7235
                                                                                                                       // 7236
          // sanitize the last uri                                                                                     // 7237
          result += $$sanitizeUri(trim(lastTuple[0]), true);                                                           // 7238
                                                                                                                       // 7239
          // and add the last descriptor if any                                                                        // 7240
          if (lastTuple.length === 2) {                                                                                // 7241
            result += (" " + trim(lastTuple[1]));                                                                      // 7242
          }                                                                                                            // 7243
          this[key] = value = result;                                                                                  // 7244
        }                                                                                                              // 7245
                                                                                                                       // 7246
        if (writeAttr !== false) {                                                                                     // 7247
          if (value === null || value === undefined) {                                                                 // 7248
            this.$$element.removeAttr(attrName);                                                                       // 7249
          } else {                                                                                                     // 7250
            this.$$element.attr(attrName, value);                                                                      // 7251
          }                                                                                                            // 7252
        }                                                                                                              // 7253
                                                                                                                       // 7254
        // fire observers                                                                                              // 7255
        var $$observers = this.$$observers;                                                                            // 7256
        $$observers && forEach($$observers[observer], function(fn) {                                                   // 7257
          try {                                                                                                        // 7258
            fn(value);                                                                                                 // 7259
          } catch (e) {                                                                                                // 7260
            $exceptionHandler(e);                                                                                      // 7261
          }                                                                                                            // 7262
        });                                                                                                            // 7263
      },                                                                                                               // 7264
                                                                                                                       // 7265
                                                                                                                       // 7266
      /**                                                                                                              // 7267
       * @ngdoc method                                                                                                 // 7268
       * @name $compile.directive.Attributes#$observe                                                                  // 7269
       * @kind function                                                                                                // 7270
       *                                                                                                               // 7271
       * @description                                                                                                  // 7272
       * Observes an interpolated attribute.                                                                           // 7273
       *                                                                                                               // 7274
       * The observer function will be invoked once during the next `$digest` following                                // 7275
       * compilation. The observer is then invoked whenever the interpolated value                                     // 7276
       * changes.                                                                                                      // 7277
       *                                                                                                               // 7278
       * @param {string} key Normalized key. (ie ngAttribute) .                                                        // 7279
       * @param {function(interpolatedValue)} fn Function that will be called whenever                                 // 7280
                the interpolated value of the attribute changes.                                                       // 7281
       *        See the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.            // 7282
       * @returns {function()} Returns a deregistration function for this observer.                                    // 7283
       */                                                                                                              // 7284
      $observe: function(key, fn) {                                                                                    // 7285
        var attrs = this,                                                                                              // 7286
            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),                                    // 7287
            listeners = ($$observers[key] || ($$observers[key] = []));                                                 // 7288
                                                                                                                       // 7289
        listeners.push(fn);                                                                                            // 7290
        $rootScope.$evalAsync(function() {                                                                             // 7291
          if (!listeners.$$inter && attrs.hasOwnProperty(key)) {                                                       // 7292
            // no one registered attribute interpolation function, so lets call it manually                            // 7293
            fn(attrs[key]);                                                                                            // 7294
          }                                                                                                            // 7295
        });                                                                                                            // 7296
                                                                                                                       // 7297
        return function() {                                                                                            // 7298
          arrayRemove(listeners, fn);                                                                                  // 7299
        };                                                                                                             // 7300
      }                                                                                                                // 7301
    };                                                                                                                 // 7302
                                                                                                                       // 7303
                                                                                                                       // 7304
    function safeAddClass($element, className) {                                                                       // 7305
      try {                                                                                                            // 7306
        $element.addClass(className);                                                                                  // 7307
      } catch (e) {                                                                                                    // 7308
        // ignore, since it means that we are trying to set class on                                                   // 7309
        // SVG element, where class name is read-only.                                                                 // 7310
      }                                                                                                                // 7311
    }                                                                                                                  // 7312
                                                                                                                       // 7313
                                                                                                                       // 7314
    var startSymbol = $interpolate.startSymbol(),                                                                      // 7315
        endSymbol = $interpolate.endSymbol(),                                                                          // 7316
        denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')                                              // 7317
            ? identity                                                                                                 // 7318
            : function denormalizeTemplate(template) {                                                                 // 7319
              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);                                 // 7320
        },                                                                                                             // 7321
        NG_ATTR_BINDING = /^ngAttr[A-Z]/;                                                                              // 7322
                                                                                                                       // 7323
    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {                       // 7324
      var bindings = $element.data('$binding') || [];                                                                  // 7325
                                                                                                                       // 7326
      if (isArray(binding)) {                                                                                          // 7327
        bindings = bindings.concat(binding);                                                                           // 7328
      } else {                                                                                                         // 7329
        bindings.push(binding);                                                                                        // 7330
      }                                                                                                                // 7331
                                                                                                                       // 7332
      $element.data('$binding', bindings);                                                                             // 7333
    } : noop;                                                                                                          // 7334
                                                                                                                       // 7335
    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {                              // 7336
      safeAddClass($element, 'ng-binding');                                                                            // 7337
    } : noop;                                                                                                          // 7338
                                                                                                                       // 7339
    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {       // 7340
      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';                 // 7341
      $element.data(dataName, scope);                                                                                  // 7342
    } : noop;                                                                                                          // 7343
                                                                                                                       // 7344
    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {                        // 7345
      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');                                              // 7346
    } : noop;                                                                                                          // 7347
                                                                                                                       // 7348
    return compile;                                                                                                    // 7349
                                                                                                                       // 7350
    //================================                                                                                 // 7351
                                                                                                                       // 7352
    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,                                        // 7353
                        previousCompileContext) {                                                                      // 7354
      if (!($compileNodes instanceof jqLite)) {                                                                        // 7355
        // jquery always rewraps, whereas we need to preserve the original selector so that we can                     // 7356
        // modify it.                                                                                                  // 7357
        $compileNodes = jqLite($compileNodes);                                                                         // 7358
      }                                                                                                                // 7359
      // We can not compile top level text elements since text nodes can be merged and we will                         // 7360
      // not be able to attach scope data to them, so we will wrap them in <span>                                      // 7361
      forEach($compileNodes, function(node, index) {                                                                   // 7362
        if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\S+/) /* non-empty */ ) {                         // 7363
          $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];                                       // 7364
        }                                                                                                              // 7365
      });                                                                                                              // 7366
      var compositeLinkFn =                                                                                            // 7367
              compileNodes($compileNodes, transcludeFn, $compileNodes,                                                 // 7368
                           maxPriority, ignoreDirective, previousCompileContext);                                      // 7369
      compile.$$addScopeClass($compileNodes);                                                                          // 7370
      var namespace = null;                                                                                            // 7371
      return function publicLinkFn(scope, cloneConnectFn, options) {                                                   // 7372
        assertArg(scope, 'scope');                                                                                     // 7373
                                                                                                                       // 7374
        options = options || {};                                                                                       // 7375
        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,                                                 // 7376
          transcludeControllers = options.transcludeControllers,                                                       // 7377
          futureParentElement = options.futureParentElement;                                                           // 7378
                                                                                                                       // 7379
        // When `parentBoundTranscludeFn` is passed, it is a                                                           // 7380
        // `controllersBoundTransclude` function (it was previously passed                                             // 7381
        // as `transclude` to directive.link) so we must unwrap it to get                                              // 7382
        // its `boundTranscludeFn`                                                                                     // 7383
        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {                                    // 7384
          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;                                         // 7385
        }                                                                                                              // 7386
                                                                                                                       // 7387
        if (!namespace) {                                                                                              // 7388
          namespace = detectNamespaceForChildElements(futureParentElement);                                            // 7389
        }                                                                                                              // 7390
        var $linkNode;                                                                                                 // 7391
        if (namespace !== 'html') {                                                                                    // 7392
          // When using a directive with replace:true and templateUrl the $compileNodes                                // 7393
          // (or a child element inside of them)                                                                       // 7394
          // might change, so we need to recreate the namespace adapted compileNodes                                   // 7395
          // for call to the link function.                                                                            // 7396
          // Note: This will already clone the nodes...                                                                // 7397
          $linkNode = jqLite(                                                                                          // 7398
            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())                                      // 7399
          );                                                                                                           // 7400
        } else if (cloneConnectFn) {                                                                                   // 7401
          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart                   // 7402
          // and sometimes changes the structure of the DOM.                                                           // 7403
          $linkNode = JQLitePrototype.clone.call($compileNodes);                                                       // 7404
        } else {                                                                                                       // 7405
          $linkNode = $compileNodes;                                                                                   // 7406
        }                                                                                                              // 7407
                                                                                                                       // 7408
        if (transcludeControllers) {                                                                                   // 7409
          for (var controllerName in transcludeControllers) {                                                          // 7410
            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);       // 7411
          }                                                                                                            // 7412
        }                                                                                                              // 7413
                                                                                                                       // 7414
        compile.$$addScopeInfo($linkNode, scope);                                                                      // 7415
                                                                                                                       // 7416
        if (cloneConnectFn) cloneConnectFn($linkNode, scope);                                                          // 7417
        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);                    // 7418
        return $linkNode;                                                                                              // 7419
      };                                                                                                               // 7420
    }                                                                                                                  // 7421
                                                                                                                       // 7422
    function detectNamespaceForChildElements(parentElement) {                                                          // 7423
      // TODO: Make this detect MathML as well...                                                                      // 7424
      var node = parentElement && parentElement[0];                                                                    // 7425
      if (!node) {                                                                                                     // 7426
        return 'html';                                                                                                 // 7427
      } else {                                                                                                         // 7428
        return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';                   // 7429
      }                                                                                                                // 7430
    }                                                                                                                  // 7431
                                                                                                                       // 7432
    /**                                                                                                                // 7433
     * Compile function matches each node in nodeList against the directives. Once all directives                      // 7434
     * for a particular node are collected their compile functions are executed. The compile                           // 7435
     * functions return values - the linking functions - are combined into a composite linking                         // 7436
     * function, which is the a linking function for the node.                                                         // 7437
     *                                                                                                                 // 7438
     * @param {NodeList} nodeList an array of nodes or NodeList to compile                                             // 7439
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the                     // 7440
     *        scope argument is auto-generated to the new child of the transcluded parent scope.                       // 7441
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then                      // 7442
     *        the rootElement must be set the jqLite collection of the compile root. This is                           // 7443
     *        needed so that the jqLite collection items can be replaced with widgets.                                 // 7444
     * @param {number=} maxPriority Max directive priority.                                                            // 7445
     * @returns {Function} A composite linking function of all of the matched directives or null.                      // 7446
     */                                                                                                                // 7447
    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,                          // 7448
                            previousCompileContext) {                                                                  // 7449
      var linkFns = [],                                                                                                // 7450
          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;                        // 7451
                                                                                                                       // 7452
      for (var i = 0; i < nodeList.length; i++) {                                                                      // 7453
        attrs = new Attributes();                                                                                      // 7454
                                                                                                                       // 7455
        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.                          // 7456
        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,                      // 7457
                                        ignoreDirective);                                                              // 7458
                                                                                                                       // 7459
        nodeLinkFn = (directives.length)                                                                               // 7460
            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,                        // 7461
                                      null, [], [], previousCompileContext)                                            // 7462
            : null;                                                                                                    // 7463
                                                                                                                       // 7464
        if (nodeLinkFn && nodeLinkFn.scope) {                                                                          // 7465
          compile.$$addScopeClass(attrs.$$element);                                                                    // 7466
        }                                                                                                              // 7467
                                                                                                                       // 7468
        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||                                                            // 7469
                      !(childNodes = nodeList[i].childNodes) ||                                                        // 7470
                      !childNodes.length)                                                                              // 7471
            ? null                                                                                                     // 7472
            : compileNodes(childNodes,                                                                                 // 7473
                 nodeLinkFn ? (                                                                                        // 7474
                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)                            // 7475
                     && nodeLinkFn.transclude) : transcludeFn);                                                        // 7476
                                                                                                                       // 7477
        if (nodeLinkFn || childLinkFn) {                                                                               // 7478
          linkFns.push(i, nodeLinkFn, childLinkFn);                                                                    // 7479
          linkFnFound = true;                                                                                          // 7480
          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;                                                             // 7481
        }                                                                                                              // 7482
                                                                                                                       // 7483
        //use the previous context only for the first element in the virtual group                                     // 7484
        previousCompileContext = null;                                                                                 // 7485
      }                                                                                                                // 7486
                                                                                                                       // 7487
      // return a linking function if we have found anything, null otherwise                                           // 7488
      return linkFnFound ? compositeLinkFn : null;                                                                     // 7489
                                                                                                                       // 7490
      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {                               // 7491
        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;                             // 7492
        var stableNodeList;                                                                                            // 7493
                                                                                                                       // 7494
                                                                                                                       // 7495
        if (nodeLinkFnFound) {                                                                                         // 7496
          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our                    // 7497
          // offsets don't get screwed up                                                                              // 7498
          var nodeListLength = nodeList.length;                                                                        // 7499
          stableNodeList = new Array(nodeListLength);                                                                  // 7500
                                                                                                                       // 7501
          // create a sparse array by only copying the elements which have a linkFn                                    // 7502
          for (i = 0; i < linkFns.length; i+=3) {                                                                      // 7503
            idx = linkFns[i];                                                                                          // 7504
            stableNodeList[idx] = nodeList[idx];                                                                       // 7505
          }                                                                                                            // 7506
        } else {                                                                                                       // 7507
          stableNodeList = nodeList;                                                                                   // 7508
        }                                                                                                              // 7509
                                                                                                                       // 7510
        for (i = 0, ii = linkFns.length; i < ii;) {                                                                    // 7511
          node = stableNodeList[linkFns[i++]];                                                                         // 7512
          nodeLinkFn = linkFns[i++];                                                                                   // 7513
          childLinkFn = linkFns[i++];                                                                                  // 7514
                                                                                                                       // 7515
          if (nodeLinkFn) {                                                                                            // 7516
            if (nodeLinkFn.scope) {                                                                                    // 7517
              childScope = scope.$new();                                                                               // 7518
              compile.$$addScopeInfo(jqLite(node), childScope);                                                        // 7519
              var destroyBindings = nodeLinkFn.$$destroyBindings;                                                      // 7520
              if (destroyBindings) {                                                                                   // 7521
                nodeLinkFn.$$destroyBindings = null;                                                                   // 7522
                childScope.$on('$destroyed', destroyBindings);                                                         // 7523
              }                                                                                                        // 7524
            } else {                                                                                                   // 7525
              childScope = scope;                                                                                      // 7526
            }                                                                                                          // 7527
                                                                                                                       // 7528
            if (nodeLinkFn.transcludeOnThisElement) {                                                                  // 7529
              childBoundTranscludeFn = createBoundTranscludeFn(                                                        // 7530
                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn);                                              // 7531
                                                                                                                       // 7532
            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {                                 // 7533
              childBoundTranscludeFn = parentBoundTranscludeFn;                                                        // 7534
                                                                                                                       // 7535
            } else if (!parentBoundTranscludeFn && transcludeFn) {                                                     // 7536
              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);                                   // 7537
                                                                                                                       // 7538
            } else {                                                                                                   // 7539
              childBoundTranscludeFn = null;                                                                           // 7540
            }                                                                                                          // 7541
                                                                                                                       // 7542
            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn,                            // 7543
                       nodeLinkFn);                                                                                    // 7544
                                                                                                                       // 7545
          } else if (childLinkFn) {                                                                                    // 7546
            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);                                   // 7547
          }                                                                                                            // 7548
        }                                                                                                              // 7549
      }                                                                                                                // 7550
    }                                                                                                                  // 7551
                                                                                                                       // 7552
    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {                                 // 7553
                                                                                                                       // 7554
      var boundTranscludeFn = function(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) { // 7555
                                                                                                                       // 7556
        if (!transcludedScope) {                                                                                       // 7557
          transcludedScope = scope.$new(false, containingScope);                                                       // 7558
          transcludedScope.$$transcluded = true;                                                                       // 7559
        }                                                                                                              // 7560
                                                                                                                       // 7561
        return transcludeFn(transcludedScope, cloneFn, {                                                               // 7562
          parentBoundTranscludeFn: previousBoundTranscludeFn,                                                          // 7563
          transcludeControllers: controllers,                                                                          // 7564
          futureParentElement: futureParentElement                                                                     // 7565
        });                                                                                                            // 7566
      };                                                                                                               // 7567
                                                                                                                       // 7568
      return boundTranscludeFn;                                                                                        // 7569
    }                                                                                                                  // 7570
                                                                                                                       // 7571
    /**                                                                                                                // 7572
     * Looks for directives on the given node and adds them to the directive collection which is                       // 7573
     * sorted.                                                                                                         // 7574
     *                                                                                                                 // 7575
     * @param node Node to search.                                                                                     // 7576
     * @param directives An array to which the directives are added to. This array is sorted before                    // 7577
     *        the function returns.                                                                                    // 7578
     * @param attrs The shared attrs object which is used to populate the normalized attributes.                       // 7579
     * @param {number=} maxPriority Max directive priority.                                                            // 7580
     */                                                                                                                // 7581
    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {                                // 7582
      var nodeType = node.nodeType,                                                                                    // 7583
          attrsMap = attrs.$attr,                                                                                      // 7584
          match,                                                                                                       // 7585
          className;                                                                                                   // 7586
                                                                                                                       // 7587
      switch (nodeType) {                                                                                              // 7588
        case NODE_TYPE_ELEMENT: /* Element */                                                                          // 7589
          // use the node name: <directive>                                                                            // 7590
          addDirective(directives,                                                                                     // 7591
              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);                                 // 7592
                                                                                                                       // 7593
          // iterate over the attributes                                                                               // 7594
          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,                           // 7595
                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {                                                 // 7596
            var attrStartName = false;                                                                                 // 7597
            var attrEndName = false;                                                                                   // 7598
                                                                                                                       // 7599
            attr = nAttrs[j];                                                                                          // 7600
            name = attr.name;                                                                                          // 7601
            value = trim(attr.value);                                                                                  // 7602
                                                                                                                       // 7603
            // support ngAttr attribute binding                                                                        // 7604
            ngAttrName = directiveNormalize(name);                                                                     // 7605
            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {                                                         // 7606
              name = name.replace(PREFIX_REGEXP, '')                                                                   // 7607
                .substr(8).replace(/_(.)/g, function(match, letter) {                                                  // 7608
                  return letter.toUpperCase();                                                                         // 7609
                });                                                                                                    // 7610
            }                                                                                                          // 7611
                                                                                                                       // 7612
            var directiveNName = ngAttrName.replace(/(Start|End)$/, '');                                               // 7613
            if (directiveIsMultiElement(directiveNName)) {                                                             // 7614
              if (ngAttrName === directiveNName + 'Start') {                                                           // 7615
                attrStartName = name;                                                                                  // 7616
                attrEndName = name.substr(0, name.length - 5) + 'end';                                                 // 7617
                name = name.substr(0, name.length - 6);                                                                // 7618
              }                                                                                                        // 7619
            }                                                                                                          // 7620
                                                                                                                       // 7621
            nName = directiveNormalize(name.toLowerCase());                                                            // 7622
            attrsMap[nName] = name;                                                                                    // 7623
            if (isNgAttr || !attrs.hasOwnProperty(nName)) {                                                            // 7624
                attrs[nName] = value;                                                                                  // 7625
                if (getBooleanAttrName(node, nName)) {                                                                 // 7626
                  attrs[nName] = true; // presence means true                                                          // 7627
                }                                                                                                      // 7628
            }                                                                                                          // 7629
            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);                                     // 7630
            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,                          // 7631
                          attrEndName);                                                                                // 7632
          }                                                                                                            // 7633
                                                                                                                       // 7634
          // use class as directive                                                                                    // 7635
          className = node.className;                                                                                  // 7636
          if (isObject(className)) {                                                                                   // 7637
              // Maybe SVGAnimatedString                                                                               // 7638
              className = className.animVal;                                                                           // 7639
          }                                                                                                            // 7640
          if (isString(className) && className !== '') {                                                               // 7641
            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {                                                   // 7642
              nName = directiveNormalize(match[2]);                                                                    // 7643
              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {                                // 7644
                attrs[nName] = trim(match[3]);                                                                         // 7645
              }                                                                                                        // 7646
              className = className.substr(match.index + match[0].length);                                             // 7647
            }                                                                                                          // 7648
          }                                                                                                            // 7649
          break;                                                                                                       // 7650
        case NODE_TYPE_TEXT: /* Text Node */                                                                           // 7651
          if (msie === 11) {                                                                                           // 7652
            // Workaround for #11781                                                                                   // 7653
            while (node.parentNode && node.nextSibling && node.nextSibling.nodeType === NODE_TYPE_TEXT) {              // 7654
              node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;                                            // 7655
              node.parentNode.removeChild(node.nextSibling);                                                           // 7656
            }                                                                                                          // 7657
          }                                                                                                            // 7658
          addTextInterpolateDirective(directives, node.nodeValue);                                                     // 7659
          break;                                                                                                       // 7660
        case NODE_TYPE_COMMENT: /* Comment */                                                                          // 7661
          try {                                                                                                        // 7662
            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);                                                     // 7663
            if (match) {                                                                                               // 7664
              nName = directiveNormalize(match[1]);                                                                    // 7665
              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {                                // 7666
                attrs[nName] = trim(match[2]);                                                                         // 7667
              }                                                                                                        // 7668
            }                                                                                                          // 7669
          } catch (e) {                                                                                                // 7670
            // turns out that under some circumstances IE9 throws errors when one attempts to read                     // 7671
            // comment's node value.                                                                                   // 7672
            // Just ignore it and continue. (Can't seem to reproduce in test case.)                                    // 7673
          }                                                                                                            // 7674
          break;                                                                                                       // 7675
      }                                                                                                                // 7676
                                                                                                                       // 7677
      directives.sort(byPriority);                                                                                     // 7678
      return directives;                                                                                               // 7679
    }                                                                                                                  // 7680
                                                                                                                       // 7681
    /**                                                                                                                // 7682
     * Given a node with an directive-start it collects all of the siblings until it finds                             // 7683
     * directive-end.                                                                                                  // 7684
     * @param node                                                                                                     // 7685
     * @param attrStart                                                                                                // 7686
     * @param attrEnd                                                                                                  // 7687
     * @returns {*}                                                                                                    // 7688
     */                                                                                                                // 7689
    function groupScan(node, attrStart, attrEnd) {                                                                     // 7690
      var nodes = [];                                                                                                  // 7691
      var depth = 0;                                                                                                   // 7692
      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {                                            // 7693
        do {                                                                                                           // 7694
          if (!node) {                                                                                                 // 7695
            throw $compileMinErr('uterdir',                                                                            // 7696
                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",                              // 7697
                      attrStart, attrEnd);                                                                             // 7698
          }                                                                                                            // 7699
          if (node.nodeType == NODE_TYPE_ELEMENT) {                                                                    // 7700
            if (node.hasAttribute(attrStart)) depth++;                                                                 // 7701
            if (node.hasAttribute(attrEnd)) depth--;                                                                   // 7702
          }                                                                                                            // 7703
          nodes.push(node);                                                                                            // 7704
          node = node.nextSibling;                                                                                     // 7705
        } while (depth > 0);                                                                                           // 7706
      } else {                                                                                                         // 7707
        nodes.push(node);                                                                                              // 7708
      }                                                                                                                // 7709
                                                                                                                       // 7710
      return jqLite(nodes);                                                                                            // 7711
    }                                                                                                                  // 7712
                                                                                                                       // 7713
    /**                                                                                                                // 7714
     * Wrapper for linking function which converts normal linking function into a grouped                              // 7715
     * linking function.                                                                                               // 7716
     * @param linkFn                                                                                                   // 7717
     * @param attrStart                                                                                                // 7718
     * @param attrEnd                                                                                                  // 7719
     * @returns {Function}                                                                                             // 7720
     */                                                                                                                // 7721
    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {                                                  // 7722
      return function(scope, element, attrs, controllers, transcludeFn) {                                              // 7723
        element = groupScan(element[0], attrStart, attrEnd);                                                           // 7724
        return linkFn(scope, element, attrs, controllers, transcludeFn);                                               // 7725
      };                                                                                                               // 7726
    }                                                                                                                  // 7727
                                                                                                                       // 7728
    /**                                                                                                                // 7729
     * Once the directives have been collected, their compile functions are executed. This method                      // 7730
     * is responsible for inlining directive templates as well as terminating the application                          // 7731
     * of the directives if the terminal directive has been reached.                                                   // 7732
     *                                                                                                                 // 7733
     * @param {Array} directives Array of collected directives to execute their compile function.                      // 7734
     *        this needs to be pre-sorted by priority order.                                                           // 7735
     * @param {Node} compileNode The raw DOM node to apply the compile functions to                                    // 7736
     * @param {Object} templateAttrs The shared attribute function                                                     // 7737
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the                     // 7738
     *                                                  scope argument is auto-generated to the new                    // 7739
     *                                                  child of the transcluded parent scope.                         // 7740
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this                        // 7741
     *                              argument has the root jqLite array so that we can replace nodes                    // 7742
     *                              on it.                                                                             // 7743
     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when                       // 7744
     *                                           compiling the transclusion.                                           // 7745
     * @param {Array.<Function>} preLinkFns                                                                            // 7746
     * @param {Array.<Function>} postLinkFns                                                                           // 7747
     * @param {Object} previousCompileContext Context used for previous compilation of the current                     // 7748
     *                                        node                                                                     // 7749
     * @returns {Function} linkFn                                                                                      // 7750
     */                                                                                                                // 7751
    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,                               // 7752
                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,                    // 7753
                                   previousCompileContext) {                                                           // 7754
      previousCompileContext = previousCompileContext || {};                                                           // 7755
                                                                                                                       // 7756
      var terminalPriority = -Number.MAX_VALUE,                                                                        // 7757
          newScopeDirective = previousCompileContext.newScopeDirective,                                                // 7758
          controllerDirectives = previousCompileContext.controllerDirectives,                                          // 7759
          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,                                  // 7760
          templateDirective = previousCompileContext.templateDirective,                                                // 7761
          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,                                // 7762
          hasTranscludeDirective = false,                                                                              // 7763
          hasTemplate = false,                                                                                         // 7764
          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,                        // 7765
          $compileNode = templateAttrs.$$element = jqLite(compileNode),                                                // 7766
          directive,                                                                                                   // 7767
          directiveName,                                                                                               // 7768
          $template,                                                                                                   // 7769
          replaceDirective = originalReplaceDirective,                                                                 // 7770
          childTranscludeFn = transcludeFn,                                                                            // 7771
          linkFn,                                                                                                      // 7772
          directiveValue;                                                                                              // 7773
                                                                                                                       // 7774
      // executes all directives on the current element                                                                // 7775
      for (var i = 0, ii = directives.length; i < ii; i++) {                                                           // 7776
        directive = directives[i];                                                                                     // 7777
        var attrStart = directive.$$start;                                                                             // 7778
        var attrEnd = directive.$$end;                                                                                 // 7779
                                                                                                                       // 7780
        // collect multiblock sections                                                                                 // 7781
        if (attrStart) {                                                                                               // 7782
          $compileNode = groupScan(compileNode, attrStart, attrEnd);                                                   // 7783
        }                                                                                                              // 7784
        $template = undefined;                                                                                         // 7785
                                                                                                                       // 7786
        if (terminalPriority > directive.priority) {                                                                   // 7787
          break; // prevent further processing of directives                                                           // 7788
        }                                                                                                              // 7789
                                                                                                                       // 7790
        if (directiveValue = directive.scope) {                                                                        // 7791
                                                                                                                       // 7792
          // skip the check for directives with async templates, we'll check the derived sync                          // 7793
          // directive when the template arrives                                                                       // 7794
          if (!directive.templateUrl) {                                                                                // 7795
            if (isObject(directiveValue)) {                                                                            // 7796
              // This directive is trying to add an isolated scope.                                                    // 7797
              // Check that there is no scope of any kind already                                                      // 7798
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,                   // 7799
                                directive, $compileNode);                                                              // 7800
              newIsolateScopeDirective = directive;                                                                    // 7801
            } else {                                                                                                   // 7802
              // This directive is trying to add a child scope.                                                        // 7803
              // Check that there is no isolated scope already                                                         // 7804
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,                             // 7805
                                $compileNode);                                                                         // 7806
            }                                                                                                          // 7807
          }                                                                                                            // 7808
                                                                                                                       // 7809
          newScopeDirective = newScopeDirective || directive;                                                          // 7810
        }                                                                                                              // 7811
                                                                                                                       // 7812
        directiveName = directive.name;                                                                                // 7813
                                                                                                                       // 7814
        if (!directive.templateUrl && directive.controller) {                                                          // 7815
          directiveValue = directive.controller;                                                                       // 7816
          controllerDirectives = controllerDirectives || createMap();                                                  // 7817
          assertNoDuplicate("'" + directiveName + "' controller",                                                      // 7818
              controllerDirectives[directiveName], directive, $compileNode);                                           // 7819
          controllerDirectives[directiveName] = directive;                                                             // 7820
        }                                                                                                              // 7821
                                                                                                                       // 7822
        if (directiveValue = directive.transclude) {                                                                   // 7823
          hasTranscludeDirective = true;                                                                               // 7824
                                                                                                                       // 7825
          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.                    // 7826
          // This option should only be used by directives that know how to safely handle element transclusion,        // 7827
          // where the transcluded nodes are added or replaced after linking.                                          // 7828
          if (!directive.$$tlb) {                                                                                      // 7829
            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);                     // 7830
            nonTlbTranscludeDirective = directive;                                                                     // 7831
          }                                                                                                            // 7832
                                                                                                                       // 7833
          if (directiveValue == 'element') {                                                                           // 7834
            hasElementTranscludeDirective = true;                                                                      // 7835
            terminalPriority = directive.priority;                                                                     // 7836
            $template = $compileNode;                                                                                  // 7837
            $compileNode = templateAttrs.$$element =                                                                   // 7838
                jqLite(document.createComment(' ' + directiveName + ': ' +                                             // 7839
                                              templateAttrs[directiveName] + ' '));                                    // 7840
            compileNode = $compileNode[0];                                                                             // 7841
            replaceWith(jqCollection, sliceArgs($template), compileNode);                                              // 7842
                                                                                                                       // 7843
            childTranscludeFn = compile($template, transcludeFn, terminalPriority,                                     // 7844
                                        replaceDirective && replaceDirective.name, {                                   // 7845
                                          // Don't pass in:                                                            // 7846
                                          // - controllerDirectives - otherwise we'll create duplicates controllers    // 7847
                                          // - newIsolateScopeDirective or templateDirective - combining templates with
                                          //   element transclusion doesn't make sense.                                // 7849
                                          //                                                                           // 7850
                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                                          // on the same element more than once.                                       // 7852
                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective                         // 7853
                                        });                                                                            // 7854
          } else {                                                                                                     // 7855
            $template = jqLite(jqLiteClone(compileNode)).contents();                                                   // 7856
            $compileNode.empty(); // clear contents                                                                    // 7857
            childTranscludeFn = compile($template, transcludeFn);                                                      // 7858
          }                                                                                                            // 7859
        }                                                                                                              // 7860
                                                                                                                       // 7861
        if (directive.template) {                                                                                      // 7862
          hasTemplate = true;                                                                                          // 7863
          assertNoDuplicate('template', templateDirective, directive, $compileNode);                                   // 7864
          templateDirective = directive;                                                                               // 7865
                                                                                                                       // 7866
          directiveValue = (isFunction(directive.template))                                                            // 7867
              ? directive.template($compileNode, templateAttrs)                                                        // 7868
              : directive.template;                                                                                    // 7869
                                                                                                                       // 7870
          directiveValue = denormalizeTemplate(directiveValue);                                                        // 7871
                                                                                                                       // 7872
          if (directive.replace) {                                                                                     // 7873
            replaceDirective = directive;                                                                              // 7874
            if (jqLiteIsTextNode(directiveValue)) {                                                                    // 7875
              $template = [];                                                                                          // 7876
            } else {                                                                                                   // 7877
              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));             // 7878
            }                                                                                                          // 7879
            compileNode = $template[0];                                                                                // 7880
                                                                                                                       // 7881
            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {                                 // 7882
              throw $compileMinErr('tplrt',                                                                            // 7883
                  "Template for directive '{0}' must have exactly one root element. {1}",                              // 7884
                  directiveName, '');                                                                                  // 7885
            }                                                                                                          // 7886
                                                                                                                       // 7887
            replaceWith(jqCollection, $compileNode, compileNode);                                                      // 7888
                                                                                                                       // 7889
            var newTemplateAttrs = {$attr: {}};                                                                        // 7890
                                                                                                                       // 7891
            // combine directives from the original node and from the template:                                        // 7892
            // - take the array of directives for this element                                                         // 7893
            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)  // 7894
            // - collect directives from the template and sort them by priority                                        // 7895
            // - combine directives as: processed + template + unprocessed                                             // 7896
            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);                             // 7897
            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));                         // 7898
                                                                                                                       // 7899
            if (newIsolateScopeDirective) {                                                                            // 7900
              markDirectivesAsIsolate(templateDirectives);                                                             // 7901
            }                                                                                                          // 7902
            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);                          // 7903
            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);                                                  // 7904
                                                                                                                       // 7905
            ii = directives.length;                                                                                    // 7906
          } else {                                                                                                     // 7907
            $compileNode.html(directiveValue);                                                                         // 7908
          }                                                                                                            // 7909
        }                                                                                                              // 7910
                                                                                                                       // 7911
        if (directive.templateUrl) {                                                                                   // 7912
          hasTemplate = true;                                                                                          // 7913
          assertNoDuplicate('template', templateDirective, directive, $compileNode);                                   // 7914
          templateDirective = directive;                                                                               // 7915
                                                                                                                       // 7916
          if (directive.replace) {                                                                                     // 7917
            replaceDirective = directive;                                                                              // 7918
          }                                                                                                            // 7919
                                                                                                                       // 7920
          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,                   // 7921
              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {     // 7922
                controllerDirectives: controllerDirectives,                                                            // 7923
                newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,                             // 7924
                newIsolateScopeDirective: newIsolateScopeDirective,                                                    // 7925
                templateDirective: templateDirective,                                                                  // 7926
                nonTlbTranscludeDirective: nonTlbTranscludeDirective                                                   // 7927
              });                                                                                                      // 7928
          ii = directives.length;                                                                                      // 7929
        } else if (directive.compile) {                                                                                // 7930
          try {                                                                                                        // 7931
            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);                                // 7932
            if (isFunction(linkFn)) {                                                                                  // 7933
              addLinkFns(null, linkFn, attrStart, attrEnd);                                                            // 7934
            } else if (linkFn) {                                                                                       // 7935
              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);                                                 // 7936
            }                                                                                                          // 7937
          } catch (e) {                                                                                                // 7938
            $exceptionHandler(e, startingTag($compileNode));                                                           // 7939
          }                                                                                                            // 7940
        }                                                                                                              // 7941
                                                                                                                       // 7942
        if (directive.terminal) {                                                                                      // 7943
          nodeLinkFn.terminal = true;                                                                                  // 7944
          terminalPriority = Math.max(terminalPriority, directive.priority);                                           // 7945
        }                                                                                                              // 7946
                                                                                                                       // 7947
      }                                                                                                                // 7948
                                                                                                                       // 7949
      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;                                        // 7950
      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;                                                     // 7951
      nodeLinkFn.templateOnThisElement = hasTemplate;                                                                  // 7952
      nodeLinkFn.transclude = childTranscludeFn;                                                                       // 7953
                                                                                                                       // 7954
      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;                            // 7955
                                                                                                                       // 7956
      // might be normal or delayed nodeLinkFn depending on if templateUrl is present                                  // 7957
      return nodeLinkFn;                                                                                               // 7958
                                                                                                                       // 7959
      ////////////////////                                                                                             // 7960
                                                                                                                       // 7961
      function addLinkFns(pre, post, attrStart, attrEnd) {                                                             // 7962
        if (pre) {                                                                                                     // 7963
          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);                                    // 7964
          pre.require = directive.require;                                                                             // 7965
          pre.directiveName = directiveName;                                                                           // 7966
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {                                    // 7967
            pre = cloneAndAnnotateFn(pre, {isolateScope: true});                                                       // 7968
          }                                                                                                            // 7969
          preLinkFns.push(pre);                                                                                        // 7970
        }                                                                                                              // 7971
        if (post) {                                                                                                    // 7972
          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);                                  // 7973
          post.require = directive.require;                                                                            // 7974
          post.directiveName = directiveName;                                                                          // 7975
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {                                    // 7976
            post = cloneAndAnnotateFn(post, {isolateScope: true});                                                     // 7977
          }                                                                                                            // 7978
          postLinkFns.push(post);                                                                                      // 7979
        }                                                                                                              // 7980
      }                                                                                                                // 7981
                                                                                                                       // 7982
                                                                                                                       // 7983
      function getControllers(directiveName, require, $element, elementControllers) {                                  // 7984
        var value;                                                                                                     // 7985
                                                                                                                       // 7986
        if (isString(require)) {                                                                                       // 7987
          var match = require.match(REQUIRE_PREFIX_REGEXP);                                                            // 7988
          var name = require.substring(match[0].length);                                                               // 7989
          var inheritType = match[1] || match[3];                                                                      // 7990
          var optional = match[2] === '?';                                                                             // 7991
                                                                                                                       // 7992
          //If only parents then start at the parent element                                                           // 7993
          if (inheritType === '^^') {                                                                                  // 7994
            $element = $element.parent();                                                                              // 7995
          //Otherwise attempt getting the controller from elementControllers in case                                   // 7996
          //the element is transcluded (and has no data) and to avoid .data if possible                                // 7997
          } else {                                                                                                     // 7998
            value = elementControllers && elementControllers[name];                                                    // 7999
            value = value && value.instance;                                                                           // 8000
          }                                                                                                            // 8001
                                                                                                                       // 8002
          if (!value) {                                                                                                // 8003
            var dataName = '$' + name + 'Controller';                                                                  // 8004
            value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);                          // 8005
          }                                                                                                            // 8006
                                                                                                                       // 8007
          if (!value && !optional) {                                                                                   // 8008
            throw $compileMinErr('ctreq',                                                                              // 8009
                "Controller '{0}', required by directive '{1}', can't be found!",                                      // 8010
                name, directiveName);                                                                                  // 8011
          }                                                                                                            // 8012
        } else if (isArray(require)) {                                                                                 // 8013
          value = [];                                                                                                  // 8014
          for (var i = 0, ii = require.length; i < ii; i++) {                                                          // 8015
            value[i] = getControllers(directiveName, require[i], $element, elementControllers);                        // 8016
          }                                                                                                            // 8017
        }                                                                                                              // 8018
                                                                                                                       // 8019
        return value || null;                                                                                          // 8020
      }                                                                                                                // 8021
                                                                                                                       // 8022
      function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope) {            // 8023
        var elementControllers = createMap();                                                                          // 8024
        for (var controllerKey in controllerDirectives) {                                                              // 8025
          var directive = controllerDirectives[controllerKey];                                                         // 8026
          var locals = {                                                                                               // 8027
            $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,         // 8028
            $element: $element,                                                                                        // 8029
            $attrs: attrs,                                                                                             // 8030
            $transclude: transcludeFn                                                                                  // 8031
          };                                                                                                           // 8032
                                                                                                                       // 8033
          var controller = directive.controller;                                                                       // 8034
          if (controller == '@') {                                                                                     // 8035
            controller = attrs[directive.name];                                                                        // 8036
          }                                                                                                            // 8037
                                                                                                                       // 8038
          var controllerInstance = $controller(controller, locals, true, directive.controllerAs);                      // 8039
                                                                                                                       // 8040
          // For directives with element transclusion the element is a comment,                                        // 8041
          // but jQuery .data doesn't support attaching data to comment nodes as it's hard to                          // 8042
          // clean up (http://bugs.jquery.com/ticket/8335).                                                            // 8043
          // Instead, we save the controllers for the element in a local hash and attach to .data                      // 8044
          // later, once we have the actual element.                                                                   // 8045
          elementControllers[directive.name] = controllerInstance;                                                     // 8046
          if (!hasElementTranscludeDirective) {                                                                        // 8047
            $element.data('$' + directive.name + 'Controller', controllerInstance.instance);                           // 8048
          }                                                                                                            // 8049
        }                                                                                                              // 8050
        return elementControllers;                                                                                     // 8051
      }                                                                                                                // 8052
                                                                                                                       // 8053
      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn,                               // 8054
                          thisLinkFn) {                                                                                // 8055
        var i, ii, linkFn, controller, isolateScope, elementControllers, transcludeFn, $element,                       // 8056
            attrs;                                                                                                     // 8057
                                                                                                                       // 8058
        if (compileNode === linkNode) {                                                                                // 8059
          attrs = templateAttrs;                                                                                       // 8060
          $element = templateAttrs.$$element;                                                                          // 8061
        } else {                                                                                                       // 8062
          $element = jqLite(linkNode);                                                                                 // 8063
          attrs = new Attributes($element, templateAttrs);                                                             // 8064
        }                                                                                                              // 8065
                                                                                                                       // 8066
        if (newIsolateScopeDirective) {                                                                                // 8067
          isolateScope = scope.$new(true);                                                                             // 8068
        }                                                                                                              // 8069
                                                                                                                       // 8070
        if (boundTranscludeFn) {                                                                                       // 8071
          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`                                        // 8072
          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`                                            // 8073
          transcludeFn = controllersBoundTransclude;                                                                   // 8074
          transcludeFn.$$boundTransclude = boundTranscludeFn;                                                          // 8075
        }                                                                                                              // 8076
                                                                                                                       // 8077
        if (controllerDirectives) {                                                                                    // 8078
          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope);
        }                                                                                                              // 8080
                                                                                                                       // 8081
        if (newIsolateScopeDirective) {                                                                                // 8082
          // Initialize isolate scope bindings for new isolate scope directive.                                        // 8083
          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
              templateDirective === newIsolateScopeDirective.$$originalDirective)));                                   // 8085
          compile.$$addScopeClass($element, true);                                                                     // 8086
          isolateScope.$$isolateBindings =                                                                             // 8087
              newIsolateScopeDirective.$$isolateBindings;                                                              // 8088
          initializeDirectiveBindings(scope, attrs, isolateScope,                                                      // 8089
                                      isolateScope.$$isolateBindings,                                                  // 8090
                                      newIsolateScopeDirective, isolateScope);                                         // 8091
        }                                                                                                              // 8092
        if (elementControllers) {                                                                                      // 8093
          // Initialize bindToController bindings for new/isolate scopes                                               // 8094
          var scopeDirective = newIsolateScopeDirective || newScopeDirective;                                          // 8095
          var bindings;                                                                                                // 8096
          var controllerForBindings;                                                                                   // 8097
          if (scopeDirective && elementControllers[scopeDirective.name]) {                                             // 8098
            bindings = scopeDirective.$$bindings.bindToController;                                                     // 8099
            controller = elementControllers[scopeDirective.name];                                                      // 8100
                                                                                                                       // 8101
            if (controller && controller.identifier && bindings) {                                                     // 8102
              controllerForBindings = controller;                                                                      // 8103
              thisLinkFn.$$destroyBindings =                                                                           // 8104
                  initializeDirectiveBindings(scope, attrs, controller.instance,                                       // 8105
                                              bindings, scopeDirective);                                               // 8106
            }                                                                                                          // 8107
          }                                                                                                            // 8108
          for (i in elementControllers) {                                                                              // 8109
            controller = elementControllers[i];                                                                        // 8110
            var controllerResult = controller();                                                                       // 8111
                                                                                                                       // 8112
            if (controllerResult !== controller.instance) {                                                            // 8113
              // If the controller constructor has a return value, overwrite the instance                              // 8114
              // from setupControllers and update the element data                                                     // 8115
              controller.instance = controllerResult;                                                                  // 8116
              $element.data('$' + i + 'Controller', controllerResult);                                                 // 8117
              if (controller === controllerForBindings) {                                                              // 8118
                // Remove and re-install bindToController bindings                                                     // 8119
                thisLinkFn.$$destroyBindings();                                                                        // 8120
                thisLinkFn.$$destroyBindings =                                                                         // 8121
                  initializeDirectiveBindings(scope, attrs, controllerResult, bindings, scopeDirective);               // 8122
              }                                                                                                        // 8123
            }                                                                                                          // 8124
          }                                                                                                            // 8125
        }                                                                                                              // 8126
                                                                                                                       // 8127
        // PRELINKING                                                                                                  // 8128
        for (i = 0, ii = preLinkFns.length; i < ii; i++) {                                                             // 8129
          linkFn = preLinkFns[i];                                                                                      // 8130
          invokeLinkFn(linkFn,                                                                                         // 8131
              linkFn.isolateScope ? isolateScope : scope,                                                              // 8132
              $element,                                                                                                // 8133
              attrs,                                                                                                   // 8134
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),    // 8135
              transcludeFn                                                                                             // 8136
          );                                                                                                           // 8137
        }                                                                                                              // 8138
                                                                                                                       // 8139
        // RECURSION                                                                                                   // 8140
        // We only pass the isolate scope, if the isolate directive has a template,                                    // 8141
        // otherwise the child elements do not belong to the isolate directive.                                        // 8142
        var scopeToChild = scope;                                                                                      // 8143
        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
          scopeToChild = isolateScope;                                                                                 // 8145
        }                                                                                                              // 8146
        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);                   // 8147
                                                                                                                       // 8148
        // POSTLINKING                                                                                                 // 8149
        for (i = postLinkFns.length - 1; i >= 0; i--) {                                                                // 8150
          linkFn = postLinkFns[i];                                                                                     // 8151
          invokeLinkFn(linkFn,                                                                                         // 8152
              linkFn.isolateScope ? isolateScope : scope,                                                              // 8153
              $element,                                                                                                // 8154
              attrs,                                                                                                   // 8155
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),    // 8156
              transcludeFn                                                                                             // 8157
          );                                                                                                           // 8158
        }                                                                                                              // 8159
                                                                                                                       // 8160
        // This is the function that is injected as `$transclude`.                                                     // 8161
        // Note: all arguments are optional!                                                                           // 8162
        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {                               // 8163
          var transcludeControllers;                                                                                   // 8164
                                                                                                                       // 8165
          // No scope passed in:                                                                                       // 8166
          if (!isScope(scope)) {                                                                                       // 8167
            futureParentElement = cloneAttachFn;                                                                       // 8168
            cloneAttachFn = scope;                                                                                     // 8169
            scope = undefined;                                                                                         // 8170
          }                                                                                                            // 8171
                                                                                                                       // 8172
          if (hasElementTranscludeDirective) {                                                                         // 8173
            transcludeControllers = elementControllers;                                                                // 8174
          }                                                                                                            // 8175
          if (!futureParentElement) {                                                                                  // 8176
            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;                        // 8177
          }                                                                                                            // 8178
          return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);    // 8179
        }                                                                                                              // 8180
      }                                                                                                                // 8181
    }                                                                                                                  // 8182
                                                                                                                       // 8183
    function markDirectivesAsIsolate(directives) {                                                                     // 8184
      // mark all directives as needing isolate scope.                                                                 // 8185
      for (var j = 0, jj = directives.length; j < jj; j++) {                                                           // 8186
        directives[j] = inherit(directives[j], {$$isolateScope: true});                                                // 8187
      }                                                                                                                // 8188
    }                                                                                                                  // 8189
                                                                                                                       // 8190
    /**                                                                                                                // 8191
     * looks up the directive and decorates it with exception handling and proper parameters. We                       // 8192
     * call this the boundDirective.                                                                                   // 8193
     *                                                                                                                 // 8194
     * @param {string} name name of the directive to look up.                                                          // 8195
     * @param {string} location The directive must be found in specific format.                                        // 8196
     *   String containing any of theses characters:                                                                   // 8197
     *                                                                                                                 // 8198
     *   * `E`: element name                                                                                           // 8199
     *   * `A': attribute                                                                                              // 8200
     *   * `C`: class                                                                                                  // 8201
     *   * `M`: comment                                                                                                // 8202
     * @returns {boolean} true if directive was added.                                                                 // 8203
     */                                                                                                                // 8204
    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,                    // 8205
                          endAttrName) {                                                                               // 8206
      if (name === ignoreDirective) return null;                                                                       // 8207
      var match = null;                                                                                                // 8208
      if (hasDirectives.hasOwnProperty(name)) {                                                                        // 8209
        for (var directive, directives = $injector.get(name + Suffix),                                                 // 8210
            i = 0, ii = directives.length; i < ii; i++) {                                                              // 8211
          try {                                                                                                        // 8212
            directive = directives[i];                                                                                 // 8213
            if ((maxPriority === undefined || maxPriority > directive.priority) &&                                     // 8214
                 directive.restrict.indexOf(location) != -1) {                                                         // 8215
              if (startAttrName) {                                                                                     // 8216
                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});                          // 8217
              }                                                                                                        // 8218
              tDirectives.push(directive);                                                                             // 8219
              match = directive;                                                                                       // 8220
            }                                                                                                          // 8221
          } catch (e) { $exceptionHandler(e); }                                                                        // 8222
        }                                                                                                              // 8223
      }                                                                                                                // 8224
      return match;                                                                                                    // 8225
    }                                                                                                                  // 8226
                                                                                                                       // 8227
                                                                                                                       // 8228
    /**                                                                                                                // 8229
     * looks up the directive and returns true if it is a multi-element directive,                                     // 8230
     * and therefore requires DOM nodes between -start and -end markers to be grouped                                  // 8231
     * together.                                                                                                       // 8232
     *                                                                                                                 // 8233
     * @param {string} name name of the directive to look up.                                                          // 8234
     * @returns true if directive was registered as multi-element.                                                     // 8235
     */                                                                                                                // 8236
    function directiveIsMultiElement(name) {                                                                           // 8237
      if (hasDirectives.hasOwnProperty(name)) {                                                                        // 8238
        for (var directive, directives = $injector.get(name + Suffix),                                                 // 8239
            i = 0, ii = directives.length; i < ii; i++) {                                                              // 8240
          directive = directives[i];                                                                                   // 8241
          if (directive.multiElement) {                                                                                // 8242
            return true;                                                                                               // 8243
          }                                                                                                            // 8244
        }                                                                                                              // 8245
      }                                                                                                                // 8246
      return false;                                                                                                    // 8247
    }                                                                                                                  // 8248
                                                                                                                       // 8249
    /**                                                                                                                // 8250
     * When the element is replaced with HTML template then the new attributes                                         // 8251
     * on the template need to be merged with the existing attributes in the DOM.                                      // 8252
     * The desired effect is to have both of the attributes present.                                                   // 8253
     *                                                                                                                 // 8254
     * @param {object} dst destination attributes (original DOM)                                                       // 8255
     * @param {object} src source attributes (from the directive template)                                             // 8256
     */                                                                                                                // 8257
    function mergeTemplateAttributes(dst, src) {                                                                       // 8258
      var srcAttr = src.$attr,                                                                                         // 8259
          dstAttr = dst.$attr,                                                                                         // 8260
          $element = dst.$$element;                                                                                    // 8261
                                                                                                                       // 8262
      // reapply the old attributes to the new element                                                                 // 8263
      forEach(dst, function(value, key) {                                                                              // 8264
        if (key.charAt(0) != '$') {                                                                                    // 8265
          if (src[key] && src[key] !== value) {                                                                        // 8266
            value += (key === 'style' ? ';' : ' ') + src[key];                                                         // 8267
          }                                                                                                            // 8268
          dst.$set(key, value, true, srcAttr[key]);                                                                    // 8269
        }                                                                                                              // 8270
      });                                                                                                              // 8271
                                                                                                                       // 8272
      // copy the new attributes on the old attrs object                                                               // 8273
      forEach(src, function(value, key) {                                                                              // 8274
        if (key == 'class') {                                                                                          // 8275
          safeAddClass($element, value);                                                                               // 8276
          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;                                             // 8277
        } else if (key == 'style') {                                                                                   // 8278
          $element.attr('style', $element.attr('style') + ';' + value);                                                // 8279
          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;                                             // 8280
          // `dst` will never contain hasOwnProperty as DOM parser won't let it.                                       // 8281
          // You will get an "InvalidCharacterError: DOM Exception 5" error if you                                     // 8282
          // have an attribute like "has-own-property" or "data-has-own-property", etc.                                // 8283
        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {                                                 // 8284
          dst[key] = value;                                                                                            // 8285
          dstAttr[key] = srcAttr[key];                                                                                 // 8286
        }                                                                                                              // 8287
      });                                                                                                              // 8288
    }                                                                                                                  // 8289
                                                                                                                       // 8290
                                                                                                                       // 8291
    function compileTemplateUrl(directives, $compileNode, tAttrs,                                                      // 8292
        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {                            // 8293
      var linkQueue = [],                                                                                              // 8294
          afterTemplateNodeLinkFn,                                                                                     // 8295
          afterTemplateChildLinkFn,                                                                                    // 8296
          beforeTemplateCompileNode = $compileNode[0],                                                                 // 8297
          origAsyncDirective = directives.shift(),                                                                     // 8298
          derivedSyncDirective = inherit(origAsyncDirective, {                                                         // 8299
            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective                // 8300
          }),                                                                                                          // 8301
          templateUrl = (isFunction(origAsyncDirective.templateUrl))                                                   // 8302
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)                                                   // 8303
              : origAsyncDirective.templateUrl,                                                                        // 8304
          templateNamespace = origAsyncDirective.templateNamespace;                                                    // 8305
                                                                                                                       // 8306
      $compileNode.empty();                                                                                            // 8307
                                                                                                                       // 8308
      $templateRequest(templateUrl)                                                                                    // 8309
        .then(function(content) {                                                                                      // 8310
          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;                                       // 8311
                                                                                                                       // 8312
          content = denormalizeTemplate(content);                                                                      // 8313
                                                                                                                       // 8314
          if (origAsyncDirective.replace) {                                                                            // 8315
            if (jqLiteIsTextNode(content)) {                                                                           // 8316
              $template = [];                                                                                          // 8317
            } else {                                                                                                   // 8318
              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));                              // 8319
            }                                                                                                          // 8320
            compileNode = $template[0];                                                                                // 8321
                                                                                                                       // 8322
            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {                                 // 8323
              throw $compileMinErr('tplrt',                                                                            // 8324
                  "Template for directive '{0}' must have exactly one root element. {1}",                              // 8325
                  origAsyncDirective.name, templateUrl);                                                               // 8326
            }                                                                                                          // 8327
                                                                                                                       // 8328
            tempTemplateAttrs = {$attr: {}};                                                                           // 8329
            replaceWith($rootElement, $compileNode, compileNode);                                                      // 8330
            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);                            // 8331
                                                                                                                       // 8332
            if (isObject(origAsyncDirective.scope)) {                                                                  // 8333
              markDirectivesAsIsolate(templateDirectives);                                                             // 8334
            }                                                                                                          // 8335
            directives = templateDirectives.concat(directives);                                                        // 8336
            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);                                                        // 8337
          } else {                                                                                                     // 8338
            compileNode = beforeTemplateCompileNode;                                                                   // 8339
            $compileNode.html(content);                                                                                // 8340
          }                                                                                                            // 8341
                                                                                                                       // 8342
          directives.unshift(derivedSyncDirective);                                                                    // 8343
                                                                                                                       // 8344
          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,                             // 8345
              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,                            // 8346
              previousCompileContext);                                                                                 // 8347
          forEach($rootElement, function(node, i) {                                                                    // 8348
            if (node == compileNode) {                                                                                 // 8349
              $rootElement[i] = $compileNode[0];                                                                       // 8350
            }                                                                                                          // 8351
          });                                                                                                          // 8352
          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);                      // 8353
                                                                                                                       // 8354
          while (linkQueue.length) {                                                                                   // 8355
            var scope = linkQueue.shift(),                                                                             // 8356
                beforeTemplateLinkNode = linkQueue.shift(),                                                            // 8357
                linkRootElement = linkQueue.shift(),                                                                   // 8358
                boundTranscludeFn = linkQueue.shift(),                                                                 // 8359
                linkNode = $compileNode[0];                                                                            // 8360
                                                                                                                       // 8361
            if (scope.$$destroyed) continue;                                                                           // 8362
                                                                                                                       // 8363
            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {                                                // 8364
              var oldClasses = beforeTemplateLinkNode.className;                                                       // 8365
                                                                                                                       // 8366
              if (!(previousCompileContext.hasElementTranscludeDirective &&                                            // 8367
                  origAsyncDirective.replace)) {                                                                       // 8368
                // it was cloned therefore we have to clone as well.                                                   // 8369
                linkNode = jqLiteClone(compileNode);                                                                   // 8370
              }                                                                                                        // 8371
              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);                                  // 8372
                                                                                                                       // 8373
              // Copy in CSS classes from original node                                                                // 8374
              safeAddClass(jqLite(linkNode), oldClasses);                                                              // 8375
            }                                                                                                          // 8376
            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {                                                     // 8377
              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
            } else {                                                                                                   // 8379
              childBoundTranscludeFn = boundTranscludeFn;                                                              // 8380
            }                                                                                                          // 8381
            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,                           // 8382
              childBoundTranscludeFn, afterTemplateNodeLinkFn);                                                        // 8383
          }                                                                                                            // 8384
          linkQueue = null;                                                                                            // 8385
        });                                                                                                            // 8386
                                                                                                                       // 8387
      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {              // 8388
        var childBoundTranscludeFn = boundTranscludeFn;                                                                // 8389
        if (scope.$$destroyed) return;                                                                                 // 8390
        if (linkQueue) {                                                                                               // 8391
          linkQueue.push(scope,                                                                                        // 8392
                         node,                                                                                         // 8393
                         rootElement,                                                                                  // 8394
                         childBoundTranscludeFn);                                                                      // 8395
        } else {                                                                                                       // 8396
          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {                                                       // 8397
            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
          }                                                                                                            // 8399
          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn,          // 8400
                                  afterTemplateNodeLinkFn);                                                            // 8401
        }                                                                                                              // 8402
      };                                                                                                               // 8403
    }                                                                                                                  // 8404
                                                                                                                       // 8405
                                                                                                                       // 8406
    /**                                                                                                                // 8407
     * Sorting function for bound directives.                                                                          // 8408
     */                                                                                                                // 8409
    function byPriority(a, b) {                                                                                        // 8410
      var diff = b.priority - a.priority;                                                                              // 8411
      if (diff !== 0) return diff;                                                                                     // 8412
      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;                                                        // 8413
      return a.index - b.index;                                                                                        // 8414
    }                                                                                                                  // 8415
                                                                                                                       // 8416
    function assertNoDuplicate(what, previousDirective, directive, element) {                                          // 8417
                                                                                                                       // 8418
      function wrapModuleNameIfDefined(moduleName) {                                                                   // 8419
        return moduleName ?                                                                                            // 8420
          (' (module: ' + moduleName + ')') :                                                                          // 8421
          '';                                                                                                          // 8422
      }                                                                                                                // 8423
                                                                                                                       // 8424
      if (previousDirective) {                                                                                         // 8425
        throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',                // 8426
            previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),                           // 8427
            directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));              // 8428
      }                                                                                                                // 8429
    }                                                                                                                  // 8430
                                                                                                                       // 8431
                                                                                                                       // 8432
    function addTextInterpolateDirective(directives, text) {                                                           // 8433
      var interpolateFn = $interpolate(text, true);                                                                    // 8434
      if (interpolateFn) {                                                                                             // 8435
        directives.push({                                                                                              // 8436
          priority: 0,                                                                                                 // 8437
          compile: function textInterpolateCompileFn(templateNode) {                                                   // 8438
            var templateNodeParent = templateNode.parent(),                                                            // 8439
                hasCompileParent = !!templateNodeParent.length;                                                        // 8440
                                                                                                                       // 8441
            // When transcluding a template that has bindings in the root                                              // 8442
            // we don't have a parent and thus need to add the class during linking fn.                                // 8443
            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);                                       // 8444
                                                                                                                       // 8445
            return function textInterpolateLinkFn(scope, node) {                                                       // 8446
              var parent = node.parent();                                                                              // 8447
              if (!hasCompileParent) compile.$$addBindingClass(parent);                                                // 8448
              compile.$$addBindingInfo(parent, interpolateFn.expressions);                                             // 8449
              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {                                   // 8450
                node[0].nodeValue = value;                                                                             // 8451
              });                                                                                                      // 8452
            };                                                                                                         // 8453
          }                                                                                                            // 8454
        });                                                                                                            // 8455
      }                                                                                                                // 8456
    }                                                                                                                  // 8457
                                                                                                                       // 8458
                                                                                                                       // 8459
    function wrapTemplate(type, template) {                                                                            // 8460
      type = lowercase(type || 'html');                                                                                // 8461
      switch (type) {                                                                                                  // 8462
      case 'svg':                                                                                                      // 8463
      case 'math':                                                                                                     // 8464
        var wrapper = document.createElement('div');                                                                   // 8465
        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';                                           // 8466
        return wrapper.childNodes[0].childNodes;                                                                       // 8467
      default:                                                                                                         // 8468
        return template;                                                                                               // 8469
      }                                                                                                                // 8470
    }                                                                                                                  // 8471
                                                                                                                       // 8472
                                                                                                                       // 8473
    function getTrustedContext(node, attrNormalizedName) {                                                             // 8474
      if (attrNormalizedName == "srcdoc") {                                                                            // 8475
        return $sce.HTML;                                                                                              // 8476
      }                                                                                                                // 8477
      var tag = nodeName_(node);                                                                                       // 8478
      // maction[xlink:href] can source SVG.  It's not limited to <maction>.                                           // 8479
      if (attrNormalizedName == "xlinkHref" ||                                                                         // 8480
          (tag == "form" && attrNormalizedName == "action") ||                                                         // 8481
          (tag != "img" && (attrNormalizedName == "src" ||                                                             // 8482
                            attrNormalizedName == "ngSrc"))) {                                                         // 8483
        return $sce.RESOURCE_URL;                                                                                      // 8484
      }                                                                                                                // 8485
    }                                                                                                                  // 8486
                                                                                                                       // 8487
                                                                                                                       // 8488
    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {                                // 8489
      var trustedContext = getTrustedContext(node, name);                                                              // 8490
      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;                                                       // 8491
                                                                                                                       // 8492
      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);                                     // 8493
                                                                                                                       // 8494
      // no interpolation found -> ignore                                                                              // 8495
      if (!interpolateFn) return;                                                                                      // 8496
                                                                                                                       // 8497
                                                                                                                       // 8498
      if (name === "multiple" && nodeName_(node) === "select") {                                                       // 8499
        throw $compileMinErr("selmulti",                                                                               // 8500
            "Binding to the 'multiple' attribute is not supported. Element: {0}",                                      // 8501
            startingTag(node));                                                                                        // 8502
      }                                                                                                                // 8503
                                                                                                                       // 8504
      directives.push({                                                                                                // 8505
        priority: 100,                                                                                                 // 8506
        compile: function() {                                                                                          // 8507
            return {                                                                                                   // 8508
              pre: function attrInterpolatePreLinkFn(scope, element, attr) {                                           // 8509
                var $$observers = (attr.$$observers || (attr.$$observers = {}));                                       // 8510
                                                                                                                       // 8511
                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {                                                            // 8512
                  throw $compileMinErr('nodomevents',                                                                  // 8513
                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +                // 8514
                          "ng- versions (such as ng-click instead of onclick) instead.");                              // 8515
                }                                                                                                      // 8516
                                                                                                                       // 8517
                // If the attribute has changed since last $interpolate()ed                                            // 8518
                var newValue = attr[name];                                                                             // 8519
                if (newValue !== value) {                                                                              // 8520
                  // we need to interpolate again since the attribute value has been updated                           // 8521
                  // (e.g. by another directive's compile function)                                                    // 8522
                  // ensure unset/empty values make interpolateFn falsy                                                // 8523
                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);              // 8524
                  value = newValue;                                                                                    // 8525
                }                                                                                                      // 8526
                                                                                                                       // 8527
                // if attribute was updated so that there is no interpolation going on we don't want to                // 8528
                // register any observers                                                                              // 8529
                if (!interpolateFn) return;                                                                            // 8530
                                                                                                                       // 8531
                // initialize attr object so that it's ready in case we need the value for isolate                     // 8532
                // scope initialization, otherwise the value would not be available from isolate                       // 8533
                // directive's linking fn during linking phase                                                         // 8534
                attr[name] = interpolateFn(scope);                                                                     // 8535
                                                                                                                       // 8536
                ($$observers[name] || ($$observers[name] = [])).$$inter = true;                                        // 8537
                (attr.$$observers && attr.$$observers[name].$$scope || scope).                                         // 8538
                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {                        // 8539
                    //special case for class attribute addition + removal                                              // 8540
                    //so that class changes can tap into the animation                                                 // 8541
                    //hooks provided by the $animate service. Be sure to                                               // 8542
                    //skip animations when the first digest occurs (when                                               // 8543
                    //both the new and the old values are the same) since                                              // 8544
                    //the CSS classes are the non-interpolated values                                                  // 8545
                    if (name === 'class' && newValue != oldValue) {                                                    // 8546
                      attr.$updateClass(newValue, oldValue);                                                           // 8547
                    } else {                                                                                           // 8548
                      attr.$set(name, newValue);                                                                       // 8549
                    }                                                                                                  // 8550
                  });                                                                                                  // 8551
              }                                                                                                        // 8552
            };                                                                                                         // 8553
          }                                                                                                            // 8554
      });                                                                                                              // 8555
    }                                                                                                                  // 8556
                                                                                                                       // 8557
                                                                                                                       // 8558
    /**                                                                                                                // 8559
     * This is a special jqLite.replaceWith, which can replace items which                                             // 8560
     * have no parents, provided that the containing jqLite collection is provided.                                    // 8561
     *                                                                                                                 // 8562
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes                   // 8563
     *                               in the root of the tree.                                                          // 8564
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep                      // 8565
     *                                  the shell, but replace its DOM node reference.                                 // 8566
     * @param {Node} newNode The new DOM node.                                                                         // 8567
     */                                                                                                                // 8568
    function replaceWith($rootElement, elementsToRemove, newNode) {                                                    // 8569
      var firstElementToRemove = elementsToRemove[0],                                                                  // 8570
          removeCount = elementsToRemove.length,                                                                       // 8571
          parent = firstElementToRemove.parentNode,                                                                    // 8572
          i, ii;                                                                                                       // 8573
                                                                                                                       // 8574
      if ($rootElement) {                                                                                              // 8575
        for (i = 0, ii = $rootElement.length; i < ii; i++) {                                                           // 8576
          if ($rootElement[i] == firstElementToRemove) {                                                               // 8577
            $rootElement[i++] = newNode;                                                                               // 8578
            for (var j = i, j2 = j + removeCount - 1,                                                                  // 8579
                     jj = $rootElement.length;                                                                         // 8580
                 j < jj; j++, j2++) {                                                                                  // 8581
              if (j2 < jj) {                                                                                           // 8582
                $rootElement[j] = $rootElement[j2];                                                                    // 8583
              } else {                                                                                                 // 8584
                delete $rootElement[j];                                                                                // 8585
              }                                                                                                        // 8586
            }                                                                                                          // 8587
            $rootElement.length -= removeCount - 1;                                                                    // 8588
                                                                                                                       // 8589
            // If the replaced element is also the jQuery .context then replace it                                     // 8590
            // .context is a deprecated jQuery api, so we should set it only when jQuery set it                        // 8591
            // http://api.jquery.com/context/                                                                          // 8592
            if ($rootElement.context === firstElementToRemove) {                                                       // 8593
              $rootElement.context = newNode;                                                                          // 8594
            }                                                                                                          // 8595
            break;                                                                                                     // 8596
          }                                                                                                            // 8597
        }                                                                                                              // 8598
      }                                                                                                                // 8599
                                                                                                                       // 8600
      if (parent) {                                                                                                    // 8601
        parent.replaceChild(newNode, firstElementToRemove);                                                            // 8602
      }                                                                                                                // 8603
                                                                                                                       // 8604
      // TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?                        // 8605
      var fragment = document.createDocumentFragment();                                                                // 8606
      fragment.appendChild(firstElementToRemove);                                                                      // 8607
                                                                                                                       // 8608
      if (jqLite.hasData(firstElementToRemove)) {                                                                      // 8609
        // Copy over user data (that includes Angular's $scope etc.). Don't copy private                               // 8610
        // data here because there's no public interface in jQuery to do that and copying over                         // 8611
        // event listeners (which is the main use of private data) wouldn't work anyway.                               // 8612
        jqLite(newNode).data(jqLite(firstElementToRemove).data());                                                     // 8613
                                                                                                                       // 8614
        // Remove data of the replaced element. We cannot just call .remove()                                          // 8615
        // on the element it since that would deallocate scope that is needed                                          // 8616
        // for the new node. Instead, remove the data "manually".                                                      // 8617
        if (!jQuery) {                                                                                                 // 8618
          delete jqLite.cache[firstElementToRemove[jqLite.expando]];                                                   // 8619
        } else {                                                                                                       // 8620
          // jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after                        // 8621
          // the replaced element. The cleanData version monkey-patched by Angular would cause                         // 8622
          // the scope to be trashed and we do need the very same scope to work with the new                           // 8623
          // element. However, we cannot just cache the non-patched version and use it here as                         // 8624
          // that would break if another library patches the method after Angular does (one                            // 8625
          // example is jQuery UI). Instead, set a flag indicating scope destroying should be                          // 8626
          // skipped this one time.                                                                                    // 8627
          skipDestroyOnNextJQueryCleanData = true;                                                                     // 8628
          jQuery.cleanData([firstElementToRemove]);                                                                    // 8629
        }                                                                                                              // 8630
      }                                                                                                                // 8631
                                                                                                                       // 8632
      for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {                                                     // 8633
        var element = elementsToRemove[k];                                                                             // 8634
        jqLite(element).remove(); // must do this way to clean up expando                                              // 8635
        fragment.appendChild(element);                                                                                 // 8636
        delete elementsToRemove[k];                                                                                    // 8637
      }                                                                                                                // 8638
                                                                                                                       // 8639
      elementsToRemove[0] = newNode;                                                                                   // 8640
      elementsToRemove.length = 1;                                                                                     // 8641
    }                                                                                                                  // 8642
                                                                                                                       // 8643
                                                                                                                       // 8644
    function cloneAndAnnotateFn(fn, annotation) {                                                                      // 8645
      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);                                 // 8646
    }                                                                                                                  // 8647
                                                                                                                       // 8648
                                                                                                                       // 8649
    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {                                 // 8650
      try {                                                                                                            // 8651
        linkFn(scope, $element, attrs, controllers, transcludeFn);                                                     // 8652
      } catch (e) {                                                                                                    // 8653
        $exceptionHandler(e, startingTag($element));                                                                   // 8654
      }                                                                                                                // 8655
    }                                                                                                                  // 8656
                                                                                                                       // 8657
                                                                                                                       // 8658
    // Set up $watches for isolate scope and controller bindings. This process                                         // 8659
    // only occurs for isolate scopes and new scopes with controllerAs.                                                // 8660
    function initializeDirectiveBindings(scope, attrs, destination, bindings,                                          // 8661
                                         directive, newScope) {                                                        // 8662
      var onNewScopeDestroyed;                                                                                         // 8663
      forEach(bindings, function(definition, scopeName) {                                                              // 8664
        var attrName = definition.attrName,                                                                            // 8665
        optional = definition.optional,                                                                                // 8666
        mode = definition.mode, // @, =, or &                                                                          // 8667
        lastValue,                                                                                                     // 8668
        parentGet, parentSet, compare;                                                                                 // 8669
                                                                                                                       // 8670
        if (!hasOwnProperty.call(attrs, attrName)) {                                                                   // 8671
          // In the case of user defined a binding with the same name as a method in Object.prototype but didn't set   // 8672
          // the corresponding attribute. We need to make sure subsequent code won't access to the prototype function  // 8673
          attrs[attrName] = undefined;                                                                                 // 8674
        }                                                                                                              // 8675
                                                                                                                       // 8676
        switch (mode) {                                                                                                // 8677
                                                                                                                       // 8678
          case '@':                                                                                                    // 8679
            if (!attrs[attrName] && !optional) {                                                                       // 8680
              destination[scopeName] = undefined;                                                                      // 8681
            }                                                                                                          // 8682
                                                                                                                       // 8683
            attrs.$observe(attrName, function(value) {                                                                 // 8684
              destination[scopeName] = value;                                                                          // 8685
            });                                                                                                        // 8686
            attrs.$$observers[attrName].$$scope = scope;                                                               // 8687
            if (attrs[attrName]) {                                                                                     // 8688
              // If the attribute has been provided then we trigger an interpolation to ensure                         // 8689
              // the value is there for use in the link fn                                                             // 8690
              destination[scopeName] = $interpolate(attrs[attrName])(scope);                                           // 8691
            }                                                                                                          // 8692
            break;                                                                                                     // 8693
                                                                                                                       // 8694
          case '=':                                                                                                    // 8695
            if (optional && !attrs[attrName]) {                                                                        // 8696
              return;                                                                                                  // 8697
            }                                                                                                          // 8698
            parentGet = $parse(attrs[attrName]);                                                                       // 8699
                                                                                                                       // 8700
            if (parentGet.literal) {                                                                                   // 8701
              compare = equals;                                                                                        // 8702
            } else {                                                                                                   // 8703
              compare = function(a, b) { return a === b || (a !== a && b !== b); };                                    // 8704
            }                                                                                                          // 8705
            parentSet = parentGet.assign || function() {                                                               // 8706
              // reset the change, or we will throw this exception on every $digest                                    // 8707
              lastValue = destination[scopeName] = parentGet(scope);                                                   // 8708
              throw $compileMinErr('nonassign',                                                                        // 8709
                  "Expression '{0}' used with directive '{1}' is non-assignable!",                                     // 8710
                  attrs[attrName], directive.name);                                                                    // 8711
            };                                                                                                         // 8712
            lastValue = destination[scopeName] = parentGet(scope);                                                     // 8713
            var parentValueWatch = function parentValueWatch(parentValue) {                                            // 8714
              if (!compare(parentValue, destination[scopeName])) {                                                     // 8715
                // we are out of sync and need to copy                                                                 // 8716
                if (!compare(parentValue, lastValue)) {                                                                // 8717
                  // parent changed and it has precedence                                                              // 8718
                  destination[scopeName] = parentValue;                                                                // 8719
                } else {                                                                                               // 8720
                  // if the parent can be assigned then do so                                                          // 8721
                  parentSet(scope, parentValue = destination[scopeName]);                                              // 8722
                }                                                                                                      // 8723
              }                                                                                                        // 8724
              return lastValue = parentValue;                                                                          // 8725
            };                                                                                                         // 8726
            parentValueWatch.$stateful = true;                                                                         // 8727
            var unwatch;                                                                                               // 8728
            if (definition.collection) {                                                                               // 8729
              unwatch = scope.$watchCollection(attrs[attrName], parentValueWatch);                                     // 8730
            } else {                                                                                                   // 8731
              unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);              // 8732
            }                                                                                                          // 8733
            onNewScopeDestroyed = (onNewScopeDestroyed || []);                                                         // 8734
            onNewScopeDestroyed.push(unwatch);                                                                         // 8735
            break;                                                                                                     // 8736
                                                                                                                       // 8737
          case '&':                                                                                                    // 8738
            parentGet = $parse(attrs[attrName]);                                                                       // 8739
                                                                                                                       // 8740
            // Don't assign noop to destination if expression is not valid                                             // 8741
            if (parentGet === noop && optional) break;                                                                 // 8742
                                                                                                                       // 8743
            destination[scopeName] = function(locals) {                                                                // 8744
              return parentGet(scope, locals);                                                                         // 8745
            };                                                                                                         // 8746
            break;                                                                                                     // 8747
        }                                                                                                              // 8748
      });                                                                                                              // 8749
      var destroyBindings = onNewScopeDestroyed ? function destroyBindings() {                                         // 8750
        for (var i = 0, ii = onNewScopeDestroyed.length; i < ii; ++i) {                                                // 8751
          onNewScopeDestroyed[i]();                                                                                    // 8752
        }                                                                                                              // 8753
      } : noop;                                                                                                        // 8754
      if (newScope && destroyBindings !== noop) {                                                                      // 8755
        newScope.$on('$destroy', destroyBindings);                                                                     // 8756
        return noop;                                                                                                   // 8757
      }                                                                                                                // 8758
      return destroyBindings;                                                                                          // 8759
    }                                                                                                                  // 8760
  }];                                                                                                                  // 8761
}                                                                                                                      // 8762
                                                                                                                       // 8763
var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;                                                                           // 8764
/**                                                                                                                    // 8765
 * Converts all accepted directives format into proper directive name.                                                 // 8766
 * @param name Name to normalize                                                                                       // 8767
 */                                                                                                                    // 8768
function directiveNormalize(name) {                                                                                    // 8769
  return camelCase(name.replace(PREFIX_REGEXP, ''));                                                                   // 8770
}                                                                                                                      // 8771
                                                                                                                       // 8772
/**                                                                                                                    // 8773
 * @ngdoc type                                                                                                         // 8774
 * @name $compile.directive.Attributes                                                                                 // 8775
 *                                                                                                                     // 8776
 * @description                                                                                                        // 8777
 * A shared object between directive compile / linking functions which contains normalized DOM                         // 8778
 * element attributes. The values reflect current binding state `{{ }}`. The normalization is                          // 8779
 * needed since all of these are treated as equivalent in Angular:                                                     // 8780
 *                                                                                                                     // 8781
 * ```                                                                                                                 // 8782
 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">                                                    // 8783
 * ```                                                                                                                 // 8784
 */                                                                                                                    // 8785
                                                                                                                       // 8786
/**                                                                                                                    // 8787
 * @ngdoc property                                                                                                     // 8788
 * @name $compile.directive.Attributes#$attr                                                                           // 8789
 *                                                                                                                     // 8790
 * @description                                                                                                        // 8791
 * A map of DOM element attribute names to the normalized name. This is                                                // 8792
 * needed to do reverse lookup from normalized name back to actual name.                                               // 8793
 */                                                                                                                    // 8794
                                                                                                                       // 8795
                                                                                                                       // 8796
/**                                                                                                                    // 8797
 * @ngdoc method                                                                                                       // 8798
 * @name $compile.directive.Attributes#$set                                                                            // 8799
 * @kind function                                                                                                      // 8800
 *                                                                                                                     // 8801
 * @description                                                                                                        // 8802
 * Set DOM element attribute value.                                                                                    // 8803
 *                                                                                                                     // 8804
 *                                                                                                                     // 8805
 * @param {string} name Normalized element attribute name of the property to modify. The name is                       // 8806
 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}                          // 8807
 *          property to the original name.                                                                             // 8808
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.                       // 8809
 */                                                                                                                    // 8810
                                                                                                                       // 8811
                                                                                                                       // 8812
                                                                                                                       // 8813
/**                                                                                                                    // 8814
 * Closure compiler type information                                                                                   // 8815
 */                                                                                                                    // 8816
                                                                                                                       // 8817
function nodesetLinkingFn(                                                                                             // 8818
  /* angular.Scope */ scope,                                                                                           // 8819
  /* NodeList */ nodeList,                                                                                             // 8820
  /* Element */ rootElement,                                                                                           // 8821
  /* function(Function) */ boundTranscludeFn                                                                           // 8822
) {}                                                                                                                   // 8823
                                                                                                                       // 8824
function directiveLinkingFn(                                                                                           // 8825
  /* nodesetLinkingFn */ nodesetLinkingFn,                                                                             // 8826
  /* angular.Scope */ scope,                                                                                           // 8827
  /* Node */ node,                                                                                                     // 8828
  /* Element */ rootElement,                                                                                           // 8829
  /* function(Function) */ boundTranscludeFn                                                                           // 8830
) {}                                                                                                                   // 8831
                                                                                                                       // 8832
function tokenDifference(str1, str2) {                                                                                 // 8833
  var values = '',                                                                                                     // 8834
      tokens1 = str1.split(/\s+/),                                                                                     // 8835
      tokens2 = str2.split(/\s+/);                                                                                     // 8836
                                                                                                                       // 8837
  outer:                                                                                                               // 8838
  for (var i = 0; i < tokens1.length; i++) {                                                                           // 8839
    var token = tokens1[i];                                                                                            // 8840
    for (var j = 0; j < tokens2.length; j++) {                                                                         // 8841
      if (token == tokens2[j]) continue outer;                                                                         // 8842
    }                                                                                                                  // 8843
    values += (values.length > 0 ? ' ' : '') + token;                                                                  // 8844
  }                                                                                                                    // 8845
  return values;                                                                                                       // 8846
}                                                                                                                      // 8847
                                                                                                                       // 8848
function removeComments(jqNodes) {                                                                                     // 8849
  jqNodes = jqLite(jqNodes);                                                                                           // 8850
  var i = jqNodes.length;                                                                                              // 8851
                                                                                                                       // 8852
  if (i <= 1) {                                                                                                        // 8853
    return jqNodes;                                                                                                    // 8854
  }                                                                                                                    // 8855
                                                                                                                       // 8856
  while (i--) {                                                                                                        // 8857
    var node = jqNodes[i];                                                                                             // 8858
    if (node.nodeType === NODE_TYPE_COMMENT) {                                                                         // 8859
      splice.call(jqNodes, i, 1);                                                                                      // 8860
    }                                                                                                                  // 8861
  }                                                                                                                    // 8862
  return jqNodes;                                                                                                      // 8863
}                                                                                                                      // 8864
                                                                                                                       // 8865
var $controllerMinErr = minErr('$controller');                                                                         // 8866
                                                                                                                       // 8867
                                                                                                                       // 8868
var CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;                                                                             // 8869
function identifierForController(controller, ident) {                                                                  // 8870
  if (ident && isString(ident)) return ident;                                                                          // 8871
  if (isString(controller)) {                                                                                          // 8872
    var match = CNTRL_REG.exec(controller);                                                                            // 8873
    if (match) return match[3];                                                                                        // 8874
  }                                                                                                                    // 8875
}                                                                                                                      // 8876
                                                                                                                       // 8877
                                                                                                                       // 8878
/**                                                                                                                    // 8879
 * @ngdoc provider                                                                                                     // 8880
 * @name $controllerProvider                                                                                           // 8881
 * @description                                                                                                        // 8882
 * The {@link ng.$controller $controller service} is used by Angular to create new                                     // 8883
 * controllers.                                                                                                        // 8884
 *                                                                                                                     // 8885
 * This provider allows controller registration via the                                                                // 8886
 * {@link ng.$controllerProvider#register register} method.                                                            // 8887
 */                                                                                                                    // 8888
function $ControllerProvider() {                                                                                       // 8889
  var controllers = {},                                                                                                // 8890
      globals = false;                                                                                                 // 8891
                                                                                                                       // 8892
  /**                                                                                                                  // 8893
   * @ngdoc method                                                                                                     // 8894
   * @name $controllerProvider#register                                                                                // 8895
   * @param {string|Object} name Controller name, or an object map of controllers where the keys are                   // 8896
   *    the names and the values are the constructors.                                                                 // 8897
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI                       // 8898
   *    annotations in the array notation).                                                                            // 8899
   */                                                                                                                  // 8900
  this.register = function(name, constructor) {                                                                        // 8901
    assertNotHasOwnProperty(name, 'controller');                                                                       // 8902
    if (isObject(name)) {                                                                                              // 8903
      extend(controllers, name);                                                                                       // 8904
    } else {                                                                                                           // 8905
      controllers[name] = constructor;                                                                                 // 8906
    }                                                                                                                  // 8907
  };                                                                                                                   // 8908
                                                                                                                       // 8909
  /**                                                                                                                  // 8910
   * @ngdoc method                                                                                                     // 8911
   * @name $controllerProvider#allowGlobals                                                                            // 8912
   * @description If called, allows `$controller` to find controller constructors on `window`                          // 8913
   */                                                                                                                  // 8914
  this.allowGlobals = function() {                                                                                     // 8915
    globals = true;                                                                                                    // 8916
  };                                                                                                                   // 8917
                                                                                                                       // 8918
                                                                                                                       // 8919
  this.$get = ['$injector', '$window', function($injector, $window) {                                                  // 8920
                                                                                                                       // 8921
    /**                                                                                                                // 8922
     * @ngdoc service                                                                                                  // 8923
     * @name $controller                                                                                               // 8924
     * @requires $injector                                                                                             // 8925
     *                                                                                                                 // 8926
     * @param {Function|string} constructor If called with a function then it's considered to be the                   // 8927
     *    controller constructor function. Otherwise it's considered to be a string which is used                      // 8928
     *    to retrieve the controller constructor using the following steps:                                            // 8929
     *                                                                                                                 // 8930
     *    * check if a controller with given name is registered via `$controllerProvider`                              // 8931
     *    * check if evaluating the string on the current scope returns a constructor                                  // 8932
     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global                             // 8933
     *      `window` object (not recommended)                                                                          // 8934
     *                                                                                                                 // 8935
     *    The string can use the `controller as property` syntax, where the controller instance is published           // 8936
     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this          // 8937
     *    to work correctly.                                                                                           // 8938
     *                                                                                                                 // 8939
     * @param {Object} locals Injection locals for Controller.                                                         // 8940
     * @return {Object} Instance of given controller.                                                                  // 8941
     *                                                                                                                 // 8942
     * @description                                                                                                    // 8943
     * `$controller` service is responsible for instantiating controllers.                                             // 8944
     *                                                                                                                 // 8945
     * It's just a simple call to {@link auto.$injector $injector}, but extracted into                                 // 8946
     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).            // 8947
     */                                                                                                                // 8948
    return function(expression, locals, later, ident) {                                                                // 8949
      // PRIVATE API:                                                                                                  // 8950
      //   param `later` --- indicates that the controller's constructor is invoked at a later time.                   // 8951
      //                     If true, $controller will allocate the object with the correct                            // 8952
      //                     prototype chain, but will not invoke the controller until a returned                      // 8953
      //                     callback is invoked.                                                                      // 8954
      //   param `ident` --- An optional label which overrides the label parsed from the controller                    // 8955
      //                     expression, if any.                                                                       // 8956
      var instance, match, constructor, identifier;                                                                    // 8957
      later = later === true;                                                                                          // 8958
      if (ident && isString(ident)) {                                                                                  // 8959
        identifier = ident;                                                                                            // 8960
      }                                                                                                                // 8961
                                                                                                                       // 8962
      if (isString(expression)) {                                                                                      // 8963
        match = expression.match(CNTRL_REG);                                                                           // 8964
        if (!match) {                                                                                                  // 8965
          throw $controllerMinErr('ctrlfmt',                                                                           // 8966
            "Badly formed controller string '{0}'. " +                                                                 // 8967
            "Must match `__name__ as __id__` or `__name__`.", expression);                                             // 8968
        }                                                                                                              // 8969
        constructor = match[1],                                                                                        // 8970
        identifier = identifier || match[3];                                                                           // 8971
        expression = controllers.hasOwnProperty(constructor)                                                           // 8972
            ? controllers[constructor]                                                                                 // 8973
            : getter(locals.$scope, constructor, true) ||                                                              // 8974
                (globals ? getter($window, constructor, true) : undefined);                                            // 8975
                                                                                                                       // 8976
        assertArgFn(expression, constructor, true);                                                                    // 8977
      }                                                                                                                // 8978
                                                                                                                       // 8979
      if (later) {                                                                                                     // 8980
        // Instantiate controller later:                                                                               // 8981
        // This machinery is used to create an instance of the object before calling the                               // 8982
        // controller's constructor itself.                                                                            // 8983
        //                                                                                                             // 8984
        // This allows properties to be added to the controller before the constructor is                              // 8985
        // invoked. Primarily, this is used for isolate scope bindings in $compile.                                    // 8986
        //                                                                                                             // 8987
        // This feature is not intended for use by applications, and is thus not documented                            // 8988
        // publicly.                                                                                                   // 8989
        // Object creation: http://jsperf.com/create-constructor/2                                                     // 8990
        var controllerPrototype = (isArray(expression) ?                                                               // 8991
          expression[expression.length - 1] : expression).prototype;                                                   // 8992
        instance = Object.create(controllerPrototype || null);                                                         // 8993
                                                                                                                       // 8994
        if (identifier) {                                                                                              // 8995
          addIdentifier(locals, identifier, instance, constructor || expression.name);                                 // 8996
        }                                                                                                              // 8997
                                                                                                                       // 8998
        var instantiate;                                                                                               // 8999
        return instantiate = extend(function() {                                                                       // 9000
          var result = $injector.invoke(expression, instance, locals, constructor);                                    // 9001
          if (result !== instance && (isObject(result) || isFunction(result))) {                                       // 9002
            instance = result;                                                                                         // 9003
            if (identifier) {                                                                                          // 9004
              // If result changed, re-assign controllerAs value to scope.                                             // 9005
              addIdentifier(locals, identifier, instance, constructor || expression.name);                             // 9006
            }                                                                                                          // 9007
          }                                                                                                            // 9008
          return instance;                                                                                             // 9009
        }, {                                                                                                           // 9010
          instance: instance,                                                                                          // 9011
          identifier: identifier                                                                                       // 9012
        });                                                                                                            // 9013
      }                                                                                                                // 9014
                                                                                                                       // 9015
      instance = $injector.instantiate(expression, locals, constructor);                                               // 9016
                                                                                                                       // 9017
      if (identifier) {                                                                                                // 9018
        addIdentifier(locals, identifier, instance, constructor || expression.name);                                   // 9019
      }                                                                                                                // 9020
                                                                                                                       // 9021
      return instance;                                                                                                 // 9022
    };                                                                                                                 // 9023
                                                                                                                       // 9024
    function addIdentifier(locals, identifier, instance, name) {                                                       // 9025
      if (!(locals && isObject(locals.$scope))) {                                                                      // 9026
        throw minErr('$controller')('noscp',                                                                           // 9027
          "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",                          // 9028
          name, identifier);                                                                                           // 9029
      }                                                                                                                // 9030
                                                                                                                       // 9031
      locals.$scope[identifier] = instance;                                                                            // 9032
    }                                                                                                                  // 9033
  }];                                                                                                                  // 9034
}                                                                                                                      // 9035
                                                                                                                       // 9036
/**                                                                                                                    // 9037
 * @ngdoc service                                                                                                      // 9038
 * @name $document                                                                                                     // 9039
 * @requires $window                                                                                                   // 9040
 *                                                                                                                     // 9041
 * @description                                                                                                        // 9042
 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.                      // 9043
 *                                                                                                                     // 9044
 * @example                                                                                                            // 9045
   <example module="documentExample">                                                                                  // 9046
     <file name="index.html">                                                                                          // 9047
       <div ng-controller="ExampleController">                                                                         // 9048
         <p>$document title: <b ng-bind="title"></b></p>                                                               // 9049
         <p>window.document title: <b ng-bind="windowTitle"></b></p>                                                   // 9050
       </div>                                                                                                          // 9051
     </file>                                                                                                           // 9052
     <file name="script.js">                                                                                           // 9053
       angular.module('documentExample', [])                                                                           // 9054
         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {                        // 9055
           $scope.title = $document[0].title;                                                                          // 9056
           $scope.windowTitle = angular.element(window.document)[0].title;                                             // 9057
         }]);                                                                                                          // 9058
     </file>                                                                                                           // 9059
   </example>                                                                                                          // 9060
 */                                                                                                                    // 9061
function $DocumentProvider() {                                                                                         // 9062
  this.$get = ['$window', function(window) {                                                                           // 9063
    return jqLite(window.document);                                                                                    // 9064
  }];                                                                                                                  // 9065
}                                                                                                                      // 9066
                                                                                                                       // 9067
/**                                                                                                                    // 9068
 * @ngdoc service                                                                                                      // 9069
 * @name $exceptionHandler                                                                                             // 9070
 * @requires ng.$log                                                                                                   // 9071
 *                                                                                                                     // 9072
 * @description                                                                                                        // 9073
 * Any uncaught exception in angular expressions is delegated to this service.                                         // 9074
 * The default implementation simply delegates to `$log.error` which logs it into                                      // 9075
 * the browser console.                                                                                                // 9076
 *                                                                                                                     // 9077
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by                                       // 9078
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.                                      // 9079
 *                                                                                                                     // 9080
 * ## Example:                                                                                                         // 9081
 *                                                                                                                     // 9082
 * ```js                                                                                                               // 9083
 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {                                 // 9084
 *     return function(exception, cause) {                                                                             // 9085
 *       exception.message += ' (caused by "' + cause + '")';                                                          // 9086
 *       throw exception;                                                                                              // 9087
 *     };                                                                                                              // 9088
 *   });                                                                                                               // 9089
 * ```                                                                                                                 // 9090
 *                                                                                                                     // 9091
 * This example will override the normal action of `$exceptionHandler`, to make angular                                // 9092
 * exceptions fail hard when they happen, instead of just logging to the console.                                      // 9093
 *                                                                                                                     // 9094
 * <hr />                                                                                                              // 9095
 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`                       // 9096
 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}                         // 9097
 * (unless executed during a digest).                                                                                  // 9098
 *                                                                                                                     // 9099
 * If you wish, you can manually delegate exceptions, e.g.                                                             // 9100
 * `try { ... } catch(e) { $exceptionHandler(e); }`                                                                    // 9101
 *                                                                                                                     // 9102
 * @param {Error} exception Exception associated with the error.                                                       // 9103
 * @param {string=} cause optional information about the context in which                                              // 9104
 *       the error was thrown.                                                                                         // 9105
 *                                                                                                                     // 9106
 */                                                                                                                    // 9107
function $ExceptionHandlerProvider() {                                                                                 // 9108
  this.$get = ['$log', function($log) {                                                                                // 9109
    return function(exception, cause) {                                                                                // 9110
      $log.error.apply($log, arguments);                                                                               // 9111
    };                                                                                                                 // 9112
  }];                                                                                                                  // 9113
}                                                                                                                      // 9114
                                                                                                                       // 9115
var APPLICATION_JSON = 'application/json';                                                                             // 9116
var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};                             // 9117
var JSON_START = /^\[|^\{(?!\{)/;                                                                                      // 9118
var JSON_ENDS = {                                                                                                      // 9119
  '[': /]$/,                                                                                                           // 9120
  '{': /}$/                                                                                                            // 9121
};                                                                                                                     // 9122
var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;                                                                           // 9123
                                                                                                                       // 9124
function serializeValue(v) {                                                                                           // 9125
  if (isObject(v)) {                                                                                                   // 9126
    return isDate(v) ? v.toISOString() : toJson(v);                                                                    // 9127
  }                                                                                                                    // 9128
  return v;                                                                                                            // 9129
}                                                                                                                      // 9130
                                                                                                                       // 9131
                                                                                                                       // 9132
function $HttpParamSerializerProvider() {                                                                              // 9133
  /**                                                                                                                  // 9134
   * @ngdoc service                                                                                                    // 9135
   * @name $httpParamSerializer                                                                                        // 9136
   * @description                                                                                                      // 9137
   *                                                                                                                   // 9138
   * Default {@link $http `$http`} params serializer that converts objects to strings                                  // 9139
   * according to the following rules:                                                                                 // 9140
   *                                                                                                                   // 9141
   * * `{'foo': 'bar'}` results in `foo=bar`                                                                           // 9142
   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)                    // 9144
   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D"` (stringified and encoded representation of an object)
   *                                                                                                                   // 9146
   * Note that serializer will sort the request parameters alphabetically.                                             // 9147
   * */                                                                                                                // 9148
                                                                                                                       // 9149
  this.$get = function() {                                                                                             // 9150
    return function ngParamSerializer(params) {                                                                        // 9151
      if (!params) return '';                                                                                          // 9152
      var parts = [];                                                                                                  // 9153
      forEachSorted(params, function(value, key) {                                                                     // 9154
        if (value === null || isUndefined(value)) return;                                                              // 9155
        if (isArray(value)) {                                                                                          // 9156
          forEach(value, function(v, k) {                                                                              // 9157
            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));                                // 9158
          });                                                                                                          // 9159
        } else {                                                                                                       // 9160
          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));                               // 9161
        }                                                                                                              // 9162
      });                                                                                                              // 9163
                                                                                                                       // 9164
      return parts.join('&');                                                                                          // 9165
    };                                                                                                                 // 9166
  };                                                                                                                   // 9167
}                                                                                                                      // 9168
                                                                                                                       // 9169
function $HttpParamSerializerJQLikeProvider() {                                                                        // 9170
  /**                                                                                                                  // 9171
   * @ngdoc service                                                                                                    // 9172
   * @name $httpParamSerializerJQLike                                                                                  // 9173
   * @description                                                                                                      // 9174
   *                                                                                                                   // 9175
   * Alternative {@link $http `$http`} params serializer that follows                                                  // 9176
   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.                                           // 9177
   * The serializer will also sort the params alphabetically.                                                          // 9178
   *                                                                                                                   // 9179
   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:                   // 9180
   *                                                                                                                   // 9181
   * ```js                                                                                                             // 9182
   * $http({                                                                                                           // 9183
   *   url: myUrl,                                                                                                     // 9184
   *   method: 'GET',                                                                                                  // 9185
   *   params: myParams,                                                                                               // 9186
   *   paramSerializer: '$httpParamSerializerJQLike'                                                                   // 9187
   * });                                                                                                               // 9188
   * ```                                                                                                               // 9189
   *                                                                                                                   // 9190
   * It is also possible to set it as the default `paramSerializer` in the                                             // 9191
   * {@link $httpProvider#defaults `$httpProvider`}.                                                                   // 9192
   *                                                                                                                   // 9193
   * Additionally, you can inject the serializer and use it explicitly, for example to serialize                       // 9194
   * form data for submission:                                                                                         // 9195
   *                                                                                                                   // 9196
   * ```js                                                                                                             // 9197
   * .controller(function($http, $httpParamSerializerJQLike) {                                                         // 9198
   *   //...                                                                                                           // 9199
   *                                                                                                                   // 9200
   *   $http({                                                                                                         // 9201
   *     url: myUrl,                                                                                                   // 9202
   *     method: 'POST',                                                                                               // 9203
   *     data: $httpParamSerializerJQLike(myData),                                                                     // 9204
   *     headers: {                                                                                                    // 9205
   *       'Content-Type': 'application/x-www-form-urlencoded'                                                         // 9206
   *     }                                                                                                             // 9207
   *   });                                                                                                             // 9208
   *                                                                                                                   // 9209
   * });                                                                                                               // 9210
   * ```                                                                                                               // 9211
   *                                                                                                                   // 9212
   * */                                                                                                                // 9213
  this.$get = function() {                                                                                             // 9214
    return function jQueryLikeParamSerializer(params) {                                                                // 9215
      if (!params) return '';                                                                                          // 9216
      var parts = [];                                                                                                  // 9217
      serialize(params, '', true);                                                                                     // 9218
      return parts.join('&');                                                                                          // 9219
                                                                                                                       // 9220
      function serialize(toSerialize, prefix, topLevel) {                                                              // 9221
        if (toSerialize === null || isUndefined(toSerialize)) return;                                                  // 9222
        if (isArray(toSerialize)) {                                                                                    // 9223
          forEach(toSerialize, function(value) {                                                                       // 9224
            serialize(value, prefix + '[]');                                                                           // 9225
          });                                                                                                          // 9226
        } else if (isObject(toSerialize) && !isDate(toSerialize)) {                                                    // 9227
          forEachSorted(toSerialize, function(value, key) {                                                            // 9228
            serialize(value, prefix +                                                                                  // 9229
                (topLevel ? '' : '[') +                                                                                // 9230
                key +                                                                                                  // 9231
                (topLevel ? '' : ']'));                                                                                // 9232
          });                                                                                                          // 9233
        } else {                                                                                                       // 9234
          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));                      // 9235
        }                                                                                                              // 9236
      }                                                                                                                // 9237
    };                                                                                                                 // 9238
  };                                                                                                                   // 9239
}                                                                                                                      // 9240
                                                                                                                       // 9241
function defaultHttpResponseTransform(data, headers) {                                                                 // 9242
  if (isString(data)) {                                                                                                // 9243
    // Strip json vulnerability protection prefix and trim whitespace                                                  // 9244
    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();                                                    // 9245
                                                                                                                       // 9246
    if (tempData) {                                                                                                    // 9247
      var contentType = headers('Content-Type');                                                                       // 9248
      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {                    // 9249
        data = fromJson(tempData);                                                                                     // 9250
      }                                                                                                                // 9251
    }                                                                                                                  // 9252
  }                                                                                                                    // 9253
                                                                                                                       // 9254
  return data;                                                                                                         // 9255
}                                                                                                                      // 9256
                                                                                                                       // 9257
function isJsonLike(str) {                                                                                             // 9258
    var jsonStart = str.match(JSON_START);                                                                             // 9259
    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);                                                             // 9260
}                                                                                                                      // 9261
                                                                                                                       // 9262
/**                                                                                                                    // 9263
 * Parse headers into key value object                                                                                 // 9264
 *                                                                                                                     // 9265
 * @param {string} headers Raw headers as a string                                                                     // 9266
 * @returns {Object} Parsed headers as key value object                                                                // 9267
 */                                                                                                                    // 9268
function parseHeaders(headers) {                                                                                       // 9269
  var parsed = createMap(), i;                                                                                         // 9270
                                                                                                                       // 9271
  function fillInParsed(key, val) {                                                                                    // 9272
    if (key) {                                                                                                         // 9273
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;                                                      // 9274
    }                                                                                                                  // 9275
  }                                                                                                                    // 9276
                                                                                                                       // 9277
  if (isString(headers)) {                                                                                             // 9278
    forEach(headers.split('\n'), function(line) {                                                                      // 9279
      i = line.indexOf(':');                                                                                           // 9280
      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));                                      // 9281
    });                                                                                                                // 9282
  } else if (isObject(headers)) {                                                                                      // 9283
    forEach(headers, function(headerVal, headerKey) {                                                                  // 9284
      fillInParsed(lowercase(headerKey), trim(headerVal));                                                             // 9285
    });                                                                                                                // 9286
  }                                                                                                                    // 9287
                                                                                                                       // 9288
  return parsed;                                                                                                       // 9289
}                                                                                                                      // 9290
                                                                                                                       // 9291
                                                                                                                       // 9292
/**                                                                                                                    // 9293
 * Returns a function that provides access to parsed headers.                                                          // 9294
 *                                                                                                                     // 9295
 * Headers are lazy parsed when first requested.                                                                       // 9296
 * @see parseHeaders                                                                                                   // 9297
 *                                                                                                                     // 9298
 * @param {(string|Object)} headers Headers to provide access to.                                                      // 9299
 * @returns {function(string=)} Returns a getter function which if called with:                                        // 9300
 *                                                                                                                     // 9301
 *   - if called with single an argument returns a single header value or null                                         // 9302
 *   - if called with no arguments returns an object containing all headers.                                           // 9303
 */                                                                                                                    // 9304
function headersGetter(headers) {                                                                                      // 9305
  var headersObj;                                                                                                      // 9306
                                                                                                                       // 9307
  return function(name) {                                                                                              // 9308
    if (!headersObj) headersObj =  parseHeaders(headers);                                                              // 9309
                                                                                                                       // 9310
    if (name) {                                                                                                        // 9311
      var value = headersObj[lowercase(name)];                                                                         // 9312
      if (value === void 0) {                                                                                          // 9313
        value = null;                                                                                                  // 9314
      }                                                                                                                // 9315
      return value;                                                                                                    // 9316
    }                                                                                                                  // 9317
                                                                                                                       // 9318
    return headersObj;                                                                                                 // 9319
  };                                                                                                                   // 9320
}                                                                                                                      // 9321
                                                                                                                       // 9322
                                                                                                                       // 9323
/**                                                                                                                    // 9324
 * Chain all given functions                                                                                           // 9325
 *                                                                                                                     // 9326
 * This function is used for both request and response transforming                                                    // 9327
 *                                                                                                                     // 9328
 * @param {*} data Data to transform.                                                                                  // 9329
 * @param {function(string=)} headers HTTP headers getter fn.                                                          // 9330
 * @param {number} status HTTP status code of the response.                                                            // 9331
 * @param {(Function|Array.<Function>)} fns Function or an array of functions.                                         // 9332
 * @returns {*} Transformed data.                                                                                      // 9333
 */                                                                                                                    // 9334
function transformData(data, headers, status, fns) {                                                                   // 9335
  if (isFunction(fns)) {                                                                                               // 9336
    return fns(data, headers, status);                                                                                 // 9337
  }                                                                                                                    // 9338
                                                                                                                       // 9339
  forEach(fns, function(fn) {                                                                                          // 9340
    data = fn(data, headers, status);                                                                                  // 9341
  });                                                                                                                  // 9342
                                                                                                                       // 9343
  return data;                                                                                                         // 9344
}                                                                                                                      // 9345
                                                                                                                       // 9346
                                                                                                                       // 9347
function isSuccess(status) {                                                                                           // 9348
  return 200 <= status && status < 300;                                                                                // 9349
}                                                                                                                      // 9350
                                                                                                                       // 9351
                                                                                                                       // 9352
/**                                                                                                                    // 9353
 * @ngdoc provider                                                                                                     // 9354
 * @name $httpProvider                                                                                                 // 9355
 * @description                                                                                                        // 9356
 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.                           // 9357
 * */                                                                                                                  // 9358
function $HttpProvider() {                                                                                             // 9359
  /**                                                                                                                  // 9360
   * @ngdoc property                                                                                                   // 9361
   * @name $httpProvider#defaults                                                                                      // 9362
   * @description                                                                                                      // 9363
   *                                                                                                                   // 9364
   * Object containing default values for all {@link ng.$http $http} requests.                                         // 9365
   *                                                                                                                   // 9366
   * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}                 // 9367
   * that will provide the cache for all requests who set their `cache` property to `true`.                            // 9368
   * If you set the `defaults.cache = false` then only requests that specify their own custom                          // 9369
   * cache object will be cached. See {@link $http#caching $http Caching} for more information.                        // 9370
   *                                                                                                                   // 9371
   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.                            // 9372
   * Defaults value is `'XSRF-TOKEN'`.                                                                                 // 9373
   *                                                                                                                   // 9374
   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the                             // 9375
   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.                                                                   // 9376
   *                                                                                                                   // 9377
   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.                                     // 9378
   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on                                         // 9379
   * setting default headers.                                                                                          // 9380
   *     - **`defaults.headers.common`**                                                                               // 9381
   *     - **`defaults.headers.post`**                                                                                 // 9382
   *     - **`defaults.headers.put`**                                                                                  // 9383
   *     - **`defaults.headers.patch`**                                                                                // 9384
   *                                                                                                                   // 9385
   *                                                                                                                   // 9386
   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function                 // 9387
   *  used to the prepare string representation of request parameters (specified as an object).                        // 9388
   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.    // 9389
   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.                                                // 9390
   *                                                                                                                   // 9391
   **/                                                                                                                 // 9392
  var defaults = this.defaults = {                                                                                     // 9393
    // transform incoming response data                                                                                // 9394
    transformResponse: [defaultHttpResponseTransform],                                                                 // 9395
                                                                                                                       // 9396
    // transform outgoing request data                                                                                 // 9397
    transformRequest: [function(d) {                                                                                   // 9398
      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;                                // 9399
    }],                                                                                                                // 9400
                                                                                                                       // 9401
    // default headers                                                                                                 // 9402
    headers: {                                                                                                         // 9403
      common: {                                                                                                        // 9404
        'Accept': 'application/json, text/plain, */*'                                                                  // 9405
      },                                                                                                               // 9406
      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),                                                              // 9407
      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),                                                              // 9408
      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)                                                               // 9409
    },                                                                                                                 // 9410
                                                                                                                       // 9411
    xsrfCookieName: 'XSRF-TOKEN',                                                                                      // 9412
    xsrfHeaderName: 'X-XSRF-TOKEN',                                                                                    // 9413
                                                                                                                       // 9414
    paramSerializer: '$httpParamSerializer'                                                                            // 9415
  };                                                                                                                   // 9416
                                                                                                                       // 9417
  var useApplyAsync = false;                                                                                           // 9418
  /**                                                                                                                  // 9419
   * @ngdoc method                                                                                                     // 9420
   * @name $httpProvider#useApplyAsync                                                                                 // 9421
   * @description                                                                                                      // 9422
   *                                                                                                                   // 9423
   * Configure $http service to combine processing of multiple http responses received at around                       // 9424
   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in              // 9425
   * significant performance improvement for bigger applications that make many HTTP requests                          // 9426
   * concurrently (common during application bootstrap).                                                               // 9427
   *                                                                                                                   // 9428
   * Defaults to false. If no value is specified, returns the current configured value.                                // 9429
   *                                                                                                                   // 9430
   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred                          // 9431
   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window                        // 9432
   *    to load and share the same digest cycle.                                                                       // 9433
   *                                                                                                                   // 9434
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.                        // 9435
   *    otherwise, returns the current configured value.                                                               // 9436
   **/                                                                                                                 // 9437
  this.useApplyAsync = function(value) {                                                                               // 9438
    if (isDefined(value)) {                                                                                            // 9439
      useApplyAsync = !!value;                                                                                         // 9440
      return this;                                                                                                     // 9441
    }                                                                                                                  // 9442
    return useApplyAsync;                                                                                              // 9443
  };                                                                                                                   // 9444
                                                                                                                       // 9445
  /**                                                                                                                  // 9446
   * @ngdoc property                                                                                                   // 9447
   * @name $httpProvider#interceptors                                                                                  // 9448
   * @description                                                                                                      // 9449
   *                                                                                                                   // 9450
   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}                     // 9451
   * pre-processing of request or postprocessing of responses.                                                         // 9452
   *                                                                                                                   // 9453
   * These service factories are ordered by request, i.e. they are applied in the same order as the                    // 9454
   * array, on request, but reverse order, on response.                                                                // 9455
   *                                                                                                                   // 9456
   * {@link ng.$http#interceptors Interceptors detailed info}                                                          // 9457
   **/                                                                                                                 // 9458
  var interceptorFactories = this.interceptors = [];                                                                   // 9459
                                                                                                                       // 9460
  this.$get = ['$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector',                     // 9461
      function($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {                               // 9462
                                                                                                                       // 9463
    var defaultCache = $cacheFactory('$http');                                                                         // 9464
                                                                                                                       // 9465
    /**                                                                                                                // 9466
     * Make sure that default param serializer is exposed as a function                                                // 9467
     */                                                                                                                // 9468
    defaults.paramSerializer = isString(defaults.paramSerializer) ?                                                    // 9469
      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;                                              // 9470
                                                                                                                       // 9471
    /**                                                                                                                // 9472
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.                             // 9473
     * The reversal is needed so that we can build up the interception chain around the                                // 9474
     * server request.                                                                                                 // 9475
     */                                                                                                                // 9476
    var reversedInterceptors = [];                                                                                     // 9477
                                                                                                                       // 9478
    forEach(interceptorFactories, function(interceptorFactory) {                                                       // 9479
      reversedInterceptors.unshift(isString(interceptorFactory)                                                        // 9480
          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));                                 // 9481
    });                                                                                                                // 9482
                                                                                                                       // 9483
    /**                                                                                                                // 9484
     * @ngdoc service                                                                                                  // 9485
     * @kind function                                                                                                  // 9486
     * @name $http                                                                                                     // 9487
     * @requires ng.$httpBackend                                                                                       // 9488
     * @requires $cacheFactory                                                                                         // 9489
     * @requires $rootScope                                                                                            // 9490
     * @requires $q                                                                                                    // 9491
     * @requires $injector                                                                                             // 9492
     *                                                                                                                 // 9493
     * @description                                                                                                    // 9494
     * The `$http` service is a core Angular service that facilitates communication with the remote                    // 9495
     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)                // 9496
     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).                                                      // 9497
     *                                                                                                                 // 9498
     * For unit testing applications that use `$http` service, see                                                     // 9499
     * {@link ngMock.$httpBackend $httpBackend mock}.                                                                  // 9500
     *                                                                                                                 // 9501
     * For a higher level of abstraction, please check out the {@link ngResource.$resource                             // 9502
     * $resource} service.                                                                                             // 9503
     *                                                                                                                 // 9504
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by                                    // 9505
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage                    // 9506
     * it is important to familiarize yourself with these APIs and the guarantees they provide.                        // 9507
     *                                                                                                                 // 9508
     *                                                                                                                 // 9509
     * ## General usage                                                                                                // 9510
     * The `$http` service is a function which takes a single argument — a configuration object —                      // 9511
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}                                   // 9512
     * with two $http specific methods: `success` and `error`.                                                         // 9513
     *                                                                                                                 // 9514
     * ```js                                                                                                           // 9515
     *   // Simple GET request example :                                                                               // 9516
     *   $http.get('/someUrl').                                                                                        // 9517
     *     success(function(data, status, headers, config) {                                                           // 9518
     *       // this callback will be called asynchronously                                                            // 9519
     *       // when the response is available                                                                         // 9520
     *     }).                                                                                                         // 9521
     *     error(function(data, status, headers, config) {                                                             // 9522
     *       // called asynchronously if an error occurs                                                               // 9523
     *       // or server returns response with an error status.                                                       // 9524
     *     });                                                                                                         // 9525
     * ```                                                                                                             // 9526
     *                                                                                                                 // 9527
     * ```js                                                                                                           // 9528
     *   // Simple POST request example (passing data) :                                                               // 9529
     *   $http.post('/someUrl', {msg:'hello word!'}).                                                                  // 9530
     *     success(function(data, status, headers, config) {                                                           // 9531
     *       // this callback will be called asynchronously                                                            // 9532
     *       // when the response is available                                                                         // 9533
     *     }).                                                                                                         // 9534
     *     error(function(data, status, headers, config) {                                                             // 9535
     *       // called asynchronously if an error occurs                                                               // 9536
     *       // or server returns response with an error status.                                                       // 9537
     *     });                                                                                                         // 9538
     * ```                                                                                                             // 9539
     *                                                                                                                 // 9540
     *                                                                                                                 // 9541
     * Since the returned value of calling the $http function is a `promise`, you can also use                         // 9542
     * the `then` method to register callbacks, and these callbacks will receive a single argument –                   // 9543
     * an object representing the response. See the API signature and type info below for more                         // 9544
     * details.                                                                                                        // 9545
     *                                                                                                                 // 9546
     * A response status code between 200 and 299 is considered a success status and                                   // 9547
     * will result in the success callback being called. Note that if the response is a redirect,                      // 9548
     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be                        // 9549
     * called for such responses.                                                                                      // 9550
     *                                                                                                                 // 9551
     * ## Writing Unit Tests that use $http                                                                            // 9552
     * When unit testing (using {@link ngMock ngMock}), it is necessary to call                                        // 9553
     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending                                    // 9554
     * request using trained responses.                                                                                // 9555
     *                                                                                                                 // 9556
     * ```                                                                                                             // 9557
     * $httpBackend.expectGET(...);                                                                                    // 9558
     * $http.get(...);                                                                                                 // 9559
     * $httpBackend.flush();                                                                                           // 9560
     * ```                                                                                                             // 9561
     *                                                                                                                 // 9562
     * ## Shortcut methods                                                                                             // 9563
     *                                                                                                                 // 9564
     * Shortcut methods are also available. All shortcut methods require passing in the URL, and                       // 9565
     * request data must be passed in for POST/PUT requests.                                                           // 9566
     *                                                                                                                 // 9567
     * ```js                                                                                                           // 9568
     *   $http.get('/someUrl').success(successCallback);                                                               // 9569
     *   $http.post('/someUrl', data).success(successCallback);                                                        // 9570
     * ```                                                                                                             // 9571
     *                                                                                                                 // 9572
     * Complete list of shortcut methods:                                                                              // 9573
     *                                                                                                                 // 9574
     * - {@link ng.$http#get $http.get}                                                                                // 9575
     * - {@link ng.$http#head $http.head}                                                                              // 9576
     * - {@link ng.$http#post $http.post}                                                                              // 9577
     * - {@link ng.$http#put $http.put}                                                                                // 9578
     * - {@link ng.$http#delete $http.delete}                                                                          // 9579
     * - {@link ng.$http#jsonp $http.jsonp}                                                                            // 9580
     * - {@link ng.$http#patch $http.patch}                                                                            // 9581
     *                                                                                                                 // 9582
     *                                                                                                                 // 9583
     * ## Setting HTTP Headers                                                                                         // 9584
     *                                                                                                                 // 9585
     * The $http service will automatically add certain HTTP headers to all requests. These defaults                   // 9586
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration                         // 9587
     * object, which currently contains this default configuration:                                                    // 9588
     *                                                                                                                 // 9589
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):                           // 9590
     *   - `Accept: application/json, text/plain, * / *`                                                               // 9591
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)                                    // 9592
     *   - `Content-Type: application/json`                                                                            // 9593
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)                                       // 9594
     *   - `Content-Type: application/json`                                                                            // 9595
     *                                                                                                                 // 9596
     * To add or overwrite these defaults, simply add or remove a property from these configuration                    // 9597
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object                      // 9598
     * with the lowercased HTTP method name as the key, e.g.                                                           // 9599
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.                                               // 9600
     *                                                                                                                 // 9601
     * The defaults can also be set at runtime via the `$http.defaults` object in the same                             // 9602
     * fashion. For example:                                                                                           // 9603
     *                                                                                                                 // 9604
     * ```                                                                                                             // 9605
     * module.run(function($http) {                                                                                    // 9606
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'                                            // 9607
     * });                                                                                                             // 9608
     * ```                                                                                                             // 9609
     *                                                                                                                 // 9610
     * In addition, you can supply a `headers` property in the config object passed when                               // 9611
     * calling `$http(config)`, which overrides the defaults without changing them globally.                           // 9612
     *                                                                                                                 // 9613
     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,    // 9614
     * Use the `headers` property, setting the desired header to `undefined`. For example:                             // 9615
     *                                                                                                                 // 9616
     * ```js                                                                                                           // 9617
     * var req = {                                                                                                     // 9618
     *  method: 'POST',                                                                                                // 9619
     *  url: 'http://example.com',                                                                                     // 9620
     *  headers: {                                                                                                     // 9621
     *    'Content-Type': undefined                                                                                    // 9622
     *  },                                                                                                             // 9623
     *  data: { test: 'test' }                                                                                         // 9624
     * }                                                                                                               // 9625
     *                                                                                                                 // 9626
     * $http(req).success(function(){...}).error(function(){...});                                                     // 9627
     * ```                                                                                                             // 9628
     *                                                                                                                 // 9629
     * ## Transforming Requests and Responses                                                                          // 9630
     *                                                                                                                 // 9631
     * Both requests and responses can be transformed using transformation functions: `transformRequest`               // 9632
     * and `transformResponse`. These properties can be a single function that returns                                 // 9633
     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,   // 9634
     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.            // 9635
     *                                                                                                                 // 9636
     * ### Default Transformations                                                                                     // 9637
     *                                                                                                                 // 9638
     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and                         // 9639
     * `defaults.transformResponse` properties. If a request does not provide its own transformations                  // 9640
     * then these will be applied.                                                                                     // 9641
     *                                                                                                                 // 9642
     * You can augment or replace the default transformations by modifying these properties by adding to or            // 9643
     * replacing the array.                                                                                            // 9644
     *                                                                                                                 // 9645
     * Angular provides the following default transformations:                                                         // 9646
     *                                                                                                                 // 9647
     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):      // 9648
     *                                                                                                                 // 9649
     * - If the `data` property of the request configuration object contains an object, serialize it                   // 9650
     *   into JSON format.                                                                                             // 9651
     *                                                                                                                 // 9652
     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):   // 9653
     *                                                                                                                 // 9654
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).                            // 9655
     *  - If JSON response is detected, deserialize it using a JSON parser.                                            // 9656
     *                                                                                                                 // 9657
     *                                                                                                                 // 9658
     * ### Overriding the Default Transformations Per Request                                                          // 9659
     *                                                                                                                 // 9660
     * If you wish override the request/response transformations only for a single request then provide                // 9661
     * `transformRequest` and/or `transformResponse` properties on the configuration object passed                     // 9662
     * into `$http`.                                                                                                   // 9663
     *                                                                                                                 // 9664
     * Note that if you provide these properties on the config object the default transformations will be              // 9665
     * overwritten. If you wish to augment the default transformations then you must include them in your              // 9666
     * local transformation array.                                                                                     // 9667
     *                                                                                                                 // 9668
     * The following code demonstrates adding a new response transformation to be run after the default response       // 9669
     * transformations have been run.                                                                                  // 9670
     *                                                                                                                 // 9671
     * ```js                                                                                                           // 9672
     * function appendTransform(defaults, transform) {                                                                 // 9673
     *                                                                                                                 // 9674
     *   // We can't guarantee that the default transformation is an array                                             // 9675
     *   defaults = angular.isArray(defaults) ? defaults : [defaults];                                                 // 9676
     *                                                                                                                 // 9677
     *   // Append the new transformation to the defaults                                                              // 9678
     *   return defaults.concat(transform);                                                                            // 9679
     * }                                                                                                               // 9680
     *                                                                                                                 // 9681
     * $http({                                                                                                         // 9682
     *   url: '...',                                                                                                   // 9683
     *   method: 'GET',                                                                                                // 9684
     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {                        // 9685
     *     return doTransform(value);                                                                                  // 9686
     *   })                                                                                                            // 9687
     * });                                                                                                             // 9688
     * ```                                                                                                             // 9689
     *                                                                                                                 // 9690
     *                                                                                                                 // 9691
     * ## Caching                                                                                                      // 9692
     *                                                                                                                 // 9693
     * To enable caching, set the request configuration `cache` property to `true` (to use default                     // 9694
     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).                       // 9695
     * When the cache is enabled, `$http` stores the response from the server in the specified                         // 9696
     * cache. The next time the same request is made, the response is served from the cache without                    // 9697
     * sending a request to the server.                                                                                // 9698
     *                                                                                                                 // 9699
     * Note that even if the response is served from cache, delivery of the data is asynchronous in                    // 9700
     * the same way that real requests are.                                                                            // 9701
     *                                                                                                                 // 9702
     * If there are multiple GET requests for the same URL that should be cached using the same                        // 9703
     * cache, but the cache is not populated yet, only one request to the server will be made and                      // 9704
     * the remaining requests will be fulfilled using the response from the first request.                             // 9705
     *                                                                                                                 // 9706
     * You can change the default cache to a new object (built with                                                    // 9707
     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the                                                       // 9708
     * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set                                 // 9709
     * their `cache` property to `true` will now use this cache object.                                                // 9710
     *                                                                                                                 // 9711
     * If you set the default cache to `false` then only requests that specify their own custom                        // 9712
     * cache object will be cached.                                                                                    // 9713
     *                                                                                                                 // 9714
     * ## Interceptors                                                                                                 // 9715
     *                                                                                                                 // 9716
     * Before you start creating interceptors, be sure to understand the                                               // 9717
     * {@link ng.$q $q and deferred/promise APIs}.                                                                     // 9718
     *                                                                                                                 // 9719
     * For purposes of global error handling, authentication, or any kind of synchronous or                            // 9720
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be                    // 9721
     * able to intercept requests before they are handed to the server and                                             // 9722
     * responses before they are handed over to the application code that                                              // 9723
     * initiated these requests. The interceptors leverage the {@link ng.$q                                            // 9724
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.                        // 9725
     *                                                                                                                 // 9726
     * The interceptors are service factories that are registered with the `$httpProvider` by                          // 9727
     * adding them to the `$httpProvider.interceptors` array. The factory is called and                                // 9728
     * injected with dependencies (if specified) and returns the interceptor.                                          // 9729
     *                                                                                                                 // 9730
     * There are two kinds of interceptors (and two kinds of rejection interceptors):                                  // 9731
     *                                                                                                                 // 9732
     *   * `request`: interceptors get called with a http `config` object. The function is free to                     // 9733
     *     modify the `config` object or create a new one. The function needs to return the `config`                   // 9734
     *     object directly, or a promise containing the `config` or a new `config` object.                             // 9735
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or                       // 9736
     *     resolved with a rejection.                                                                                  // 9737
     *   * `response`: interceptors get called with http `response` object. The function is free to                    // 9738
     *     modify the `response` object or create a new one. The function needs to return the `response`               // 9739
     *     object directly, or as a promise containing the `response` or a new `response` object.                      // 9740
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or                      // 9741
     *     resolved with a rejection.                                                                                  // 9742
     *                                                                                                                 // 9743
     *                                                                                                                 // 9744
     * ```js                                                                                                           // 9745
     *   // register the interceptor as a service                                                                      // 9746
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {                                // 9747
     *     return {                                                                                                    // 9748
     *       // optional method                                                                                        // 9749
     *       'request': function(config) {                                                                             // 9750
     *         // do something on success                                                                              // 9751
     *         return config;                                                                                          // 9752
     *       },                                                                                                        // 9753
     *                                                                                                                 // 9754
     *       // optional method                                                                                        // 9755
     *      'requestError': function(rejection) {                                                                      // 9756
     *         // do something on error                                                                                // 9757
     *         if (canRecover(rejection)) {                                                                            // 9758
     *           return responseOrNewPromise                                                                           // 9759
     *         }                                                                                                       // 9760
     *         return $q.reject(rejection);                                                                            // 9761
     *       },                                                                                                        // 9762
     *                                                                                                                 // 9763
     *                                                                                                                 // 9764
     *                                                                                                                 // 9765
     *       // optional method                                                                                        // 9766
     *       'response': function(response) {                                                                          // 9767
     *         // do something on success                                                                              // 9768
     *         return response;                                                                                        // 9769
     *       },                                                                                                        // 9770
     *                                                                                                                 // 9771
     *       // optional method                                                                                        // 9772
     *      'responseError': function(rejection) {                                                                     // 9773
     *         // do something on error                                                                                // 9774
     *         if (canRecover(rejection)) {                                                                            // 9775
     *           return responseOrNewPromise                                                                           // 9776
     *         }                                                                                                       // 9777
     *         return $q.reject(rejection);                                                                            // 9778
     *       }                                                                                                         // 9779
     *     };                                                                                                          // 9780
     *   });                                                                                                           // 9781
     *                                                                                                                 // 9782
     *   $httpProvider.interceptors.push('myHttpInterceptor');                                                         // 9783
     *                                                                                                                 // 9784
     *                                                                                                                 // 9785
     *   // alternatively, register the interceptor via an anonymous factory                                           // 9786
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {                                      // 9787
     *     return {                                                                                                    // 9788
     *      'request': function(config) {                                                                              // 9789
     *          // same as above                                                                                       // 9790
     *       },                                                                                                        // 9791
     *                                                                                                                 // 9792
     *       'response': function(response) {                                                                          // 9793
     *          // same as above                                                                                       // 9794
     *       }                                                                                                         // 9795
     *     };                                                                                                          // 9796
     *   });                                                                                                           // 9797
     * ```                                                                                                             // 9798
     *                                                                                                                 // 9799
     * ## Security Considerations                                                                                      // 9800
     *                                                                                                                 // 9801
     * When designing web applications, consider security threats from:                                                // 9802
     *                                                                                                                 // 9803
     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)       // 9804
     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)                                               // 9805
     *                                                                                                                 // 9806
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes                    // 9807
     * pre-configured with strategies that address these issues, but for this to work backend server                   // 9808
     * cooperation is required.                                                                                        // 9809
     *                                                                                                                 // 9810
     * ### JSON Vulnerability Protection                                                                               // 9811
     *                                                                                                                 // 9812
     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)       // 9813
     * allows third party website to turn your JSON resource URL into                                                  // 9814
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To                                   // 9815
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.                        // 9816
     * Angular will automatically strip the prefix before processing it as JSON.                                       // 9817
     *                                                                                                                 // 9818
     * For example if your server needs to return:                                                                     // 9819
     * ```js                                                                                                           // 9820
     * ['one','two']                                                                                                   // 9821
     * ```                                                                                                             // 9822
     *                                                                                                                 // 9823
     * which is vulnerable to attack, your server can return:                                                          // 9824
     * ```js                                                                                                           // 9825
     * )]}',                                                                                                           // 9826
     * ['one','two']                                                                                                   // 9827
     * ```                                                                                                             // 9828
     *                                                                                                                 // 9829
     * Angular will strip the prefix, before processing the JSON.                                                      // 9830
     *                                                                                                                 // 9831
     *                                                                                                                 // 9832
     * ### Cross Site Request Forgery (XSRF) Protection                                                                // 9833
     *                                                                                                                 // 9834
     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which                         // 9835
     * an unauthorized site can gain your user's private data. Angular provides a mechanism                            // 9836
     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie                    // 9837
     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only                           // 9838
     * JavaScript that runs on your domain could read the cookie, your server can be assured that                      // 9839
     * the XHR came from JavaScript running on your domain. The header will not be set for                             // 9840
     * cross-domain requests.                                                                                          // 9841
     *                                                                                                                 // 9842
     * To take advantage of this, your server needs to set a token in a JavaScript readable session                    // 9843
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the                        // 9844
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure                     // 9845
     * that only JavaScript running on your domain could have sent the request. The token must be                      // 9846
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from                       // 9847
     * making up its own tokens). We recommend that the token is a digest of your site's                               // 9848
     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)                      // 9849
     * for added security.                                                                                             // 9850
     *                                                                                                                 // 9851
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName                            // 9852
     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,                         // 9853
     * or the per-request config object.                                                                               // 9854
     *                                                                                                                 // 9855
     * In order to prevent collisions in environments where multiple Angular apps share the                            // 9856
     * same domain or subdomain, we recommend that each application uses unique cookie name.                           // 9857
     *                                                                                                                 // 9858
     *                                                                                                                 // 9859
     * @param {object} config Object describing the request to be made and how it should be                            // 9860
     *    processed. The object has following properties:                                                              // 9861
     *                                                                                                                 // 9862
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)                                            // 9863
     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.                   // 9864
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized               // 9865
     *      with the `paramSerializer` and appended as GET parameters.                                                 // 9866
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.                                // 9867
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing                   // 9868
     *      HTTP headers to send to the server. If the return value of a function is null, the                         // 9869
     *      header will not be sent. Functions accept a config object as an argument.                                  // 9870
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.                     // 9871
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.                                // 9872
     *    - **transformRequest** –                                                                                     // 9873
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –                                  // 9874
     *      transform function or an array of such functions. The transform function takes the http                    // 9875
     *      request body and headers and returns its transformed (typically serialized) version.                       // 9876
     *      See {@link ng.$http#overriding-the-default-transformations-per-request                                     // 9877
     *      Overriding the Default Transformations}                                                                    // 9878
     *    - **transformResponse** –                                                                                    // 9879
     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –                  // 9880
     *      transform function or an array of such functions. The transform function takes the http                    // 9881
     *      response body, headers and status and returns its transformed (typically deserialized) version.            // 9882
     *      See {@link ng.$http#overriding-the-default-transformations-per-request                                     // 9883
     *      Overriding the Default TransformationjqLiks}                                                               // 9884
     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to               // 9885
     *      prepare the string representation of request parameters (specified as an object).                          // 9886
     *      If specified as string, it is interpreted as function registered with the                                  // 9887
     *      {@link $injector $injector}, which means you can create your own serializer                                // 9888
     *      by registering it as a {@link auto.$provide#service service}.                                              // 9889
     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};                           // 9890
     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}               // 9891
     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the                   // 9892
     *      GET request, otherwise if a cache instance built with                                                      // 9893
     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for                                        // 9894
     *      caching.                                                                                                   // 9895
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}                       // 9896
     *      that should abort the request when resolved.                                                               // 9897
     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the                       // 9898
     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
     *      for more information.                                                                                      // 9900
     *    - **responseType** - `{string}` - see                                                                        // 9901
     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
     *                                                                                                                 // 9903
     * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the                                          // 9904
     *   standard `then` method and two http specific methods: `success` and `error`. The `then`                       // 9905
     *   method takes two arguments a success and an error callback which will be called with a                        // 9906
     *   response object. The `success` and `error` methods take a single argument - a function that                   // 9907
     *   will be called when the request succeeds or fails respectively. The arguments passed into                     // 9908
     *   these functions are destructured representation of the response object passed into the                        // 9909
     *   `then` method. The response object has these properties:                                                      // 9910
     *                                                                                                                 // 9911
     *   - **data** – `{string|Object}` – The response body transformed with the transform                             // 9912
     *     functions.                                                                                                  // 9913
     *   - **status** – `{number}` – HTTP status code of the response.                                                 // 9914
     *   - **headers** – `{function([headerName])}` – Header getter function.                                          // 9915
     *   - **config** – `{Object}` – The configuration object that was used to generate the request.                   // 9916
     *   - **statusText** – `{string}` – HTTP status text of the response.                                             // 9917
     *                                                                                                                 // 9918
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending                        // 9919
     *   requests. This is primarily meant to be used for debugging purposes.                                          // 9920
     *                                                                                                                 // 9921
     *                                                                                                                 // 9922
     * @example                                                                                                        // 9923
<example module="httpExample">                                                                                         // 9924
<file name="index.html">                                                                                               // 9925
  <div ng-controller="FetchController">                                                                                // 9926
    <select ng-model="method" aria-label="Request method">                                                             // 9927
      <option>GET</option>                                                                                             // 9928
      <option>JSONP</option>                                                                                           // 9929
    </select>                                                                                                          // 9930
    <input type="text" ng-model="url" size="80" aria-label="URL" />                                                    // 9931
    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>                                                        // 9932
    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>                     // 9933
    <button id="samplejsonpbtn"                                                                                        // 9934
      ng-click="updateModel('JSONP',                                                                                   // 9935
                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">                      // 9936
      Sample JSONP                                                                                                     // 9937
    </button>                                                                                                          // 9938
    <button id="invalidjsonpbtn"                                                                                       // 9939
      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">                     // 9940
        Invalid JSONP                                                                                                  // 9941
      </button>                                                                                                        // 9942
    <pre>http status code: {{status}}</pre>                                                                            // 9943
    <pre>http response data: {{data}}</pre>                                                                            // 9944
  </div>                                                                                                               // 9945
</file>                                                                                                                // 9946
<file name="script.js">                                                                                                // 9947
  angular.module('httpExample', [])                                                                                    // 9948
    .controller('FetchController', ['$scope', '$http', '$templateCache',                                               // 9949
      function($scope, $http, $templateCache) {                                                                        // 9950
        $scope.method = 'GET';                                                                                         // 9951
        $scope.url = 'http-hello.html';                                                                                // 9952
                                                                                                                       // 9953
        $scope.fetch = function() {                                                                                    // 9954
          $scope.code = null;                                                                                          // 9955
          $scope.response = null;                                                                                      // 9956
                                                                                                                       // 9957
          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).                                      // 9958
            success(function(data, status) {                                                                           // 9959
              $scope.status = status;                                                                                  // 9960
              $scope.data = data;                                                                                      // 9961
            }).                                                                                                        // 9962
            error(function(data, status) {                                                                             // 9963
              $scope.data = data || "Request failed";                                                                  // 9964
              $scope.status = status;                                                                                  // 9965
          });                                                                                                          // 9966
        };                                                                                                             // 9967
                                                                                                                       // 9968
        $scope.updateModel = function(method, url) {                                                                   // 9969
          $scope.method = method;                                                                                      // 9970
          $scope.url = url;                                                                                            // 9971
        };                                                                                                             // 9972
      }]);                                                                                                             // 9973
</file>                                                                                                                // 9974
<file name="http-hello.html">                                                                                          // 9975
  Hello, $http!                                                                                                        // 9976
</file>                                                                                                                // 9977
<file name="protractor.js" type="protractor">                                                                          // 9978
  var status = element(by.binding('status'));                                                                          // 9979
  var data = element(by.binding('data'));                                                                              // 9980
  var fetchBtn = element(by.id('fetchbtn'));                                                                           // 9981
  var sampleGetBtn = element(by.id('samplegetbtn'));                                                                   // 9982
  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));                                                               // 9983
  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));                                                             // 9984
                                                                                                                       // 9985
  it('should make an xhr GET request', function() {                                                                    // 9986
    sampleGetBtn.click();                                                                                              // 9987
    fetchBtn.click();                                                                                                  // 9988
    expect(status.getText()).toMatch('200');                                                                           // 9989
    expect(data.getText()).toMatch(/Hello, \$http!/);                                                                  // 9990
  });                                                                                                                  // 9991
                                                                                                                       // 9992
// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185                                  // 9993
// it('should make a JSONP request to angularjs.org', function() {                                                     // 9994
//   sampleJsonpBtn.click();                                                                                           // 9995
//   fetchBtn.click();                                                                                                 // 9996
//   expect(status.getText()).toMatch('200');                                                                          // 9997
//   expect(data.getText()).toMatch(/Super Hero!/);                                                                    // 9998
// });                                                                                                                 // 9999
                                                                                                                       // 10000
  it('should make JSONP request to invalid URL and invoke the error handler',                                          // 10001
      function() {                                                                                                     // 10002
    invalidJsonpBtn.click();                                                                                           // 10003
    fetchBtn.click();                                                                                                  // 10004
    expect(status.getText()).toMatch('0');                                                                             // 10005
    expect(data.getText()).toMatch('Request failed');                                                                  // 10006
  });                                                                                                                  // 10007
</file>                                                                                                                // 10008
</example>                                                                                                             // 10009
     */                                                                                                                // 10010
    function $http(requestConfig) {                                                                                    // 10011
                                                                                                                       // 10012
      if (!angular.isObject(requestConfig)) {                                                                          // 10013
        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
      }                                                                                                                // 10015
                                                                                                                       // 10016
      var config = extend({                                                                                            // 10017
        method: 'get',                                                                                                 // 10018
        transformRequest: defaults.transformRequest,                                                                   // 10019
        transformResponse: defaults.transformResponse,                                                                 // 10020
        paramSerializer: defaults.paramSerializer                                                                      // 10021
      }, requestConfig);                                                                                               // 10022
                                                                                                                       // 10023
      config.headers = mergeHeaders(requestConfig);                                                                    // 10024
      config.method = uppercase(config.method);                                                                        // 10025
      config.paramSerializer = isString(config.paramSerializer) ?                                                      // 10026
        $injector.get(config.paramSerializer) : config.paramSerializer;                                                // 10027
                                                                                                                       // 10028
      var serverRequest = function(config) {                                                                           // 10029
        var headers = config.headers;                                                                                  // 10030
        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);          // 10031
                                                                                                                       // 10032
        // strip content-type if data is undefined                                                                     // 10033
        if (isUndefined(reqData)) {                                                                                    // 10034
          forEach(headers, function(value, header) {                                                                   // 10035
            if (lowercase(header) === 'content-type') {                                                                // 10036
                delete headers[header];                                                                                // 10037
            }                                                                                                          // 10038
          });                                                                                                          // 10039
        }                                                                                                              // 10040
                                                                                                                       // 10041
        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {                           // 10042
          config.withCredentials = defaults.withCredentials;                                                           // 10043
        }                                                                                                              // 10044
                                                                                                                       // 10045
        // send request                                                                                                // 10046
        return sendReq(config, reqData).then(transformResponse, transformResponse);                                    // 10047
      };                                                                                                               // 10048
                                                                                                                       // 10049
      var chain = [serverRequest, undefined];                                                                          // 10050
      var promise = $q.when(config);                                                                                   // 10051
                                                                                                                       // 10052
      // apply interceptors                                                                                            // 10053
      forEach(reversedInterceptors, function(interceptor) {                                                            // 10054
        if (interceptor.request || interceptor.requestError) {                                                         // 10055
          chain.unshift(interceptor.request, interceptor.requestError);                                                // 10056
        }                                                                                                              // 10057
        if (interceptor.response || interceptor.responseError) {                                                       // 10058
          chain.push(interceptor.response, interceptor.responseError);                                                 // 10059
        }                                                                                                              // 10060
      });                                                                                                              // 10061
                                                                                                                       // 10062
      while (chain.length) {                                                                                           // 10063
        var thenFn = chain.shift();                                                                                    // 10064
        var rejectFn = chain.shift();                                                                                  // 10065
                                                                                                                       // 10066
        promise = promise.then(thenFn, rejectFn);                                                                      // 10067
      }                                                                                                                // 10068
                                                                                                                       // 10069
      promise.success = function(fn) {                                                                                 // 10070
        assertArgFn(fn, 'fn');                                                                                         // 10071
                                                                                                                       // 10072
        promise.then(function(response) {                                                                              // 10073
          fn(response.data, response.status, response.headers, config);                                                // 10074
        });                                                                                                            // 10075
        return promise;                                                                                                // 10076
      };                                                                                                               // 10077
                                                                                                                       // 10078
      promise.error = function(fn) {                                                                                   // 10079
        assertArgFn(fn, 'fn');                                                                                         // 10080
                                                                                                                       // 10081
        promise.then(null, function(response) {                                                                        // 10082
          fn(response.data, response.status, response.headers, config);                                                // 10083
        });                                                                                                            // 10084
        return promise;                                                                                                // 10085
      };                                                                                                               // 10086
                                                                                                                       // 10087
      return promise;                                                                                                  // 10088
                                                                                                                       // 10089
      function transformResponse(response) {                                                                           // 10090
        // make a copy since the response must be cacheable                                                            // 10091
        var resp = extend({}, response);                                                                               // 10092
        if (!response.data) {                                                                                          // 10093
          resp.data = response.data;                                                                                   // 10094
        } else {                                                                                                       // 10095
          resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);       // 10096
        }                                                                                                              // 10097
        return (isSuccess(response.status))                                                                            // 10098
          ? resp                                                                                                       // 10099
          : $q.reject(resp);                                                                                           // 10100
      }                                                                                                                // 10101
                                                                                                                       // 10102
      function executeHeaderFns(headers, config) {                                                                     // 10103
        var headerContent, processedHeaders = {};                                                                      // 10104
                                                                                                                       // 10105
        forEach(headers, function(headerFn, header) {                                                                  // 10106
          if (isFunction(headerFn)) {                                                                                  // 10107
            headerContent = headerFn(config);                                                                          // 10108
            if (headerContent != null) {                                                                               // 10109
              processedHeaders[header] = headerContent;                                                                // 10110
            }                                                                                                          // 10111
          } else {                                                                                                     // 10112
            processedHeaders[header] = headerFn;                                                                       // 10113
          }                                                                                                            // 10114
        });                                                                                                            // 10115
                                                                                                                       // 10116
        return processedHeaders;                                                                                       // 10117
      }                                                                                                                // 10118
                                                                                                                       // 10119
      function mergeHeaders(config) {                                                                                  // 10120
        var defHeaders = defaults.headers,                                                                             // 10121
            reqHeaders = extend({}, config.headers),                                                                   // 10122
            defHeaderName, lowercaseDefHeaderName, reqHeaderName;                                                      // 10123
                                                                                                                       // 10124
        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);                              // 10125
                                                                                                                       // 10126
        // using for-in instead of forEach to avoid unecessary iteration after header has been found                   // 10127
        defaultHeadersIteration:                                                                                       // 10128
        for (defHeaderName in defHeaders) {                                                                            // 10129
          lowercaseDefHeaderName = lowercase(defHeaderName);                                                           // 10130
                                                                                                                       // 10131
          for (reqHeaderName in reqHeaders) {                                                                          // 10132
            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {                                                 // 10133
              continue defaultHeadersIteration;                                                                        // 10134
            }                                                                                                          // 10135
          }                                                                                                            // 10136
                                                                                                                       // 10137
          reqHeaders[defHeaderName] = defHeaders[defHeaderName];                                                       // 10138
        }                                                                                                              // 10139
                                                                                                                       // 10140
        // execute if header value is a function for merged headers                                                    // 10141
        return executeHeaderFns(reqHeaders, shallowCopy(config));                                                      // 10142
      }                                                                                                                // 10143
    }                                                                                                                  // 10144
                                                                                                                       // 10145
    $http.pendingRequests = [];                                                                                        // 10146
                                                                                                                       // 10147
    /**                                                                                                                // 10148
     * @ngdoc method                                                                                                   // 10149
     * @name $http#get                                                                                                 // 10150
     *                                                                                                                 // 10151
     * @description                                                                                                    // 10152
     * Shortcut method to perform `GET` request.                                                                       // 10153
     *                                                                                                                 // 10154
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10155
     * @param {Object=} config Optional configuration object                                                           // 10156
     * @returns {HttpPromise} Future object                                                                            // 10157
     */                                                                                                                // 10158
                                                                                                                       // 10159
    /**                                                                                                                // 10160
     * @ngdoc method                                                                                                   // 10161
     * @name $http#delete                                                                                              // 10162
     *                                                                                                                 // 10163
     * @description                                                                                                    // 10164
     * Shortcut method to perform `DELETE` request.                                                                    // 10165
     *                                                                                                                 // 10166
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10167
     * @param {Object=} config Optional configuration object                                                           // 10168
     * @returns {HttpPromise} Future object                                                                            // 10169
     */                                                                                                                // 10170
                                                                                                                       // 10171
    /**                                                                                                                // 10172
     * @ngdoc method                                                                                                   // 10173
     * @name $http#head                                                                                                // 10174
     *                                                                                                                 // 10175
     * @description                                                                                                    // 10176
     * Shortcut method to perform `HEAD` request.                                                                      // 10177
     *                                                                                                                 // 10178
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10179
     * @param {Object=} config Optional configuration object                                                           // 10180
     * @returns {HttpPromise} Future object                                                                            // 10181
     */                                                                                                                // 10182
                                                                                                                       // 10183
    /**                                                                                                                // 10184
     * @ngdoc method                                                                                                   // 10185
     * @name $http#jsonp                                                                                               // 10186
     *                                                                                                                 // 10187
     * @description                                                                                                    // 10188
     * Shortcut method to perform `JSONP` request.                                                                     // 10189
     *                                                                                                                 // 10190
     * @param {string} url Relative or absolute URL specifying the destination of the request.                         // 10191
     *                     The name of the callback should be the string `JSON_CALLBACK`.                              // 10192
     * @param {Object=} config Optional configuration object                                                           // 10193
     * @returns {HttpPromise} Future object                                                                            // 10194
     */                                                                                                                // 10195
    createShortMethods('get', 'delete', 'head', 'jsonp');                                                              // 10196
                                                                                                                       // 10197
    /**                                                                                                                // 10198
     * @ngdoc method                                                                                                   // 10199
     * @name $http#post                                                                                                // 10200
     *                                                                                                                 // 10201
     * @description                                                                                                    // 10202
     * Shortcut method to perform `POST` request.                                                                      // 10203
     *                                                                                                                 // 10204
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10205
     * @param {*} data Request content                                                                                 // 10206
     * @param {Object=} config Optional configuration object                                                           // 10207
     * @returns {HttpPromise} Future object                                                                            // 10208
     */                                                                                                                // 10209
                                                                                                                       // 10210
    /**                                                                                                                // 10211
     * @ngdoc method                                                                                                   // 10212
     * @name $http#put                                                                                                 // 10213
     *                                                                                                                 // 10214
     * @description                                                                                                    // 10215
     * Shortcut method to perform `PUT` request.                                                                       // 10216
     *                                                                                                                 // 10217
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10218
     * @param {*} data Request content                                                                                 // 10219
     * @param {Object=} config Optional configuration object                                                           // 10220
     * @returns {HttpPromise} Future object                                                                            // 10221
     */                                                                                                                // 10222
                                                                                                                       // 10223
     /**                                                                                                               // 10224
      * @ngdoc method                                                                                                  // 10225
      * @name $http#patch                                                                                              // 10226
      *                                                                                                                // 10227
      * @description                                                                                                   // 10228
      * Shortcut method to perform `PATCH` request.                                                                    // 10229
      *                                                                                                                // 10230
      * @param {string} url Relative or absolute URL specifying the destination of the request                         // 10231
      * @param {*} data Request content                                                                                // 10232
      * @param {Object=} config Optional configuration object                                                          // 10233
      * @returns {HttpPromise} Future object                                                                           // 10234
      */                                                                                                               // 10235
    createShortMethodsWithData('post', 'put', 'patch');                                                                // 10236
                                                                                                                       // 10237
        /**                                                                                                            // 10238
         * @ngdoc property                                                                                             // 10239
         * @name $http#defaults                                                                                        // 10240
         *                                                                                                             // 10241
         * @description                                                                                                // 10242
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of                        // 10243
         * default headers, withCredentials as well as request and response transformations.                           // 10244
         *                                                                                                             // 10245
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.                        // 10246
         */                                                                                                            // 10247
    $http.defaults = defaults;                                                                                         // 10248
                                                                                                                       // 10249
                                                                                                                       // 10250
    return $http;                                                                                                      // 10251
                                                                                                                       // 10252
                                                                                                                       // 10253
    function createShortMethods(names) {                                                                               // 10254
      forEach(arguments, function(name) {                                                                              // 10255
        $http[name] = function(url, config) {                                                                          // 10256
          return $http(extend({}, config || {}, {                                                                      // 10257
            method: name,                                                                                              // 10258
            url: url                                                                                                   // 10259
          }));                                                                                                         // 10260
        };                                                                                                             // 10261
      });                                                                                                              // 10262
    }                                                                                                                  // 10263
                                                                                                                       // 10264
                                                                                                                       // 10265
    function createShortMethodsWithData(name) {                                                                        // 10266
      forEach(arguments, function(name) {                                                                              // 10267
        $http[name] = function(url, data, config) {                                                                    // 10268
          return $http(extend({}, config || {}, {                                                                      // 10269
            method: name,                                                                                              // 10270
            url: url,                                                                                                  // 10271
            data: data                                                                                                 // 10272
          }));                                                                                                         // 10273
        };                                                                                                             // 10274
      });                                                                                                              // 10275
    }                                                                                                                  // 10276
                                                                                                                       // 10277
                                                                                                                       // 10278
    /**                                                                                                                // 10279
     * Makes the request.                                                                                              // 10280
     *                                                                                                                 // 10281
     * !!! ACCESSES CLOSURE VARS:                                                                                      // 10282
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests                                   // 10283
     */                                                                                                                // 10284
    function sendReq(config, reqData) {                                                                                // 10285
      var deferred = $q.defer(),                                                                                       // 10286
          promise = deferred.promise,                                                                                  // 10287
          cache,                                                                                                       // 10288
          cachedResp,                                                                                                  // 10289
          reqHeaders = config.headers,                                                                                 // 10290
          url = buildUrl(config.url, config.paramSerializer(config.params));                                           // 10291
                                                                                                                       // 10292
      $http.pendingRequests.push(config);                                                                              // 10293
      promise.then(removePendingReq, removePendingReq);                                                                // 10294
                                                                                                                       // 10295
                                                                                                                       // 10296
      if ((config.cache || defaults.cache) && config.cache !== false &&                                                // 10297
          (config.method === 'GET' || config.method === 'JSONP')) {                                                    // 10298
        cache = isObject(config.cache) ? config.cache                                                                  // 10299
              : isObject(defaults.cache) ? defaults.cache                                                              // 10300
              : defaultCache;                                                                                          // 10301
      }                                                                                                                // 10302
                                                                                                                       // 10303
      if (cache) {                                                                                                     // 10304
        cachedResp = cache.get(url);                                                                                   // 10305
        if (isDefined(cachedResp)) {                                                                                   // 10306
          if (isPromiseLike(cachedResp)) {                                                                             // 10307
            // cached request has already been sent, but there is no response yet                                      // 10308
            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);                                       // 10309
          } else {                                                                                                     // 10310
            // serving from cache                                                                                      // 10311
            if (isArray(cachedResp)) {                                                                                 // 10312
              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);                 // 10313
            } else {                                                                                                   // 10314
              resolvePromise(cachedResp, 200, {}, 'OK');                                                               // 10315
            }                                                                                                          // 10316
          }                                                                                                            // 10317
        } else {                                                                                                       // 10318
          // put the promise for the non-transformed response into cache as a placeholder                              // 10319
          cache.put(url, promise);                                                                                     // 10320
        }                                                                                                              // 10321
      }                                                                                                                // 10322
                                                                                                                       // 10323
                                                                                                                       // 10324
      // if we won't have the response in cache, set the xsrf headers and                                              // 10325
      // send the request to the backend                                                                               // 10326
      if (isUndefined(cachedResp)) {                                                                                   // 10327
        var xsrfValue = urlIsSameOrigin(config.url)                                                                    // 10328
            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]                                       // 10329
            : undefined;                                                                                               // 10330
        if (xsrfValue) {                                                                                               // 10331
          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;                                  // 10332
        }                                                                                                              // 10333
                                                                                                                       // 10334
        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,                                    // 10335
            config.withCredentials, config.responseType);                                                              // 10336
      }                                                                                                                // 10337
                                                                                                                       // 10338
      return promise;                                                                                                  // 10339
                                                                                                                       // 10340
                                                                                                                       // 10341
      /**                                                                                                              // 10342
       * Callback registered to $httpBackend():                                                                        // 10343
       *  - caches the response if desired                                                                             // 10344
       *  - resolves the raw $http promise                                                                             // 10345
       *  - calls $apply                                                                                               // 10346
       */                                                                                                              // 10347
      function done(status, response, headersString, statusText) {                                                     // 10348
        if (cache) {                                                                                                   // 10349
          if (isSuccess(status)) {                                                                                     // 10350
            cache.put(url, [status, response, parseHeaders(headersString), statusText]);                               // 10351
          } else {                                                                                                     // 10352
            // remove promise from the cache                                                                           // 10353
            cache.remove(url);                                                                                         // 10354
          }                                                                                                            // 10355
        }                                                                                                              // 10356
                                                                                                                       // 10357
        function resolveHttpPromise() {                                                                                // 10358
          resolvePromise(response, status, headersString, statusText);                                                 // 10359
        }                                                                                                              // 10360
                                                                                                                       // 10361
        if (useApplyAsync) {                                                                                           // 10362
          $rootScope.$applyAsync(resolveHttpPromise);                                                                  // 10363
        } else {                                                                                                       // 10364
          resolveHttpPromise();                                                                                        // 10365
          if (!$rootScope.$$phase) $rootScope.$apply();                                                                // 10366
        }                                                                                                              // 10367
      }                                                                                                                // 10368
                                                                                                                       // 10369
                                                                                                                       // 10370
      /**                                                                                                              // 10371
       * Resolves the raw $http promise.                                                                               // 10372
       */                                                                                                              // 10373
      function resolvePromise(response, status, headers, statusText) {                                                 // 10374
        // normalize internal statuses to 0                                                                            // 10375
        status = Math.max(status, 0);                                                                                  // 10376
                                                                                                                       // 10377
        (isSuccess(status) ? deferred.resolve : deferred.reject)({                                                     // 10378
          data: response,                                                                                              // 10379
          status: status,                                                                                              // 10380
          headers: headersGetter(headers),                                                                             // 10381
          config: config,                                                                                              // 10382
          statusText: statusText                                                                                       // 10383
        });                                                                                                            // 10384
      }                                                                                                                // 10385
                                                                                                                       // 10386
      function resolvePromiseWithResult(result) {                                                                      // 10387
        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);                  // 10388
      }                                                                                                                // 10389
                                                                                                                       // 10390
      function removePendingReq() {                                                                                    // 10391
        var idx = $http.pendingRequests.indexOf(config);                                                               // 10392
        if (idx !== -1) $http.pendingRequests.splice(idx, 1);                                                          // 10393
      }                                                                                                                // 10394
    }                                                                                                                  // 10395
                                                                                                                       // 10396
                                                                                                                       // 10397
    function buildUrl(url, serializedParams) {                                                                         // 10398
      if (serializedParams.length > 0) {                                                                               // 10399
        url += ((url.indexOf('?') == -1) ? '?' : '&') + serializedParams;                                              // 10400
      }                                                                                                                // 10401
      return url;                                                                                                      // 10402
    }                                                                                                                  // 10403
  }];                                                                                                                  // 10404
}                                                                                                                      // 10405
                                                                                                                       // 10406
function createXhr() {                                                                                                 // 10407
    return new window.XMLHttpRequest();                                                                                // 10408
}                                                                                                                      // 10409
                                                                                                                       // 10410
/**                                                                                                                    // 10411
 * @ngdoc service                                                                                                      // 10412
 * @name $httpBackend                                                                                                  // 10413
 * @requires $window                                                                                                   // 10414
 * @requires $document                                                                                                 // 10415
 *                                                                                                                     // 10416
 * @description                                                                                                        // 10417
 * HTTP backend used by the {@link ng.$http service} that delegates to                                                 // 10418
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.                                            // 10419
 *                                                                                                                     // 10420
 * You should never need to use this service directly, instead use the higher-level abstractions:                      // 10421
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.                                                   // 10422
 *                                                                                                                     // 10423
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock                                  // 10424
 * $httpBackend} which can be trained with responses.                                                                  // 10425
 */                                                                                                                    // 10426
function $HttpBackendProvider() {                                                                                      // 10427
  this.$get = ['$browser', '$window', '$document', function($browser, $window, $document) {                            // 10428
    return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);            // 10429
  }];                                                                                                                  // 10430
}                                                                                                                      // 10431
                                                                                                                       // 10432
function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {                               // 10433
  // TODO(vojta): fix the signature                                                                                    // 10434
  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {                      // 10435
    $browser.$$incOutstandingRequestCount();                                                                           // 10436
    url = url || $browser.url();                                                                                       // 10437
                                                                                                                       // 10438
    if (lowercase(method) == 'jsonp') {                                                                                // 10439
      var callbackId = '_' + (callbacks.counter++).toString(36);                                                       // 10440
      callbacks[callbackId] = function(data) {                                                                         // 10441
        callbacks[callbackId].data = data;                                                                             // 10442
        callbacks[callbackId].called = true;                                                                           // 10443
      };                                                                                                               // 10444
                                                                                                                       // 10445
      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),                        // 10446
          callbackId, function(status, text) {                                                                         // 10447
        completeRequest(callback, status, callbacks[callbackId].data, "", text);                                       // 10448
        callbacks[callbackId] = noop;                                                                                  // 10449
      });                                                                                                              // 10450
    } else {                                                                                                           // 10451
                                                                                                                       // 10452
      var xhr = createXhr();                                                                                           // 10453
                                                                                                                       // 10454
      xhr.open(method, url, true);                                                                                     // 10455
      forEach(headers, function(value, key) {                                                                          // 10456
        if (isDefined(value)) {                                                                                        // 10457
            xhr.setRequestHeader(key, value);                                                                          // 10458
        }                                                                                                              // 10459
      });                                                                                                              // 10460
                                                                                                                       // 10461
      xhr.onload = function requestLoaded() {                                                                          // 10462
        var statusText = xhr.statusText || '';                                                                         // 10463
                                                                                                                       // 10464
        // responseText is the old-school way of retrieving response (supported by IE8 & 9)                            // 10465
        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)                     // 10466
        var response = ('response' in xhr) ? xhr.response : xhr.responseText;                                          // 10467
                                                                                                                       // 10468
        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)                                                      // 10469
        var status = xhr.status === 1223 ? 204 : xhr.status;                                                           // 10470
                                                                                                                       // 10471
        // fix status code when it is 0 (0 status is undocumented).                                                    // 10472
        // Occurs when accessing file resources or on Android 4.1 stock browser                                        // 10473
        // while retrieving files from application cache.                                                              // 10474
        if (status === 0) {                                                                                            // 10475
          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;                                      // 10476
        }                                                                                                              // 10477
                                                                                                                       // 10478
        completeRequest(callback,                                                                                      // 10479
            status,                                                                                                    // 10480
            response,                                                                                                  // 10481
            xhr.getAllResponseHeaders(),                                                                               // 10482
            statusText);                                                                                               // 10483
      };                                                                                                               // 10484
                                                                                                                       // 10485
      var requestError = function() {                                                                                  // 10486
        // The response is always empty                                                                                // 10487
        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
        completeRequest(callback, -1, null, null, '');                                                                 // 10489
      };                                                                                                               // 10490
                                                                                                                       // 10491
      xhr.onerror = requestError;                                                                                      // 10492
      xhr.onabort = requestError;                                                                                      // 10493
                                                                                                                       // 10494
      if (withCredentials) {                                                                                           // 10495
        xhr.withCredentials = true;                                                                                    // 10496
      }                                                                                                                // 10497
                                                                                                                       // 10498
      if (responseType) {                                                                                              // 10499
        try {                                                                                                          // 10500
          xhr.responseType = responseType;                                                                             // 10501
        } catch (e) {                                                                                                  // 10502
          // WebKit added support for the json responseType value on 09/03/2013                                        // 10503
          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are                          // 10504
          // known to throw when setting the value "json" as the response type. Other older                            // 10505
          // browsers implementing the responseType                                                                    // 10506
          //                                                                                                           // 10507
          // The json response type can be ignored if not supported, because JSON payloads are                         // 10508
          // parsed on the client-side regardless.                                                                     // 10509
          if (responseType !== 'json') {                                                                               // 10510
            throw e;                                                                                                   // 10511
          }                                                                                                            // 10512
        }                                                                                                              // 10513
      }                                                                                                                // 10514
                                                                                                                       // 10515
      xhr.send(post);                                                                                                  // 10516
    }                                                                                                                  // 10517
                                                                                                                       // 10518
    if (timeout > 0) {                                                                                                 // 10519
      var timeoutId = $browserDefer(timeoutRequest, timeout);                                                          // 10520
    } else if (isPromiseLike(timeout)) {                                                                               // 10521
      timeout.then(timeoutRequest);                                                                                    // 10522
    }                                                                                                                  // 10523
                                                                                                                       // 10524
                                                                                                                       // 10525
    function timeoutRequest() {                                                                                        // 10526
      jsonpDone && jsonpDone();                                                                                        // 10527
      xhr && xhr.abort();                                                                                              // 10528
    }                                                                                                                  // 10529
                                                                                                                       // 10530
    function completeRequest(callback, status, response, headersString, statusText) {                                  // 10531
      // cancel timeout and subsequent timeout promise resolution                                                      // 10532
      if (timeoutId !== undefined) {                                                                                   // 10533
        $browserDefer.cancel(timeoutId);                                                                               // 10534
      }                                                                                                                // 10535
      jsonpDone = xhr = null;                                                                                          // 10536
                                                                                                                       // 10537
      callback(status, response, headersString, statusText);                                                           // 10538
      $browser.$$completeOutstandingRequest(noop);                                                                     // 10539
    }                                                                                                                  // 10540
  };                                                                                                                   // 10541
                                                                                                                       // 10542
  function jsonpReq(url, callbackId, done) {                                                                           // 10543
    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:                     // 10544
    // - fetches local scripts via XHR and evals them                                                                  // 10545
    // - adds and immediately removes script elements from the document                                                // 10546
    var script = rawDocument.createElement('script'), callback = null;                                                 // 10547
    script.type = "text/javascript";                                                                                   // 10548
    script.src = url;                                                                                                  // 10549
    script.async = true;                                                                                               // 10550
                                                                                                                       // 10551
    callback = function(event) {                                                                                       // 10552
      removeEventListenerFn(script, "load", callback);                                                                 // 10553
      removeEventListenerFn(script, "error", callback);                                                                // 10554
      rawDocument.body.removeChild(script);                                                                            // 10555
      script = null;                                                                                                   // 10556
      var status = -1;                                                                                                 // 10557
      var text = "unknown";                                                                                            // 10558
                                                                                                                       // 10559
      if (event) {                                                                                                     // 10560
        if (event.type === "load" && !callbacks[callbackId].called) {                                                  // 10561
          event = { type: "error" };                                                                                   // 10562
        }                                                                                                              // 10563
        text = event.type;                                                                                             // 10564
        status = event.type === "error" ? 404 : 200;                                                                   // 10565
      }                                                                                                                // 10566
                                                                                                                       // 10567
      if (done) {                                                                                                      // 10568
        done(status, text);                                                                                            // 10569
      }                                                                                                                // 10570
    };                                                                                                                 // 10571
                                                                                                                       // 10572
    addEventListenerFn(script, "load", callback);                                                                      // 10573
    addEventListenerFn(script, "error", callback);                                                                     // 10574
    rawDocument.body.appendChild(script);                                                                              // 10575
    return callback;                                                                                                   // 10576
  }                                                                                                                    // 10577
}                                                                                                                      // 10578
                                                                                                                       // 10579
var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');                                          // 10580
$interpolateMinErr.throwNoconcat = function(text) {                                                                    // 10581
  throw $interpolateMinErr('noconcat',                                                                                 // 10582
      "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +                                        // 10583
      "interpolations that concatenate multiple expressions when a trusted value is " +                                // 10584
      "required.  See http://docs.angularjs.org/api/ng.$sce", text);                                                   // 10585
};                                                                                                                     // 10586
                                                                                                                       // 10587
$interpolateMinErr.interr = function(text, err) {                                                                      // 10588
  return $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());                            // 10589
};                                                                                                                     // 10590
                                                                                                                       // 10591
/**                                                                                                                    // 10592
 * @ngdoc provider                                                                                                     // 10593
 * @name $interpolateProvider                                                                                          // 10594
 *                                                                                                                     // 10595
 * @description                                                                                                        // 10596
 *                                                                                                                     // 10597
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.                                           // 10598
 *                                                                                                                     // 10599
 * @example                                                                                                            // 10600
<example module="customInterpolationApp">                                                                              // 10601
<file name="index.html">                                                                                               // 10602
<script>                                                                                                               // 10603
  var customInterpolationApp = angular.module('customInterpolationApp', []);                                           // 10604
                                                                                                                       // 10605
  customInterpolationApp.config(function($interpolateProvider) {                                                       // 10606
    $interpolateProvider.startSymbol('//');                                                                            // 10607
    $interpolateProvider.endSymbol('//');                                                                              // 10608
  });                                                                                                                  // 10609
                                                                                                                       // 10610
                                                                                                                       // 10611
  customInterpolationApp.controller('DemoController', function() {                                                     // 10612
      this.label = "This binding is brought you by // interpolation symbols.";                                         // 10613
  });                                                                                                                  // 10614
</script>                                                                                                              // 10615
<div ng-app="App" ng-controller="DemoController as demo">                                                              // 10616
    //demo.label//                                                                                                     // 10617
</div>                                                                                                                 // 10618
</file>                                                                                                                // 10619
<file name="protractor.js" type="protractor">                                                                          // 10620
  it('should interpolate binding with custom symbols', function() {                                                    // 10621
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });                                                                                                                  // 10623
</file>                                                                                                                // 10624
</example>                                                                                                             // 10625
 */                                                                                                                    // 10626
function $InterpolateProvider() {                                                                                      // 10627
  var startSymbol = '{{';                                                                                              // 10628
  var endSymbol = '}}';                                                                                                // 10629
                                                                                                                       // 10630
  /**                                                                                                                  // 10631
   * @ngdoc method                                                                                                     // 10632
   * @name $interpolateProvider#startSymbol                                                                            // 10633
   * @description                                                                                                      // 10634
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.                                // 10635
   *                                                                                                                   // 10636
   * @param {string=} value new value to set the starting symbol to.                                                   // 10637
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.                         // 10638
   */                                                                                                                  // 10639
  this.startSymbol = function(value) {                                                                                 // 10640
    if (value) {                                                                                                       // 10641
      startSymbol = value;                                                                                             // 10642
      return this;                                                                                                     // 10643
    } else {                                                                                                           // 10644
      return startSymbol;                                                                                              // 10645
    }                                                                                                                  // 10646
  };                                                                                                                   // 10647
                                                                                                                       // 10648
  /**                                                                                                                  // 10649
   * @ngdoc method                                                                                                     // 10650
   * @name $interpolateProvider#endSymbol                                                                              // 10651
   * @description                                                                                                      // 10652
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.                              // 10653
   *                                                                                                                   // 10654
   * @param {string=} value new value to set the ending symbol to.                                                     // 10655
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.                         // 10656
   */                                                                                                                  // 10657
  this.endSymbol = function(value) {                                                                                   // 10658
    if (value) {                                                                                                       // 10659
      endSymbol = value;                                                                                               // 10660
      return this;                                                                                                     // 10661
    } else {                                                                                                           // 10662
      return endSymbol;                                                                                                // 10663
    }                                                                                                                  // 10664
  };                                                                                                                   // 10665
                                                                                                                       // 10666
                                                                                                                       // 10667
  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {                      // 10668
    var startSymbolLength = startSymbol.length,                                                                        // 10669
        endSymbolLength = endSymbol.length,                                                                            // 10670
        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),                                       // 10671
        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');                                           // 10672
                                                                                                                       // 10673
    function escape(ch) {                                                                                              // 10674
      return '\\\\\\' + ch;                                                                                            // 10675
    }                                                                                                                  // 10676
                                                                                                                       // 10677
    function unescapeText(text) {                                                                                      // 10678
      return text.replace(escapedStartRegexp, startSymbol).                                                            // 10679
        replace(escapedEndRegexp, endSymbol);                                                                          // 10680
    }                                                                                                                  // 10681
                                                                                                                       // 10682
    function stringify(value) {                                                                                        // 10683
      if (value == null) { // null || undefined                                                                        // 10684
        return '';                                                                                                     // 10685
      }                                                                                                                // 10686
      switch (typeof value) {                                                                                          // 10687
        case 'string':                                                                                                 // 10688
          break;                                                                                                       // 10689
        case 'number':                                                                                                 // 10690
          value = '' + value;                                                                                          // 10691
          break;                                                                                                       // 10692
        default:                                                                                                       // 10693
          value = toJson(value);                                                                                       // 10694
      }                                                                                                                // 10695
                                                                                                                       // 10696
      return value;                                                                                                    // 10697
    }                                                                                                                  // 10698
                                                                                                                       // 10699
    /**                                                                                                                // 10700
     * @ngdoc service                                                                                                  // 10701
     * @name $interpolate                                                                                              // 10702
     * @kind function                                                                                                  // 10703
     *                                                                                                                 // 10704
     * @requires $parse                                                                                                // 10705
     * @requires $sce                                                                                                  // 10706
     *                                                                                                                 // 10707
     * @description                                                                                                    // 10708
     *                                                                                                                 // 10709
     * Compiles a string with markup into an interpolation function. This service is used by the                       // 10710
     * HTML {@link ng.$compile $compile} service for data binding. See                                                 // 10711
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the                                        // 10712
     * interpolation markup.                                                                                           // 10713
     *                                                                                                                 // 10714
     *                                                                                                                 // 10715
     * ```js                                                                                                           // 10716
     *   var $interpolate = ...; // injected                                                                           // 10717
     *   var exp = $interpolate('Hello {{name | uppercase}}!');                                                        // 10718
     *   expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');                                                       // 10719
     * ```                                                                                                             // 10720
     *                                                                                                                 // 10721
     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is                          // 10722
     * `true`, the interpolation function will return `undefined` unless all embedded expressions                      // 10723
     * evaluate to a value other than `undefined`.                                                                     // 10724
     *                                                                                                                 // 10725
     * ```js                                                                                                           // 10726
     *   var $interpolate = ...; // injected                                                                           // 10727
     *   var context = {greeting: 'Hello', name: undefined };                                                          // 10728
     *                                                                                                                 // 10729
     *   // default "forgiving" mode                                                                                   // 10730
     *   var exp = $interpolate('{{greeting}} {{name}}!');                                                             // 10731
     *   expect(exp(context)).toEqual('Hello !');                                                                      // 10732
     *                                                                                                                 // 10733
     *   // "allOrNothing" mode                                                                                        // 10734
     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);                                              // 10735
     *   expect(exp(context)).toBeUndefined();                                                                         // 10736
     *   context.name = 'Angular';                                                                                     // 10737
     *   expect(exp(context)).toEqual('Hello Angular!');                                                               // 10738
     * ```                                                                                                             // 10739
     *                                                                                                                 // 10740
     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.                      // 10741
     *                                                                                                                 // 10742
     * ####Escaped Interpolation                                                                                       // 10743
     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers                     // 10744
     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).                 // 10745
     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression                 // 10746
     * or binding.                                                                                                     // 10747
     *                                                                                                                 // 10748
     * This enables web-servers to prevent script injection attacks and defacing attacks, to some                      // 10749
     * degree, while also enabling code examples to work without relying on the                                        // 10750
     * {@link ng.directive:ngNonBindable ngNonBindable} directive.                                                     // 10751
     *                                                                                                                 // 10752
     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,                  // 10753
     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all                // 10754
     * interpolation start/end markers with their escaped counterparts.**                                              // 10755
     *                                                                                                                 // 10756
     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered               // 10757
     * output when the $interpolate service processes the text. So, for HTML elements interpolated                     // 10758
     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter              // 10759
     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,               // 10760
     * this is typically useful only when user-data is used in rendering a template from the server, or                // 10761
     * when otherwise untrusted data is used by a directive.                                                           // 10762
     *                                                                                                                 // 10763
     * <example>                                                                                                       // 10764
     *  <file name="index.html">                                                                                       // 10765
     *    <div ng-init="username='A user'">                                                                            // 10766
     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}                  // 10767
     *        </p>                                                                                                     // 10768
     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the                             // 10769
     *        application, but fails to accomplish their task, because the server has correctly                        // 10770
     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)                      // 10771
     *        characters.</p>                                                                                          // 10772
     *      <p>Instead, the result of the attempted script injection is visible, and can be removed                    // 10773
     *        from the database by an administrator.</p>                                                               // 10774
     *    </div>                                                                                                       // 10775
     *  </file>                                                                                                        // 10776
     * </example>                                                                                                      // 10777
     *                                                                                                                 // 10778
     * @param {string} text The text with markup to interpolate.                                                       // 10779
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have                     // 10780
     *    embedded expression in order to return an interpolation function. Strings with no                            // 10781
     *    embedded expression will return null for the interpolation function.                                         // 10782
     * @param {string=} trustedContext when provided, the returned function passes the interpolated                    // 10783
     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,                                 // 10784
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that                        // 10785
     *    provides Strict Contextual Escaping for details.                                                             // 10786
     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined                          // 10787
     *    unless all embedded expressions evaluate to a value other than `undefined`.                                  // 10788
     * @returns {function(context)} an interpolation function which is used to compute the                             // 10789
     *    interpolated string. The function has these parameters:                                                      // 10790
     *                                                                                                                 // 10791
     * - `context`: evaluation context for all expressions embedded in the interpolated text                           // 10792
     */                                                                                                                // 10793
    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {                                    // 10794
      allOrNothing = !!allOrNothing;                                                                                   // 10795
      var startIndex,                                                                                                  // 10796
          endIndex,                                                                                                    // 10797
          index = 0,                                                                                                   // 10798
          expressions = [],                                                                                            // 10799
          parseFns = [],                                                                                               // 10800
          textLength = text.length,                                                                                    // 10801
          exp,                                                                                                         // 10802
          concat = [],                                                                                                 // 10803
          expressionPositions = [];                                                                                    // 10804
                                                                                                                       // 10805
      while (index < textLength) {                                                                                     // 10806
        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&                                                 // 10807
             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {                           // 10808
          if (index !== startIndex) {                                                                                  // 10809
            concat.push(unescapeText(text.substring(index, startIndex)));                                              // 10810
          }                                                                                                            // 10811
          exp = text.substring(startIndex + startSymbolLength, endIndex);                                              // 10812
          expressions.push(exp);                                                                                       // 10813
          parseFns.push($parse(exp, parseStringifyInterceptor));                                                       // 10814
          index = endIndex + endSymbolLength;                                                                          // 10815
          expressionPositions.push(concat.length);                                                                     // 10816
          concat.push('');                                                                                             // 10817
        } else {                                                                                                       // 10818
          // we did not find an interpolation, so we have to add the remainder to the separators array                 // 10819
          if (index !== textLength) {                                                                                  // 10820
            concat.push(unescapeText(text.substring(index)));                                                          // 10821
          }                                                                                                            // 10822
          break;                                                                                                       // 10823
        }                                                                                                              // 10824
      }                                                                                                                // 10825
                                                                                                                       // 10826
      // Concatenating expressions makes it hard to reason about whether some combination of                           // 10827
      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a                      // 10828
      // single expression be used for iframe[src], object[src], etc., we ensure that the value                        // 10829
      // that's used is assigned or constructed by some JS code somewhere that is more testable or                     // 10830
      // make it obvious that you bound the value to some user controlled value.  This helps reduce                    // 10831
      // the load when auditing for XSS issues.                                                                        // 10832
      if (trustedContext && concat.length > 1) {                                                                       // 10833
          $interpolateMinErr.throwNoconcat(text);                                                                      // 10834
      }                                                                                                                // 10835
                                                                                                                       // 10836
      if (!mustHaveExpression || expressions.length) {                                                                 // 10837
        var compute = function(values) {                                                                               // 10838
          for (var i = 0, ii = expressions.length; i < ii; i++) {                                                      // 10839
            if (allOrNothing && isUndefined(values[i])) return;                                                        // 10840
            concat[expressionPositions[i]] = values[i];                                                                // 10841
          }                                                                                                            // 10842
          return concat.join('');                                                                                      // 10843
        };                                                                                                             // 10844
                                                                                                                       // 10845
        var getValue = function(value) {                                                                               // 10846
          return trustedContext ?                                                                                      // 10847
            $sce.getTrusted(trustedContext, value) :                                                                   // 10848
            $sce.valueOf(value);                                                                                       // 10849
        };                                                                                                             // 10850
                                                                                                                       // 10851
        return extend(function interpolationFn(context) {                                                              // 10852
            var i = 0;                                                                                                 // 10853
            var ii = expressions.length;                                                                               // 10854
            var values = new Array(ii);                                                                                // 10855
                                                                                                                       // 10856
            try {                                                                                                      // 10857
              for (; i < ii; i++) {                                                                                    // 10858
                values[i] = parseFns[i](context);                                                                      // 10859
              }                                                                                                        // 10860
                                                                                                                       // 10861
              return compute(values);                                                                                  // 10862
            } catch (err) {                                                                                            // 10863
              $exceptionHandler($interpolateMinErr.interr(text, err));                                                 // 10864
            }                                                                                                          // 10865
                                                                                                                       // 10866
          }, {                                                                                                         // 10867
          // all of these properties are undocumented for now                                                          // 10868
          exp: text, //just for compatibility with regular watchers created via $watch                                 // 10869
          expressions: expressions,                                                                                    // 10870
          $$watchDelegate: function(scope, listener) {                                                                 // 10871
            var lastValue;                                                                                             // 10872
            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {                      // 10873
              var currValue = compute(values);                                                                         // 10874
              if (isFunction(listener)) {                                                                              // 10875
                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);                   // 10876
              }                                                                                                        // 10877
              lastValue = currValue;                                                                                   // 10878
            });                                                                                                        // 10879
          }                                                                                                            // 10880
        });                                                                                                            // 10881
      }                                                                                                                // 10882
                                                                                                                       // 10883
      function parseStringifyInterceptor(value) {                                                                      // 10884
        try {                                                                                                          // 10885
          value = getValue(value);                                                                                     // 10886
          return allOrNothing && !isDefined(value) ? value : stringify(value);                                         // 10887
        } catch (err) {                                                                                                // 10888
          $exceptionHandler($interpolateMinErr.interr(text, err));                                                     // 10889
        }                                                                                                              // 10890
      }                                                                                                                // 10891
    }                                                                                                                  // 10892
                                                                                                                       // 10893
                                                                                                                       // 10894
    /**                                                                                                                // 10895
     * @ngdoc method                                                                                                   // 10896
     * @name $interpolate#startSymbol                                                                                  // 10897
     * @description                                                                                                    // 10898
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.                          // 10899
     *                                                                                                                 // 10900
     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change                    // 10901
     * the symbol.                                                                                                     // 10902
     *                                                                                                                 // 10903
     * @returns {string} start symbol.                                                                                 // 10904
     */                                                                                                                // 10905
    $interpolate.startSymbol = function() {                                                                            // 10906
      return startSymbol;                                                                                              // 10907
    };                                                                                                                 // 10908
                                                                                                                       // 10909
                                                                                                                       // 10910
    /**                                                                                                                // 10911
     * @ngdoc method                                                                                                   // 10912
     * @name $interpolate#endSymbol                                                                                    // 10913
     * @description                                                                                                    // 10914
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.                            // 10915
     *                                                                                                                 // 10916
     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change                        // 10917
     * the symbol.                                                                                                     // 10918
     *                                                                                                                 // 10919
     * @returns {string} end symbol.                                                                                   // 10920
     */                                                                                                                // 10921
    $interpolate.endSymbol = function() {                                                                              // 10922
      return endSymbol;                                                                                                // 10923
    };                                                                                                                 // 10924
                                                                                                                       // 10925
    return $interpolate;                                                                                               // 10926
  }];                                                                                                                  // 10927
}                                                                                                                      // 10928
                                                                                                                       // 10929
function $IntervalProvider() {                                                                                         // 10930
  this.$get = ['$rootScope', '$window', '$q', '$$q',                                                                   // 10931
       function($rootScope,   $window,   $q,   $$q) {                                                                  // 10932
    var intervals = {};                                                                                                // 10933
                                                                                                                       // 10934
                                                                                                                       // 10935
     /**                                                                                                               // 10936
      * @ngdoc service                                                                                                 // 10937
      * @name $interval                                                                                                // 10938
      *                                                                                                                // 10939
      * @description                                                                                                   // 10940
      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`                        // 10941
      * milliseconds.                                                                                                  // 10942
      *                                                                                                                // 10943
      * The return value of registering an interval function is a promise. This promise will be                        // 10944
      * notified upon each tick of the interval, and will be resolved after `count` iterations, or                     // 10945
      * run indefinitely if `count` is not defined. The value of the notification will be the                          // 10946
      * number of iterations that have run.                                                                            // 10947
      * To cancel an interval, call `$interval.cancel(promise)`.                                                       // 10948
      *                                                                                                                // 10949
      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to                               // 10950
      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that                       // 10951
      * time.                                                                                                          // 10952
      *                                                                                                                // 10953
      * <div class="alert alert-warning">                                                                              // 10954
      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished                 // 10955
      * with them.  In particular they are not automatically destroyed when a controller's scope or a                  // 10956
      * directive's element are destroyed.                                                                             // 10957
      * You should take this into consideration and make sure to always cancel the interval at the                     // 10958
      * appropriate moment.  See the example below for more details on how and when to do this.                        // 10959
      * </div>                                                                                                         // 10960
      *                                                                                                                // 10961
      * @param {function()} fn A function that should be called repeatedly.                                            // 10962
      * @param {number} delay Number of milliseconds between each function call.                                       // 10963
      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat                            // 10964
      *   indefinitely.                                                                                                // 10965
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise                   // 10966
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.                                 // 10967
      * @param {...*=} Pass additional parameters to the executed function.                                            // 10968
      * @returns {promise} A promise which will be notified on each iteration.                                         // 10969
      *                                                                                                                // 10970
      * @example                                                                                                       // 10971
      * <example module="intervalExample">                                                                             // 10972
      * <file name="index.html">                                                                                       // 10973
      *   <script>                                                                                                     // 10974
      *     angular.module('intervalExample', [])                                                                      // 10975
      *       .controller('ExampleController', ['$scope', '$interval',                                                 // 10976
      *         function($scope, $interval) {                                                                          // 10977
      *           $scope.format = 'M/d/yy h:mm:ss a';                                                                  // 10978
      *           $scope.blood_1 = 100;                                                                                // 10979
      *           $scope.blood_2 = 120;                                                                                // 10980
      *                                                                                                                // 10981
      *           var stop;                                                                                            // 10982
      *           $scope.fight = function() {                                                                          // 10983
      *             // Don't start a new fight if we are already fighting                                              // 10984
      *             if ( angular.isDefined(stop) ) return;                                                             // 10985
      *                                                                                                                // 10986
      *             stop = $interval(function() {                                                                      // 10987
      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {                                                  // 10988
      *                 $scope.blood_1 = $scope.blood_1 - 3;                                                           // 10989
      *                 $scope.blood_2 = $scope.blood_2 - 4;                                                           // 10990
      *               } else {                                                                                         // 10991
      *                 $scope.stopFight();                                                                            // 10992
      *               }                                                                                                // 10993
      *             }, 100);                                                                                           // 10994
      *           };                                                                                                   // 10995
      *                                                                                                                // 10996
      *           $scope.stopFight = function() {                                                                      // 10997
      *             if (angular.isDefined(stop)) {                                                                     // 10998
      *               $interval.cancel(stop);                                                                          // 10999
      *               stop = undefined;                                                                                // 11000
      *             }                                                                                                  // 11001
      *           };                                                                                                   // 11002
      *                                                                                                                // 11003
      *           $scope.resetFight = function() {                                                                     // 11004
      *             $scope.blood_1 = 100;                                                                              // 11005
      *             $scope.blood_2 = 120;                                                                              // 11006
      *           };                                                                                                   // 11007
      *                                                                                                                // 11008
      *           $scope.$on('$destroy', function() {                                                                  // 11009
      *             // Make sure that the interval is destroyed too                                                    // 11010
      *             $scope.stopFight();                                                                                // 11011
      *           });                                                                                                  // 11012
      *         }])                                                                                                    // 11013
      *       // Register the 'myCurrentTime' directive factory method.                                                // 11014
      *       // We inject $interval and dateFilter service since the factory method is DI.                            // 11015
      *       .directive('myCurrentTime', ['$interval', 'dateFilter',                                                  // 11016
      *         function($interval, dateFilter) {                                                                      // 11017
      *           // return the directive link function. (compile function not needed)                                 // 11018
      *           return function(scope, element, attrs) {                                                             // 11019
      *             var format,  // date format                                                                        // 11020
      *                 stopTime; // so that we can cancel the time updates                                            // 11021
      *                                                                                                                // 11022
      *             // used to update the UI                                                                           // 11023
      *             function updateTime() {                                                                            // 11024
      *               element.text(dateFilter(new Date(), format));                                                    // 11025
      *             }                                                                                                  // 11026
      *                                                                                                                // 11027
      *             // watch the expression, and update the UI on change.                                              // 11028
      *             scope.$watch(attrs.myCurrentTime, function(value) {                                                // 11029
      *               format = value;                                                                                  // 11030
      *               updateTime();                                                                                    // 11031
      *             });                                                                                                // 11032
      *                                                                                                                // 11033
      *             stopTime = $interval(updateTime, 1000);                                                            // 11034
      *                                                                                                                // 11035
      *             // listen on DOM destroy (removal) event, and cancel the next UI update                            // 11036
      *             // to prevent updating time after the DOM element was removed.                                     // 11037
      *             element.on('$destroy', function() {                                                                // 11038
      *               $interval.cancel(stopTime);                                                                      // 11039
      *             });                                                                                                // 11040
      *           }                                                                                                    // 11041
      *         }]);                                                                                                   // 11042
      *   </script>                                                                                                    // 11043
      *                                                                                                                // 11044
      *   <div>                                                                                                        // 11045
      *     <div ng-controller="ExampleController">                                                                    // 11046
      *       <label>Date format: <input ng-model="format"></label> <hr/>                                              // 11047
      *       Current time is: <span my-current-time="format"></span>                                                  // 11048
      *       <hr/>                                                                                                    // 11049
      *       Blood 1 : <font color='red'>{{blood_1}}</font>                                                           // 11050
      *       Blood 2 : <font color='red'>{{blood_2}}</font>                                                           // 11051
      *       <button type="button" data-ng-click="fight()">Fight</button>                                             // 11052
      *       <button type="button" data-ng-click="stopFight()">StopFight</button>                                     // 11053
      *       <button type="button" data-ng-click="resetFight()">resetFight</button>                                   // 11054
      *     </div>                                                                                                     // 11055
      *   </div>                                                                                                       // 11056
      *                                                                                                                // 11057
      * </file>                                                                                                        // 11058
      * </example>                                                                                                     // 11059
      */                                                                                                               // 11060
    function interval(fn, delay, count, invokeApply) {                                                                 // 11061
      var hasParams = arguments.length > 4,                                                                            // 11062
          args = hasParams ? sliceArgs(arguments, 4) : [],                                                             // 11063
          setInterval = $window.setInterval,                                                                           // 11064
          clearInterval = $window.clearInterval,                                                                       // 11065
          iteration = 0,                                                                                               // 11066
          skipApply = (isDefined(invokeApply) && !invokeApply),                                                        // 11067
          deferred = (skipApply ? $$q : $q).defer(),                                                                   // 11068
          promise = deferred.promise;                                                                                  // 11069
                                                                                                                       // 11070
      count = isDefined(count) ? count : 0;                                                                            // 11071
                                                                                                                       // 11072
      promise.then(null, null, (!hasParams) ? fn : function() {                                                        // 11073
        fn.apply(null, args);                                                                                          // 11074
      });                                                                                                              // 11075
                                                                                                                       // 11076
      promise.$$intervalId = setInterval(function tick() {                                                             // 11077
        deferred.notify(iteration++);                                                                                  // 11078
                                                                                                                       // 11079
        if (count > 0 && iteration >= count) {                                                                         // 11080
          deferred.resolve(iteration);                                                                                 // 11081
          clearInterval(promise.$$intervalId);                                                                         // 11082
          delete intervals[promise.$$intervalId];                                                                      // 11083
        }                                                                                                              // 11084
                                                                                                                       // 11085
        if (!skipApply) $rootScope.$apply();                                                                           // 11086
                                                                                                                       // 11087
      }, delay);                                                                                                       // 11088
                                                                                                                       // 11089
      intervals[promise.$$intervalId] = deferred;                                                                      // 11090
                                                                                                                       // 11091
      return promise;                                                                                                  // 11092
    }                                                                                                                  // 11093
                                                                                                                       // 11094
                                                                                                                       // 11095
     /**                                                                                                               // 11096
      * @ngdoc method                                                                                                  // 11097
      * @name $interval#cancel                                                                                         // 11098
      *                                                                                                                // 11099
      * @description                                                                                                   // 11100
      * Cancels a task associated with the `promise`.                                                                  // 11101
      *                                                                                                                // 11102
      * @param {promise} promise returned by the `$interval` function.                                                 // 11103
      * @returns {boolean} Returns `true` if the task was successfully canceled.                                       // 11104
      */                                                                                                               // 11105
    interval.cancel = function(promise) {                                                                              // 11106
      if (promise && promise.$$intervalId in intervals) {                                                              // 11107
        intervals[promise.$$intervalId].reject('canceled');                                                            // 11108
        $window.clearInterval(promise.$$intervalId);                                                                   // 11109
        delete intervals[promise.$$intervalId];                                                                        // 11110
        return true;                                                                                                   // 11111
      }                                                                                                                // 11112
      return false;                                                                                                    // 11113
    };                                                                                                                 // 11114
                                                                                                                       // 11115
    return interval;                                                                                                   // 11116
  }];                                                                                                                  // 11117
}                                                                                                                      // 11118
                                                                                                                       // 11119
/**                                                                                                                    // 11120
 * @ngdoc service                                                                                                      // 11121
 * @name $locale                                                                                                       // 11122
 *                                                                                                                     // 11123
 * @description                                                                                                        // 11124
 * $locale service provides localization rules for various Angular components. As of right now the                     // 11125
 * only public api is:                                                                                                 // 11126
 *                                                                                                                     // 11127
 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)                                  // 11128
 */                                                                                                                    // 11129
function $LocaleProvider() {                                                                                           // 11130
  this.$get = function() {                                                                                             // 11131
    return {                                                                                                           // 11132
      id: 'en-us',                                                                                                     // 11133
                                                                                                                       // 11134
      NUMBER_FORMATS: {                                                                                                // 11135
        DECIMAL_SEP: '.',                                                                                              // 11136
        GROUP_SEP: ',',                                                                                                // 11137
        PATTERNS: [                                                                                                    // 11138
          { // Decimal Pattern                                                                                         // 11139
            minInt: 1,                                                                                                 // 11140
            minFrac: 0,                                                                                                // 11141
            maxFrac: 3,                                                                                                // 11142
            posPre: '',                                                                                                // 11143
            posSuf: '',                                                                                                // 11144
            negPre: '-',                                                                                               // 11145
            negSuf: '',                                                                                                // 11146
            gSize: 3,                                                                                                  // 11147
            lgSize: 3                                                                                                  // 11148
          },{ //Currency Pattern                                                                                       // 11149
            minInt: 1,                                                                                                 // 11150
            minFrac: 2,                                                                                                // 11151
            maxFrac: 2,                                                                                                // 11152
            posPre: '\u00A4',                                                                                          // 11153
            posSuf: '',                                                                                                // 11154
            negPre: '(\u00A4',                                                                                         // 11155
            negSuf: ')',                                                                                               // 11156
            gSize: 3,                                                                                                  // 11157
            lgSize: 3                                                                                                  // 11158
          }                                                                                                            // 11159
        ],                                                                                                             // 11160
        CURRENCY_SYM: '$'                                                                                              // 11161
      },                                                                                                               // 11162
                                                                                                                       // 11163
      DATETIME_FORMATS: {                                                                                              // 11164
        MONTH:                                                                                                         // 11165
            'January,February,March,April,May,June,July,August,September,October,November,December'                    // 11166
            .split(','),                                                                                               // 11167
        SHORTMONTH:  'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),                                     // 11168
        DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),                                    // 11169
        SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),                                                            // 11170
        AMPMS: ['AM','PM'],                                                                                            // 11171
        medium: 'MMM d, y h:mm:ss a',                                                                                  // 11172
        'short': 'M/d/yy h:mm a',                                                                                      // 11173
        fullDate: 'EEEE, MMMM d, y',                                                                                   // 11174
        longDate: 'MMMM d, y',                                                                                         // 11175
        mediumDate: 'MMM d, y',                                                                                        // 11176
        shortDate: 'M/d/yy',                                                                                           // 11177
        mediumTime: 'h:mm:ss a',                                                                                       // 11178
        shortTime: 'h:mm a',                                                                                           // 11179
        ERANAMES: [                                                                                                    // 11180
          "Before Christ",                                                                                             // 11181
          "Anno Domini"                                                                                                // 11182
        ],                                                                                                             // 11183
        ERAS: [                                                                                                        // 11184
          "BC",                                                                                                        // 11185
          "AD"                                                                                                         // 11186
        ]                                                                                                              // 11187
      },                                                                                                               // 11188
                                                                                                                       // 11189
      pluralCat: function(num) {                                                                                       // 11190
        if (num === 1) {                                                                                               // 11191
          return 'one';                                                                                                // 11192
        }                                                                                                              // 11193
        return 'other';                                                                                                // 11194
      }                                                                                                                // 11195
    };                                                                                                                 // 11196
  };                                                                                                                   // 11197
}                                                                                                                      // 11198
                                                                                                                       // 11199
var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,                                                                    // 11200
    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};                                                             // 11201
var $locationMinErr = minErr('$location');                                                                             // 11202
                                                                                                                       // 11203
                                                                                                                       // 11204
/**                                                                                                                    // 11205
 * Encode path using encodeUriSegment, ignoring forward slashes                                                        // 11206
 *                                                                                                                     // 11207
 * @param {string} path Path to encode                                                                                 // 11208
 * @returns {string}                                                                                                   // 11209
 */                                                                                                                    // 11210
function encodePath(path) {                                                                                            // 11211
  var segments = path.split('/'),                                                                                      // 11212
      i = segments.length;                                                                                             // 11213
                                                                                                                       // 11214
  while (i--) {                                                                                                        // 11215
    segments[i] = encodeUriSegment(segments[i]);                                                                       // 11216
  }                                                                                                                    // 11217
                                                                                                                       // 11218
  return segments.join('/');                                                                                           // 11219
}                                                                                                                      // 11220
                                                                                                                       // 11221
function parseAbsoluteUrl(absoluteUrl, locationObj) {                                                                  // 11222
  var parsedUrl = urlResolve(absoluteUrl);                                                                             // 11223
                                                                                                                       // 11224
  locationObj.$$protocol = parsedUrl.protocol;                                                                         // 11225
  locationObj.$$host = parsedUrl.hostname;                                                                             // 11226
  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;                             // 11227
}                                                                                                                      // 11228
                                                                                                                       // 11229
                                                                                                                       // 11230
function parseAppUrl(relativeUrl, locationObj) {                                                                       // 11231
  var prefixed = (relativeUrl.charAt(0) !== '/');                                                                      // 11232
  if (prefixed) {                                                                                                      // 11233
    relativeUrl = '/' + relativeUrl;                                                                                   // 11234
  }                                                                                                                    // 11235
  var match = urlResolve(relativeUrl);                                                                                 // 11236
  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?                               // 11237
      match.pathname.substring(1) : match.pathname);                                                                   // 11238
  locationObj.$$search = parseKeyValue(match.search);                                                                  // 11239
  locationObj.$$hash = decodeURIComponent(match.hash);                                                                 // 11240
                                                                                                                       // 11241
  // make sure path starts with '/';                                                                                   // 11242
  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {                                                     // 11243
    locationObj.$$path = '/' + locationObj.$$path;                                                                     // 11244
  }                                                                                                                    // 11245
}                                                                                                                      // 11246
                                                                                                                       // 11247
                                                                                                                       // 11248
/**                                                                                                                    // 11249
 *                                                                                                                     // 11250
 * @param {string} begin                                                                                               // 11251
 * @param {string} whole                                                                                               // 11252
 * @returns {string} returns text from whole after begin or undefined if it does not begin with                        // 11253
 *                   expected string.                                                                                  // 11254
 */                                                                                                                    // 11255
function beginsWith(begin, whole) {                                                                                    // 11256
  if (whole.indexOf(begin) === 0) {                                                                                    // 11257
    return whole.substr(begin.length);                                                                                 // 11258
  }                                                                                                                    // 11259
}                                                                                                                      // 11260
                                                                                                                       // 11261
                                                                                                                       // 11262
function stripHash(url) {                                                                                              // 11263
  var index = url.indexOf('#');                                                                                        // 11264
  return index == -1 ? url : url.substr(0, index);                                                                     // 11265
}                                                                                                                      // 11266
                                                                                                                       // 11267
function trimEmptyHash(url) {                                                                                          // 11268
  return url.replace(/(#.+)|#$/, '$1');                                                                                // 11269
}                                                                                                                      // 11270
                                                                                                                       // 11271
                                                                                                                       // 11272
function stripFile(url) {                                                                                              // 11273
  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);                                                           // 11274
}                                                                                                                      // 11275
                                                                                                                       // 11276
/* return the server only (scheme://host:port) */                                                                      // 11277
function serverBase(url) {                                                                                             // 11278
  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));                                                    // 11279
}                                                                                                                      // 11280
                                                                                                                       // 11281
                                                                                                                       // 11282
/**                                                                                                                    // 11283
 * LocationHtml5Url represents an url                                                                                  // 11284
 * This object is exposed as $location service when HTML5 mode is enabled and supported                                // 11285
 *                                                                                                                     // 11286
 * @constructor                                                                                                        // 11287
 * @param {string} appBase application base URL                                                                        // 11288
 * @param {string} basePrefix url path prefix                                                                          // 11289
 */                                                                                                                    // 11290
function LocationHtml5Url(appBase, basePrefix) {                                                                       // 11291
  this.$$html5 = true;                                                                                                 // 11292
  basePrefix = basePrefix || '';                                                                                       // 11293
  var appBaseNoFile = stripFile(appBase);                                                                              // 11294
  parseAbsoluteUrl(appBase, this);                                                                                     // 11295
                                                                                                                       // 11296
                                                                                                                       // 11297
  /**                                                                                                                  // 11298
   * Parse given html5 (regular) url string into properties                                                            // 11299
   * @param {string} url HTML5 url                                                                                     // 11300
   * @private                                                                                                          // 11301
   */                                                                                                                  // 11302
  this.$$parse = function(url) {                                                                                       // 11303
    var pathUrl = beginsWith(appBaseNoFile, url);                                                                      // 11304
    if (!isString(pathUrl)) {                                                                                          // 11305
      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,                          // 11306
          appBaseNoFile);                                                                                              // 11307
    }                                                                                                                  // 11308
                                                                                                                       // 11309
    parseAppUrl(pathUrl, this);                                                                                        // 11310
                                                                                                                       // 11311
    if (!this.$$path) {                                                                                                // 11312
      this.$$path = '/';                                                                                               // 11313
    }                                                                                                                  // 11314
                                                                                                                       // 11315
    this.$$compose();                                                                                                  // 11316
  };                                                                                                                   // 11317
                                                                                                                       // 11318
  /**                                                                                                                  // 11319
   * Compose url and update `absUrl` property                                                                          // 11320
   * @private                                                                                                          // 11321
   */                                                                                                                  // 11322
  this.$$compose = function() {                                                                                        // 11323
    var search = toKeyValue(this.$$search),                                                                            // 11324
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11325
                                                                                                                       // 11326
    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11327
    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'                                  // 11328
  };                                                                                                                   // 11329
                                                                                                                       // 11330
  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11331
    if (relHref && relHref[0] === '#') {                                                                               // 11332
      // special case for links to hash fragments:                                                                     // 11333
      // keep the old url and only replace the hash fragment                                                           // 11334
      this.hash(relHref.slice(1));                                                                                     // 11335
      return true;                                                                                                     // 11336
    }                                                                                                                  // 11337
    var appUrl, prevAppUrl;                                                                                            // 11338
    var rewrittenUrl;                                                                                                  // 11339
                                                                                                                       // 11340
    if ((appUrl = beginsWith(appBase, url)) !== undefined) {                                                           // 11341
      prevAppUrl = appUrl;                                                                                             // 11342
      if ((appUrl = beginsWith(basePrefix, appUrl)) !== undefined) {                                                   // 11343
        rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);                                            // 11344
      } else {                                                                                                         // 11345
        rewrittenUrl = appBase + prevAppUrl;                                                                           // 11346
      }                                                                                                                // 11347
    } else if ((appUrl = beginsWith(appBaseNoFile, url)) !== undefined) {                                              // 11348
      rewrittenUrl = appBaseNoFile + appUrl;                                                                           // 11349
    } else if (appBaseNoFile == url + '/') {                                                                           // 11350
      rewrittenUrl = appBaseNoFile;                                                                                    // 11351
    }                                                                                                                  // 11352
    if (rewrittenUrl) {                                                                                                // 11353
      this.$$parse(rewrittenUrl);                                                                                      // 11354
    }                                                                                                                  // 11355
    return !!rewrittenUrl;                                                                                             // 11356
  };                                                                                                                   // 11357
}                                                                                                                      // 11358
                                                                                                                       // 11359
                                                                                                                       // 11360
/**                                                                                                                    // 11361
 * LocationHashbangUrl represents url                                                                                  // 11362
 * This object is exposed as $location service when developer doesn't opt into html5 mode.                             // 11363
 * It also serves as the base class for html5 mode fallback on legacy browsers.                                        // 11364
 *                                                                                                                     // 11365
 * @constructor                                                                                                        // 11366
 * @param {string} appBase application base URL                                                                        // 11367
 * @param {string} hashPrefix hashbang prefix                                                                          // 11368
 */                                                                                                                    // 11369
function LocationHashbangUrl(appBase, hashPrefix) {                                                                    // 11370
  var appBaseNoFile = stripFile(appBase);                                                                              // 11371
                                                                                                                       // 11372
  parseAbsoluteUrl(appBase, this);                                                                                     // 11373
                                                                                                                       // 11374
                                                                                                                       // 11375
  /**                                                                                                                  // 11376
   * Parse given hashbang url into properties                                                                          // 11377
   * @param {string} url Hashbang url                                                                                  // 11378
   * @private                                                                                                          // 11379
   */                                                                                                                  // 11380
  this.$$parse = function(url) {                                                                                       // 11381
    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);                                   // 11382
    var withoutHashUrl;                                                                                                // 11383
                                                                                                                       // 11384
    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {                                            // 11385
                                                                                                                       // 11386
      // The rest of the url starts with a hash so we have                                                             // 11387
      // got either a hashbang path or a plain hash fragment                                                           // 11388
      withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);                                                         // 11389
      if (isUndefined(withoutHashUrl)) {                                                                               // 11390
        // There was no hashbang prefix so we just have a hash fragment                                                // 11391
        withoutHashUrl = withoutBaseUrl;                                                                               // 11392
      }                                                                                                                // 11393
                                                                                                                       // 11394
    } else {                                                                                                           // 11395
      // There was no hashbang path nor hash fragment:                                                                 // 11396
      // If we are in HTML5 mode we use what is left as the path;                                                      // 11397
      // Otherwise we ignore what is left                                                                              // 11398
      if (this.$$html5) {                                                                                              // 11399
        withoutHashUrl = withoutBaseUrl;                                                                               // 11400
      } else {                                                                                                         // 11401
        withoutHashUrl = '';                                                                                           // 11402
        if (isUndefined(withoutBaseUrl)) {                                                                             // 11403
          appBase = url;                                                                                               // 11404
          this.replace();                                                                                              // 11405
        }                                                                                                              // 11406
      }                                                                                                                // 11407
    }                                                                                                                  // 11408
                                                                                                                       // 11409
    parseAppUrl(withoutHashUrl, this);                                                                                 // 11410
                                                                                                                       // 11411
    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);                                        // 11412
                                                                                                                       // 11413
    this.$$compose();                                                                                                  // 11414
                                                                                                                       // 11415
    /*                                                                                                                 // 11416
     * In Windows, on an anchor node on documents loaded from                                                          // 11417
     * the filesystem, the browser will return a pathname                                                              // 11418
     * prefixed with the drive name ('/C:/path') when a                                                                // 11419
     * pathname without a drive is set:                                                                                // 11420
     *  * a.setAttribute('href', '/foo')                                                                               // 11421
     *   * a.pathname === '/C:/foo' //true                                                                             // 11422
     *                                                                                                                 // 11423
     * Inside of Angular, we're always using pathnames that                                                            // 11424
     * do not include drive names for routing.                                                                         // 11425
     */                                                                                                                // 11426
    function removeWindowsDriveName(path, url, base) {                                                                 // 11427
      /*                                                                                                               // 11428
      Matches paths for file protocol on windows,                                                                      // 11429
      such as /C:/foo/bar, and captures only /foo/bar.                                                                 // 11430
      */                                                                                                               // 11431
      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;                                                                      // 11432
                                                                                                                       // 11433
      var firstPathSegmentMatch;                                                                                       // 11434
                                                                                                                       // 11435
      //Get the relative path from the input URL.                                                                      // 11436
      if (url.indexOf(base) === 0) {                                                                                   // 11437
        url = url.replace(base, '');                                                                                   // 11438
      }                                                                                                                // 11439
                                                                                                                       // 11440
      // The input URL intentionally contains a first path segment that ends with a colon.                             // 11441
      if (windowsFilePathExp.exec(url)) {                                                                              // 11442
        return path;                                                                                                   // 11443
      }                                                                                                                // 11444
                                                                                                                       // 11445
      firstPathSegmentMatch = windowsFilePathExp.exec(path);                                                           // 11446
      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;                                                  // 11447
    }                                                                                                                  // 11448
  };                                                                                                                   // 11449
                                                                                                                       // 11450
  /**                                                                                                                  // 11451
   * Compose hashbang url and update `absUrl` property                                                                 // 11452
   * @private                                                                                                          // 11453
   */                                                                                                                  // 11454
  this.$$compose = function() {                                                                                        // 11455
    var search = toKeyValue(this.$$search),                                                                            // 11456
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11457
                                                                                                                       // 11458
    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11459
    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');                                             // 11460
  };                                                                                                                   // 11461
                                                                                                                       // 11462
  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11463
    if (stripHash(appBase) == stripHash(url)) {                                                                        // 11464
      this.$$parse(url);                                                                                               // 11465
      return true;                                                                                                     // 11466
    }                                                                                                                  // 11467
    return false;                                                                                                      // 11468
  };                                                                                                                   // 11469
}                                                                                                                      // 11470
                                                                                                                       // 11471
                                                                                                                       // 11472
/**                                                                                                                    // 11473
 * LocationHashbangUrl represents url                                                                                  // 11474
 * This object is exposed as $location service when html5 history api is enabled but the browser                       // 11475
 * does not support it.                                                                                                // 11476
 *                                                                                                                     // 11477
 * @constructor                                                                                                        // 11478
 * @param {string} appBase application base URL                                                                        // 11479
 * @param {string} hashPrefix hashbang prefix                                                                          // 11480
 */                                                                                                                    // 11481
function LocationHashbangInHtml5Url(appBase, hashPrefix) {                                                             // 11482
  this.$$html5 = true;                                                                                                 // 11483
  LocationHashbangUrl.apply(this, arguments);                                                                          // 11484
                                                                                                                       // 11485
  var appBaseNoFile = stripFile(appBase);                                                                              // 11486
                                                                                                                       // 11487
  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11488
    if (relHref && relHref[0] === '#') {                                                                               // 11489
      // special case for links to hash fragments:                                                                     // 11490
      // keep the old url and only replace the hash fragment                                                           // 11491
      this.hash(relHref.slice(1));                                                                                     // 11492
      return true;                                                                                                     // 11493
    }                                                                                                                  // 11494
                                                                                                                       // 11495
    var rewrittenUrl;                                                                                                  // 11496
    var appUrl;                                                                                                        // 11497
                                                                                                                       // 11498
    if (appBase == stripHash(url)) {                                                                                   // 11499
      rewrittenUrl = url;                                                                                              // 11500
    } else if ((appUrl = beginsWith(appBaseNoFile, url))) {                                                            // 11501
      rewrittenUrl = appBase + hashPrefix + appUrl;                                                                    // 11502
    } else if (appBaseNoFile === url + '/') {                                                                          // 11503
      rewrittenUrl = appBaseNoFile;                                                                                    // 11504
    }                                                                                                                  // 11505
    if (rewrittenUrl) {                                                                                                // 11506
      this.$$parse(rewrittenUrl);                                                                                      // 11507
    }                                                                                                                  // 11508
    return !!rewrittenUrl;                                                                                             // 11509
  };                                                                                                                   // 11510
                                                                                                                       // 11511
  this.$$compose = function() {                                                                                        // 11512
    var search = toKeyValue(this.$$search),                                                                            // 11513
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11514
                                                                                                                       // 11515
    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11516
    // include hashPrefix in $$absUrl when $$url is empty so IE8 & 9 do not reload page because of removal of '#'      // 11517
    this.$$absUrl = appBase + hashPrefix + this.$$url;                                                                 // 11518
  };                                                                                                                   // 11519
                                                                                                                       // 11520
}                                                                                                                      // 11521
                                                                                                                       // 11522
                                                                                                                       // 11523
var locationPrototype = {                                                                                              // 11524
                                                                                                                       // 11525
  /**                                                                                                                  // 11526
   * Are we in html5 mode?                                                                                             // 11527
   * @private                                                                                                          // 11528
   */                                                                                                                  // 11529
  $$html5: false,                                                                                                      // 11530
                                                                                                                       // 11531
  /**                                                                                                                  // 11532
   * Has any change been replacing?                                                                                    // 11533
   * @private                                                                                                          // 11534
   */                                                                                                                  // 11535
  $$replace: false,                                                                                                    // 11536
                                                                                                                       // 11537
  /**                                                                                                                  // 11538
   * @ngdoc method                                                                                                     // 11539
   * @name $location#absUrl                                                                                            // 11540
   *                                                                                                                   // 11541
   * @description                                                                                                      // 11542
   * This method is getter only.                                                                                       // 11543
   *                                                                                                                   // 11544
   * Return full url representation with all segments encoded according to rules specified in                          // 11545
   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).                                                                  // 11546
   *                                                                                                                   // 11547
   *                                                                                                                   // 11548
   * ```js                                                                                                             // 11549
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11550
   * var absUrl = $location.absUrl();                                                                                  // 11551
   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"                                                           // 11552
   * ```                                                                                                               // 11553
   *                                                                                                                   // 11554
   * @return {string} full url                                                                                         // 11555
   */                                                                                                                  // 11556
  absUrl: locationGetter('$$absUrl'),                                                                                  // 11557
                                                                                                                       // 11558
  /**                                                                                                                  // 11559
   * @ngdoc method                                                                                                     // 11560
   * @name $location#url                                                                                               // 11561
   *                                                                                                                   // 11562
   * @description                                                                                                      // 11563
   * This method is getter / setter.                                                                                   // 11564
   *                                                                                                                   // 11565
   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.                                             // 11566
   *                                                                                                                   // 11567
   * Change path, search and hash, when called with parameter and return `$location`.                                  // 11568
   *                                                                                                                   // 11569
   *                                                                                                                   // 11570
   * ```js                                                                                                             // 11571
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11572
   * var url = $location.url();                                                                                        // 11573
   * // => "/some/path?foo=bar&baz=xoxo"                                                                               // 11574
   * ```                                                                                                               // 11575
   *                                                                                                                   // 11576
   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)                                          // 11577
   * @return {string} url                                                                                              // 11578
   */                                                                                                                  // 11579
  url: function(url) {                                                                                                 // 11580
    if (isUndefined(url)) {                                                                                            // 11581
      return this.$$url;                                                                                               // 11582
    }                                                                                                                  // 11583
                                                                                                                       // 11584
    var match = PATH_MATCH.exec(url);                                                                                  // 11585
    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));                                               // 11586
    if (match[2] || match[1] || url === '') this.search(match[3] || '');                                               // 11587
    this.hash(match[5] || '');                                                                                         // 11588
                                                                                                                       // 11589
    return this;                                                                                                       // 11590
  },                                                                                                                   // 11591
                                                                                                                       // 11592
  /**                                                                                                                  // 11593
   * @ngdoc method                                                                                                     // 11594
   * @name $location#protocol                                                                                          // 11595
   *                                                                                                                   // 11596
   * @description                                                                                                      // 11597
   * This method is getter only.                                                                                       // 11598
   *                                                                                                                   // 11599
   * Return protocol of current url.                                                                                   // 11600
   *                                                                                                                   // 11601
   *                                                                                                                   // 11602
   * ```js                                                                                                             // 11603
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11604
   * var protocol = $location.protocol();                                                                              // 11605
   * // => "http"                                                                                                      // 11606
   * ```                                                                                                               // 11607
   *                                                                                                                   // 11608
   * @return {string} protocol of current url                                                                          // 11609
   */                                                                                                                  // 11610
  protocol: locationGetter('$$protocol'),                                                                              // 11611
                                                                                                                       // 11612
  /**                                                                                                                  // 11613
   * @ngdoc method                                                                                                     // 11614
   * @name $location#host                                                                                              // 11615
   *                                                                                                                   // 11616
   * @description                                                                                                      // 11617
   * This method is getter only.                                                                                       // 11618
   *                                                                                                                   // 11619
   * Return host of current url.                                                                                       // 11620
   *                                                                                                                   // 11621
   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
   *                                                                                                                   // 11623
   *                                                                                                                   // 11624
   * ```js                                                                                                             // 11625
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11626
   * var host = $location.host();                                                                                      // 11627
   * // => "example.com"                                                                                               // 11628
   *                                                                                                                   // 11629
   * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo                                   // 11630
   * host = $location.host();                                                                                          // 11631
   * // => "example.com"                                                                                               // 11632
   * host = location.host;                                                                                             // 11633
   * // => "example.com:8080"                                                                                          // 11634
   * ```                                                                                                               // 11635
   *                                                                                                                   // 11636
   * @return {string} host of current url.                                                                             // 11637
   */                                                                                                                  // 11638
  host: locationGetter('$$host'),                                                                                      // 11639
                                                                                                                       // 11640
  /**                                                                                                                  // 11641
   * @ngdoc method                                                                                                     // 11642
   * @name $location#port                                                                                              // 11643
   *                                                                                                                   // 11644
   * @description                                                                                                      // 11645
   * This method is getter only.                                                                                       // 11646
   *                                                                                                                   // 11647
   * Return port of current url.                                                                                       // 11648
   *                                                                                                                   // 11649
   *                                                                                                                   // 11650
   * ```js                                                                                                             // 11651
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11652
   * var port = $location.port();                                                                                      // 11653
   * // => 80                                                                                                          // 11654
   * ```                                                                                                               // 11655
   *                                                                                                                   // 11656
   * @return {Number} port                                                                                             // 11657
   */                                                                                                                  // 11658
  port: locationGetter('$$port'),                                                                                      // 11659
                                                                                                                       // 11660
  /**                                                                                                                  // 11661
   * @ngdoc method                                                                                                     // 11662
   * @name $location#path                                                                                              // 11663
   *                                                                                                                   // 11664
   * @description                                                                                                      // 11665
   * This method is getter / setter.                                                                                   // 11666
   *                                                                                                                   // 11667
   * Return path of current url when called without any parameter.                                                     // 11668
   *                                                                                                                   // 11669
   * Change path when called with parameter and return `$location`.                                                    // 11670
   *                                                                                                                   // 11671
   * Note: Path should always begin with forward slash (/), this method will add the forward slash                     // 11672
   * if it is missing.                                                                                                 // 11673
   *                                                                                                                   // 11674
   *                                                                                                                   // 11675
   * ```js                                                                                                             // 11676
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11677
   * var path = $location.path();                                                                                      // 11678
   * // => "/some/path"                                                                                                // 11679
   * ```                                                                                                               // 11680
   *                                                                                                                   // 11681
   * @param {(string|number)=} path New path                                                                           // 11682
   * @return {string} path                                                                                             // 11683
   */                                                                                                                  // 11684
  path: locationGetterSetter('$$path', function(path) {                                                                // 11685
    path = path !== null ? path.toString() : '';                                                                       // 11686
    return path.charAt(0) == '/' ? path : '/' + path;                                                                  // 11687
  }),                                                                                                                  // 11688
                                                                                                                       // 11689
  /**                                                                                                                  // 11690
   * @ngdoc method                                                                                                     // 11691
   * @name $location#search                                                                                            // 11692
   *                                                                                                                   // 11693
   * @description                                                                                                      // 11694
   * This method is getter / setter.                                                                                   // 11695
   *                                                                                                                   // 11696
   * Return search part (as object) of current url when called without any parameter.                                  // 11697
   *                                                                                                                   // 11698
   * Change search part when called with parameter and return `$location`.                                             // 11699
   *                                                                                                                   // 11700
   *                                                                                                                   // 11701
   * ```js                                                                                                             // 11702
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11703
   * var searchObject = $location.search();                                                                            // 11704
   * // => {foo: 'bar', baz: 'xoxo'}                                                                                   // 11705
   *                                                                                                                   // 11706
   * // set foo to 'yipee'                                                                                             // 11707
   * $location.search('foo', 'yipee');                                                                                 // 11708
   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}                                                              // 11709
   * ```                                                                                                               // 11710
   *                                                                                                                   // 11711
   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or                      // 11712
   * hash object.                                                                                                      // 11713
   *                                                                                                                   // 11714
   * When called with a single argument the method acts as a setter, setting the `search` component                    // 11715
   * of `$location` to the specified value.                                                                            // 11716
   *                                                                                                                   // 11717
   * If the argument is a hash object containing an array of values, these values will be encoded                      // 11718
   * as duplicate search parameters in the url.                                                                        // 11719
   *                                                                                                                   // 11720
   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`   // 11721
   * will override only a single search property.                                                                      // 11722
   *                                                                                                                   // 11723
   * If `paramValue` is an array, it will override the property of the `search` component of                           // 11724
   * `$location` specified via the first argument.                                                                     // 11725
   *                                                                                                                   // 11726
   * If `paramValue` is `null`, the property specified via the first argument will be deleted.                         // 11727
   *                                                                                                                   // 11728
   * If `paramValue` is `true`, the property specified via the first argument will be added with no                    // 11729
   * value nor trailing equal sign.                                                                                    // 11730
   *                                                                                                                   // 11731
   * @return {Object} If called with no arguments returns the parsed `search` object. If called with                   // 11732
   * one or more arguments returns `$location` object itself.                                                          // 11733
   */                                                                                                                  // 11734
  search: function(search, paramValue) {                                                                               // 11735
    switch (arguments.length) {                                                                                        // 11736
      case 0:                                                                                                          // 11737
        return this.$$search;                                                                                          // 11738
      case 1:                                                                                                          // 11739
        if (isString(search) || isNumber(search)) {                                                                    // 11740
          search = search.toString();                                                                                  // 11741
          this.$$search = parseKeyValue(search);                                                                       // 11742
        } else if (isObject(search)) {                                                                                 // 11743
          search = copy(search, {});                                                                                   // 11744
          // remove object undefined or null properties                                                                // 11745
          forEach(search, function(value, key) {                                                                       // 11746
            if (value == null) delete search[key];                                                                     // 11747
          });                                                                                                          // 11748
                                                                                                                       // 11749
          this.$$search = search;                                                                                      // 11750
        } else {                                                                                                       // 11751
          throw $locationMinErr('isrcharg',                                                                            // 11752
              'The first argument of the `$location#search()` call must be a string or an object.');                   // 11753
        }                                                                                                              // 11754
        break;                                                                                                         // 11755
      default:                                                                                                         // 11756
        if (isUndefined(paramValue) || paramValue === null) {                                                          // 11757
          delete this.$$search[search];                                                                                // 11758
        } else {                                                                                                       // 11759
          this.$$search[search] = paramValue;                                                                          // 11760
        }                                                                                                              // 11761
    }                                                                                                                  // 11762
                                                                                                                       // 11763
    this.$$compose();                                                                                                  // 11764
    return this;                                                                                                       // 11765
  },                                                                                                                   // 11766
                                                                                                                       // 11767
  /**                                                                                                                  // 11768
   * @ngdoc method                                                                                                     // 11769
   * @name $location#hash                                                                                              // 11770
   *                                                                                                                   // 11771
   * @description                                                                                                      // 11772
   * This method is getter / setter.                                                                                   // 11773
   *                                                                                                                   // 11774
   * Return hash fragment when called without any parameter.                                                           // 11775
   *                                                                                                                   // 11776
   * Change hash fragment when called with parameter and return `$location`.                                           // 11777
   *                                                                                                                   // 11778
   *                                                                                                                   // 11779
   * ```js                                                                                                             // 11780
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue                                            // 11781
   * var hash = $location.hash();                                                                                      // 11782
   * // => "hashValue"                                                                                                 // 11783
   * ```                                                                                                               // 11784
   *                                                                                                                   // 11785
   * @param {(string|number)=} hash New hash fragment                                                                  // 11786
   * @return {string} hash                                                                                             // 11787
   */                                                                                                                  // 11788
  hash: locationGetterSetter('$$hash', function(hash) {                                                                // 11789
    return hash !== null ? hash.toString() : '';                                                                       // 11790
  }),                                                                                                                  // 11791
                                                                                                                       // 11792
  /**                                                                                                                  // 11793
   * @ngdoc method                                                                                                     // 11794
   * @name $location#replace                                                                                           // 11795
   *                                                                                                                   // 11796
   * @description                                                                                                      // 11797
   * If called, all changes to $location during current `$digest` will be replacing current history                    // 11798
   * record, instead of adding new one.                                                                                // 11799
   */                                                                                                                  // 11800
  replace: function() {                                                                                                // 11801
    this.$$replace = true;                                                                                             // 11802
    return this;                                                                                                       // 11803
  }                                                                                                                    // 11804
};                                                                                                                     // 11805
                                                                                                                       // 11806
forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {                      // 11807
  Location.prototype = Object.create(locationPrototype);                                                               // 11808
                                                                                                                       // 11809
  /**                                                                                                                  // 11810
   * @ngdoc method                                                                                                     // 11811
   * @name $location#state                                                                                             // 11812
   *                                                                                                                   // 11813
   * @description                                                                                                      // 11814
   * This method is getter / setter.                                                                                   // 11815
   *                                                                                                                   // 11816
   * Return the history state object when called without any parameter.                                                // 11817
   *                                                                                                                   // 11818
   * Change the history state object when called with one parameter and return `$location`.                            // 11819
   * The state object is later passed to `pushState` or `replaceState`.                                                // 11820
   *                                                                                                                   // 11821
   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting                                 // 11822
   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support                       // 11823
   * older browsers (like IE9 or Android < 4.0), don't use this method.                                                // 11824
   *                                                                                                                   // 11825
   * @param {object=} state State object for pushState or replaceState                                                 // 11826
   * @return {object} state                                                                                            // 11827
   */                                                                                                                  // 11828
  Location.prototype.state = function(state) {                                                                         // 11829
    if (!arguments.length) {                                                                                           // 11830
      return this.$$state;                                                                                             // 11831
    }                                                                                                                  // 11832
                                                                                                                       // 11833
    if (Location !== LocationHtml5Url || !this.$$html5) {                                                              // 11834
      throw $locationMinErr('nostate', 'History API state support is available only ' +                                // 11835
        'in HTML5 mode and only in browsers supporting HTML5 History API');                                            // 11836
    }                                                                                                                  // 11837
    // The user might modify `stateObject` after invoking `$location.state(stateObject)`                               // 11838
    // but we're changing the $$state reference to $browser.state() during the $digest                                 // 11839
    // so the modification window is narrow.                                                                           // 11840
    this.$$state = isUndefined(state) ? null : state;                                                                  // 11841
                                                                                                                       // 11842
    return this;                                                                                                       // 11843
  };                                                                                                                   // 11844
});                                                                                                                    // 11845
                                                                                                                       // 11846
                                                                                                                       // 11847
function locationGetter(property) {                                                                                    // 11848
  return function() {                                                                                                  // 11849
    return this[property];                                                                                             // 11850
  };                                                                                                                   // 11851
}                                                                                                                      // 11852
                                                                                                                       // 11853
                                                                                                                       // 11854
function locationGetterSetter(property, preprocess) {                                                                  // 11855
  return function(value) {                                                                                             // 11856
    if (isUndefined(value)) {                                                                                          // 11857
      return this[property];                                                                                           // 11858
    }                                                                                                                  // 11859
                                                                                                                       // 11860
    this[property] = preprocess(value);                                                                                // 11861
    this.$$compose();                                                                                                  // 11862
                                                                                                                       // 11863
    return this;                                                                                                       // 11864
  };                                                                                                                   // 11865
}                                                                                                                      // 11866
                                                                                                                       // 11867
                                                                                                                       // 11868
/**                                                                                                                    // 11869
 * @ngdoc service                                                                                                      // 11870
 * @name $location                                                                                                     // 11871
 *                                                                                                                     // 11872
 * @requires $rootElement                                                                                              // 11873
 *                                                                                                                     // 11874
 * @description                                                                                                        // 11875
 * The $location service parses the URL in the browser address bar (based on the                                       // 11876
 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL                              // 11877
 * available to your application. Changes to the URL in the address bar are reflected into                             // 11878
 * $location service and changes to $location are reflected into the browser address bar.                              // 11879
 *                                                                                                                     // 11880
 * **The $location service:**                                                                                          // 11881
 *                                                                                                                     // 11882
 * - Exposes the current URL in the browser address bar, so you can                                                    // 11883
 *   - Watch and observe the URL.                                                                                      // 11884
 *   - Change the URL.                                                                                                 // 11885
 * - Synchronizes the URL with the browser when the user                                                               // 11886
 *   - Changes the address bar.                                                                                        // 11887
 *   - Clicks the back or forward button (or clicks a History link).                                                   // 11888
 *   - Clicks on a link.                                                                                               // 11889
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).                         // 11890
 *                                                                                                                     // 11891
 * For more information see {@link guide/$location Developer Guide: Using $location}                                   // 11892
 */                                                                                                                    // 11893
                                                                                                                       // 11894
/**                                                                                                                    // 11895
 * @ngdoc provider                                                                                                     // 11896
 * @name $locationProvider                                                                                             // 11897
 * @description                                                                                                        // 11898
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.                         // 11899
 */                                                                                                                    // 11900
function $LocationProvider() {                                                                                         // 11901
  var hashPrefix = '',                                                                                                 // 11902
      html5Mode = {                                                                                                    // 11903
        enabled: false,                                                                                                // 11904
        requireBase: true,                                                                                             // 11905
        rewriteLinks: true                                                                                             // 11906
      };                                                                                                               // 11907
                                                                                                                       // 11908
  /**                                                                                                                  // 11909
   * @ngdoc method                                                                                                     // 11910
   * @name $locationProvider#hashPrefix                                                                                // 11911
   * @description                                                                                                      // 11912
   * @param {string=} prefix Prefix for hash part (containing path and search)                                         // 11913
   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 11914
   */                                                                                                                  // 11915
  this.hashPrefix = function(prefix) {                                                                                 // 11916
    if (isDefined(prefix)) {                                                                                           // 11917
      hashPrefix = prefix;                                                                                             // 11918
      return this;                                                                                                     // 11919
    } else {                                                                                                           // 11920
      return hashPrefix;                                                                                               // 11921
    }                                                                                                                  // 11922
  };                                                                                                                   // 11923
                                                                                                                       // 11924
  /**                                                                                                                  // 11925
   * @ngdoc method                                                                                                     // 11926
   * @name $locationProvider#html5Mode                                                                                 // 11927
   * @description                                                                                                      // 11928
   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.                                    // 11929
   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported                     // 11930
   *   properties:                                                                                                     // 11931
   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to                     // 11932
   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not                    // 11933
   *     support `pushState`.                                                                                          // 11934
   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies                        // 11935
   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are                     // 11936
   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.                    // 11937
   *     See the {@link guide/$location $location guide for more information}                                          // 11938
   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,                                 // 11939
   *     enables/disables url rewriting for relative links.                                                            // 11940
   *                                                                                                                   // 11941
   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter                       // 11942
   */                                                                                                                  // 11943
  this.html5Mode = function(mode) {                                                                                    // 11944
    if (isBoolean(mode)) {                                                                                             // 11945
      html5Mode.enabled = mode;                                                                                        // 11946
      return this;                                                                                                     // 11947
    } else if (isObject(mode)) {                                                                                       // 11948
                                                                                                                       // 11949
      if (isBoolean(mode.enabled)) {                                                                                   // 11950
        html5Mode.enabled = mode.enabled;                                                                              // 11951
      }                                                                                                                // 11952
                                                                                                                       // 11953
      if (isBoolean(mode.requireBase)) {                                                                               // 11954
        html5Mode.requireBase = mode.requireBase;                                                                      // 11955
      }                                                                                                                // 11956
                                                                                                                       // 11957
      if (isBoolean(mode.rewriteLinks)) {                                                                              // 11958
        html5Mode.rewriteLinks = mode.rewriteLinks;                                                                    // 11959
      }                                                                                                                // 11960
                                                                                                                       // 11961
      return this;                                                                                                     // 11962
    } else {                                                                                                           // 11963
      return html5Mode;                                                                                                // 11964
    }                                                                                                                  // 11965
  };                                                                                                                   // 11966
                                                                                                                       // 11967
  /**                                                                                                                  // 11968
   * @ngdoc event                                                                                                      // 11969
   * @name $location#$locationChangeStart                                                                              // 11970
   * @eventType broadcast on root scope                                                                                // 11971
   * @description                                                                                                      // 11972
   * Broadcasted before a URL will change.                                                                             // 11973
   *                                                                                                                   // 11974
   * This change can be prevented by calling                                                                           // 11975
   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more                                // 11976
   * details about event object. Upon successful change                                                                // 11977
   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.                                      // 11978
   *                                                                                                                   // 11979
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when                               // 11980
   * the browser supports the HTML5 History API.                                                                       // 11981
   *                                                                                                                   // 11982
   * @param {Object} angularEvent Synthetic event object.                                                              // 11983
   * @param {string} newUrl New URL                                                                                    // 11984
   * @param {string=} oldUrl URL that was before it was changed.                                                       // 11985
   * @param {string=} newState New history state object                                                                // 11986
   * @param {string=} oldState History state object that was before it was changed.                                    // 11987
   */                                                                                                                  // 11988
                                                                                                                       // 11989
  /**                                                                                                                  // 11990
   * @ngdoc event                                                                                                      // 11991
   * @name $location#$locationChangeSuccess                                                                            // 11992
   * @eventType broadcast on root scope                                                                                // 11993
   * @description                                                                                                      // 11994
   * Broadcasted after a URL was changed.                                                                              // 11995
   *                                                                                                                   // 11996
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when                               // 11997
   * the browser supports the HTML5 History API.                                                                       // 11998
   *                                                                                                                   // 11999
   * @param {Object} angularEvent Synthetic event object.                                                              // 12000
   * @param {string} newUrl New URL                                                                                    // 12001
   * @param {string=} oldUrl URL that was before it was changed.                                                       // 12002
   * @param {string=} newState New history state object                                                                // 12003
   * @param {string=} oldState History state object that was before it was changed.                                    // 12004
   */                                                                                                                  // 12005
                                                                                                                       // 12006
  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',                                        // 12007
      function($rootScope, $browser, $sniffer, $rootElement, $window) {                                                // 12008
    var $location,                                                                                                     // 12009
        LocationMode,                                                                                                  // 12010
        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''                               // 12011
        initialUrl = $browser.url(),                                                                                   // 12012
        appBase;                                                                                                       // 12013
                                                                                                                       // 12014
    if (html5Mode.enabled) {                                                                                           // 12015
      if (!baseHref && html5Mode.requireBase) {                                                                        // 12016
        throw $locationMinErr('nobase',                                                                                // 12017
          "$location in HTML5 mode requires a <base> tag to be present!");                                             // 12018
      }                                                                                                                // 12019
      appBase = serverBase(initialUrl) + (baseHref || '/');                                                            // 12020
      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;                                 // 12021
    } else {                                                                                                           // 12022
      appBase = stripHash(initialUrl);                                                                                 // 12023
      LocationMode = LocationHashbangUrl;                                                                              // 12024
    }                                                                                                                  // 12025
    $location = new LocationMode(appBase, '#' + hashPrefix);                                                           // 12026
    $location.$$parseLinkUrl(initialUrl, initialUrl);                                                                  // 12027
                                                                                                                       // 12028
    $location.$$state = $browser.state();                                                                              // 12029
                                                                                                                       // 12030
    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;                                                               // 12031
                                                                                                                       // 12032
    function setBrowserUrlWithFallback(url, replace, state) {                                                          // 12033
      var oldUrl = $location.url();                                                                                    // 12034
      var oldState = $location.$$state;                                                                                // 12035
      try {                                                                                                            // 12036
        $browser.url(url, replace, state);                                                                             // 12037
                                                                                                                       // 12038
        // Make sure $location.state() returns referentially identical (not just deeply equal)                         // 12039
        // state object; this makes possible quick checking if the state changed in the digest                         // 12040
        // loop. Checking deep equality would be too expensive.                                                        // 12041
        $location.$$state = $browser.state();                                                                          // 12042
      } catch (e) {                                                                                                    // 12043
        // Restore old values if pushState fails                                                                       // 12044
        $location.url(oldUrl);                                                                                         // 12045
        $location.$$state = oldState;                                                                                  // 12046
                                                                                                                       // 12047
        throw e;                                                                                                       // 12048
      }                                                                                                                // 12049
    }                                                                                                                  // 12050
                                                                                                                       // 12051
    $rootElement.on('click', function(event) {                                                                         // 12052
      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)                                  // 12053
      // currently we open nice url link and redirect then                                                             // 12054
                                                                                                                       // 12055
      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;
                                                                                                                       // 12057
      var elm = jqLite(event.target);                                                                                  // 12058
                                                                                                                       // 12059
      // traverse the DOM up to find first A tag                                                                       // 12060
      while (nodeName_(elm[0]) !== 'a') {                                                                              // 12061
        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)                   // 12062
        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;                                            // 12063
      }                                                                                                                // 12064
                                                                                                                       // 12065
      var absHref = elm.prop('href');                                                                                  // 12066
      // get the actual href attribute - see                                                                           // 12067
      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx                                             // 12068
      var relHref = elm.attr('href') || elm.attr('xlink:href');                                                        // 12069
                                                                                                                       // 12070
      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {                                  // 12071
        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during                   // 12072
        // an animation.                                                                                               // 12073
        absHref = urlResolve(absHref.animVal).href;                                                                    // 12074
      }                                                                                                                // 12075
                                                                                                                       // 12076
      // Ignore when url is started with javascript: or mailto:                                                        // 12077
      if (IGNORE_URI_REGEXP.test(absHref)) return;                                                                     // 12078
                                                                                                                       // 12079
      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {                                             // 12080
        if ($location.$$parseLinkUrl(absHref, relHref)) {                                                              // 12081
          // We do a preventDefault for all urls that are part of the angular application,                             // 12082
          // in html5mode and also without, so that we are able to abort navigation without                            // 12083
          // getting double entries in the location history.                                                           // 12084
          event.preventDefault();                                                                                      // 12085
          // update location manually                                                                                  // 12086
          if ($location.absUrl() != $browser.url()) {                                                                  // 12087
            $rootScope.$apply();                                                                                       // 12088
            // hack to work around FF6 bug 684208 when scenario runner clicks on links                                 // 12089
            $window.angular['ff-684208-preventDefault'] = true;                                                        // 12090
          }                                                                                                            // 12091
        }                                                                                                              // 12092
      }                                                                                                                // 12093
    });                                                                                                                // 12094
                                                                                                                       // 12095
                                                                                                                       // 12096
    // rewrite hashbang url <> html5 url                                                                               // 12097
    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {                                              // 12098
      $browser.url($location.absUrl(), true);                                                                          // 12099
    }                                                                                                                  // 12100
                                                                                                                       // 12101
    var initializing = true;                                                                                           // 12102
                                                                                                                       // 12103
    // update $location when $browser url changes                                                                      // 12104
    $browser.onUrlChange(function(newUrl, newState) {                                                                  // 12105
      $rootScope.$evalAsync(function() {                                                                               // 12106
        var oldUrl = $location.absUrl();                                                                               // 12107
        var oldState = $location.$$state;                                                                              // 12108
        var defaultPrevented;                                                                                          // 12109
                                                                                                                       // 12110
        $location.$$parse(newUrl);                                                                                     // 12111
        $location.$$state = newState;                                                                                  // 12112
                                                                                                                       // 12113
        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,                               // 12114
            newState, oldState).defaultPrevented;                                                                      // 12115
                                                                                                                       // 12116
        // if the location was changed by a `$locationChangeStart` handler then stop                                   // 12117
        // processing this location change                                                                             // 12118
        if ($location.absUrl() !== newUrl) return;                                                                     // 12119
                                                                                                                       // 12120
        if (defaultPrevented) {                                                                                        // 12121
          $location.$$parse(oldUrl);                                                                                   // 12122
          $location.$$state = oldState;                                                                                // 12123
          setBrowserUrlWithFallback(oldUrl, false, oldState);                                                          // 12124
        } else {                                                                                                       // 12125
          initializing = false;                                                                                        // 12126
          afterLocationChange(oldUrl, oldState);                                                                       // 12127
        }                                                                                                              // 12128
      });                                                                                                              // 12129
      if (!$rootScope.$$phase) $rootScope.$digest();                                                                   // 12130
    });                                                                                                                // 12131
                                                                                                                       // 12132
    // update browser                                                                                                  // 12133
    $rootScope.$watch(function $locationWatch() {                                                                      // 12134
      var oldUrl = trimEmptyHash($browser.url());                                                                      // 12135
      var newUrl = trimEmptyHash($location.absUrl());                                                                  // 12136
      var oldState = $browser.state();                                                                                 // 12137
      var currentReplace = $location.$$replace;                                                                        // 12138
      var urlOrStateChanged = oldUrl !== newUrl ||                                                                     // 12139
        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);                                     // 12140
                                                                                                                       // 12141
      if (initializing || urlOrStateChanged) {                                                                         // 12142
        initializing = false;                                                                                          // 12143
                                                                                                                       // 12144
        $rootScope.$evalAsync(function() {                                                                             // 12145
          var newUrl = $location.absUrl();                                                                             // 12146
          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,                         // 12147
              $location.$$state, oldState).defaultPrevented;                                                           // 12148
                                                                                                                       // 12149
          // if the location was changed by a `$locationChangeStart` handler then stop                                 // 12150
          // processing this location change                                                                           // 12151
          if ($location.absUrl() !== newUrl) return;                                                                   // 12152
                                                                                                                       // 12153
          if (defaultPrevented) {                                                                                      // 12154
            $location.$$parse(oldUrl);                                                                                 // 12155
            $location.$$state = oldState;                                                                              // 12156
          } else {                                                                                                     // 12157
            if (urlOrStateChanged) {                                                                                   // 12158
              setBrowserUrlWithFallback(newUrl, currentReplace,                                                        // 12159
                                        oldState === $location.$$state ? null : $location.$$state);                    // 12160
            }                                                                                                          // 12161
            afterLocationChange(oldUrl, oldState);                                                                     // 12162
          }                                                                                                            // 12163
        });                                                                                                            // 12164
      }                                                                                                                // 12165
                                                                                                                       // 12166
      $location.$$replace = false;                                                                                     // 12167
                                                                                                                       // 12168
      // we don't need to return anything because $evalAsync will make the digest loop dirty when                      // 12169
      // there is a change                                                                                             // 12170
    });                                                                                                                // 12171
                                                                                                                       // 12172
    return $location;                                                                                                  // 12173
                                                                                                                       // 12174
    function afterLocationChange(oldUrl, oldState) {                                                                   // 12175
      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,                                      // 12176
        $location.$$state, oldState);                                                                                  // 12177
    }                                                                                                                  // 12178
}];                                                                                                                    // 12179
}                                                                                                                      // 12180
                                                                                                                       // 12181
/**                                                                                                                    // 12182
 * @ngdoc service                                                                                                      // 12183
 * @name $log                                                                                                          // 12184
 * @requires $window                                                                                                   // 12185
 *                                                                                                                     // 12186
 * @description                                                                                                        // 12187
 * Simple service for logging. Default implementation safely writes the message                                        // 12188
 * into the browser's console (if present).                                                                            // 12189
 *                                                                                                                     // 12190
 * The main purpose of this service is to simplify debugging and troubleshooting.                                      // 12191
 *                                                                                                                     // 12192
 * The default is to log `debug` messages. You can use                                                                 // 12193
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.                                                // 12194
 *                                                                                                                     // 12195
 * @example                                                                                                            // 12196
   <example module="logExample">                                                                                       // 12197
     <file name="script.js">                                                                                           // 12198
       angular.module('logExample', [])                                                                                // 12199
         .controller('LogController', ['$scope', '$log', function($scope, $log) {                                      // 12200
           $scope.$log = $log;                                                                                         // 12201
           $scope.message = 'Hello World!';                                                                            // 12202
         }]);                                                                                                          // 12203
     </file>                                                                                                           // 12204
     <file name="index.html">                                                                                          // 12205
       <div ng-controller="LogController">                                                                             // 12206
         <p>Reload this page with open console, enter text and hit the log button...</p>                               // 12207
         <label>Message:                                                                                               // 12208
         <input type="text" ng-model="message" /></label>                                                              // 12209
         <button ng-click="$log.log(message)">log</button>                                                             // 12210
         <button ng-click="$log.warn(message)">warn</button>                                                           // 12211
         <button ng-click="$log.info(message)">info</button>                                                           // 12212
         <button ng-click="$log.error(message)">error</button>                                                         // 12213
         <button ng-click="$log.debug(message)">debug</button>                                                         // 12214
       </div>                                                                                                          // 12215
     </file>                                                                                                           // 12216
   </example>                                                                                                          // 12217
 */                                                                                                                    // 12218
                                                                                                                       // 12219
/**                                                                                                                    // 12220
 * @ngdoc provider                                                                                                     // 12221
 * @name $logProvider                                                                                                  // 12222
 * @description                                                                                                        // 12223
 * Use the `$logProvider` to configure how the application logs messages                                               // 12224
 */                                                                                                                    // 12225
function $LogProvider() {                                                                                              // 12226
  var debug = true,                                                                                                    // 12227
      self = this;                                                                                                     // 12228
                                                                                                                       // 12229
  /**                                                                                                                  // 12230
   * @ngdoc method                                                                                                     // 12231
   * @name $logProvider#debugEnabled                                                                                   // 12232
   * @description                                                                                                      // 12233
   * @param {boolean=} flag enable or disable debug level messages                                                     // 12234
   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 12235
   */                                                                                                                  // 12236
  this.debugEnabled = function(flag) {                                                                                 // 12237
    if (isDefined(flag)) {                                                                                             // 12238
      debug = flag;                                                                                                    // 12239
    return this;                                                                                                       // 12240
    } else {                                                                                                           // 12241
      return debug;                                                                                                    // 12242
    }                                                                                                                  // 12243
  };                                                                                                                   // 12244
                                                                                                                       // 12245
  this.$get = ['$window', function($window) {                                                                          // 12246
    return {                                                                                                           // 12247
      /**                                                                                                              // 12248
       * @ngdoc method                                                                                                 // 12249
       * @name $log#log                                                                                                // 12250
       *                                                                                                               // 12251
       * @description                                                                                                  // 12252
       * Write a log message                                                                                           // 12253
       */                                                                                                              // 12254
      log: consoleLog('log'),                                                                                          // 12255
                                                                                                                       // 12256
      /**                                                                                                              // 12257
       * @ngdoc method                                                                                                 // 12258
       * @name $log#info                                                                                               // 12259
       *                                                                                                               // 12260
       * @description                                                                                                  // 12261
       * Write an information message                                                                                  // 12262
       */                                                                                                              // 12263
      info: consoleLog('info'),                                                                                        // 12264
                                                                                                                       // 12265
      /**                                                                                                              // 12266
       * @ngdoc method                                                                                                 // 12267
       * @name $log#warn                                                                                               // 12268
       *                                                                                                               // 12269
       * @description                                                                                                  // 12270
       * Write a warning message                                                                                       // 12271
       */                                                                                                              // 12272
      warn: consoleLog('warn'),                                                                                        // 12273
                                                                                                                       // 12274
      /**                                                                                                              // 12275
       * @ngdoc method                                                                                                 // 12276
       * @name $log#error                                                                                              // 12277
       *                                                                                                               // 12278
       * @description                                                                                                  // 12279
       * Write an error message                                                                                        // 12280
       */                                                                                                              // 12281
      error: consoleLog('error'),                                                                                      // 12282
                                                                                                                       // 12283
      /**                                                                                                              // 12284
       * @ngdoc method                                                                                                 // 12285
       * @name $log#debug                                                                                              // 12286
       *                                                                                                               // 12287
       * @description                                                                                                  // 12288
       * Write a debug message                                                                                         // 12289
       */                                                                                                              // 12290
      debug: (function() {                                                                                             // 12291
        var fn = consoleLog('debug');                                                                                  // 12292
                                                                                                                       // 12293
        return function() {                                                                                            // 12294
          if (debug) {                                                                                                 // 12295
            fn.apply(self, arguments);                                                                                 // 12296
          }                                                                                                            // 12297
        };                                                                                                             // 12298
      }())                                                                                                             // 12299
    };                                                                                                                 // 12300
                                                                                                                       // 12301
    function formatError(arg) {                                                                                        // 12302
      if (arg instanceof Error) {                                                                                      // 12303
        if (arg.stack) {                                                                                               // 12304
          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)                                                 // 12305
              ? 'Error: ' + arg.message + '\n' + arg.stack                                                             // 12306
              : arg.stack;                                                                                             // 12307
        } else if (arg.sourceURL) {                                                                                    // 12308
          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;                                                   // 12309
        }                                                                                                              // 12310
      }                                                                                                                // 12311
      return arg;                                                                                                      // 12312
    }                                                                                                                  // 12313
                                                                                                                       // 12314
    function consoleLog(type) {                                                                                        // 12315
      var console = $window.console || {},                                                                             // 12316
          logFn = console[type] || console.log || noop,                                                                // 12317
          hasApply = false;                                                                                            // 12318
                                                                                                                       // 12319
      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.                                       // 12320
      // The reason behind this is that console.log has type "object" in IE8...                                        // 12321
      try {                                                                                                            // 12322
        hasApply = !!logFn.apply;                                                                                      // 12323
      } catch (e) {}                                                                                                   // 12324
                                                                                                                       // 12325
      if (hasApply) {                                                                                                  // 12326
        return function() {                                                                                            // 12327
          var args = [];                                                                                               // 12328
          forEach(arguments, function(arg) {                                                                           // 12329
            args.push(formatError(arg));                                                                               // 12330
          });                                                                                                          // 12331
          return logFn.apply(console, args);                                                                           // 12332
        };                                                                                                             // 12333
      }                                                                                                                // 12334
                                                                                                                       // 12335
      // we are IE which either doesn't have window.console => this is noop and we do nothing,                         // 12336
      // or we are IE where console.log doesn't have apply so we log at least first 2 args                             // 12337
      return function(arg1, arg2) {                                                                                    // 12338
        logFn(arg1, arg2 == null ? '' : arg2);                                                                         // 12339
      };                                                                                                               // 12340
    }                                                                                                                  // 12341
  }];                                                                                                                  // 12342
}                                                                                                                      // 12343
                                                                                                                       // 12344
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 12345
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 12346
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 12347
 *          An approval from 2 Core members with history of modifying      *                                           // 12348
 *                         this file is required.                          *                                           // 12349
 *                                                                         *                                           // 12350
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 12351
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 12352
 *     Or gives undesired access to variables likes document or window?    *                                           // 12353
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 12354
                                                                                                                       // 12355
var $parseMinErr = minErr('$parse');                                                                                   // 12356
                                                                                                                       // 12357
// Sandboxing Angular Expressions                                                                                      // 12358
// ------------------------------                                                                                      // 12359
// Angular expressions are generally considered safe because these expressions only have direct                        // 12360
// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by                  // 12361
// obtaining a reference to native JS functions such as the Function constructor.                                      // 12362
//                                                                                                                     // 12363
// As an example, consider the following Angular expression:                                                           // 12364
//                                                                                                                     // 12365
//   {}.toString.constructor('alert("evil JS code")')                                                                  // 12366
//                                                                                                                     // 12367
// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits                     // 12368
// against the expression language, but not to prevent exploits that were enabled by exposing                          // 12369
// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good                     // 12370
// practice and therefore we are not even trying to protect against interaction with an object                         // 12371
// explicitly exposed in this way.                                                                                     // 12372
//                                                                                                                     // 12373
// In general, it is not possible to access a Window object from an angular expression unless a                        // 12374
// window or some DOM object that has a reference to window is published onto a Scope.                                 // 12375
// Similarly we prevent invocations of function known to be dangerous, as well as assignments to                       // 12376
// native objects.                                                                                                     // 12377
//                                                                                                                     // 12378
// See https://docs.angularjs.org/guide/security                                                                       // 12379
                                                                                                                       // 12380
                                                                                                                       // 12381
function ensureSafeMemberName(name, fullExpression) {                                                                  // 12382
  if (name === "__defineGetter__" || name === "__defineSetter__"                                                       // 12383
      || name === "__lookupGetter__" || name === "__lookupSetter__"                                                    // 12384
      || name === "__proto__") {                                                                                       // 12385
    throw $parseMinErr('isecfld',                                                                                      // 12386
        'Attempting to access a disallowed field in Angular expressions! '                                             // 12387
        + 'Expression: {0}', fullExpression);                                                                          // 12388
  }                                                                                                                    // 12389
  return name;                                                                                                         // 12390
}                                                                                                                      // 12391
                                                                                                                       // 12392
function ensureSafeObject(obj, fullExpression) {                                                                       // 12393
  // nifty check if obj is Function that is fast and works across iframes and other contexts                           // 12394
  if (obj) {                                                                                                           // 12395
    if (obj.constructor === obj) {                                                                                     // 12396
      throw $parseMinErr('isecfn',                                                                                     // 12397
          'Referencing Function in Angular expressions is disallowed! Expression: {0}',                                // 12398
          fullExpression);                                                                                             // 12399
    } else if (// isWindow(obj)                                                                                        // 12400
        obj.window === obj) {                                                                                          // 12401
      throw $parseMinErr('isecwindow',                                                                                 // 12402
          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',                              // 12403
          fullExpression);                                                                                             // 12404
    } else if (// isElement(obj)                                                                                       // 12405
        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {                                        // 12406
      throw $parseMinErr('isecdom',                                                                                    // 12407
          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',                               // 12408
          fullExpression);                                                                                             // 12409
    } else if (// block Object so that we can't get hold of dangerous Object.* methods                                 // 12410
        obj === Object) {                                                                                              // 12411
      throw $parseMinErr('isecobj',                                                                                    // 12412
          'Referencing Object in Angular expressions is disallowed! Expression: {0}',                                  // 12413
          fullExpression);                                                                                             // 12414
    }                                                                                                                  // 12415
  }                                                                                                                    // 12416
  return obj;                                                                                                          // 12417
}                                                                                                                      // 12418
                                                                                                                       // 12419
var CALL = Function.prototype.call;                                                                                    // 12420
var APPLY = Function.prototype.apply;                                                                                  // 12421
var BIND = Function.prototype.bind;                                                                                    // 12422
                                                                                                                       // 12423
function ensureSafeFunction(obj, fullExpression) {                                                                     // 12424
  if (obj) {                                                                                                           // 12425
    if (obj.constructor === obj) {                                                                                     // 12426
      throw $parseMinErr('isecfn',                                                                                     // 12427
        'Referencing Function in Angular expressions is disallowed! Expression: {0}',                                  // 12428
        fullExpression);                                                                                               // 12429
    } else if (obj === CALL || obj === APPLY || obj === BIND) {                                                        // 12430
      throw $parseMinErr('isecff',                                                                                     // 12431
        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',                       // 12432
        fullExpression);                                                                                               // 12433
    }                                                                                                                  // 12434
  }                                                                                                                    // 12435
}                                                                                                                      // 12436
                                                                                                                       // 12437
var OPERATORS = createMap();                                                                                           // 12438
forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });
var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};                                     // 12440
                                                                                                                       // 12441
                                                                                                                       // 12442
/////////////////////////////////////////                                                                              // 12443
                                                                                                                       // 12444
                                                                                                                       // 12445
/**                                                                                                                    // 12446
 * @constructor                                                                                                        // 12447
 */                                                                                                                    // 12448
var Lexer = function(options) {                                                                                        // 12449
  this.options = options;                                                                                              // 12450
};                                                                                                                     // 12451
                                                                                                                       // 12452
Lexer.prototype = {                                                                                                    // 12453
  constructor: Lexer,                                                                                                  // 12454
                                                                                                                       // 12455
  lex: function(text) {                                                                                                // 12456
    this.text = text;                                                                                                  // 12457
    this.index = 0;                                                                                                    // 12458
    this.tokens = [];                                                                                                  // 12459
                                                                                                                       // 12460
    while (this.index < this.text.length) {                                                                            // 12461
      var ch = this.text.charAt(this.index);                                                                           // 12462
      if (ch === '"' || ch === "'") {                                                                                  // 12463
        this.readString(ch);                                                                                           // 12464
      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {                                      // 12465
        this.readNumber();                                                                                             // 12466
      } else if (this.isIdent(ch)) {                                                                                   // 12467
        this.readIdent();                                                                                              // 12468
      } else if (this.is(ch, '(){}[].,;:?')) {                                                                         // 12469
        this.tokens.push({index: this.index, text: ch});                                                               // 12470
        this.index++;                                                                                                  // 12471
      } else if (this.isWhitespace(ch)) {                                                                              // 12472
        this.index++;                                                                                                  // 12473
      } else {                                                                                                         // 12474
        var ch2 = ch + this.peek();                                                                                    // 12475
        var ch3 = ch2 + this.peek(2);                                                                                  // 12476
        var op1 = OPERATORS[ch];                                                                                       // 12477
        var op2 = OPERATORS[ch2];                                                                                      // 12478
        var op3 = OPERATORS[ch3];                                                                                      // 12479
        if (op1 || op2 || op3) {                                                                                       // 12480
          var token = op3 ? ch3 : (op2 ? ch2 : ch);                                                                    // 12481
          this.tokens.push({index: this.index, text: token, operator: true});                                          // 12482
          this.index += token.length;                                                                                  // 12483
        } else {                                                                                                       // 12484
          this.throwError('Unexpected next character ', this.index, this.index + 1);                                   // 12485
        }                                                                                                              // 12486
      }                                                                                                                // 12487
    }                                                                                                                  // 12488
    return this.tokens;                                                                                                // 12489
  },                                                                                                                   // 12490
                                                                                                                       // 12491
  is: function(ch, chars) {                                                                                            // 12492
    return chars.indexOf(ch) !== -1;                                                                                   // 12493
  },                                                                                                                   // 12494
                                                                                                                       // 12495
  peek: function(i) {                                                                                                  // 12496
    var num = i || 1;                                                                                                  // 12497
    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;                         // 12498
  },                                                                                                                   // 12499
                                                                                                                       // 12500
  isNumber: function(ch) {                                                                                             // 12501
    return ('0' <= ch && ch <= '9') && typeof ch === "string";                                                         // 12502
  },                                                                                                                   // 12503
                                                                                                                       // 12504
  isWhitespace: function(ch) {                                                                                         // 12505
    // IE treats non-breaking space as \u00A0                                                                          // 12506
    return (ch === ' ' || ch === '\r' || ch === '\t' ||                                                                // 12507
            ch === '\n' || ch === '\v' || ch === '\u00A0');                                                            // 12508
  },                                                                                                                   // 12509
                                                                                                                       // 12510
  isIdent: function(ch) {                                                                                              // 12511
    return ('a' <= ch && ch <= 'z' ||                                                                                  // 12512
            'A' <= ch && ch <= 'Z' ||                                                                                  // 12513
            '_' === ch || ch === '$');                                                                                 // 12514
  },                                                                                                                   // 12515
                                                                                                                       // 12516
  isExpOperator: function(ch) {                                                                                        // 12517
    return (ch === '-' || ch === '+' || this.isNumber(ch));                                                            // 12518
  },                                                                                                                   // 12519
                                                                                                                       // 12520
  throwError: function(error, start, end) {                                                                            // 12521
    end = end || this.index;                                                                                           // 12522
    var colStr = (isDefined(start)                                                                                     // 12523
            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'                          // 12524
            : ' ' + end);                                                                                              // 12525
    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',                                 // 12526
        error, colStr, this.text);                                                                                     // 12527
  },                                                                                                                   // 12528
                                                                                                                       // 12529
  readNumber: function() {                                                                                             // 12530
    var number = '';                                                                                                   // 12531
    var start = this.index;                                                                                            // 12532
    while (this.index < this.text.length) {                                                                            // 12533
      var ch = lowercase(this.text.charAt(this.index));                                                                // 12534
      if (ch == '.' || this.isNumber(ch)) {                                                                            // 12535
        number += ch;                                                                                                  // 12536
      } else {                                                                                                         // 12537
        var peekCh = this.peek();                                                                                      // 12538
        if (ch == 'e' && this.isExpOperator(peekCh)) {                                                                 // 12539
          number += ch;                                                                                                // 12540
        } else if (this.isExpOperator(ch) &&                                                                           // 12541
            peekCh && this.isNumber(peekCh) &&                                                                         // 12542
            number.charAt(number.length - 1) == 'e') {                                                                 // 12543
          number += ch;                                                                                                // 12544
        } else if (this.isExpOperator(ch) &&                                                                           // 12545
            (!peekCh || !this.isNumber(peekCh)) &&                                                                     // 12546
            number.charAt(number.length - 1) == 'e') {                                                                 // 12547
          this.throwError('Invalid exponent');                                                                         // 12548
        } else {                                                                                                       // 12549
          break;                                                                                                       // 12550
        }                                                                                                              // 12551
      }                                                                                                                // 12552
      this.index++;                                                                                                    // 12553
    }                                                                                                                  // 12554
    this.tokens.push({                                                                                                 // 12555
      index: start,                                                                                                    // 12556
      text: number,                                                                                                    // 12557
      constant: true,                                                                                                  // 12558
      value: Number(number)                                                                                            // 12559
    });                                                                                                                // 12560
  },                                                                                                                   // 12561
                                                                                                                       // 12562
  readIdent: function() {                                                                                              // 12563
    var start = this.index;                                                                                            // 12564
    while (this.index < this.text.length) {                                                                            // 12565
      var ch = this.text.charAt(this.index);                                                                           // 12566
      if (!(this.isIdent(ch) || this.isNumber(ch))) {                                                                  // 12567
        break;                                                                                                         // 12568
      }                                                                                                                // 12569
      this.index++;                                                                                                    // 12570
    }                                                                                                                  // 12571
    this.tokens.push({                                                                                                 // 12572
      index: start,                                                                                                    // 12573
      text: this.text.slice(start, this.index),                                                                        // 12574
      identifier: true                                                                                                 // 12575
    });                                                                                                                // 12576
  },                                                                                                                   // 12577
                                                                                                                       // 12578
  readString: function(quote) {                                                                                        // 12579
    var start = this.index;                                                                                            // 12580
    this.index++;                                                                                                      // 12581
    var string = '';                                                                                                   // 12582
    var rawString = quote;                                                                                             // 12583
    var escape = false;                                                                                                // 12584
    while (this.index < this.text.length) {                                                                            // 12585
      var ch = this.text.charAt(this.index);                                                                           // 12586
      rawString += ch;                                                                                                 // 12587
      if (escape) {                                                                                                    // 12588
        if (ch === 'u') {                                                                                              // 12589
          var hex = this.text.substring(this.index + 1, this.index + 5);                                               // 12590
          if (!hex.match(/[\da-f]{4}/i)) {                                                                             // 12591
            this.throwError('Invalid unicode escape [\\u' + hex + ']');                                                // 12592
          }                                                                                                            // 12593
          this.index += 4;                                                                                             // 12594
          string += String.fromCharCode(parseInt(hex, 16));                                                            // 12595
        } else {                                                                                                       // 12596
          var rep = ESCAPE[ch];                                                                                        // 12597
          string = string + (rep || ch);                                                                               // 12598
        }                                                                                                              // 12599
        escape = false;                                                                                                // 12600
      } else if (ch === '\\') {                                                                                        // 12601
        escape = true;                                                                                                 // 12602
      } else if (ch === quote) {                                                                                       // 12603
        this.index++;                                                                                                  // 12604
        this.tokens.push({                                                                                             // 12605
          index: start,                                                                                                // 12606
          text: rawString,                                                                                             // 12607
          constant: true,                                                                                              // 12608
          value: string                                                                                                // 12609
        });                                                                                                            // 12610
        return;                                                                                                        // 12611
      } else {                                                                                                         // 12612
        string += ch;                                                                                                  // 12613
      }                                                                                                                // 12614
      this.index++;                                                                                                    // 12615
    }                                                                                                                  // 12616
    this.throwError('Unterminated quote', start);                                                                      // 12617
  }                                                                                                                    // 12618
};                                                                                                                     // 12619
                                                                                                                       // 12620
var AST = function(lexer, options) {                                                                                   // 12621
  this.lexer = lexer;                                                                                                  // 12622
  this.options = options;                                                                                              // 12623
};                                                                                                                     // 12624
                                                                                                                       // 12625
AST.Program = 'Program';                                                                                               // 12626
AST.ExpressionStatement = 'ExpressionStatement';                                                                       // 12627
AST.AssignmentExpression = 'AssignmentExpression';                                                                     // 12628
AST.ConditionalExpression = 'ConditionalExpression';                                                                   // 12629
AST.LogicalExpression = 'LogicalExpression';                                                                           // 12630
AST.BinaryExpression = 'BinaryExpression';                                                                             // 12631
AST.UnaryExpression = 'UnaryExpression';                                                                               // 12632
AST.CallExpression = 'CallExpression';                                                                                 // 12633
AST.MemberExpression = 'MemberExpression';                                                                             // 12634
AST.Identifier = 'Identifier';                                                                                         // 12635
AST.Literal = 'Literal';                                                                                               // 12636
AST.ArrayExpression = 'ArrayExpression';                                                                               // 12637
AST.Property = 'Property';                                                                                             // 12638
AST.ObjectExpression = 'ObjectExpression';                                                                             // 12639
AST.ThisExpression = 'ThisExpression';                                                                                 // 12640
                                                                                                                       // 12641
// Internal use only                                                                                                   // 12642
AST.NGValueParameter = 'NGValueParameter';                                                                             // 12643
                                                                                                                       // 12644
AST.prototype = {                                                                                                      // 12645
  ast: function(text) {                                                                                                // 12646
    this.text = text;                                                                                                  // 12647
    this.tokens = this.lexer.lex(text);                                                                                // 12648
                                                                                                                       // 12649
    var value = this.program();                                                                                        // 12650
                                                                                                                       // 12651
    if (this.tokens.length !== 0) {                                                                                    // 12652
      this.throwError('is an unexpected token', this.tokens[0]);                                                       // 12653
    }                                                                                                                  // 12654
                                                                                                                       // 12655
    return value;                                                                                                      // 12656
  },                                                                                                                   // 12657
                                                                                                                       // 12658
  program: function() {                                                                                                // 12659
    var body = [];                                                                                                     // 12660
    while (true) {                                                                                                     // 12661
      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))                                                    // 12662
        body.push(this.expressionStatement());                                                                         // 12663
      if (!this.expect(';')) {                                                                                         // 12664
        return { type: AST.Program, body: body};                                                                       // 12665
      }                                                                                                                // 12666
    }                                                                                                                  // 12667
  },                                                                                                                   // 12668
                                                                                                                       // 12669
  expressionStatement: function() {                                                                                    // 12670
    return { type: AST.ExpressionStatement, expression: this.filterChain() };                                          // 12671
  },                                                                                                                   // 12672
                                                                                                                       // 12673
  filterChain: function() {                                                                                            // 12674
    var left = this.expression();                                                                                      // 12675
    var token;                                                                                                         // 12676
    while ((token = this.expect('|'))) {                                                                               // 12677
      left = this.filter(left);                                                                                        // 12678
    }                                                                                                                  // 12679
    return left;                                                                                                       // 12680
  },                                                                                                                   // 12681
                                                                                                                       // 12682
  expression: function() {                                                                                             // 12683
    return this.assignment();                                                                                          // 12684
  },                                                                                                                   // 12685
                                                                                                                       // 12686
  assignment: function() {                                                                                             // 12687
    var result = this.ternary();                                                                                       // 12688
    if (this.expect('=')) {                                                                                            // 12689
      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};               // 12690
    }                                                                                                                  // 12691
    return result;                                                                                                     // 12692
  },                                                                                                                   // 12693
                                                                                                                       // 12694
  ternary: function() {                                                                                                // 12695
    var test = this.logicalOR();                                                                                       // 12696
    var alternate;                                                                                                     // 12697
    var consequent;                                                                                                    // 12698
    if (this.expect('?')) {                                                                                            // 12699
      alternate = this.expression();                                                                                   // 12700
      if (this.consume(':')) {                                                                                         // 12701
        consequent = this.expression();                                                                                // 12702
        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};           // 12703
      }                                                                                                                // 12704
    }                                                                                                                  // 12705
    return test;                                                                                                       // 12706
  },                                                                                                                   // 12707
                                                                                                                       // 12708
  logicalOR: function() {                                                                                              // 12709
    var left = this.logicalAND();                                                                                      // 12710
    while (this.expect('||')) {                                                                                        // 12711
      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };                    // 12712
    }                                                                                                                  // 12713
    return left;                                                                                                       // 12714
  },                                                                                                                   // 12715
                                                                                                                       // 12716
  logicalAND: function() {                                                                                             // 12717
    var left = this.equality();                                                                                        // 12718
    while (this.expect('&&')) {                                                                                        // 12719
      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};                       // 12720
    }                                                                                                                  // 12721
    return left;                                                                                                       // 12722
  },                                                                                                                   // 12723
                                                                                                                       // 12724
  equality: function() {                                                                                               // 12725
    var left = this.relational();                                                                                      // 12726
    var token;                                                                                                         // 12727
    while ((token = this.expect('==','!=','===','!=='))) {                                                             // 12728
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };               // 12729
    }                                                                                                                  // 12730
    return left;                                                                                                       // 12731
  },                                                                                                                   // 12732
                                                                                                                       // 12733
  relational: function() {                                                                                             // 12734
    var left = this.additive();                                                                                        // 12735
    var token;                                                                                                         // 12736
    while ((token = this.expect('<', '>', '<=', '>='))) {                                                              // 12737
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };                 // 12738
    }                                                                                                                  // 12739
    return left;                                                                                                       // 12740
  },                                                                                                                   // 12741
                                                                                                                       // 12742
  additive: function() {                                                                                               // 12743
    var left = this.multiplicative();                                                                                  // 12744
    var token;                                                                                                         // 12745
    while ((token = this.expect('+','-'))) {                                                                           // 12746
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };           // 12747
    }                                                                                                                  // 12748
    return left;                                                                                                       // 12749
  },                                                                                                                   // 12750
                                                                                                                       // 12751
  multiplicative: function() {                                                                                         // 12752
    var left = this.unary();                                                                                           // 12753
    var token;                                                                                                         // 12754
    while ((token = this.expect('*','/','%'))) {                                                                       // 12755
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };                    // 12756
    }                                                                                                                  // 12757
    return left;                                                                                                       // 12758
  },                                                                                                                   // 12759
                                                                                                                       // 12760
  unary: function() {                                                                                                  // 12761
    var token;                                                                                                         // 12762
    if ((token = this.expect('+', '-', '!'))) {                                                                        // 12763
      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };                // 12764
    } else {                                                                                                           // 12765
      return this.primary();                                                                                           // 12766
    }                                                                                                                  // 12767
  },                                                                                                                   // 12768
                                                                                                                       // 12769
  primary: function() {                                                                                                // 12770
    var primary;                                                                                                       // 12771
    if (this.expect('(')) {                                                                                            // 12772
      primary = this.filterChain();                                                                                    // 12773
      this.consume(')');                                                                                               // 12774
    } else if (this.expect('[')) {                                                                                     // 12775
      primary = this.arrayDeclaration();                                                                               // 12776
    } else if (this.expect('{')) {                                                                                     // 12777
      primary = this.object();                                                                                         // 12778
    } else if (this.constants.hasOwnProperty(this.peek().text)) {                                                      // 12779
      primary = copy(this.constants[this.consume().text]);                                                             // 12780
    } else if (this.peek().identifier) {                                                                               // 12781
      primary = this.identifier();                                                                                     // 12782
    } else if (this.peek().constant) {                                                                                 // 12783
      primary = this.constant();                                                                                       // 12784
    } else {                                                                                                           // 12785
      this.throwError('not a primary expression', this.peek());                                                        // 12786
    }                                                                                                                  // 12787
                                                                                                                       // 12788
    var next;                                                                                                          // 12789
    while ((next = this.expect('(', '[', '.'))) {                                                                      // 12790
      if (next.text === '(') {                                                                                         // 12791
        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };                      // 12792
        this.consume(')');                                                                                             // 12793
      } else if (next.text === '[') {                                                                                  // 12794
        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };        // 12795
        this.consume(']');                                                                                             // 12796
      } else if (next.text === '.') {                                                                                  // 12797
        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };       // 12798
      } else {                                                                                                         // 12799
        this.throwError('IMPOSSIBLE');                                                                                 // 12800
      }                                                                                                                // 12801
    }                                                                                                                  // 12802
    return primary;                                                                                                    // 12803
  },                                                                                                                   // 12804
                                                                                                                       // 12805
  filter: function(baseExpression) {                                                                                   // 12806
    var args = [baseExpression];                                                                                       // 12807
    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};                 // 12808
                                                                                                                       // 12809
    while (this.expect(':')) {                                                                                         // 12810
      args.push(this.expression());                                                                                    // 12811
    }                                                                                                                  // 12812
                                                                                                                       // 12813
    return result;                                                                                                     // 12814
  },                                                                                                                   // 12815
                                                                                                                       // 12816
  parseArguments: function() {                                                                                         // 12817
    var args = [];                                                                                                     // 12818
    if (this.peekToken().text !== ')') {                                                                               // 12819
      do {                                                                                                             // 12820
        args.push(this.expression());                                                                                  // 12821
      } while (this.expect(','));                                                                                      // 12822
    }                                                                                                                  // 12823
    return args;                                                                                                       // 12824
  },                                                                                                                   // 12825
                                                                                                                       // 12826
  identifier: function() {                                                                                             // 12827
    var token = this.consume();                                                                                        // 12828
    if (!token.identifier) {                                                                                           // 12829
      this.throwError('is not a valid identifier', token);                                                             // 12830
    }                                                                                                                  // 12831
    return { type: AST.Identifier, name: token.text };                                                                 // 12832
  },                                                                                                                   // 12833
                                                                                                                       // 12834
  constant: function() {                                                                                               // 12835
    // TODO check that it is a constant                                                                                // 12836
    return { type: AST.Literal, value: this.consume().value };                                                         // 12837
  },                                                                                                                   // 12838
                                                                                                                       // 12839
  arrayDeclaration: function() {                                                                                       // 12840
    var elements = [];                                                                                                 // 12841
    if (this.peekToken().text !== ']') {                                                                               // 12842
      do {                                                                                                             // 12843
        if (this.peek(']')) {                                                                                          // 12844
          // Support trailing commas per ES5.1.                                                                        // 12845
          break;                                                                                                       // 12846
        }                                                                                                              // 12847
        elements.push(this.expression());                                                                              // 12848
      } while (this.expect(','));                                                                                      // 12849
    }                                                                                                                  // 12850
    this.consume(']');                                                                                                 // 12851
                                                                                                                       // 12852
    return { type: AST.ArrayExpression, elements: elements };                                                          // 12853
  },                                                                                                                   // 12854
                                                                                                                       // 12855
  object: function() {                                                                                                 // 12856
    var properties = [], property;                                                                                     // 12857
    if (this.peekToken().text !== '}') {                                                                               // 12858
      do {                                                                                                             // 12859
        if (this.peek('}')) {                                                                                          // 12860
          // Support trailing commas per ES5.1.                                                                        // 12861
          break;                                                                                                       // 12862
        }                                                                                                              // 12863
        property = {type: AST.Property, kind: 'init'};                                                                 // 12864
        if (this.peek().constant) {                                                                                    // 12865
          property.key = this.constant();                                                                              // 12866
        } else if (this.peek().identifier) {                                                                           // 12867
          property.key = this.identifier();                                                                            // 12868
        } else {                                                                                                       // 12869
          this.throwError("invalid key", this.peek());                                                                 // 12870
        }                                                                                                              // 12871
        this.consume(':');                                                                                             // 12872
        property.value = this.expression();                                                                            // 12873
        properties.push(property);                                                                                     // 12874
      } while (this.expect(','));                                                                                      // 12875
    }                                                                                                                  // 12876
    this.consume('}');                                                                                                 // 12877
                                                                                                                       // 12878
    return {type: AST.ObjectExpression, properties: properties };                                                      // 12879
  },                                                                                                                   // 12880
                                                                                                                       // 12881
  throwError: function(msg, token) {                                                                                   // 12882
    throw $parseMinErr('syntax',                                                                                       // 12883
        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',                    // 12884
          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));                            // 12885
  },                                                                                                                   // 12886
                                                                                                                       // 12887
  consume: function(e1) {                                                                                              // 12888
    if (this.tokens.length === 0) {                                                                                    // 12889
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);                                      // 12890
    }                                                                                                                  // 12891
                                                                                                                       // 12892
    var token = this.expect(e1);                                                                                       // 12893
    if (!token) {                                                                                                      // 12894
      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());                                           // 12895
    }                                                                                                                  // 12896
    return token;                                                                                                      // 12897
  },                                                                                                                   // 12898
                                                                                                                       // 12899
  peekToken: function() {                                                                                              // 12900
    if (this.tokens.length === 0) {                                                                                    // 12901
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);                                      // 12902
    }                                                                                                                  // 12903
    return this.tokens[0];                                                                                             // 12904
  },                                                                                                                   // 12905
                                                                                                                       // 12906
  peek: function(e1, e2, e3, e4) {                                                                                     // 12907
    return this.peekAhead(0, e1, e2, e3, e4);                                                                          // 12908
  },                                                                                                                   // 12909
                                                                                                                       // 12910
  peekAhead: function(i, e1, e2, e3, e4) {                                                                             // 12911
    if (this.tokens.length > i) {                                                                                      // 12912
      var token = this.tokens[i];                                                                                      // 12913
      var t = token.text;                                                                                              // 12914
      if (t === e1 || t === e2 || t === e3 || t === e4 ||                                                              // 12915
          (!e1 && !e2 && !e3 && !e4)) {                                                                                // 12916
        return token;                                                                                                  // 12917
      }                                                                                                                // 12918
    }                                                                                                                  // 12919
    return false;                                                                                                      // 12920
  },                                                                                                                   // 12921
                                                                                                                       // 12922
  expect: function(e1, e2, e3, e4) {                                                                                   // 12923
    var token = this.peek(e1, e2, e3, e4);                                                                             // 12924
    if (token) {                                                                                                       // 12925
      this.tokens.shift();                                                                                             // 12926
      return token;                                                                                                    // 12927
    }                                                                                                                  // 12928
    return false;                                                                                                      // 12929
  },                                                                                                                   // 12930
                                                                                                                       // 12931
                                                                                                                       // 12932
  /* `undefined` is not a constant, it is an identifier,                                                               // 12933
   * but using it as an identifier is not supported                                                                    // 12934
   */                                                                                                                  // 12935
  constants: {                                                                                                         // 12936
    'true': { type: AST.Literal, value: true },                                                                        // 12937
    'false': { type: AST.Literal, value: false },                                                                      // 12938
    'null': { type: AST.Literal, value: null },                                                                        // 12939
    'undefined': {type: AST.Literal, value: undefined },                                                               // 12940
    'this': {type: AST.ThisExpression }                                                                                // 12941
  }                                                                                                                    // 12942
};                                                                                                                     // 12943
                                                                                                                       // 12944
function ifDefined(v, d) {                                                                                             // 12945
  return typeof v !== 'undefined' ? v : d;                                                                             // 12946
}                                                                                                                      // 12947
                                                                                                                       // 12948
function plusFn(l, r) {                                                                                                // 12949
  if (typeof l === 'undefined') return r;                                                                              // 12950
  if (typeof r === 'undefined') return l;                                                                              // 12951
  return l + r;                                                                                                        // 12952
}                                                                                                                      // 12953
                                                                                                                       // 12954
function isStateless($filter, filterName) {                                                                            // 12955
  var fn = $filter(filterName);                                                                                        // 12956
  return !fn.$stateful;                                                                                                // 12957
}                                                                                                                      // 12958
                                                                                                                       // 12959
function findConstantAndWatchExpressions(ast, $filter) {                                                               // 12960
  var allConstants;                                                                                                    // 12961
  var argsToWatch;                                                                                                     // 12962
  switch (ast.type) {                                                                                                  // 12963
  case AST.Program:                                                                                                    // 12964
    allConstants = true;                                                                                               // 12965
    forEach(ast.body, function(expr) {                                                                                 // 12966
      findConstantAndWatchExpressions(expr.expression, $filter);                                                       // 12967
      allConstants = allConstants && expr.expression.constant;                                                         // 12968
    });                                                                                                                // 12969
    ast.constant = allConstants;                                                                                       // 12970
    break;                                                                                                             // 12971
  case AST.Literal:                                                                                                    // 12972
    ast.constant = true;                                                                                               // 12973
    ast.toWatch = [];                                                                                                  // 12974
    break;                                                                                                             // 12975
  case AST.UnaryExpression:                                                                                            // 12976
    findConstantAndWatchExpressions(ast.argument, $filter);                                                            // 12977
    ast.constant = ast.argument.constant;                                                                              // 12978
    ast.toWatch = ast.argument.toWatch;                                                                                // 12979
    break;                                                                                                             // 12980
  case AST.BinaryExpression:                                                                                           // 12981
    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 12982
    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 12983
    ast.constant = ast.left.constant && ast.right.constant;                                                            // 12984
    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);                                                          // 12985
    break;                                                                                                             // 12986
  case AST.LogicalExpression:                                                                                          // 12987
    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 12988
    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 12989
    ast.constant = ast.left.constant && ast.right.constant;                                                            // 12990
    ast.toWatch = ast.constant ? [] : [ast];                                                                           // 12991
    break;                                                                                                             // 12992
  case AST.ConditionalExpression:                                                                                      // 12993
    findConstantAndWatchExpressions(ast.test, $filter);                                                                // 12994
    findConstantAndWatchExpressions(ast.alternate, $filter);                                                           // 12995
    findConstantAndWatchExpressions(ast.consequent, $filter);                                                          // 12996
    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;                             // 12997
    ast.toWatch = ast.constant ? [] : [ast];                                                                           // 12998
    break;                                                                                                             // 12999
  case AST.Identifier:                                                                                                 // 13000
    ast.constant = false;                                                                                              // 13001
    ast.toWatch = [ast];                                                                                               // 13002
    break;                                                                                                             // 13003
  case AST.MemberExpression:                                                                                           // 13004
    findConstantAndWatchExpressions(ast.object, $filter);                                                              // 13005
    if (ast.computed) {                                                                                                // 13006
      findConstantAndWatchExpressions(ast.property, $filter);                                                          // 13007
    }                                                                                                                  // 13008
    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);                                    // 13009
    ast.toWatch = [ast];                                                                                               // 13010
    break;                                                                                                             // 13011
  case AST.CallExpression:                                                                                             // 13012
    allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;                                         // 13013
    argsToWatch = [];                                                                                                  // 13014
    forEach(ast.arguments, function(expr) {                                                                            // 13015
      findConstantAndWatchExpressions(expr, $filter);                                                                  // 13016
      allConstants = allConstants && expr.constant;                                                                    // 13017
      if (!expr.constant) {                                                                                            // 13018
        argsToWatch.push.apply(argsToWatch, expr.toWatch);                                                             // 13019
      }                                                                                                                // 13020
    });                                                                                                                // 13021
    ast.constant = allConstants;                                                                                       // 13022
    ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];                           // 13023
    break;                                                                                                             // 13024
  case AST.AssignmentExpression:                                                                                       // 13025
    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 13026
    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 13027
    ast.constant = ast.left.constant && ast.right.constant;                                                            // 13028
    ast.toWatch = [ast];                                                                                               // 13029
    break;                                                                                                             // 13030
  case AST.ArrayExpression:                                                                                            // 13031
    allConstants = true;                                                                                               // 13032
    argsToWatch = [];                                                                                                  // 13033
    forEach(ast.elements, function(expr) {                                                                             // 13034
      findConstantAndWatchExpressions(expr, $filter);                                                                  // 13035
      allConstants = allConstants && expr.constant;                                                                    // 13036
      if (!expr.constant) {                                                                                            // 13037
        argsToWatch.push.apply(argsToWatch, expr.toWatch);                                                             // 13038
      }                                                                                                                // 13039
    });                                                                                                                // 13040
    ast.constant = allConstants;                                                                                       // 13041
    ast.toWatch = argsToWatch;                                                                                         // 13042
    break;                                                                                                             // 13043
  case AST.ObjectExpression:                                                                                           // 13044
    allConstants = true;                                                                                               // 13045
    argsToWatch = [];                                                                                                  // 13046
    forEach(ast.properties, function(property) {                                                                       // 13047
      findConstantAndWatchExpressions(property.value, $filter);                                                        // 13048
      allConstants = allConstants && property.value.constant;                                                          // 13049
      if (!property.value.constant) {                                                                                  // 13050
        argsToWatch.push.apply(argsToWatch, property.value.toWatch);                                                   // 13051
      }                                                                                                                // 13052
    });                                                                                                                // 13053
    ast.constant = allConstants;                                                                                       // 13054
    ast.toWatch = argsToWatch;                                                                                         // 13055
    break;                                                                                                             // 13056
  case AST.ThisExpression:                                                                                             // 13057
    ast.constant = false;                                                                                              // 13058
    ast.toWatch = [];                                                                                                  // 13059
    break;                                                                                                             // 13060
  }                                                                                                                    // 13061
}                                                                                                                      // 13062
                                                                                                                       // 13063
function getInputs(body) {                                                                                             // 13064
  if (body.length != 1) return;                                                                                        // 13065
  var lastExpression = body[0].expression;                                                                             // 13066
  var candidate = lastExpression.toWatch;                                                                              // 13067
  if (candidate.length !== 1) return candidate;                                                                        // 13068
  return candidate[0] !== lastExpression ? candidate : undefined;                                                      // 13069
}                                                                                                                      // 13070
                                                                                                                       // 13071
function isAssignable(ast) {                                                                                           // 13072
  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;                                             // 13073
}                                                                                                                      // 13074
                                                                                                                       // 13075
function assignableAST(ast) {                                                                                          // 13076
  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {                                                 // 13077
    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};
  }                                                                                                                    // 13079
}                                                                                                                      // 13080
                                                                                                                       // 13081
function isLiteral(ast) {                                                                                              // 13082
  return ast.body.length === 0 ||                                                                                      // 13083
      ast.body.length === 1 && (                                                                                       // 13084
      ast.body[0].expression.type === AST.Literal ||                                                                   // 13085
      ast.body[0].expression.type === AST.ArrayExpression ||                                                           // 13086
      ast.body[0].expression.type === AST.ObjectExpression);                                                           // 13087
}                                                                                                                      // 13088
                                                                                                                       // 13089
function isConstant(ast) {                                                                                             // 13090
  return ast.constant;                                                                                                 // 13091
}                                                                                                                      // 13092
                                                                                                                       // 13093
function ASTCompiler(astBuilder, $filter) {                                                                            // 13094
  this.astBuilder = astBuilder;                                                                                        // 13095
  this.$filter = $filter;                                                                                              // 13096
}                                                                                                                      // 13097
                                                                                                                       // 13098
ASTCompiler.prototype = {                                                                                              // 13099
  compile: function(expression, expensiveChecks) {                                                                     // 13100
    var self = this;                                                                                                   // 13101
    var ast = this.astBuilder.ast(expression);                                                                         // 13102
    this.state = {                                                                                                     // 13103
      nextId: 0,                                                                                                       // 13104
      filters: {},                                                                                                     // 13105
      expensiveChecks: expensiveChecks,                                                                                // 13106
      fn: {vars: [], body: [], own: {}},                                                                               // 13107
      assign: {vars: [], body: [], own: {}},                                                                           // 13108
      inputs: []                                                                                                       // 13109
    };                                                                                                                 // 13110
    findConstantAndWatchExpressions(ast, self.$filter);                                                                // 13111
    var extra = '';                                                                                                    // 13112
    var assignable;                                                                                                    // 13113
    this.stage = 'assign';                                                                                             // 13114
    if ((assignable = assignableAST(ast))) {                                                                           // 13115
      this.state.computing = 'assign';                                                                                 // 13116
      var result = this.nextId();                                                                                      // 13117
      this.recurse(assignable, result);                                                                                // 13118
      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');                                                 // 13119
    }                                                                                                                  // 13120
    var toWatch = getInputs(ast.body);                                                                                 // 13121
    self.stage = 'inputs';                                                                                             // 13122
    forEach(toWatch, function(watch, key) {                                                                            // 13123
      var fnKey = 'fn' + key;                                                                                          // 13124
      self.state[fnKey] = {vars: [], body: [], own: {}};                                                               // 13125
      self.state.computing = fnKey;                                                                                    // 13126
      var intoId = self.nextId();                                                                                      // 13127
      self.recurse(watch, intoId);                                                                                     // 13128
      self.return_(intoId);                                                                                            // 13129
      self.state.inputs.push(fnKey);                                                                                   // 13130
      watch.watchId = key;                                                                                             // 13131
    });                                                                                                                // 13132
    this.state.computing = 'fn';                                                                                       // 13133
    this.stage = 'main';                                                                                               // 13134
    this.recurse(ast);                                                                                                 // 13135
    var fnString =                                                                                                     // 13136
      // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
      // This is a workaround for this until we do a better job at only removing the prefix only when we should.       // 13138
      '"' + this.USE + ' ' + this.STRICT + '";\n' +                                                                    // 13139
      this.filterPrefix() +                                                                                            // 13140
      'var fn=' + this.generateFunction('fn', 's,l,a,i') +                                                             // 13141
      extra +                                                                                                          // 13142
      this.watchFns() +                                                                                                // 13143
      'return fn;';                                                                                                    // 13144
                                                                                                                       // 13145
    /* jshint -W054 */                                                                                                 // 13146
    var fn = (new Function('$filter',                                                                                  // 13147
        'ensureSafeMemberName',                                                                                        // 13148
        'ensureSafeObject',                                                                                            // 13149
        'ensureSafeFunction',                                                                                          // 13150
        'ifDefined',                                                                                                   // 13151
        'plus',                                                                                                        // 13152
        'text',                                                                                                        // 13153
        fnString))(                                                                                                    // 13154
          this.$filter,                                                                                                // 13155
          ensureSafeMemberName,                                                                                        // 13156
          ensureSafeObject,                                                                                            // 13157
          ensureSafeFunction,                                                                                          // 13158
          ifDefined,                                                                                                   // 13159
          plusFn,                                                                                                      // 13160
          expression);                                                                                                 // 13161
    /* jshint +W054 */                                                                                                 // 13162
    this.state = this.stage = undefined;                                                                               // 13163
    fn.literal = isLiteral(ast);                                                                                       // 13164
    fn.constant = isConstant(ast);                                                                                     // 13165
    return fn;                                                                                                         // 13166
  },                                                                                                                   // 13167
                                                                                                                       // 13168
  USE: 'use',                                                                                                          // 13169
                                                                                                                       // 13170
  STRICT: 'strict',                                                                                                    // 13171
                                                                                                                       // 13172
  watchFns: function() {                                                                                               // 13173
    var result = [];                                                                                                   // 13174
    var fns = this.state.inputs;                                                                                       // 13175
    var self = this;                                                                                                   // 13176
    forEach(fns, function(name) {                                                                                      // 13177
      result.push('var ' + name + '=' + self.generateFunction(name, 's'));                                             // 13178
    });                                                                                                                // 13179
    if (fns.length) {                                                                                                  // 13180
      result.push('fn.inputs=[' + fns.join(',') + '];');                                                               // 13181
    }                                                                                                                  // 13182
    return result.join('');                                                                                            // 13183
  },                                                                                                                   // 13184
                                                                                                                       // 13185
  generateFunction: function(name, params) {                                                                           // 13186
    return 'function(' + params + '){' +                                                                               // 13187
        this.varsPrefix(name) +                                                                                        // 13188
        this.body(name) +                                                                                              // 13189
        '};';                                                                                                          // 13190
  },                                                                                                                   // 13191
                                                                                                                       // 13192
  filterPrefix: function() {                                                                                           // 13193
    var parts = [];                                                                                                    // 13194
    var self = this;                                                                                                   // 13195
    forEach(this.state.filters, function(id, filter) {                                                                 // 13196
      parts.push(id + '=$filter(' + self.escape(filter) + ')');                                                        // 13197
    });                                                                                                                // 13198
    if (parts.length) return 'var ' + parts.join(',') + ';';                                                           // 13199
    return '';                                                                                                         // 13200
  },                                                                                                                   // 13201
                                                                                                                       // 13202
  varsPrefix: function(section) {                                                                                      // 13203
    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';                   // 13204
  },                                                                                                                   // 13205
                                                                                                                       // 13206
  body: function(section) {                                                                                            // 13207
    return this.state[section].body.join('');                                                                          // 13208
  },                                                                                                                   // 13209
                                                                                                                       // 13210
  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {                                      // 13211
    var left, right, self = this, args, expression;                                                                    // 13212
    recursionFn = recursionFn || noop;                                                                                 // 13213
    if (!skipWatchIdCheck && isDefined(ast.watchId)) {                                                                 // 13214
      intoId = intoId || this.nextId();                                                                                // 13215
      this.if_('i',                                                                                                    // 13216
        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),                                                // 13217
        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)                                               // 13218
      );                                                                                                               // 13219
      return;                                                                                                          // 13220
    }                                                                                                                  // 13221
    switch (ast.type) {                                                                                                // 13222
    case AST.Program:                                                                                                  // 13223
      forEach(ast.body, function(expression, pos) {                                                                    // 13224
        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });                   // 13225
        if (pos !== ast.body.length - 1) {                                                                             // 13226
          self.current().body.push(right, ';');                                                                        // 13227
        } else {                                                                                                       // 13228
          self.return_(right);                                                                                         // 13229
        }                                                                                                              // 13230
      });                                                                                                              // 13231
      break;                                                                                                           // 13232
    case AST.Literal:                                                                                                  // 13233
      expression = this.escape(ast.value);                                                                             // 13234
      this.assign(intoId, expression);                                                                                 // 13235
      recursionFn(expression);                                                                                         // 13236
      break;                                                                                                           // 13237
    case AST.UnaryExpression:                                                                                          // 13238
      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });                              // 13239
      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';                                                // 13240
      this.assign(intoId, expression);                                                                                 // 13241
      recursionFn(expression);                                                                                         // 13242
      break;                                                                                                           // 13243
    case AST.BinaryExpression:                                                                                         // 13244
      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });                                   // 13245
      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });                                 // 13246
      if (ast.operator === '+') {                                                                                      // 13247
        expression = this.plus(left, right);                                                                           // 13248
      } else if (ast.operator === '-') {                                                                               // 13249
        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);                                // 13250
      } else {                                                                                                         // 13251
        expression = '(' + left + ')' + ast.operator + '(' + right + ')';                                              // 13252
      }                                                                                                                // 13253
      this.assign(intoId, expression);                                                                                 // 13254
      recursionFn(expression);                                                                                         // 13255
      break;                                                                                                           // 13256
    case AST.LogicalExpression:                                                                                        // 13257
      intoId = intoId || this.nextId();                                                                                // 13258
      self.recurse(ast.left, intoId);                                                                                  // 13259
      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));                // 13260
      recursionFn(intoId);                                                                                             // 13261
      break;                                                                                                           // 13262
    case AST.ConditionalExpression:                                                                                    // 13263
      intoId = intoId || this.nextId();                                                                                // 13264
      self.recurse(ast.test, intoId);                                                                                  // 13265
      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));             // 13266
      recursionFn(intoId);                                                                                             // 13267
      break;                                                                                                           // 13268
    case AST.Identifier:                                                                                               // 13269
      intoId = intoId || this.nextId();                                                                                // 13270
      if (nameId) {                                                                                                    // 13271
        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
        nameId.computed = false;                                                                                       // 13273
        nameId.name = ast.name;                                                                                        // 13274
      }                                                                                                                // 13275
      ensureSafeMemberName(ast.name);                                                                                  // 13276
      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),                             // 13277
        function() {                                                                                                   // 13278
          self.if_(self.stage === 'inputs' || 's', function() {                                                        // 13279
            if (create && create !== 1) {                                                                              // 13280
              self.if_(                                                                                                // 13281
                self.not(self.nonComputedMember('s', ast.name)),                                                       // 13282
                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));                                         // 13283
            }                                                                                                          // 13284
            self.assign(intoId, self.nonComputedMember('s', ast.name));                                                // 13285
          });                                                                                                          // 13286
        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))                                    // 13287
        );                                                                                                             // 13288
      if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {                                     // 13289
        self.addEnsureSafeObject(intoId);                                                                              // 13290
      }                                                                                                                // 13291
      recursionFn(intoId);                                                                                             // 13292
      break;                                                                                                           // 13293
    case AST.MemberExpression:                                                                                         // 13294
      left = nameId && (nameId.context = this.nextId()) || this.nextId();                                              // 13295
      intoId = intoId || this.nextId();                                                                                // 13296
      self.recurse(ast.object, left, undefined, function() {                                                           // 13297
        self.if_(self.notNull(left), function() {                                                                      // 13298
          if (ast.computed) {                                                                                          // 13299
            right = self.nextId();                                                                                     // 13300
            self.recurse(ast.property, right);                                                                         // 13301
            self.addEnsureSafeMemberName(right);                                                                       // 13302
            if (create && create !== 1) {                                                                              // 13303
              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
            }                                                                                                          // 13305
            expression = self.ensureSafeObject(self.computedMember(left, right));                                      // 13306
            self.assign(intoId, expression);                                                                           // 13307
            if (nameId) {                                                                                              // 13308
              nameId.computed = true;                                                                                  // 13309
              nameId.name = right;                                                                                     // 13310
            }                                                                                                          // 13311
          } else {                                                                                                     // 13312
            ensureSafeMemberName(ast.property.name);                                                                   // 13313
            if (create && create !== 1) {                                                                              // 13314
              self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
            }                                                                                                          // 13316
            expression = self.nonComputedMember(left, ast.property.name);                                              // 13317
            if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {                      // 13318
              expression = self.ensureSafeObject(expression);                                                          // 13319
            }                                                                                                          // 13320
            self.assign(intoId, expression);                                                                           // 13321
            if (nameId) {                                                                                              // 13322
              nameId.computed = false;                                                                                 // 13323
              nameId.name = ast.property.name;                                                                         // 13324
            }                                                                                                          // 13325
          }                                                                                                            // 13326
        }, function() {                                                                                                // 13327
          self.assign(intoId, 'undefined');                                                                            // 13328
        });                                                                                                            // 13329
        recursionFn(intoId);                                                                                           // 13330
      }, !!create);                                                                                                    // 13331
      break;                                                                                                           // 13332
    case AST.CallExpression:                                                                                           // 13333
      intoId = intoId || this.nextId();                                                                                // 13334
      if (ast.filter) {                                                                                                // 13335
        right = self.filter(ast.callee.name);                                                                          // 13336
        args = [];                                                                                                     // 13337
        forEach(ast.arguments, function(expr) {                                                                        // 13338
          var argument = self.nextId();                                                                                // 13339
          self.recurse(expr, argument);                                                                                // 13340
          args.push(argument);                                                                                         // 13341
        });                                                                                                            // 13342
        expression = right + '(' + args.join(',') + ')';                                                               // 13343
        self.assign(intoId, expression);                                                                               // 13344
        recursionFn(intoId);                                                                                           // 13345
      } else {                                                                                                         // 13346
        right = self.nextId();                                                                                         // 13347
        left = {};                                                                                                     // 13348
        args = [];                                                                                                     // 13349
        self.recurse(ast.callee, right, left, function() {                                                             // 13350
          self.if_(self.notNull(right), function() {                                                                   // 13351
            self.addEnsureSafeFunction(right);                                                                         // 13352
            forEach(ast.arguments, function(expr) {                                                                    // 13353
              self.recurse(expr, self.nextId(), undefined, function(argument) {                                        // 13354
                args.push(self.ensureSafeObject(argument));                                                            // 13355
              });                                                                                                      // 13356
            });                                                                                                        // 13357
            if (left.name) {                                                                                           // 13358
              if (!self.state.expensiveChecks) {                                                                       // 13359
                self.addEnsureSafeObject(left.context);                                                                // 13360
              }                                                                                                        // 13361
              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';           // 13362
            } else {                                                                                                   // 13363
              expression = right + '(' + args.join(',') + ')';                                                         // 13364
            }                                                                                                          // 13365
            expression = self.ensureSafeObject(expression);                                                            // 13366
            self.assign(intoId, expression);                                                                           // 13367
          }, function() {                                                                                              // 13368
            self.assign(intoId, 'undefined');                                                                          // 13369
          });                                                                                                          // 13370
          recursionFn(intoId);                                                                                         // 13371
        });                                                                                                            // 13372
      }                                                                                                                // 13373
      break;                                                                                                           // 13374
    case AST.AssignmentExpression:                                                                                     // 13375
      right = this.nextId();                                                                                           // 13376
      left = {};                                                                                                       // 13377
      if (!isAssignable(ast.left)) {                                                                                   // 13378
        throw $parseMinErr('lval', 'Trying to assing a value to a non l-value');                                       // 13379
      }                                                                                                                // 13380
      this.recurse(ast.left, undefined, left, function() {                                                             // 13381
        self.if_(self.notNull(left.context), function() {                                                              // 13382
          self.recurse(ast.right, right);                                                                              // 13383
          self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));                               // 13384
          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;                     // 13385
          self.assign(intoId, expression);                                                                             // 13386
          recursionFn(intoId || expression);                                                                           // 13387
        });                                                                                                            // 13388
      }, 1);                                                                                                           // 13389
      break;                                                                                                           // 13390
    case AST.ArrayExpression:                                                                                          // 13391
      args = [];                                                                                                       // 13392
      forEach(ast.elements, function(expr) {                                                                           // 13393
        self.recurse(expr, self.nextId(), undefined, function(argument) {                                              // 13394
          args.push(argument);                                                                                         // 13395
        });                                                                                                            // 13396
      });                                                                                                              // 13397
      expression = '[' + args.join(',') + ']';                                                                         // 13398
      this.assign(intoId, expression);                                                                                 // 13399
      recursionFn(expression);                                                                                         // 13400
      break;                                                                                                           // 13401
    case AST.ObjectExpression:                                                                                         // 13402
      args = [];                                                                                                       // 13403
      forEach(ast.properties, function(property) {                                                                     // 13404
        self.recurse(property.value, self.nextId(), undefined, function(expr) {                                        // 13405
          args.push(self.escape(                                                                                       // 13406
              property.key.type === AST.Identifier ? property.key.name :                                               // 13407
                ('' + property.key.value)) +                                                                           // 13408
              ':' + expr);                                                                                             // 13409
        });                                                                                                            // 13410
      });                                                                                                              // 13411
      expression = '{' + args.join(',') + '}';                                                                         // 13412
      this.assign(intoId, expression);                                                                                 // 13413
      recursionFn(expression);                                                                                         // 13414
      break;                                                                                                           // 13415
    case AST.ThisExpression:                                                                                           // 13416
      this.assign(intoId, 's');                                                                                        // 13417
      recursionFn('s');                                                                                                // 13418
      break;                                                                                                           // 13419
    case AST.NGValueParameter:                                                                                         // 13420
      this.assign(intoId, 'v');                                                                                        // 13421
      recursionFn('v');                                                                                                // 13422
      break;                                                                                                           // 13423
    }                                                                                                                  // 13424
  },                                                                                                                   // 13425
                                                                                                                       // 13426
  getHasOwnProperty: function(element, property) {                                                                     // 13427
    var key = element + '.' + property;                                                                                // 13428
    var own = this.current().own;                                                                                      // 13429
    if (!own.hasOwnProperty(key)) {                                                                                    // 13430
      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');                 // 13431
    }                                                                                                                  // 13432
    return own[key];                                                                                                   // 13433
  },                                                                                                                   // 13434
                                                                                                                       // 13435
  assign: function(id, value) {                                                                                        // 13436
    if (!id) return;                                                                                                   // 13437
    this.current().body.push(id, '=', value, ';');                                                                     // 13438
    return id;                                                                                                         // 13439
  },                                                                                                                   // 13440
                                                                                                                       // 13441
  filter: function(filterName) {                                                                                       // 13442
    if (!this.state.filters.hasOwnProperty(filterName)) {                                                              // 13443
      this.state.filters[filterName] = this.nextId(true);                                                              // 13444
    }                                                                                                                  // 13445
    return this.state.filters[filterName];                                                                             // 13446
  },                                                                                                                   // 13447
                                                                                                                       // 13448
  ifDefined: function(id, defaultValue) {                                                                              // 13449
    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';                                                  // 13450
  },                                                                                                                   // 13451
                                                                                                                       // 13452
  plus: function(left, right) {                                                                                        // 13453
    return 'plus(' + left + ',' + right + ')';                                                                         // 13454
  },                                                                                                                   // 13455
                                                                                                                       // 13456
  return_: function(id) {                                                                                              // 13457
    this.current().body.push('return ', id, ';');                                                                      // 13458
  },                                                                                                                   // 13459
                                                                                                                       // 13460
  if_: function(test, alternate, consequent) {                                                                         // 13461
    if (test === true) {                                                                                               // 13462
      alternate();                                                                                                     // 13463
    } else {                                                                                                           // 13464
      var body = this.current().body;                                                                                  // 13465
      body.push('if(', test, '){');                                                                                    // 13466
      alternate();                                                                                                     // 13467
      body.push('}');                                                                                                  // 13468
      if (consequent) {                                                                                                // 13469
        body.push('else{');                                                                                            // 13470
        consequent();                                                                                                  // 13471
        body.push('}');                                                                                                // 13472
      }                                                                                                                // 13473
    }                                                                                                                  // 13474
  },                                                                                                                   // 13475
                                                                                                                       // 13476
  not: function(expression) {                                                                                          // 13477
    return '!(' + expression + ')';                                                                                    // 13478
  },                                                                                                                   // 13479
                                                                                                                       // 13480
  notNull: function(expression) {                                                                                      // 13481
    return expression + '!=null';                                                                                      // 13482
  },                                                                                                                   // 13483
                                                                                                                       // 13484
  nonComputedMember: function(left, right) {                                                                           // 13485
    return left + '.' + right;                                                                                         // 13486
  },                                                                                                                   // 13487
                                                                                                                       // 13488
  computedMember: function(left, right) {                                                                              // 13489
    return left + '[' + right + ']';                                                                                   // 13490
  },                                                                                                                   // 13491
                                                                                                                       // 13492
  member: function(left, right, computed) {                                                                            // 13493
    if (computed) return this.computedMember(left, right);                                                             // 13494
    return this.nonComputedMember(left, right);                                                                        // 13495
  },                                                                                                                   // 13496
                                                                                                                       // 13497
  addEnsureSafeObject: function(item) {                                                                                // 13498
    this.current().body.push(this.ensureSafeObject(item), ';');                                                        // 13499
  },                                                                                                                   // 13500
                                                                                                                       // 13501
  addEnsureSafeMemberName: function(item) {                                                                            // 13502
    this.current().body.push(this.ensureSafeMemberName(item), ';');                                                    // 13503
  },                                                                                                                   // 13504
                                                                                                                       // 13505
  addEnsureSafeFunction: function(item) {                                                                              // 13506
    this.current().body.push(this.ensureSafeFunction(item), ';');                                                      // 13507
  },                                                                                                                   // 13508
                                                                                                                       // 13509
  ensureSafeObject: function(item) {                                                                                   // 13510
    return 'ensureSafeObject(' + item + ',text)';                                                                      // 13511
  },                                                                                                                   // 13512
                                                                                                                       // 13513
  ensureSafeMemberName: function(item) {                                                                               // 13514
    return 'ensureSafeMemberName(' + item + ',text)';                                                                  // 13515
  },                                                                                                                   // 13516
                                                                                                                       // 13517
  ensureSafeFunction: function(item) {                                                                                 // 13518
    return 'ensureSafeFunction(' + item + ',text)';                                                                    // 13519
  },                                                                                                                   // 13520
                                                                                                                       // 13521
  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {                                  // 13522
    var self = this;                                                                                                   // 13523
    return function() {                                                                                                // 13524
      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);                                        // 13525
    };                                                                                                                 // 13526
  },                                                                                                                   // 13527
                                                                                                                       // 13528
  lazyAssign: function(id, value) {                                                                                    // 13529
    var self = this;                                                                                                   // 13530
    return function() {                                                                                                // 13531
      self.assign(id, value);                                                                                          // 13532
    };                                                                                                                 // 13533
  },                                                                                                                   // 13534
                                                                                                                       // 13535
  stringEscapeRegex: /[^ a-zA-Z0-9]/g,                                                                                 // 13536
                                                                                                                       // 13537
  stringEscapeFn: function(c) {                                                                                        // 13538
    return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);                                                  // 13539
  },                                                                                                                   // 13540
                                                                                                                       // 13541
  escape: function(value) {                                                                                            // 13542
    if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";                // 13543
    if (isNumber(value)) return value.toString();                                                                      // 13544
    if (value === true) return 'true';                                                                                 // 13545
    if (value === false) return 'false';                                                                               // 13546
    if (value === null) return 'null';                                                                                 // 13547
    if (typeof value === 'undefined') return 'undefined';                                                              // 13548
                                                                                                                       // 13549
    throw $parseMinErr('esc', 'IMPOSSIBLE');                                                                           // 13550
  },                                                                                                                   // 13551
                                                                                                                       // 13552
  nextId: function(skip, init) {                                                                                       // 13553
    var id = 'v' + (this.state.nextId++);                                                                              // 13554
    if (!skip) {                                                                                                       // 13555
      this.current().vars.push(id + (init ? '=' + init : ''));                                                         // 13556
    }                                                                                                                  // 13557
    return id;                                                                                                         // 13558
  },                                                                                                                   // 13559
                                                                                                                       // 13560
  current: function() {                                                                                                // 13561
    return this.state[this.state.computing];                                                                           // 13562
  }                                                                                                                    // 13563
};                                                                                                                     // 13564
                                                                                                                       // 13565
                                                                                                                       // 13566
function ASTInterpreter(astBuilder, $filter) {                                                                         // 13567
  this.astBuilder = astBuilder;                                                                                        // 13568
  this.$filter = $filter;                                                                                              // 13569
}                                                                                                                      // 13570
                                                                                                                       // 13571
ASTInterpreter.prototype = {                                                                                           // 13572
  compile: function(expression, expensiveChecks) {                                                                     // 13573
    var self = this;                                                                                                   // 13574
    var ast = this.astBuilder.ast(expression);                                                                         // 13575
    this.expression = expression;                                                                                      // 13576
    this.expensiveChecks = expensiveChecks;                                                                            // 13577
    findConstantAndWatchExpressions(ast, self.$filter);                                                                // 13578
    var assignable;                                                                                                    // 13579
    var assign;                                                                                                        // 13580
    if ((assignable = assignableAST(ast))) {                                                                           // 13581
      assign = this.recurse(assignable);                                                                               // 13582
    }                                                                                                                  // 13583
    var toWatch = getInputs(ast.body);                                                                                 // 13584
    var inputs;                                                                                                        // 13585
    if (toWatch) {                                                                                                     // 13586
      inputs = [];                                                                                                     // 13587
      forEach(toWatch, function(watch, key) {                                                                          // 13588
        var input = self.recurse(watch);                                                                               // 13589
        watch.input = input;                                                                                           // 13590
        inputs.push(input);                                                                                            // 13591
        watch.watchId = key;                                                                                           // 13592
      });                                                                                                              // 13593
    }                                                                                                                  // 13594
    var expressions = [];                                                                                              // 13595
    forEach(ast.body, function(expression) {                                                                           // 13596
      expressions.push(self.recurse(expression.expression));                                                           // 13597
    });                                                                                                                // 13598
    var fn = ast.body.length === 0 ? function() {} :                                                                   // 13599
             ast.body.length === 1 ? expressions[0] :                                                                  // 13600
             function(scope, locals) {                                                                                 // 13601
               var lastValue;                                                                                          // 13602
               forEach(expressions, function(exp) {                                                                    // 13603
                 lastValue = exp(scope, locals);                                                                       // 13604
               });                                                                                                     // 13605
               return lastValue;                                                                                       // 13606
             };                                                                                                        // 13607
    if (assign) {                                                                                                      // 13608
      fn.assign = function(scope, value, locals) {                                                                     // 13609
        return assign(scope, locals, value);                                                                           // 13610
      };                                                                                                               // 13611
    }                                                                                                                  // 13612
    if (inputs) {                                                                                                      // 13613
      fn.inputs = inputs;                                                                                              // 13614
    }                                                                                                                  // 13615
    fn.literal = isLiteral(ast);                                                                                       // 13616
    fn.constant = isConstant(ast);                                                                                     // 13617
    return fn;                                                                                                         // 13618
  },                                                                                                                   // 13619
                                                                                                                       // 13620
  recurse: function(ast, context, create) {                                                                            // 13621
    var left, right, self = this, args, expression;                                                                    // 13622
    if (ast.input) {                                                                                                   // 13623
      return this.inputs(ast.input, ast.watchId);                                                                      // 13624
    }                                                                                                                  // 13625
    switch (ast.type) {                                                                                                // 13626
    case AST.Literal:                                                                                                  // 13627
      return this.value(ast.value, context);                                                                           // 13628
    case AST.UnaryExpression:                                                                                          // 13629
      right = this.recurse(ast.argument);                                                                              // 13630
      return this['unary' + ast.operator](right, context);                                                             // 13631
    case AST.BinaryExpression:                                                                                         // 13632
      left = this.recurse(ast.left);                                                                                   // 13633
      right = this.recurse(ast.right);                                                                                 // 13634
      return this['binary' + ast.operator](left, right, context);                                                      // 13635
    case AST.LogicalExpression:                                                                                        // 13636
      left = this.recurse(ast.left);                                                                                   // 13637
      right = this.recurse(ast.right);                                                                                 // 13638
      return this['binary' + ast.operator](left, right, context);                                                      // 13639
    case AST.ConditionalExpression:                                                                                    // 13640
      return this['ternary?:'](                                                                                        // 13641
        this.recurse(ast.test),                                                                                        // 13642
        this.recurse(ast.alternate),                                                                                   // 13643
        this.recurse(ast.consequent),                                                                                  // 13644
        context                                                                                                        // 13645
      );                                                                                                               // 13646
    case AST.Identifier:                                                                                               // 13647
      ensureSafeMemberName(ast.name, self.expression);                                                                 // 13648
      return self.identifier(ast.name,                                                                                 // 13649
                             self.expensiveChecks || isPossiblyDangerousMemberName(ast.name),                          // 13650
                             context, create, self.expression);                                                        // 13651
    case AST.MemberExpression:                                                                                         // 13652
      left = this.recurse(ast.object, false, !!create);                                                                // 13653
      if (!ast.computed) {                                                                                             // 13654
        ensureSafeMemberName(ast.property.name, self.expression);                                                      // 13655
        right = ast.property.name;                                                                                     // 13656
      }                                                                                                                // 13657
      if (ast.computed) right = this.recurse(ast.property);                                                            // 13658
      return ast.computed ?                                                                                            // 13659
        this.computedMember(left, right, context, create, self.expression) :                                           // 13660
        this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);                   // 13661
    case AST.CallExpression:                                                                                           // 13662
      args = [];                                                                                                       // 13663
      forEach(ast.arguments, function(expr) {                                                                          // 13664
        args.push(self.recurse(expr));                                                                                 // 13665
      });                                                                                                              // 13666
      if (ast.filter) right = this.$filter(ast.callee.name);                                                           // 13667
      if (!ast.filter) right = this.recurse(ast.callee, true);                                                         // 13668
      return ast.filter ?                                                                                              // 13669
        function(scope, locals, assign, inputs) {                                                                      // 13670
          var values = [];                                                                                             // 13671
          for (var i = 0; i < args.length; ++i) {                                                                      // 13672
            values.push(args[i](scope, locals, assign, inputs));                                                       // 13673
          }                                                                                                            // 13674
          var value = right.apply(undefined, values, inputs);                                                          // 13675
          return context ? {context: undefined, name: undefined, value: value} : value;                                // 13676
        } :                                                                                                            // 13677
        function(scope, locals, assign, inputs) {                                                                      // 13678
          var rhs = right(scope, locals, assign, inputs);                                                              // 13679
          var value;                                                                                                   // 13680
          if (rhs.value != null) {                                                                                     // 13681
            ensureSafeObject(rhs.context, self.expression);                                                            // 13682
            ensureSafeFunction(rhs.value, self.expression);                                                            // 13683
            var values = [];                                                                                           // 13684
            for (var i = 0; i < args.length; ++i) {                                                                    // 13685
              values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));                  // 13686
            }                                                                                                          // 13687
            value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);                           // 13688
          }                                                                                                            // 13689
          return context ? {value: value} : value;                                                                     // 13690
        };                                                                                                             // 13691
    case AST.AssignmentExpression:                                                                                     // 13692
      left = this.recurse(ast.left, true, 1);                                                                          // 13693
      right = this.recurse(ast.right);                                                                                 // 13694
      return function(scope, locals, assign, inputs) {                                                                 // 13695
        var lhs = left(scope, locals, assign, inputs);                                                                 // 13696
        var rhs = right(scope, locals, assign, inputs);                                                                // 13697
        ensureSafeObject(lhs.value, self.expression);                                                                  // 13698
        lhs.context[lhs.name] = rhs;                                                                                   // 13699
        return context ? {value: rhs} : rhs;                                                                           // 13700
      };                                                                                                               // 13701
    case AST.ArrayExpression:                                                                                          // 13702
      args = [];                                                                                                       // 13703
      forEach(ast.elements, function(expr) {                                                                           // 13704
        args.push(self.recurse(expr));                                                                                 // 13705
      });                                                                                                              // 13706
      return function(scope, locals, assign, inputs) {                                                                 // 13707
        var value = [];                                                                                                // 13708
        for (var i = 0; i < args.length; ++i) {                                                                        // 13709
          value.push(args[i](scope, locals, assign, inputs));                                                          // 13710
        }                                                                                                              // 13711
        return context ? {value: value} : value;                                                                       // 13712
      };                                                                                                               // 13713
    case AST.ObjectExpression:                                                                                         // 13714
      args = [];                                                                                                       // 13715
      forEach(ast.properties, function(property) {                                                                     // 13716
        args.push({key: property.key.type === AST.Identifier ?                                                         // 13717
                        property.key.name :                                                                            // 13718
                        ('' + property.key.value),                                                                     // 13719
                   value: self.recurse(property.value)                                                                 // 13720
        });                                                                                                            // 13721
      });                                                                                                              // 13722
      return function(scope, locals, assign, inputs) {                                                                 // 13723
        var value = {};                                                                                                // 13724
        for (var i = 0; i < args.length; ++i) {                                                                        // 13725
          value[args[i].key] = args[i].value(scope, locals, assign, inputs);                                           // 13726
        }                                                                                                              // 13727
        return context ? {value: value} : value;                                                                       // 13728
      };                                                                                                               // 13729
    case AST.ThisExpression:                                                                                           // 13730
      return function(scope) {                                                                                         // 13731
        return context ? {value: scope} : scope;                                                                       // 13732
      };                                                                                                               // 13733
    case AST.NGValueParameter:                                                                                         // 13734
      return function(scope, locals, assign, inputs) {                                                                 // 13735
        return context ? {value: assign} : assign;                                                                     // 13736
      };                                                                                                               // 13737
    }                                                                                                                  // 13738
  },                                                                                                                   // 13739
                                                                                                                       // 13740
  'unary+': function(argument, context) {                                                                              // 13741
    return function(scope, locals, assign, inputs) {                                                                   // 13742
      var arg = argument(scope, locals, assign, inputs);                                                               // 13743
      if (isDefined(arg)) {                                                                                            // 13744
        arg = +arg;                                                                                                    // 13745
      } else {                                                                                                         // 13746
        arg = 0;                                                                                                       // 13747
      }                                                                                                                // 13748
      return context ? {value: arg} : arg;                                                                             // 13749
    };                                                                                                                 // 13750
  },                                                                                                                   // 13751
  'unary-': function(argument, context) {                                                                              // 13752
    return function(scope, locals, assign, inputs) {                                                                   // 13753
      var arg = argument(scope, locals, assign, inputs);                                                               // 13754
      if (isDefined(arg)) {                                                                                            // 13755
        arg = -arg;                                                                                                    // 13756
      } else {                                                                                                         // 13757
        arg = 0;                                                                                                       // 13758
      }                                                                                                                // 13759
      return context ? {value: arg} : arg;                                                                             // 13760
    };                                                                                                                 // 13761
  },                                                                                                                   // 13762
  'unary!': function(argument, context) {                                                                              // 13763
    return function(scope, locals, assign, inputs) {                                                                   // 13764
      var arg = !argument(scope, locals, assign, inputs);                                                              // 13765
      return context ? {value: arg} : arg;                                                                             // 13766
    };                                                                                                                 // 13767
  },                                                                                                                   // 13768
  'binary+': function(left, right, context) {                                                                          // 13769
    return function(scope, locals, assign, inputs) {                                                                   // 13770
      var lhs = left(scope, locals, assign, inputs);                                                                   // 13771
      var rhs = right(scope, locals, assign, inputs);                                                                  // 13772
      var arg = plusFn(lhs, rhs);                                                                                      // 13773
      return context ? {value: arg} : arg;                                                                             // 13774
    };                                                                                                                 // 13775
  },                                                                                                                   // 13776
  'binary-': function(left, right, context) {                                                                          // 13777
    return function(scope, locals, assign, inputs) {                                                                   // 13778
      var lhs = left(scope, locals, assign, inputs);                                                                   // 13779
      var rhs = right(scope, locals, assign, inputs);                                                                  // 13780
      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);                                               // 13781
      return context ? {value: arg} : arg;                                                                             // 13782
    };                                                                                                                 // 13783
  },                                                                                                                   // 13784
  'binary*': function(left, right, context) {                                                                          // 13785
    return function(scope, locals, assign, inputs) {                                                                   // 13786
      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);                            // 13787
      return context ? {value: arg} : arg;                                                                             // 13788
    };                                                                                                                 // 13789
  },                                                                                                                   // 13790
  'binary/': function(left, right, context) {                                                                          // 13791
    return function(scope, locals, assign, inputs) {                                                                   // 13792
      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);                            // 13793
      return context ? {value: arg} : arg;                                                                             // 13794
    };                                                                                                                 // 13795
  },                                                                                                                   // 13796
  'binary%': function(left, right, context) {                                                                          // 13797
    return function(scope, locals, assign, inputs) {                                                                   // 13798
      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);                            // 13799
      return context ? {value: arg} : arg;                                                                             // 13800
    };                                                                                                                 // 13801
  },                                                                                                                   // 13802
  'binary===': function(left, right, context) {                                                                        // 13803
    return function(scope, locals, assign, inputs) {                                                                   // 13804
      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);                          // 13805
      return context ? {value: arg} : arg;                                                                             // 13806
    };                                                                                                                 // 13807
  },                                                                                                                   // 13808
  'binary!==': function(left, right, context) {                                                                        // 13809
    return function(scope, locals, assign, inputs) {                                                                   // 13810
      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);                          // 13811
      return context ? {value: arg} : arg;                                                                             // 13812
    };                                                                                                                 // 13813
  },                                                                                                                   // 13814
  'binary==': function(left, right, context) {                                                                         // 13815
    return function(scope, locals, assign, inputs) {                                                                   // 13816
      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);                           // 13817
      return context ? {value: arg} : arg;                                                                             // 13818
    };                                                                                                                 // 13819
  },                                                                                                                   // 13820
  'binary!=': function(left, right, context) {                                                                         // 13821
    return function(scope, locals, assign, inputs) {                                                                   // 13822
      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);                           // 13823
      return context ? {value: arg} : arg;                                                                             // 13824
    };                                                                                                                 // 13825
  },                                                                                                                   // 13826
  'binary<': function(left, right, context) {                                                                          // 13827
    return function(scope, locals, assign, inputs) {                                                                   // 13828
      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);                            // 13829
      return context ? {value: arg} : arg;                                                                             // 13830
    };                                                                                                                 // 13831
  },                                                                                                                   // 13832
  'binary>': function(left, right, context) {                                                                          // 13833
    return function(scope, locals, assign, inputs) {                                                                   // 13834
      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);                            // 13835
      return context ? {value: arg} : arg;                                                                             // 13836
    };                                                                                                                 // 13837
  },                                                                                                                   // 13838
  'binary<=': function(left, right, context) {                                                                         // 13839
    return function(scope, locals, assign, inputs) {                                                                   // 13840
      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);                           // 13841
      return context ? {value: arg} : arg;                                                                             // 13842
    };                                                                                                                 // 13843
  },                                                                                                                   // 13844
  'binary>=': function(left, right, context) {                                                                         // 13845
    return function(scope, locals, assign, inputs) {                                                                   // 13846
      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);                           // 13847
      return context ? {value: arg} : arg;                                                                             // 13848
    };                                                                                                                 // 13849
  },                                                                                                                   // 13850
  'binary&&': function(left, right, context) {                                                                         // 13851
    return function(scope, locals, assign, inputs) {                                                                   // 13852
      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);                           // 13853
      return context ? {value: arg} : arg;                                                                             // 13854
    };                                                                                                                 // 13855
  },                                                                                                                   // 13856
  'binary||': function(left, right, context) {                                                                         // 13857
    return function(scope, locals, assign, inputs) {                                                                   // 13858
      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);                           // 13859
      return context ? {value: arg} : arg;                                                                             // 13860
    };                                                                                                                 // 13861
  },                                                                                                                   // 13862
  'ternary?:': function(test, alternate, consequent, context) {                                                        // 13863
    return function(scope, locals, assign, inputs) {                                                                   // 13864
      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;                                                                             // 13866
    };                                                                                                                 // 13867
  },                                                                                                                   // 13868
  value: function(value, context) {                                                                                    // 13869
    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };               // 13870
  },                                                                                                                   // 13871
  identifier: function(name, expensiveChecks, context, create, expression) {                                           // 13872
    return function(scope, locals, assign, inputs) {                                                                   // 13873
      var base = locals && (name in locals) ? locals : scope;                                                          // 13874
      if (create && create !== 1 && base && !(base[name])) {                                                           // 13875
        base[name] = {};                                                                                               // 13876
      }                                                                                                                // 13877
      var value = base ? base[name] : undefined;                                                                       // 13878
      if (expensiveChecks) {                                                                                           // 13879
        ensureSafeObject(value, expression);                                                                           // 13880
      }                                                                                                                // 13881
      if (context) {                                                                                                   // 13882
        return {context: base, name: name, value: value};                                                              // 13883
      } else {                                                                                                         // 13884
        return value;                                                                                                  // 13885
      }                                                                                                                // 13886
    };                                                                                                                 // 13887
  },                                                                                                                   // 13888
  computedMember: function(left, right, context, create, expression) {                                                 // 13889
    return function(scope, locals, assign, inputs) {                                                                   // 13890
      var lhs = left(scope, locals, assign, inputs);                                                                   // 13891
      var rhs;                                                                                                         // 13892
      var value;                                                                                                       // 13893
      if (lhs != null) {                                                                                               // 13894
        rhs = right(scope, locals, assign, inputs);                                                                    // 13895
        ensureSafeMemberName(rhs, expression);                                                                         // 13896
        if (create && create !== 1 && lhs && !(lhs[rhs])) {                                                            // 13897
          lhs[rhs] = {};                                                                                               // 13898
        }                                                                                                              // 13899
        value = lhs[rhs];                                                                                              // 13900
        ensureSafeObject(value, expression);                                                                           // 13901
      }                                                                                                                // 13902
      if (context) {                                                                                                   // 13903
        return {context: lhs, name: rhs, value: value};                                                                // 13904
      } else {                                                                                                         // 13905
        return value;                                                                                                  // 13906
      }                                                                                                                // 13907
    };                                                                                                                 // 13908
  },                                                                                                                   // 13909
  nonComputedMember: function(left, right, expensiveChecks, context, create, expression) {                             // 13910
    return function(scope, locals, assign, inputs) {                                                                   // 13911
      var lhs = left(scope, locals, assign, inputs);                                                                   // 13912
      if (create && create !== 1 && lhs && !(lhs[right])) {                                                            // 13913
        lhs[right] = {};                                                                                               // 13914
      }                                                                                                                // 13915
      var value = lhs != null ? lhs[right] : undefined;                                                                // 13916
      if (expensiveChecks || isPossiblyDangerousMemberName(right)) {                                                   // 13917
        ensureSafeObject(value, expression);                                                                           // 13918
      }                                                                                                                // 13919
      if (context) {                                                                                                   // 13920
        return {context: lhs, name: right, value: value};                                                              // 13921
      } else {                                                                                                         // 13922
        return value;                                                                                                  // 13923
      }                                                                                                                // 13924
    };                                                                                                                 // 13925
  },                                                                                                                   // 13926
  inputs: function(input, watchId) {                                                                                   // 13927
    return function(scope, value, locals, inputs) {                                                                    // 13928
      if (inputs) return inputs[watchId];                                                                              // 13929
      return input(scope, value, locals);                                                                              // 13930
    };                                                                                                                 // 13931
  }                                                                                                                    // 13932
};                                                                                                                     // 13933
                                                                                                                       // 13934
/**                                                                                                                    // 13935
 * @constructor                                                                                                        // 13936
 */                                                                                                                    // 13937
var Parser = function(lexer, $filter, options) {                                                                       // 13938
  this.lexer = lexer;                                                                                                  // 13939
  this.$filter = $filter;                                                                                              // 13940
  this.options = options;                                                                                              // 13941
  this.ast = new AST(this.lexer);                                                                                      // 13942
  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :                                             // 13943
                                   new ASTCompiler(this.ast, $filter);                                                 // 13944
};                                                                                                                     // 13945
                                                                                                                       // 13946
Parser.prototype = {                                                                                                   // 13947
  constructor: Parser,                                                                                                 // 13948
                                                                                                                       // 13949
  parse: function(text) {                                                                                              // 13950
    return this.astCompiler.compile(text, this.options.expensiveChecks);                                               // 13951
  }                                                                                                                    // 13952
};                                                                                                                     // 13953
                                                                                                                       // 13954
//////////////////////////////////////////////////                                                                     // 13955
// Parser helper functions                                                                                             // 13956
//////////////////////////////////////////////////                                                                     // 13957
                                                                                                                       // 13958
function setter(obj, path, setValue, fullExp) {                                                                        // 13959
  ensureSafeObject(obj, fullExp);                                                                                      // 13960
                                                                                                                       // 13961
  var element = path.split('.'), key;                                                                                  // 13962
  for (var i = 0; element.length > 1; i++) {                                                                           // 13963
    key = ensureSafeMemberName(element.shift(), fullExp);                                                              // 13964
    var propertyObj = ensureSafeObject(obj[key], fullExp);                                                             // 13965
    if (!propertyObj) {                                                                                                // 13966
      propertyObj = {};                                                                                                // 13967
      obj[key] = propertyObj;                                                                                          // 13968
    }                                                                                                                  // 13969
    obj = propertyObj;                                                                                                 // 13970
  }                                                                                                                    // 13971
  key = ensureSafeMemberName(element.shift(), fullExp);                                                                // 13972
  ensureSafeObject(obj[key], fullExp);                                                                                 // 13973
  obj[key] = setValue;                                                                                                 // 13974
  return setValue;                                                                                                     // 13975
}                                                                                                                      // 13976
                                                                                                                       // 13977
var getterFnCacheDefault = createMap();                                                                                // 13978
var getterFnCacheExpensive = createMap();                                                                              // 13979
                                                                                                                       // 13980
function isPossiblyDangerousMemberName(name) {                                                                         // 13981
  return name == 'constructor';                                                                                        // 13982
}                                                                                                                      // 13983
                                                                                                                       // 13984
var objectValueOf = Object.prototype.valueOf;                                                                          // 13985
                                                                                                                       // 13986
function getValueOf(value) {                                                                                           // 13987
  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);                                      // 13988
}                                                                                                                      // 13989
                                                                                                                       // 13990
///////////////////////////////////                                                                                    // 13991
                                                                                                                       // 13992
/**                                                                                                                    // 13993
 * @ngdoc service                                                                                                      // 13994
 * @name $parse                                                                                                        // 13995
 * @kind function                                                                                                      // 13996
 *                                                                                                                     // 13997
 * @description                                                                                                        // 13998
 *                                                                                                                     // 13999
 * Converts Angular {@link guide/expression expression} into a function.                                               // 14000
 *                                                                                                                     // 14001
 * ```js                                                                                                               // 14002
 *   var getter = $parse('user.name');                                                                                 // 14003
 *   var setter = getter.assign;                                                                                       // 14004
 *   var context = {user:{name:'angular'}};                                                                            // 14005
 *   var locals = {user:{name:'local'}};                                                                               // 14006
 *                                                                                                                     // 14007
 *   expect(getter(context)).toEqual('angular');                                                                       // 14008
 *   setter(context, 'newValue');                                                                                      // 14009
 *   expect(context.user.name).toEqual('newValue');                                                                    // 14010
 *   expect(getter(context, locals)).toEqual('local');                                                                 // 14011
 * ```                                                                                                                 // 14012
 *                                                                                                                     // 14013
 *                                                                                                                     // 14014
 * @param {string} expression String expression to compile.                                                            // 14015
 * @returns {function(context, locals)} a function which represents the compiled expression:                           // 14016
 *                                                                                                                     // 14017
 *    * `context` – `{object}` – an object against which any expressions embedded in the strings                       // 14018
 *      are evaluated against (typically a scope object).                                                              // 14019
 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                       // 14020
 *      `context`.                                                                                                     // 14021
 *                                                                                                                     // 14022
 *    The returned function also has the following properties:                                                         // 14023
 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript                            // 14024
 *        literal.                                                                                                     // 14025
 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript                             // 14026
 *        constant literals.                                                                                           // 14027
 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be                     // 14028
 *        set to a function to change its value on the given context.                                                  // 14029
 *                                                                                                                     // 14030
 */                                                                                                                    // 14031
                                                                                                                       // 14032
                                                                                                                       // 14033
/**                                                                                                                    // 14034
 * @ngdoc provider                                                                                                     // 14035
 * @name $parseProvider                                                                                                // 14036
 *                                                                                                                     // 14037
 * @description                                                                                                        // 14038
 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}                   // 14039
 *  service.                                                                                                           // 14040
 */                                                                                                                    // 14041
function $ParseProvider() {                                                                                            // 14042
  var cacheDefault = createMap();                                                                                      // 14043
  var cacheExpensive = createMap();                                                                                    // 14044
                                                                                                                       // 14045
  this.$get = ['$filter', '$sniffer', function($filter, $sniffer) {                                                    // 14046
    var $parseOptions = {                                                                                              // 14047
          csp: $sniffer.csp,                                                                                           // 14048
          expensiveChecks: false                                                                                       // 14049
        },                                                                                                             // 14050
        $parseOptionsExpensive = {                                                                                     // 14051
          csp: $sniffer.csp,                                                                                           // 14052
          expensiveChecks: true                                                                                        // 14053
        };                                                                                                             // 14054
                                                                                                                       // 14055
    return function $parse(exp, interceptorFn, expensiveChecks) {                                                      // 14056
      var parsedExpression, oneTime, cacheKey;                                                                         // 14057
                                                                                                                       // 14058
      switch (typeof exp) {                                                                                            // 14059
        case 'string':                                                                                                 // 14060
          exp = exp.trim();                                                                                            // 14061
          cacheKey = exp;                                                                                              // 14062
                                                                                                                       // 14063
          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);                                               // 14064
          parsedExpression = cache[cacheKey];                                                                          // 14065
                                                                                                                       // 14066
          if (!parsedExpression) {                                                                                     // 14067
            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {                                                      // 14068
              oneTime = true;                                                                                          // 14069
              exp = exp.substring(2);                                                                                  // 14070
            }                                                                                                          // 14071
            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;                               // 14072
            var lexer = new Lexer(parseOptions);                                                                       // 14073
            var parser = new Parser(lexer, $filter, parseOptions);                                                     // 14074
            parsedExpression = parser.parse(exp);                                                                      // 14075
            if (parsedExpression.constant) {                                                                           // 14076
              parsedExpression.$$watchDelegate = constantWatchDelegate;                                                // 14077
            } else if (oneTime) {                                                                                      // 14078
              parsedExpression.$$watchDelegate = parsedExpression.literal ?                                            // 14079
                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;                                                  // 14080
            } else if (parsedExpression.inputs) {                                                                      // 14081
              parsedExpression.$$watchDelegate = inputsWatchDelegate;                                                  // 14082
            }                                                                                                          // 14083
            cache[cacheKey] = parsedExpression;                                                                        // 14084
          }                                                                                                            // 14085
          return addInterceptor(parsedExpression, interceptorFn);                                                      // 14086
                                                                                                                       // 14087
        case 'function':                                                                                               // 14088
          return addInterceptor(exp, interceptorFn);                                                                   // 14089
                                                                                                                       // 14090
        default:                                                                                                       // 14091
          return noop;                                                                                                 // 14092
      }                                                                                                                // 14093
    };                                                                                                                 // 14094
                                                                                                                       // 14095
    function expressionInputDirtyCheck(newValue, oldValueOfValue) {                                                    // 14096
                                                                                                                       // 14097
      if (newValue == null || oldValueOfValue == null) { // null/undefined                                             // 14098
        return newValue === oldValueOfValue;                                                                           // 14099
      }                                                                                                                // 14100
                                                                                                                       // 14101
      if (typeof newValue === 'object') {                                                                              // 14102
                                                                                                                       // 14103
        // attempt to convert the value to a primitive type                                                            // 14104
        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can                     // 14105
        //             be cheaply dirty-checked                                                                        // 14106
        newValue = getValueOf(newValue);                                                                               // 14107
                                                                                                                       // 14108
        if (typeof newValue === 'object') {                                                                            // 14109
          // objects/arrays are not supported - deep-watching them would be too expensive                              // 14110
          return false;                                                                                                // 14111
        }                                                                                                              // 14112
                                                                                                                       // 14113
        // fall-through to the primitive equality check                                                                // 14114
      }                                                                                                                // 14115
                                                                                                                       // 14116
      //Primitive or NaN                                                                                               // 14117
      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);           // 14118
    }                                                                                                                  // 14119
                                                                                                                       // 14120
    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {           // 14121
      var inputExpressions = parsedExpression.inputs;                                                                  // 14122
      var lastResult;                                                                                                  // 14123
                                                                                                                       // 14124
      if (inputExpressions.length === 1) {                                                                             // 14125
        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails        // 14126
        inputExpressions = inputExpressions[0];                                                                        // 14127
        return scope.$watch(function expressionInputWatch(scope) {                                                     // 14128
          var newInputValue = inputExpressions(scope);                                                                 // 14129
          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {                                            // 14130
            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);                               // 14131
            oldInputValueOf = newInputValue && getValueOf(newInputValue);                                              // 14132
          }                                                                                                            // 14133
          return lastResult;                                                                                           // 14134
        }, listener, objectEquality, prettyPrintExpression);                                                           // 14135
      }                                                                                                                // 14136
                                                                                                                       // 14137
      var oldInputValueOfValues = [];                                                                                  // 14138
      var oldInputValues = [];                                                                                         // 14139
      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {                                                     // 14140
        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails   // 14141
        oldInputValues[i] = null;                                                                                      // 14142
      }                                                                                                                // 14143
                                                                                                                       // 14144
      return scope.$watch(function expressionInputsWatch(scope) {                                                      // 14145
        var changed = false;                                                                                           // 14146
                                                                                                                       // 14147
        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {                                                   // 14148
          var newInputValue = inputExpressions[i](scope);                                                              // 14149
          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {            // 14150
            oldInputValues[i] = newInputValue;                                                                         // 14151
            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);                                     // 14152
          }                                                                                                            // 14153
        }                                                                                                              // 14154
                                                                                                                       // 14155
        if (changed) {                                                                                                 // 14156
          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);                                  // 14157
        }                                                                                                              // 14158
                                                                                                                       // 14159
        return lastResult;                                                                                             // 14160
      }, listener, objectEquality, prettyPrintExpression);                                                             // 14161
    }                                                                                                                  // 14162
                                                                                                                       // 14163
    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {                                 // 14164
      var unwatch, lastValue;                                                                                          // 14165
      return unwatch = scope.$watch(function oneTimeWatch(scope) {                                                     // 14166
        return parsedExpression(scope);                                                                                // 14167
      }, function oneTimeListener(value, old, scope) {                                                                 // 14168
        lastValue = value;                                                                                             // 14169
        if (isFunction(listener)) {                                                                                    // 14170
          listener.apply(this, arguments);                                                                             // 14171
        }                                                                                                              // 14172
        if (isDefined(value)) {                                                                                        // 14173
          scope.$$postDigest(function() {                                                                              // 14174
            if (isDefined(lastValue)) {                                                                                // 14175
              unwatch();                                                                                               // 14176
            }                                                                                                          // 14177
          });                                                                                                          // 14178
        }                                                                                                              // 14179
      }, objectEquality);                                                                                              // 14180
    }                                                                                                                  // 14181
                                                                                                                       // 14182
    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {                          // 14183
      var unwatch, lastValue;                                                                                          // 14184
      return unwatch = scope.$watch(function oneTimeWatch(scope) {                                                     // 14185
        return parsedExpression(scope);                                                                                // 14186
      }, function oneTimeListener(value, old, scope) {                                                                 // 14187
        lastValue = value;                                                                                             // 14188
        if (isFunction(listener)) {                                                                                    // 14189
          listener.call(this, value, old, scope);                                                                      // 14190
        }                                                                                                              // 14191
        if (isAllDefined(value)) {                                                                                     // 14192
          scope.$$postDigest(function() {                                                                              // 14193
            if (isAllDefined(lastValue)) unwatch();                                                                    // 14194
          });                                                                                                          // 14195
        }                                                                                                              // 14196
      }, objectEquality);                                                                                              // 14197
                                                                                                                       // 14198
      function isAllDefined(value) {                                                                                   // 14199
        var allDefined = true;                                                                                         // 14200
        forEach(value, function(val) {                                                                                 // 14201
          if (!isDefined(val)) allDefined = false;                                                                     // 14202
        });                                                                                                            // 14203
        return allDefined;                                                                                             // 14204
      }                                                                                                                // 14205
    }                                                                                                                  // 14206
                                                                                                                       // 14207
    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {                                // 14208
      var unwatch;                                                                                                     // 14209
      return unwatch = scope.$watch(function constantWatch(scope) {                                                    // 14210
        return parsedExpression(scope);                                                                                // 14211
      }, function constantListener(value, old, scope) {                                                                // 14212
        if (isFunction(listener)) {                                                                                    // 14213
          listener.apply(this, arguments);                                                                             // 14214
        }                                                                                                              // 14215
        unwatch();                                                                                                     // 14216
      }, objectEquality);                                                                                              // 14217
    }                                                                                                                  // 14218
                                                                                                                       // 14219
    function addInterceptor(parsedExpression, interceptorFn) {                                                         // 14220
      if (!interceptorFn) return parsedExpression;                                                                     // 14221
      var watchDelegate = parsedExpression.$$watchDelegate;                                                            // 14222
                                                                                                                       // 14223
      var regularWatch =                                                                                               // 14224
          watchDelegate !== oneTimeLiteralWatchDelegate &&                                                             // 14225
          watchDelegate !== oneTimeWatchDelegate;                                                                      // 14226
                                                                                                                       // 14227
      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {                   // 14228
        var value = parsedExpression(scope, locals, assign, inputs);                                                   // 14229
        return interceptorFn(value, scope, locals);                                                                    // 14230
      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {                                       // 14231
        var value = parsedExpression(scope, locals, assign, inputs);                                                   // 14232
        var result = interceptorFn(value, scope, locals);                                                              // 14233
        // we only return the interceptor's result if the                                                              // 14234
        // initial value is defined (for bind-once)                                                                    // 14235
        return isDefined(value) ? result : value;                                                                      // 14236
      };                                                                                                               // 14237
                                                                                                                       // 14238
      // Propagate $$watchDelegates other then inputsWatchDelegate                                                     // 14239
      if (parsedExpression.$$watchDelegate &&                                                                          // 14240
          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {                                                  // 14241
        fn.$$watchDelegate = parsedExpression.$$watchDelegate;                                                         // 14242
      } else if (!interceptorFn.$stateful) {                                                                           // 14243
        // If there is an interceptor, but no watchDelegate then treat the interceptor like                            // 14244
        // we treat filters - it is assumed to be a pure function unless flagged with $stateful                        // 14245
        fn.$$watchDelegate = inputsWatchDelegate;                                                                      // 14246
        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];                            // 14247
      }                                                                                                                // 14248
                                                                                                                       // 14249
      return fn;                                                                                                       // 14250
    }                                                                                                                  // 14251
  }];                                                                                                                  // 14252
}                                                                                                                      // 14253
                                                                                                                       // 14254
/**                                                                                                                    // 14255
 * @ngdoc service                                                                                                      // 14256
 * @name $q                                                                                                            // 14257
 * @requires $rootScope                                                                                                // 14258
 *                                                                                                                     // 14259
 * @description                                                                                                        // 14260
 * A service that helps you run functions asynchronously, and use their return values (or exceptions)                  // 14261
 * when they are done processing.                                                                                      // 14262
 *                                                                                                                     // 14263
 * This is an implementation of promises/deferred objects inspired by                                                  // 14264
 * [Kris Kowal's Q](https://github.com/kriskowal/q).                                                                   // 14265
 *                                                                                                                     // 14266
 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred                 // 14267
 * implementations, and the other which resembles ES6 promises to some degree.                                         // 14268
 *                                                                                                                     // 14269
 * # $q constructor                                                                                                    // 14270
 *                                                                                                                     // 14271
 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`            // 14272
 * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,              // 14273
 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).                // 14274
 *                                                                                                                     // 14275
 * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are       // 14276
 * available yet.                                                                                                      // 14277
 *                                                                                                                     // 14278
 * It can be used like so:                                                                                             // 14279
 *                                                                                                                     // 14280
 * ```js                                                                                                               // 14281
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`                               // 14282
 *   // are available in the current lexical scope (they could have been injected or passed in).                       // 14283
 *                                                                                                                     // 14284
 *   function asyncGreet(name) {                                                                                       // 14285
 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.                         // 14286
 *     return $q(function(resolve, reject) {                                                                           // 14287
 *       setTimeout(function() {                                                                                       // 14288
 *         if (okToGreet(name)) {                                                                                      // 14289
 *           resolve('Hello, ' + name + '!');                                                                          // 14290
 *         } else {                                                                                                    // 14291
 *           reject('Greeting ' + name + ' is not allowed.');                                                          // 14292
 *         }                                                                                                           // 14293
 *       }, 1000);                                                                                                     // 14294
 *     });                                                                                                             // 14295
 *   }                                                                                                                 // 14296
 *                                                                                                                     // 14297
 *   var promise = asyncGreet('Robin Hood');                                                                           // 14298
 *   promise.then(function(greeting) {                                                                                 // 14299
 *     alert('Success: ' + greeting);                                                                                  // 14300
 *   }, function(reason) {                                                                                             // 14301
 *     alert('Failed: ' + reason);                                                                                     // 14302
 *   });                                                                                                               // 14303
 * ```                                                                                                                 // 14304
 *                                                                                                                     // 14305
 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.                            // 14306
 *                                                                                                                     // 14307
 * However, the more traditional CommonJS-style usage is still available, and documented below.                        // 14308
 *                                                                                                                     // 14309
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an                   // 14310
 * interface for interacting with an object that represents the result of an action that is                            // 14311
 * performed asynchronously, and may or may not be finished at any given point in time.                                // 14312
 *                                                                                                                     // 14313
 * From the perspective of dealing with error handling, deferred and promise APIs are to                               // 14314
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.                   // 14315
 *                                                                                                                     // 14316
 * ```js                                                                                                               // 14317
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`                               // 14318
 *   // are available in the current lexical scope (they could have been injected or passed in).                       // 14319
 *                                                                                                                     // 14320
 *   function asyncGreet(name) {                                                                                       // 14321
 *     var deferred = $q.defer();                                                                                      // 14322
 *                                                                                                                     // 14323
 *     setTimeout(function() {                                                                                         // 14324
 *       deferred.notify('About to greet ' + name + '.');                                                              // 14325
 *                                                                                                                     // 14326
 *       if (okToGreet(name)) {                                                                                        // 14327
 *         deferred.resolve('Hello, ' + name + '!');                                                                   // 14328
 *       } else {                                                                                                      // 14329
 *         deferred.reject('Greeting ' + name + ' is not allowed.');                                                   // 14330
 *       }                                                                                                             // 14331
 *     }, 1000);                                                                                                       // 14332
 *                                                                                                                     // 14333
 *     return deferred.promise;                                                                                        // 14334
 *   }                                                                                                                 // 14335
 *                                                                                                                     // 14336
 *   var promise = asyncGreet('Robin Hood');                                                                           // 14337
 *   promise.then(function(greeting) {                                                                                 // 14338
 *     alert('Success: ' + greeting);                                                                                  // 14339
 *   }, function(reason) {                                                                                             // 14340
 *     alert('Failed: ' + reason);                                                                                     // 14341
 *   }, function(update) {                                                                                             // 14342
 *     alert('Got notification: ' + update);                                                                           // 14343
 *   });                                                                                                               // 14344
 * ```                                                                                                                 // 14345
 *                                                                                                                     // 14346
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff                         // 14347
 * comes in the way of guarantees that promise and deferred APIs make, see                                             // 14348
 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.                                      // 14349
 *                                                                                                                     // 14350
 * Additionally the promise api allows for composition that is very hard to do with the                                // 14351
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.                     // 14352
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the                    // 14353
 * section on serial or parallel joining of promises.                                                                  // 14354
 *                                                                                                                     // 14355
 * # The Deferred API                                                                                                  // 14356
 *                                                                                                                     // 14357
 * A new instance of deferred is constructed by calling `$q.defer()`.                                                  // 14358
 *                                                                                                                     // 14359
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs                     // 14360
 * that can be used for signaling the successful or unsuccessful completion, as well as the status                     // 14361
 * of the task.                                                                                                        // 14362
 *                                                                                                                     // 14363
 * **Methods**                                                                                                         // 14364
 *                                                                                                                     // 14365
 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection                     // 14366
 *   constructed via `$q.reject`, the promise will be rejected instead.                                                // 14367
 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to                           // 14368
 *   resolving it with a rejection constructed via `$q.reject`.                                                        // 14369
 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called                   // 14370
 *   multiple times before the promise is either resolved or rejected.                                                 // 14371
 *                                                                                                                     // 14372
 * **Properties**                                                                                                      // 14373
 *                                                                                                                     // 14374
 * - promise – `{Promise}` – promise object associated with this deferred.                                             // 14375
 *                                                                                                                     // 14376
 *                                                                                                                     // 14377
 * # The Promise API                                                                                                   // 14378
 *                                                                                                                     // 14379
 * A new promise instance is created when a deferred instance is created and can be retrieved by                       // 14380
 * calling `deferred.promise`.                                                                                         // 14381
 *                                                                                                                     // 14382
 * The purpose of the promise object is to allow for interested parties to get access to the result                    // 14383
 * of the deferred task when it completes.                                                                             // 14384
 *                                                                                                                     // 14385
 * **Methods**                                                                                                         // 14386
 *                                                                                                                     // 14387
 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or                    // 14388
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously                   // 14389
 *   as soon as the result is available. The callbacks are called with a single argument: the result                   // 14390
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to                        // 14391
 *   provide a progress indication, before the promise is resolved or rejected.                                        // 14392
 *                                                                                                                     // 14393
 *   This method *returns a new promise* which is resolved or rejected via the return value of the                     // 14394
 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved                  // 14395
 *   with the value which is resolved in that promise using                                                            // 14396
 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).                    // 14397
 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be                       // 14398
 *   resolved or rejected from the notifyCallback method.                                                              // 14399
 *                                                                                                                     // 14400
 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`                                        // 14401
 *                                                                                                                     // 14402
 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,     // 14403
 *   but to do so without modifying the final value. This is useful to release resources or do some                    // 14404
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full                        // 14405
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for                      // 14406
 *   more information.                                                                                                 // 14407
 *                                                                                                                     // 14408
 * # Chaining promises                                                                                                 // 14409
 *                                                                                                                     // 14410
 * Because calling the `then` method of a promise returns a new derived promise, it is easily                          // 14411
 * possible to create a chain of promises:                                                                             // 14412
 *                                                                                                                     // 14413
 * ```js                                                                                                               // 14414
 *   promiseB = promiseA.then(function(result) {                                                                       // 14415
 *     return result + 1;                                                                                              // 14416
 *   });                                                                                                               // 14417
 *                                                                                                                     // 14418
 *   // promiseB will be resolved immediately after promiseA is resolved and its value                                 // 14419
 *   // will be the result of promiseA incremented by 1                                                                // 14420
 * ```                                                                                                                 // 14421
 *                                                                                                                     // 14422
 * It is possible to create chains of any length and since a promise can be resolved with another                      // 14423
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of                      // 14424
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like                      // 14425
 * $http's response interceptors.                                                                                      // 14426
 *                                                                                                                     // 14427
 *                                                                                                                     // 14428
 * # Differences between Kris Kowal's Q and $q                                                                         // 14429
 *                                                                                                                     // 14430
 *  There are two main differences:                                                                                    // 14431
 *                                                                                                                     // 14432
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation                                     // 14433
 *   mechanism in angular, which means faster propagation of resolution or rejection into your                         // 14434
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.                            // 14435
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains                     // 14436
 *   all the important functionality needed for common async tasks.                                                    // 14437
 *                                                                                                                     // 14438
 *  # Testing                                                                                                          // 14439
 *                                                                                                                     // 14440
 *  ```js                                                                                                              // 14441
 *    it('should simulate promise', inject(function($q, $rootScope) {                                                  // 14442
 *      var deferred = $q.defer();                                                                                     // 14443
 *      var promise = deferred.promise;                                                                                // 14444
 *      var resolvedValue;                                                                                             // 14445
 *                                                                                                                     // 14446
 *      promise.then(function(value) { resolvedValue = value; });                                                      // 14447
 *      expect(resolvedValue).toBeUndefined();                                                                         // 14448
 *                                                                                                                     // 14449
 *      // Simulate resolving of promise                                                                               // 14450
 *      deferred.resolve(123);                                                                                         // 14451
 *      // Note that the 'then' function does not get called synchronously.                                            // 14452
 *      // This is because we want the promise API to always be async, whether or not                                  // 14453
 *      // it got called synchronously or asynchronously.                                                              // 14454
 *      expect(resolvedValue).toBeUndefined();                                                                         // 14455
 *                                                                                                                     // 14456
 *      // Propagate promise resolution to 'then' functions using $apply().                                            // 14457
 *      $rootScope.$apply();                                                                                           // 14458
 *      expect(resolvedValue).toEqual(123);                                                                            // 14459
 *    }));                                                                                                             // 14460
 *  ```                                                                                                                // 14461
 *                                                                                                                     // 14462
 * @param {function(function, function)} resolver Function which is responsible for resolving or                       // 14463
 *   rejecting the newly created promise. The first parameter is a function which resolves the                         // 14464
 *   promise, the second parameter is a function which rejects the promise.                                            // 14465
 *                                                                                                                     // 14466
 * @returns {Promise} The newly created promise.                                                                       // 14467
 */                                                                                                                    // 14468
function $QProvider() {                                                                                                // 14469
                                                                                                                       // 14470
  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {                            // 14471
    return qFactory(function(callback) {                                                                               // 14472
      $rootScope.$evalAsync(callback);                                                                                 // 14473
    }, $exceptionHandler);                                                                                             // 14474
  }];                                                                                                                  // 14475
}                                                                                                                      // 14476
                                                                                                                       // 14477
function $$QProvider() {                                                                                               // 14478
  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {                                // 14479
    return qFactory(function(callback) {                                                                               // 14480
      $browser.defer(callback);                                                                                        // 14481
    }, $exceptionHandler);                                                                                             // 14482
  }];                                                                                                                  // 14483
}                                                                                                                      // 14484
                                                                                                                       // 14485
/**                                                                                                                    // 14486
 * Constructs a promise manager.                                                                                       // 14487
 *                                                                                                                     // 14488
 * @param {function(function)} nextTick Function for executing functions in the next turn.                             // 14489
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for                   // 14490
 *     debugging purposes.                                                                                             // 14491
 * @returns {object} Promise manager.                                                                                  // 14492
 */                                                                                                                    // 14493
function qFactory(nextTick, exceptionHandler) {                                                                        // 14494
  var $qMinErr = minErr('$q', TypeError);                                                                              // 14495
  function callOnce(self, resolveFn, rejectFn) {                                                                       // 14496
    var called = false;                                                                                                // 14497
    function wrap(fn) {                                                                                                // 14498
      return function(value) {                                                                                         // 14499
        if (called) return;                                                                                            // 14500
        called = true;                                                                                                 // 14501
        fn.call(self, value);                                                                                          // 14502
      };                                                                                                               // 14503
    }                                                                                                                  // 14504
                                                                                                                       // 14505
    return [wrap(resolveFn), wrap(rejectFn)];                                                                          // 14506
  }                                                                                                                    // 14507
                                                                                                                       // 14508
  /**                                                                                                                  // 14509
   * @ngdoc method                                                                                                     // 14510
   * @name ng.$q#defer                                                                                                 // 14511
   * @kind function                                                                                                    // 14512
   *                                                                                                                   // 14513
   * @description                                                                                                      // 14514
   * Creates a `Deferred` object which represents a task which will finish in the future.                              // 14515
   *                                                                                                                   // 14516
   * @returns {Deferred} Returns a new instance of deferred.                                                           // 14517
   */                                                                                                                  // 14518
  var defer = function() {                                                                                             // 14519
    return new Deferred();                                                                                             // 14520
  };                                                                                                                   // 14521
                                                                                                                       // 14522
  function Promise() {                                                                                                 // 14523
    this.$$state = { status: 0 };                                                                                      // 14524
  }                                                                                                                    // 14525
                                                                                                                       // 14526
  Promise.prototype = {                                                                                                // 14527
    then: function(onFulfilled, onRejected, progressBack) {                                                            // 14528
      var result = new Deferred();                                                                                     // 14529
                                                                                                                       // 14530
      this.$$state.pending = this.$$state.pending || [];                                                               // 14531
      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);                                      // 14532
      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);                                                 // 14533
                                                                                                                       // 14534
      return result.promise;                                                                                           // 14535
    },                                                                                                                 // 14536
                                                                                                                       // 14537
    "catch": function(callback) {                                                                                      // 14538
      return this.then(null, callback);                                                                                // 14539
    },                                                                                                                 // 14540
                                                                                                                       // 14541
    "finally": function(callback, progressBack) {                                                                      // 14542
      return this.then(function(value) {                                                                               // 14543
        return handleCallback(value, true, callback);                                                                  // 14544
      }, function(error) {                                                                                             // 14545
        return handleCallback(error, false, callback);                                                                 // 14546
      }, progressBack);                                                                                                // 14547
    }                                                                                                                  // 14548
  };                                                                                                                   // 14549
                                                                                                                       // 14550
  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native                            // 14551
  function simpleBind(context, fn) {                                                                                   // 14552
    return function(value) {                                                                                           // 14553
      fn.call(context, value);                                                                                         // 14554
    };                                                                                                                 // 14555
  }                                                                                                                    // 14556
                                                                                                                       // 14557
  function processQueue(state) {                                                                                       // 14558
    var fn, deferred, pending;                                                                                         // 14559
                                                                                                                       // 14560
    pending = state.pending;                                                                                           // 14561
    state.processScheduled = false;                                                                                    // 14562
    state.pending = undefined;                                                                                         // 14563
    for (var i = 0, ii = pending.length; i < ii; ++i) {                                                                // 14564
      deferred = pending[i][0];                                                                                        // 14565
      fn = pending[i][state.status];                                                                                   // 14566
      try {                                                                                                            // 14567
        if (isFunction(fn)) {                                                                                          // 14568
          deferred.resolve(fn(state.value));                                                                           // 14569
        } else if (state.status === 1) {                                                                               // 14570
          deferred.resolve(state.value);                                                                               // 14571
        } else {                                                                                                       // 14572
          deferred.reject(state.value);                                                                                // 14573
        }                                                                                                              // 14574
      } catch (e) {                                                                                                    // 14575
        deferred.reject(e);                                                                                            // 14576
        exceptionHandler(e);                                                                                           // 14577
      }                                                                                                                // 14578
    }                                                                                                                  // 14579
  }                                                                                                                    // 14580
                                                                                                                       // 14581
  function scheduleProcessQueue(state) {                                                                               // 14582
    if (state.processScheduled || !state.pending) return;                                                              // 14583
    state.processScheduled = true;                                                                                     // 14584
    nextTick(function() { processQueue(state); });                                                                     // 14585
  }                                                                                                                    // 14586
                                                                                                                       // 14587
  function Deferred() {                                                                                                // 14588
    this.promise = new Promise();                                                                                      // 14589
    //Necessary to support unbound execution :/                                                                        // 14590
    this.resolve = simpleBind(this, this.resolve);                                                                     // 14591
    this.reject = simpleBind(this, this.reject);                                                                       // 14592
    this.notify = simpleBind(this, this.notify);                                                                       // 14593
  }                                                                                                                    // 14594
                                                                                                                       // 14595
  Deferred.prototype = {                                                                                               // 14596
    resolve: function(val) {                                                                                           // 14597
      if (this.promise.$$state.status) return;                                                                         // 14598
      if (val === this.promise) {                                                                                      // 14599
        this.$$reject($qMinErr(                                                                                        // 14600
          'qcycle',                                                                                                    // 14601
          "Expected promise to be resolved with value other than itself '{0}'",                                        // 14602
          val));                                                                                                       // 14603
      } else {                                                                                                         // 14604
        this.$$resolve(val);                                                                                           // 14605
      }                                                                                                                // 14606
                                                                                                                       // 14607
    },                                                                                                                 // 14608
                                                                                                                       // 14609
    $$resolve: function(val) {                                                                                         // 14610
      var then, fns;                                                                                                   // 14611
                                                                                                                       // 14612
      fns = callOnce(this, this.$$resolve, this.$$reject);                                                             // 14613
      try {                                                                                                            // 14614
        if ((isObject(val) || isFunction(val))) then = val && val.then;                                                // 14615
        if (isFunction(then)) {                                                                                        // 14616
          this.promise.$$state.status = -1;                                                                            // 14617
          then.call(val, fns[0], fns[1], this.notify);                                                                 // 14618
        } else {                                                                                                       // 14619
          this.promise.$$state.value = val;                                                                            // 14620
          this.promise.$$state.status = 1;                                                                             // 14621
          scheduleProcessQueue(this.promise.$$state);                                                                  // 14622
        }                                                                                                              // 14623
      } catch (e) {                                                                                                    // 14624
        fns[1](e);                                                                                                     // 14625
        exceptionHandler(e);                                                                                           // 14626
      }                                                                                                                // 14627
    },                                                                                                                 // 14628
                                                                                                                       // 14629
    reject: function(reason) {                                                                                         // 14630
      if (this.promise.$$state.status) return;                                                                         // 14631
      this.$$reject(reason);                                                                                           // 14632
    },                                                                                                                 // 14633
                                                                                                                       // 14634
    $$reject: function(reason) {                                                                                       // 14635
      this.promise.$$state.value = reason;                                                                             // 14636
      this.promise.$$state.status = 2;                                                                                 // 14637
      scheduleProcessQueue(this.promise.$$state);                                                                      // 14638
    },                                                                                                                 // 14639
                                                                                                                       // 14640
    notify: function(progress) {                                                                                       // 14641
      var callbacks = this.promise.$$state.pending;                                                                    // 14642
                                                                                                                       // 14643
      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {                                       // 14644
        nextTick(function() {                                                                                          // 14645
          var callback, result;                                                                                        // 14646
          for (var i = 0, ii = callbacks.length; i < ii; i++) {                                                        // 14647
            result = callbacks[i][0];                                                                                  // 14648
            callback = callbacks[i][3];                                                                                // 14649
            try {                                                                                                      // 14650
              result.notify(isFunction(callback) ? callback(progress) : progress);                                     // 14651
            } catch (e) {                                                                                              // 14652
              exceptionHandler(e);                                                                                     // 14653
            }                                                                                                          // 14654
          }                                                                                                            // 14655
        });                                                                                                            // 14656
      }                                                                                                                // 14657
    }                                                                                                                  // 14658
  };                                                                                                                   // 14659
                                                                                                                       // 14660
  /**                                                                                                                  // 14661
   * @ngdoc method                                                                                                     // 14662
   * @name $q#reject                                                                                                   // 14663
   * @kind function                                                                                                    // 14664
   *                                                                                                                   // 14665
   * @description                                                                                                      // 14666
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be                    // 14667
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in                     // 14668
   * a promise chain, you don't need to worry about it.                                                                // 14669
   *                                                                                                                   // 14670
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of                           // 14671
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via                   // 14672
   * a promise error callback and you want to forward the error to the promise derived from the                        // 14673
   * current promise, you have to "rethrow" the error by returning a rejection constructed via                         // 14674
   * `reject`.                                                                                                         // 14675
   *                                                                                                                   // 14676
   * ```js                                                                                                             // 14677
   *   promiseB = promiseA.then(function(result) {                                                                     // 14678
   *     // success: do something and resolve promiseB                                                                 // 14679
   *     //          with the old or a new result                                                                      // 14680
   *     return result;                                                                                                // 14681
   *   }, function(reason) {                                                                                           // 14682
   *     // error: handle the error if possible and                                                                    // 14683
   *     //        resolve promiseB with newPromiseOrValue,                                                            // 14684
   *     //        otherwise forward the rejection to promiseB                                                         // 14685
   *     if (canHandle(reason)) {                                                                                      // 14686
   *      // handle the error and recover                                                                              // 14687
   *      return newPromiseOrValue;                                                                                    // 14688
   *     }                                                                                                             // 14689
   *     return $q.reject(reason);                                                                                     // 14690
   *   });                                                                                                             // 14691
   * ```                                                                                                               // 14692
   *                                                                                                                   // 14693
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.                    // 14694
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.                     // 14695
   */                                                                                                                  // 14696
  var reject = function(reason) {                                                                                      // 14697
    var result = new Deferred();                                                                                       // 14698
    result.reject(reason);                                                                                             // 14699
    return result.promise;                                                                                             // 14700
  };                                                                                                                   // 14701
                                                                                                                       // 14702
  var makePromise = function makePromise(value, resolved) {                                                            // 14703
    var result = new Deferred();                                                                                       // 14704
    if (resolved) {                                                                                                    // 14705
      result.resolve(value);                                                                                           // 14706
    } else {                                                                                                           // 14707
      result.reject(value);                                                                                            // 14708
    }                                                                                                                  // 14709
    return result.promise;                                                                                             // 14710
  };                                                                                                                   // 14711
                                                                                                                       // 14712
  var handleCallback = function handleCallback(value, isResolved, callback) {                                          // 14713
    var callbackOutput = null;                                                                                         // 14714
    try {                                                                                                              // 14715
      if (isFunction(callback)) callbackOutput = callback();                                                           // 14716
    } catch (e) {                                                                                                      // 14717
      return makePromise(e, false);                                                                                    // 14718
    }                                                                                                                  // 14719
    if (isPromiseLike(callbackOutput)) {                                                                               // 14720
      return callbackOutput.then(function() {                                                                          // 14721
        return makePromise(value, isResolved);                                                                         // 14722
      }, function(error) {                                                                                             // 14723
        return makePromise(error, false);                                                                              // 14724
      });                                                                                                              // 14725
    } else {                                                                                                           // 14726
      return makePromise(value, isResolved);                                                                           // 14727
    }                                                                                                                  // 14728
  };                                                                                                                   // 14729
                                                                                                                       // 14730
  /**                                                                                                                  // 14731
   * @ngdoc method                                                                                                     // 14732
   * @name $q#when                                                                                                     // 14733
   * @kind function                                                                                                    // 14734
   *                                                                                                                   // 14735
   * @description                                                                                                      // 14736
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.                       // 14737
   * This is useful when you are dealing with an object that might or might not be a promise, or if                    // 14738
   * the promise comes from a source that can't be trusted.                                                            // 14739
   *                                                                                                                   // 14740
   * @param {*} value Value or a promise                                                                               // 14741
   * @returns {Promise} Returns a promise of the passed value or promise                                               // 14742
   */                                                                                                                  // 14743
                                                                                                                       // 14744
                                                                                                                       // 14745
  var when = function(value, callback, errback, progressBack) {                                                        // 14746
    var result = new Deferred();                                                                                       // 14747
    result.resolve(value);                                                                                             // 14748
    return result.promise.then(callback, errback, progressBack);                                                       // 14749
  };                                                                                                                   // 14750
                                                                                                                       // 14751
  /**                                                                                                                  // 14752
   * @ngdoc method                                                                                                     // 14753
   * @name $q#resolve                                                                                                  // 14754
   * @kind function                                                                                                    // 14755
   *                                                                                                                   // 14756
   * @description                                                                                                      // 14757
   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.                                         // 14758
   *                                                                                                                   // 14759
   * @param {*} value Value or a promise                                                                               // 14760
   * @returns {Promise} Returns a promise of the passed value or promise                                               // 14761
   */                                                                                                                  // 14762
  var resolve = when;                                                                                                  // 14763
                                                                                                                       // 14764
  /**                                                                                                                  // 14765
   * @ngdoc method                                                                                                     // 14766
   * @name $q#all                                                                                                      // 14767
   * @kind function                                                                                                    // 14768
   *                                                                                                                   // 14769
   * @description                                                                                                      // 14770
   * Combines multiple promises into a single promise that is resolved when all of the input                           // 14771
   * promises are resolved.                                                                                            // 14772
   *                                                                                                                   // 14773
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.                                  // 14774
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,                   // 14775
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.                     // 14776
   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected                    // 14777
   *   with the same rejection value.                                                                                  // 14778
   */                                                                                                                  // 14779
                                                                                                                       // 14780
  function all(promises) {                                                                                             // 14781
    var deferred = new Deferred(),                                                                                     // 14782
        counter = 0,                                                                                                   // 14783
        results = isArray(promises) ? [] : {};                                                                         // 14784
                                                                                                                       // 14785
    forEach(promises, function(promise, key) {                                                                         // 14786
      counter++;                                                                                                       // 14787
      when(promise).then(function(value) {                                                                             // 14788
        if (results.hasOwnProperty(key)) return;                                                                       // 14789
        results[key] = value;                                                                                          // 14790
        if (!(--counter)) deferred.resolve(results);                                                                   // 14791
      }, function(reason) {                                                                                            // 14792
        if (results.hasOwnProperty(key)) return;                                                                       // 14793
        deferred.reject(reason);                                                                                       // 14794
      });                                                                                                              // 14795
    });                                                                                                                // 14796
                                                                                                                       // 14797
    if (counter === 0) {                                                                                               // 14798
      deferred.resolve(results);                                                                                       // 14799
    }                                                                                                                  // 14800
                                                                                                                       // 14801
    return deferred.promise;                                                                                           // 14802
  }                                                                                                                    // 14803
                                                                                                                       // 14804
  var $Q = function Q(resolver) {                                                                                      // 14805
    if (!isFunction(resolver)) {                                                                                       // 14806
      throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);                                           // 14807
    }                                                                                                                  // 14808
                                                                                                                       // 14809
    if (!(this instanceof Q)) {                                                                                        // 14810
      // More useful when $Q is the Promise itself.                                                                    // 14811
      return new Q(resolver);                                                                                          // 14812
    }                                                                                                                  // 14813
                                                                                                                       // 14814
    var deferred = new Deferred();                                                                                     // 14815
                                                                                                                       // 14816
    function resolveFn(value) {                                                                                        // 14817
      deferred.resolve(value);                                                                                         // 14818
    }                                                                                                                  // 14819
                                                                                                                       // 14820
    function rejectFn(reason) {                                                                                        // 14821
      deferred.reject(reason);                                                                                         // 14822
    }                                                                                                                  // 14823
                                                                                                                       // 14824
    resolver(resolveFn, rejectFn);                                                                                     // 14825
                                                                                                                       // 14826
    return deferred.promise;                                                                                           // 14827
  };                                                                                                                   // 14828
                                                                                                                       // 14829
  $Q.defer = defer;                                                                                                    // 14830
  $Q.reject = reject;                                                                                                  // 14831
  $Q.when = when;                                                                                                      // 14832
  $Q.resolve = resolve;                                                                                                // 14833
  $Q.all = all;                                                                                                        // 14834
                                                                                                                       // 14835
  return $Q;                                                                                                           // 14836
}                                                                                                                      // 14837
                                                                                                                       // 14838
function $$RAFProvider() { //rAF                                                                                       // 14839
  this.$get = ['$window', '$timeout', function($window, $timeout) {                                                    // 14840
    var requestAnimationFrame = $window.requestAnimationFrame ||                                                       // 14841
                                $window.webkitRequestAnimationFrame;                                                   // 14842
                                                                                                                       // 14843
    var cancelAnimationFrame = $window.cancelAnimationFrame ||                                                         // 14844
                               $window.webkitCancelAnimationFrame ||                                                   // 14845
                               $window.webkitCancelRequestAnimationFrame;                                              // 14846
                                                                                                                       // 14847
    var rafSupported = !!requestAnimationFrame;                                                                        // 14848
    var rafFn = rafSupported                                                                                           // 14849
      ? function(fn) {                                                                                                 // 14850
          var id = requestAnimationFrame(fn);                                                                          // 14851
          return function() {                                                                                          // 14852
            cancelAnimationFrame(id);                                                                                  // 14853
          };                                                                                                           // 14854
        }                                                                                                              // 14855
      : function(fn) {                                                                                                 // 14856
          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666                                                // 14857
          return function() {                                                                                          // 14858
            $timeout.cancel(timer);                                                                                    // 14859
          };                                                                                                           // 14860
        };                                                                                                             // 14861
                                                                                                                       // 14862
    queueFn.supported = rafSupported;                                                                                  // 14863
                                                                                                                       // 14864
    var cancelLastRAF;                                                                                                 // 14865
    var taskCount = 0;                                                                                                 // 14866
    var taskQueue = [];                                                                                                // 14867
    return queueFn;                                                                                                    // 14868
                                                                                                                       // 14869
    function flush() {                                                                                                 // 14870
      for (var i = 0; i < taskQueue.length; i++) {                                                                     // 14871
        var task = taskQueue[i];                                                                                       // 14872
        if (task) {                                                                                                    // 14873
          taskQueue[i] = null;                                                                                         // 14874
          task();                                                                                                      // 14875
        }                                                                                                              // 14876
      }                                                                                                                // 14877
      taskCount = taskQueue.length = 0;                                                                                // 14878
    }                                                                                                                  // 14879
                                                                                                                       // 14880
    function queueFn(asyncFn) {                                                                                        // 14881
      var index = taskQueue.length;                                                                                    // 14882
                                                                                                                       // 14883
      taskCount++;                                                                                                     // 14884
      taskQueue.push(asyncFn);                                                                                         // 14885
                                                                                                                       // 14886
      if (index === 0) {                                                                                               // 14887
        cancelLastRAF = rafFn(flush);                                                                                  // 14888
      }                                                                                                                // 14889
                                                                                                                       // 14890
      return function cancelQueueFn() {                                                                                // 14891
        if (index >= 0) {                                                                                              // 14892
          taskQueue[index] = null;                                                                                     // 14893
          index = null;                                                                                                // 14894
                                                                                                                       // 14895
          if (--taskCount === 0 && cancelLastRAF) {                                                                    // 14896
            cancelLastRAF();                                                                                           // 14897
            cancelLastRAF = null;                                                                                      // 14898
            taskQueue.length = 0;                                                                                      // 14899
          }                                                                                                            // 14900
        }                                                                                                              // 14901
      };                                                                                                               // 14902
    }                                                                                                                  // 14903
  }];                                                                                                                  // 14904
}                                                                                                                      // 14905
                                                                                                                       // 14906
/**                                                                                                                    // 14907
 * DESIGN NOTES                                                                                                        // 14908
 *                                                                                                                     // 14909
 * The design decisions behind the scope are heavily favored for speed and memory consumption.                         // 14910
 *                                                                                                                     // 14911
 * The typical use of scope is to watch the expressions, which most of the time return the same                        // 14912
 * value as last time so we optimize the operation.                                                                    // 14913
 *                                                                                                                     // 14914
 * Closures construction is expensive in terms of speed as well as memory:                                             // 14915
 *   - No closures, instead use prototypical inheritance for API                                                       // 14916
 *   - Internal state needs to be stored on scope directly, which means that private state is                          // 14917
 *     exposed as $$____ properties                                                                                    // 14918
 *                                                                                                                     // 14919
 * Loop operations are optimized by using while(count--) { ... }                                                       // 14920
 *   - this means that in order to keep the same order of execution as addition we have to add                         // 14921
 *     items to the array at the beginning (unshift) instead of at the end (push)                                      // 14922
 *                                                                                                                     // 14923
 * Child scopes are created and removed often                                                                          // 14924
 *   - Using an array would be slow since inserts in middle are expensive so we use linked list                        // 14925
 *                                                                                                                     // 14926
 * There are few watches then a lot of observers. This is why you don't want the observer to be                        // 14927
 * implemented in the same way as watch. Watch requires return of initialization function which                        // 14928
 * are expensive to construct.                                                                                         // 14929
 */                                                                                                                    // 14930
                                                                                                                       // 14931
                                                                                                                       // 14932
/**                                                                                                                    // 14933
 * @ngdoc provider                                                                                                     // 14934
 * @name $rootScopeProvider                                                                                            // 14935
 * @description                                                                                                        // 14936
 *                                                                                                                     // 14937
 * Provider for the $rootScope service.                                                                                // 14938
 */                                                                                                                    // 14939
                                                                                                                       // 14940
/**                                                                                                                    // 14941
 * @ngdoc method                                                                                                       // 14942
 * @name $rootScopeProvider#digestTtl                                                                                  // 14943
 * @description                                                                                                        // 14944
 *                                                                                                                     // 14945
 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and                    // 14946
 * assuming that the model is unstable.                                                                                // 14947
 *                                                                                                                     // 14948
 * The current default is 10 iterations.                                                                               // 14949
 *                                                                                                                     // 14950
 * In complex applications it's possible that the dependencies between `$watch`s will result in                        // 14951
 * several digest iterations. However if an application needs more than the default 10 digest                          // 14952
 * iterations for its model to stabilize then you should investigate what is causing the model to                      // 14953
 * continuously change during the digest.                                                                              // 14954
 *                                                                                                                     // 14955
 * Increasing the TTL could have performance implications, so you should not change it without                         // 14956
 * proper justification.                                                                                               // 14957
 *                                                                                                                     // 14958
 * @param {number} limit The number of digest iterations.                                                              // 14959
 */                                                                                                                    // 14960
                                                                                                                       // 14961
                                                                                                                       // 14962
/**                                                                                                                    // 14963
 * @ngdoc service                                                                                                      // 14964
 * @name $rootScope                                                                                                    // 14965
 * @description                                                                                                        // 14966
 *                                                                                                                     // 14967
 * Every application has a single root {@link ng.$rootScope.Scope scope}.                                              // 14968
 * All other scopes are descendant scopes of the root scope. Scopes provide separation                                 // 14969
 * between the model and the view, via a mechanism for watching the model for changes.                                 // 14970
 * They also provide an event emission/broadcast and subscription facility. See the                                    // 14971
 * {@link guide/scope developer guide on scopes}.                                                                      // 14972
 */                                                                                                                    // 14973
function $RootScopeProvider() {                                                                                        // 14974
  var TTL = 10;                                                                                                        // 14975
  var $rootScopeMinErr = minErr('$rootScope');                                                                         // 14976
  var lastDirtyWatch = null;                                                                                           // 14977
  var applyAsyncId = null;                                                                                             // 14978
                                                                                                                       // 14979
  this.digestTtl = function(value) {                                                                                   // 14980
    if (arguments.length) {                                                                                            // 14981
      TTL = value;                                                                                                     // 14982
    }                                                                                                                  // 14983
    return TTL;                                                                                                        // 14984
  };                                                                                                                   // 14985
                                                                                                                       // 14986
  function createChildScopeClass(parent) {                                                                             // 14987
    function ChildScope() {                                                                                            // 14988
      this.$$watchers = this.$$nextSibling =                                                                           // 14989
          this.$$childHead = this.$$childTail = null;                                                                  // 14990
      this.$$listeners = {};                                                                                           // 14991
      this.$$listenerCount = {};                                                                                       // 14992
      this.$$watchersCount = 0;                                                                                        // 14993
      this.$id = nextUid();                                                                                            // 14994
      this.$$ChildScope = null;                                                                                        // 14995
    }                                                                                                                  // 14996
    ChildScope.prototype = parent;                                                                                     // 14997
    return ChildScope;                                                                                                 // 14998
  }                                                                                                                    // 14999
                                                                                                                       // 15000
  this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',                                                 // 15001
      function($injector, $exceptionHandler, $parse, $browser) {                                                       // 15002
                                                                                                                       // 15003
    function destroyChildScope($event) {                                                                               // 15004
        $event.currentScope.$$destroyed = true;                                                                        // 15005
    }                                                                                                                  // 15006
                                                                                                                       // 15007
    /**                                                                                                                // 15008
     * @ngdoc type                                                                                                     // 15009
     * @name $rootScope.Scope                                                                                          // 15010
     *                                                                                                                 // 15011
     * @description                                                                                                    // 15012
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the                           // 15013
     * {@link auto.$injector $injector}. Child scopes are created using the                                            // 15014
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when                     // 15015
     * compiled HTML template is executed.)                                                                            // 15016
     *                                                                                                                 // 15017
     * Here is a simple scope snippet to show how you can interact with the scope.                                     // 15018
     * ```html                                                                                                         // 15019
     * <file src="./test/ng/rootScopeSpec.js" tag="docs1" />                                                           // 15020
     * ```                                                                                                             // 15021
     *                                                                                                                 // 15022
     * # Inheritance                                                                                                   // 15023
     * A scope can inherit from a parent scope, as in this example:                                                    // 15024
     * ```js                                                                                                           // 15025
         var parent = $rootScope;                                                                                      // 15026
         var child = parent.$new();                                                                                    // 15027
                                                                                                                       // 15028
         parent.salutation = "Hello";                                                                                  // 15029
         expect(child.salutation).toEqual('Hello');                                                                    // 15030
                                                                                                                       // 15031
         child.salutation = "Welcome";                                                                                 // 15032
         expect(child.salutation).toEqual('Welcome');                                                                  // 15033
         expect(parent.salutation).toEqual('Hello');                                                                   // 15034
     * ```                                                                                                             // 15035
     *                                                                                                                 // 15036
     * When interacting with `Scope` in tests, additional helper methods are available on the                          // 15037
     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional                      // 15038
     * details.                                                                                                        // 15039
     *                                                                                                                 // 15040
     *                                                                                                                 // 15041
     * @param {Object.<string, function()>=} providers Map of service factory which need to be                         // 15042
     *                                       provided for the current scope. Defaults to {@link ng}.                   // 15043
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should                      // 15044
     *                              append/override services provided by `providers`. This is handy                    // 15045
     *                              when unit-testing and having the need to override a default                        // 15046
     *                              service.                                                                           // 15047
     * @returns {Object} Newly created scope.                                                                          // 15048
     *                                                                                                                 // 15049
     */                                                                                                                // 15050
    function Scope() {                                                                                                 // 15051
      this.$id = nextUid();                                                                                            // 15052
      this.$$phase = this.$parent = this.$$watchers =                                                                  // 15053
                     this.$$nextSibling = this.$$prevSibling =                                                         // 15054
                     this.$$childHead = this.$$childTail = null;                                                       // 15055
      this.$root = this;                                                                                               // 15056
      this.$$destroyed = false;                                                                                        // 15057
      this.$$listeners = {};                                                                                           // 15058
      this.$$listenerCount = {};                                                                                       // 15059
      this.$$watchersCount = 0;                                                                                        // 15060
      this.$$isolateBindings = null;                                                                                   // 15061
    }                                                                                                                  // 15062
                                                                                                                       // 15063
    /**                                                                                                                // 15064
     * @ngdoc property                                                                                                 // 15065
     * @name $rootScope.Scope#$id                                                                                      // 15066
     *                                                                                                                 // 15067
     * @description                                                                                                    // 15068
     * Unique scope ID (monotonically increasing) useful for debugging.                                                // 15069
     */                                                                                                                // 15070
                                                                                                                       // 15071
     /**                                                                                                               // 15072
      * @ngdoc property                                                                                                // 15073
      * @name $rootScope.Scope#$parent                                                                                 // 15074
      *                                                                                                                // 15075
      * @description                                                                                                   // 15076
      * Reference to the parent scope.                                                                                 // 15077
      */                                                                                                               // 15078
                                                                                                                       // 15079
      /**                                                                                                              // 15080
       * @ngdoc property                                                                                               // 15081
       * @name $rootScope.Scope#$root                                                                                  // 15082
       *                                                                                                               // 15083
       * @description                                                                                                  // 15084
       * Reference to the root scope.                                                                                  // 15085
       */                                                                                                              // 15086
                                                                                                                       // 15087
    Scope.prototype = {                                                                                                // 15088
      constructor: Scope,                                                                                              // 15089
      /**                                                                                                              // 15090
       * @ngdoc method                                                                                                 // 15091
       * @name $rootScope.Scope#$new                                                                                   // 15092
       * @kind function                                                                                                // 15093
       *                                                                                                               // 15094
       * @description                                                                                                  // 15095
       * Creates a new child {@link ng.$rootScope.Scope scope}.                                                        // 15096
       *                                                                                                               // 15097
       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.                      // 15098
       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.      // 15099
       *                                                                                                               // 15100
       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is                          // 15101
       * desired for the scope and its child scopes to be permanently detached from the parent and                     // 15102
       * thus stop participating in model change detection and listener notification by invoking.                      // 15103
       *                                                                                                               // 15104
       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the                     // 15105
       *         parent scope. The scope is isolated, as it can not see parent scope properties.                       // 15106
       *         When creating widgets, it is useful for the widget to not accidentally read parent                    // 15107
       *         state.                                                                                                // 15108
       *                                                                                                               // 15109
       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`               // 15110
       *                              of the newly created scope. Defaults to `this` scope if not provided.            // 15111
       *                              This is used when creating a transclude scope to correctly place it              // 15112
       *                              in the scope hierarchy while maintaining the correct prototypical                // 15113
       *                              inheritance.                                                                     // 15114
       *                                                                                                               // 15115
       * @returns {Object} The newly created child scope.                                                              // 15116
       *                                                                                                               // 15117
       */                                                                                                              // 15118
      $new: function(isolate, parent) {                                                                                // 15119
        var child;                                                                                                     // 15120
                                                                                                                       // 15121
        parent = parent || this;                                                                                       // 15122
                                                                                                                       // 15123
        if (isolate) {                                                                                                 // 15124
          child = new Scope();                                                                                         // 15125
          child.$root = this.$root;                                                                                    // 15126
        } else {                                                                                                       // 15127
          // Only create a child scope class if somebody asks for one,                                                 // 15128
          // but cache it to allow the VM to optimize lookups.                                                         // 15129
          if (!this.$$ChildScope) {                                                                                    // 15130
            this.$$ChildScope = createChildScopeClass(this);                                                           // 15131
          }                                                                                                            // 15132
          child = new this.$$ChildScope();                                                                             // 15133
        }                                                                                                              // 15134
        child.$parent = parent;                                                                                        // 15135
        child.$$prevSibling = parent.$$childTail;                                                                      // 15136
        if (parent.$$childHead) {                                                                                      // 15137
          parent.$$childTail.$$nextSibling = child;                                                                    // 15138
          parent.$$childTail = child;                                                                                  // 15139
        } else {                                                                                                       // 15140
          parent.$$childHead = parent.$$childTail = child;                                                             // 15141
        }                                                                                                              // 15142
                                                                                                                       // 15143
        // When the new scope is not isolated or we inherit from `this`, and                                           // 15144
        // the parent scope is destroyed, the property `$$destroyed` is inherited                                      // 15145
        // prototypically. In all other cases, this property needs to be set                                           // 15146
        // when the parent scope is destroyed.                                                                         // 15147
        // The listener needs to be added after the parent is set                                                      // 15148
        if (isolate || parent != this) child.$on('$destroy', destroyChildScope);                                       // 15149
                                                                                                                       // 15150
        return child;                                                                                                  // 15151
      },                                                                                                               // 15152
                                                                                                                       // 15153
      /**                                                                                                              // 15154
       * @ngdoc method                                                                                                 // 15155
       * @name $rootScope.Scope#$watch                                                                                 // 15156
       * @kind function                                                                                                // 15157
       *                                                                                                               // 15158
       * @description                                                                                                  // 15159
       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.                        // 15160
       *                                                                                                               // 15161
       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest                         // 15162
       *   $digest()} and should return the value that will be watched. (Since                                         // 15163
       *   {@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the                            // 15164
       *   `watchExpression` can execute multiple times per                                                            // 15165
       *   {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)                                    // 15166
       * - The `listener` is called only when the value from the current `watchExpression` and the                     // 15167
       *   previous call to `watchExpression` are not equal (with the exception of the initial run,                    // 15168
       *   see below). Inequality is determined according to reference inequality,                                     // 15169
       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
       *    via the `!==` Javascript operator, unless `objectEquality == true`                                         // 15171
       *   (see next point)                                                                                            // 15172
       * - When `objectEquality == true`, inequality of the `watchExpression` is determined                            // 15173
       *   according to the {@link angular.equals} function. To save the value of the object for                       // 15174
       *   later comparison, the {@link angular.copy} function is used. This therefore means that                      // 15175
       *   watching complex objects will have adverse memory and performance implications.                             // 15176
       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.                     // 15177
       *   This is achieved by rerunning the watchers until no changes are detected. The rerun                         // 15178
       *   iteration limit is 10 to prevent an infinite loop deadlock.                                                 // 15179
       *                                                                                                               // 15180
       *                                                                                                               // 15181
       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,                    // 15182
       * you can register a `watchExpression` function with no `listener`. (Since `watchExpression`                    // 15183
       * can execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a                       // 15184
       * change is detected, be prepared for multiple calls to your listener.)                                         // 15185
       *                                                                                                               // 15186
       * After a watcher is registered with the scope, the `listener` fn is called asynchronously                      // 15187
       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the                                     // 15188
       * watcher. In rare cases, this is undesirable because the listener is called when the result                    // 15189
       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you                     // 15190
       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the                     // 15191
       * listener was called due to initialization.                                                                    // 15192
       *                                                                                                               // 15193
       *                                                                                                               // 15194
       *                                                                                                               // 15195
       * # Example                                                                                                     // 15196
       * ```js                                                                                                         // 15197
           // let's assume that scope was dependency injected as the $rootScope                                        // 15198
           var scope = $rootScope;                                                                                     // 15199
           scope.name = 'misko';                                                                                       // 15200
           scope.counter = 0;                                                                                          // 15201
                                                                                                                       // 15202
           expect(scope.counter).toEqual(0);                                                                           // 15203
           scope.$watch('name', function(newValue, oldValue) {                                                         // 15204
             scope.counter = scope.counter + 1;                                                                        // 15205
           });                                                                                                         // 15206
           expect(scope.counter).toEqual(0);                                                                           // 15207
                                                                                                                       // 15208
           scope.$digest();                                                                                            // 15209
           // the listener is always called during the first $digest loop after it was registered                      // 15210
           expect(scope.counter).toEqual(1);                                                                           // 15211
                                                                                                                       // 15212
           scope.$digest();                                                                                            // 15213
           // but now it will not be called unless the value changes                                                   // 15214
           expect(scope.counter).toEqual(1);                                                                           // 15215
                                                                                                                       // 15216
           scope.name = 'adam';                                                                                        // 15217
           scope.$digest();                                                                                            // 15218
           expect(scope.counter).toEqual(2);                                                                           // 15219
                                                                                                                       // 15220
                                                                                                                       // 15221
                                                                                                                       // 15222
           // Using a function as a watchExpression                                                                    // 15223
           var food;                                                                                                   // 15224
           scope.foodCounter = 0;                                                                                      // 15225
           expect(scope.foodCounter).toEqual(0);                                                                       // 15226
           scope.$watch(                                                                                               // 15227
             // This function returns the value being watched. It is called for each turn of the $digest loop          // 15228
             function() { return food; },                                                                              // 15229
             // This is the change listener, called when the value returned from the above function changes            // 15230
             function(newValue, oldValue) {                                                                            // 15231
               if ( newValue !== oldValue ) {                                                                          // 15232
                 // Only increment the counter if the value changed                                                    // 15233
                 scope.foodCounter = scope.foodCounter + 1;                                                            // 15234
               }                                                                                                       // 15235
             }                                                                                                         // 15236
           );                                                                                                          // 15237
           // No digest has been run so the counter will be zero                                                       // 15238
           expect(scope.foodCounter).toEqual(0);                                                                       // 15239
                                                                                                                       // 15240
           // Run the digest but since food has not changed count will still be zero                                   // 15241
           scope.$digest();                                                                                            // 15242
           expect(scope.foodCounter).toEqual(0);                                                                       // 15243
                                                                                                                       // 15244
           // Update food and run digest.  Now the counter will increment                                              // 15245
           food = 'cheeseburger';                                                                                      // 15246
           scope.$digest();                                                                                            // 15247
           expect(scope.foodCounter).toEqual(1);                                                                       // 15248
                                                                                                                       // 15249
       * ```                                                                                                           // 15250
       *                                                                                                               // 15251
       *                                                                                                               // 15252
       *                                                                                                               // 15253
       * @param {(function()|string)} watchExpression Expression that is evaluated on each                             // 15254
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers                   // 15255
       *    a call to the `listener`.                                                                                  // 15256
       *                                                                                                               // 15257
       *    - `string`: Evaluated as {@link guide/expression expression}                                               // 15258
       *    - `function(scope)`: called with current `scope` as a parameter.                                           // 15259
       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value                          // 15260
       *    of `watchExpression` changes.                                                                              // 15261
       *                                                                                                               // 15262
       *    - `newVal` contains the current value of the `watchExpression`                                             // 15263
       *    - `oldVal` contains the previous value of the `watchExpression`                                            // 15264
       *    - `scope` refers to the current scope                                                                      // 15265
       * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of          // 15266
       *     comparing for reference equality.                                                                         // 15267
       * @returns {function()} Returns a deregistration function for this listener.                                    // 15268
       */                                                                                                              // 15269
      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {                                    // 15270
        var get = $parse(watchExp);                                                                                    // 15271
                                                                                                                       // 15272
        if (get.$$watchDelegate) {                                                                                     // 15273
          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);                                   // 15274
        }                                                                                                              // 15275
        var scope = this,                                                                                              // 15276
            array = scope.$$watchers,                                                                                  // 15277
            watcher = {                                                                                                // 15278
              fn: listener,                                                                                            // 15279
              last: initWatchVal,                                                                                      // 15280
              get: get,                                                                                                // 15281
              exp: prettyPrintExpression || watchExp,                                                                  // 15282
              eq: !!objectEquality                                                                                     // 15283
            };                                                                                                         // 15284
                                                                                                                       // 15285
        lastDirtyWatch = null;                                                                                         // 15286
                                                                                                                       // 15287
        if (!isFunction(listener)) {                                                                                   // 15288
          watcher.fn = noop;                                                                                           // 15289
        }                                                                                                              // 15290
                                                                                                                       // 15291
        if (!array) {                                                                                                  // 15292
          array = scope.$$watchers = [];                                                                               // 15293
        }                                                                                                              // 15294
        // we use unshift since we use a while loop in $digest for speed.                                              // 15295
        // the while loop reads in reverse order.                                                                      // 15296
        array.unshift(watcher);                                                                                        // 15297
        incrementWatchersCount(this, 1);                                                                               // 15298
                                                                                                                       // 15299
        return function deregisterWatch() {                                                                            // 15300
          if (arrayRemove(array, watcher) >= 0) {                                                                      // 15301
            incrementWatchersCount(scope, -1);                                                                         // 15302
          }                                                                                                            // 15303
          lastDirtyWatch = null;                                                                                       // 15304
        };                                                                                                             // 15305
      },                                                                                                               // 15306
                                                                                                                       // 15307
      /**                                                                                                              // 15308
       * @ngdoc method                                                                                                 // 15309
       * @name $rootScope.Scope#$watchGroup                                                                            // 15310
       * @kind function                                                                                                // 15311
       *                                                                                                               // 15312
       * @description                                                                                                  // 15313
       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.     // 15314
       * If any one expression in the collection changes the `listener` is executed.                                   // 15315
       *                                                                                                               // 15316
       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
       *   call to $digest() to see if any items changes.                                                              // 15318
       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.                   // 15319
       *                                                                                                               // 15320
       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually       // 15321
       * watched using {@link ng.$rootScope.Scope#$watch $watch()}                                                     // 15322
       *                                                                                                               // 15323
       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any      // 15324
       *    expression in `watchExpressions` changes                                                                   // 15325
       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching     // 15326
       *    those of `watchExpression`                                                                                 // 15327
       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`                                                                                 // 15329
       *    The `scope` refers to the current scope.                                                                   // 15330
       * @returns {function()} Returns a de-registration function for all listeners.                                   // 15331
       */                                                                                                              // 15332
      $watchGroup: function(watchExpressions, listener) {                                                              // 15333
        var oldValues = new Array(watchExpressions.length);                                                            // 15334
        var newValues = new Array(watchExpressions.length);                                                            // 15335
        var deregisterFns = [];                                                                                        // 15336
        var self = this;                                                                                               // 15337
        var changeReactionScheduled = false;                                                                           // 15338
        var firstRun = true;                                                                                           // 15339
                                                                                                                       // 15340
        if (!watchExpressions.length) {                                                                                // 15341
          // No expressions means we call the listener ASAP                                                            // 15342
          var shouldCall = true;                                                                                       // 15343
          self.$evalAsync(function() {                                                                                 // 15344
            if (shouldCall) listener(newValues, newValues, self);                                                      // 15345
          });                                                                                                          // 15346
          return function deregisterWatchGroup() {                                                                     // 15347
            shouldCall = false;                                                                                        // 15348
          };                                                                                                           // 15349
        }                                                                                                              // 15350
                                                                                                                       // 15351
        if (watchExpressions.length === 1) {                                                                           // 15352
          // Special case size of one                                                                                  // 15353
          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {                  // 15354
            newValues[0] = value;                                                                                      // 15355
            oldValues[0] = oldValue;                                                                                   // 15356
            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);                                  // 15357
          });                                                                                                          // 15358
        }                                                                                                              // 15359
                                                                                                                       // 15360
        forEach(watchExpressions, function(expr, i) {                                                                  // 15361
          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {                            // 15362
            newValues[i] = value;                                                                                      // 15363
            oldValues[i] = oldValue;                                                                                   // 15364
            if (!changeReactionScheduled) {                                                                            // 15365
              changeReactionScheduled = true;                                                                          // 15366
              self.$evalAsync(watchGroupAction);                                                                       // 15367
            }                                                                                                          // 15368
          });                                                                                                          // 15369
          deregisterFns.push(unwatchFn);                                                                               // 15370
        });                                                                                                            // 15371
                                                                                                                       // 15372
        function watchGroupAction() {                                                                                  // 15373
          changeReactionScheduled = false;                                                                             // 15374
                                                                                                                       // 15375
          if (firstRun) {                                                                                              // 15376
            firstRun = false;                                                                                          // 15377
            listener(newValues, newValues, self);                                                                      // 15378
          } else {                                                                                                     // 15379
            listener(newValues, oldValues, self);                                                                      // 15380
          }                                                                                                            // 15381
        }                                                                                                              // 15382
                                                                                                                       // 15383
        return function deregisterWatchGroup() {                                                                       // 15384
          while (deregisterFns.length) {                                                                               // 15385
            deregisterFns.shift()();                                                                                   // 15386
          }                                                                                                            // 15387
        };                                                                                                             // 15388
      },                                                                                                               // 15389
                                                                                                                       // 15390
                                                                                                                       // 15391
      /**                                                                                                              // 15392
       * @ngdoc method                                                                                                 // 15393
       * @name $rootScope.Scope#$watchCollection                                                                       // 15394
       * @kind function                                                                                                // 15395
       *                                                                                                               // 15396
       * @description                                                                                                  // 15397
       * Shallow watches the properties of an object and fires whenever any of the properties change                   // 15398
       * (for arrays, this implies watching the array items; for object maps, this implies watching                    // 15399
       * the properties). If a change is detected, the `listener` callback is fired.                                   // 15400
       *                                                                                                               // 15401
       * - The `obj` collection is observed via standard $watch operation and is examined on every                     // 15402
       *   call to $digest() to see if any items have been added, removed, or moved.                                   // 15403
       * - The `listener` is called whenever anything within the `obj` has changed. Examples include                   // 15404
       *   adding, removing, and moving items belonging to an object or array.                                         // 15405
       *                                                                                                               // 15406
       *                                                                                                               // 15407
       * # Example                                                                                                     // 15408
       * ```js                                                                                                         // 15409
          $scope.names = ['igor', 'matias', 'misko', 'james'];                                                         // 15410
          $scope.dataCount = 4;                                                                                        // 15411
                                                                                                                       // 15412
          $scope.$watchCollection('names', function(newNames, oldNames) {                                              // 15413
            $scope.dataCount = newNames.length;                                                                        // 15414
          });                                                                                                          // 15415
                                                                                                                       // 15416
          expect($scope.dataCount).toEqual(4);                                                                         // 15417
          $scope.$digest();                                                                                            // 15418
                                                                                                                       // 15419
          //still at 4 ... no changes                                                                                  // 15420
          expect($scope.dataCount).toEqual(4);                                                                         // 15421
                                                                                                                       // 15422
          $scope.names.pop();                                                                                          // 15423
          $scope.$digest();                                                                                            // 15424
                                                                                                                       // 15425
          //now there's been a change                                                                                  // 15426
          expect($scope.dataCount).toEqual(3);                                                                         // 15427
       * ```                                                                                                           // 15428
       *                                                                                                               // 15429
       *                                                                                                               // 15430
       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The                     // 15431
       *    expression value should evaluate to an object or an array which is observed on each                        // 15432
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the                           // 15433
       *    collection will trigger a call to the `listener`.                                                          // 15434
       *                                                                                                               // 15435
       * @param {function(newCollection, oldCollection, scope)} listener a callback function called                    // 15436
       *    when a change is detected.                                                                                 // 15437
       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression                 // 15438
       *    - The `oldCollection` object is a copy of the former collection data.                                      // 15439
       *      Due to performance considerations, the`oldCollection` value is computed only if the                      // 15440
       *      `listener` function declares two or more arguments.                                                      // 15441
       *    - The `scope` argument refers to the current scope.                                                        // 15442
       *                                                                                                               // 15443
       * @returns {function()} Returns a de-registration function for this listener. When the                          // 15444
       *    de-registration function is executed, the internal watch operation is terminated.                          // 15445
       */                                                                                                              // 15446
      $watchCollection: function(obj, listener) {                                                                      // 15447
        $watchCollectionInterceptor.$stateful = true;                                                                  // 15448
                                                                                                                       // 15449
        var self = this;                                                                                               // 15450
        // the current value, updated on each dirty-check run                                                          // 15451
        var newValue;                                                                                                  // 15452
        // a shallow copy of the newValue from the last dirty-check run,                                               // 15453
        // updated to match newValue during dirty-check run                                                            // 15454
        var oldValue;                                                                                                  // 15455
        // a shallow copy of the newValue from when the last change happened                                           // 15456
        var veryOldValue;                                                                                              // 15457
        // only track veryOldValue if the listener is asking for it                                                    // 15458
        var trackVeryOldValue = (listener.length > 1);                                                                 // 15459
        var changeDetected = 0;                                                                                        // 15460
        var changeDetector = $parse(obj, $watchCollectionInterceptor);                                                 // 15461
        var internalArray = [];                                                                                        // 15462
        var internalObject = {};                                                                                       // 15463
        var initRun = true;                                                                                            // 15464
        var oldLength = 0;                                                                                             // 15465
                                                                                                                       // 15466
        function $watchCollectionInterceptor(_value) {                                                                 // 15467
          newValue = _value;                                                                                           // 15468
          var newLength, key, bothNaN, newItem, oldItem;                                                               // 15469
                                                                                                                       // 15470
          // If the new value is undefined, then return undefined as the watch may be a one-time watch                 // 15471
          if (isUndefined(newValue)) return;                                                                           // 15472
                                                                                                                       // 15473
          if (!isObject(newValue)) { // if primitive                                                                   // 15474
            if (oldValue !== newValue) {                                                                               // 15475
              oldValue = newValue;                                                                                     // 15476
              changeDetected++;                                                                                        // 15477
            }                                                                                                          // 15478
          } else if (isArrayLike(newValue)) {                                                                          // 15479
            if (oldValue !== internalArray) {                                                                          // 15480
              // we are transitioning from something which was not an array into array.                                // 15481
              oldValue = internalArray;                                                                                // 15482
              oldLength = oldValue.length = 0;                                                                         // 15483
              changeDetected++;                                                                                        // 15484
            }                                                                                                          // 15485
                                                                                                                       // 15486
            newLength = newValue.length;                                                                               // 15487
                                                                                                                       // 15488
            if (oldLength !== newLength) {                                                                             // 15489
              // if lengths do not match we need to trigger change notification                                        // 15490
              changeDetected++;                                                                                        // 15491
              oldValue.length = oldLength = newLength;                                                                 // 15492
            }                                                                                                          // 15493
            // copy the items to oldValue and look for changes.                                                        // 15494
            for (var i = 0; i < newLength; i++) {                                                                      // 15495
              oldItem = oldValue[i];                                                                                   // 15496
              newItem = newValue[i];                                                                                   // 15497
                                                                                                                       // 15498
              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);                                                // 15499
              if (!bothNaN && (oldItem !== newItem)) {                                                                 // 15500
                changeDetected++;                                                                                      // 15501
                oldValue[i] = newItem;                                                                                 // 15502
              }                                                                                                        // 15503
            }                                                                                                          // 15504
          } else {                                                                                                     // 15505
            if (oldValue !== internalObject) {                                                                         // 15506
              // we are transitioning from something which was not an object into object.                              // 15507
              oldValue = internalObject = {};                                                                          // 15508
              oldLength = 0;                                                                                           // 15509
              changeDetected++;                                                                                        // 15510
            }                                                                                                          // 15511
            // copy the items to oldValue and look for changes.                                                        // 15512
            newLength = 0;                                                                                             // 15513
            for (key in newValue) {                                                                                    // 15514
              if (newValue.hasOwnProperty(key)) {                                                                      // 15515
                newLength++;                                                                                           // 15516
                newItem = newValue[key];                                                                               // 15517
                oldItem = oldValue[key];                                                                               // 15518
                                                                                                                       // 15519
                if (key in oldValue) {                                                                                 // 15520
                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);                                            // 15521
                  if (!bothNaN && (oldItem !== newItem)) {                                                             // 15522
                    changeDetected++;                                                                                  // 15523
                    oldValue[key] = newItem;                                                                           // 15524
                  }                                                                                                    // 15525
                } else {                                                                                               // 15526
                  oldLength++;                                                                                         // 15527
                  oldValue[key] = newItem;                                                                             // 15528
                  changeDetected++;                                                                                    // 15529
                }                                                                                                      // 15530
              }                                                                                                        // 15531
            }                                                                                                          // 15532
            if (oldLength > newLength) {                                                                               // 15533
              // we used to have more keys, need to find them and destroy them.                                        // 15534
              changeDetected++;                                                                                        // 15535
              for (key in oldValue) {                                                                                  // 15536
                if (!newValue.hasOwnProperty(key)) {                                                                   // 15537
                  oldLength--;                                                                                         // 15538
                  delete oldValue[key];                                                                                // 15539
                }                                                                                                      // 15540
              }                                                                                                        // 15541
            }                                                                                                          // 15542
          }                                                                                                            // 15543
          return changeDetected;                                                                                       // 15544
        }                                                                                                              // 15545
                                                                                                                       // 15546
        function $watchCollectionAction() {                                                                            // 15547
          if (initRun) {                                                                                               // 15548
            initRun = false;                                                                                           // 15549
            listener(newValue, newValue, self);                                                                        // 15550
          } else {                                                                                                     // 15551
            listener(newValue, veryOldValue, self);                                                                    // 15552
          }                                                                                                            // 15553
                                                                                                                       // 15554
          // make a copy for the next time a collection is changed                                                     // 15555
          if (trackVeryOldValue) {                                                                                     // 15556
            if (!isObject(newValue)) {                                                                                 // 15557
              //primitive                                                                                              // 15558
              veryOldValue = newValue;                                                                                 // 15559
            } else if (isArrayLike(newValue)) {                                                                        // 15560
              veryOldValue = new Array(newValue.length);                                                               // 15561
              for (var i = 0; i < newValue.length; i++) {                                                              // 15562
                veryOldValue[i] = newValue[i];                                                                         // 15563
              }                                                                                                        // 15564
            } else { // if object                                                                                      // 15565
              veryOldValue = {};                                                                                       // 15566
              for (var key in newValue) {                                                                              // 15567
                if (hasOwnProperty.call(newValue, key)) {                                                              // 15568
                  veryOldValue[key] = newValue[key];                                                                   // 15569
                }                                                                                                      // 15570
              }                                                                                                        // 15571
            }                                                                                                          // 15572
          }                                                                                                            // 15573
        }                                                                                                              // 15574
                                                                                                                       // 15575
        return this.$watch(changeDetector, $watchCollectionAction);                                                    // 15576
      },                                                                                                               // 15577
                                                                                                                       // 15578
      /**                                                                                                              // 15579
       * @ngdoc method                                                                                                 // 15580
       * @name $rootScope.Scope#$digest                                                                                // 15581
       * @kind function                                                                                                // 15582
       *                                                                                                               // 15583
       * @description                                                                                                  // 15584
       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and                     // 15585
       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change                      // 15586
       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}                      // 15587
       * until no more listeners are firing. This means that it is possible to get into an infinite                    // 15588
       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of                         // 15589
       * iterations exceeds 10.                                                                                        // 15590
       *                                                                                                               // 15591
       * Usually, you don't call `$digest()` directly in                                                               // 15592
       * {@link ng.directive:ngController controllers} or in                                                           // 15593
       * {@link ng.$compileProvider#directive directives}.                                                             // 15594
       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within                   // 15595
       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.                           // 15596
       *                                                                                                               // 15597
       * If you want to be notified whenever `$digest()` is called,                                                    // 15598
       * you can register a `watchExpression` function with                                                            // 15599
       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.                                               // 15600
       *                                                                                                               // 15601
       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.                             // 15602
       *                                                                                                               // 15603
       * # Example                                                                                                     // 15604
       * ```js                                                                                                         // 15605
           var scope = ...;                                                                                            // 15606
           scope.name = 'misko';                                                                                       // 15607
           scope.counter = 0;                                                                                          // 15608
                                                                                                                       // 15609
           expect(scope.counter).toEqual(0);                                                                           // 15610
           scope.$watch('name', function(newValue, oldValue) {                                                         // 15611
             scope.counter = scope.counter + 1;                                                                        // 15612
           });                                                                                                         // 15613
           expect(scope.counter).toEqual(0);                                                                           // 15614
                                                                                                                       // 15615
           scope.$digest();                                                                                            // 15616
           // the listener is always called during the first $digest loop after it was registered                      // 15617
           expect(scope.counter).toEqual(1);                                                                           // 15618
                                                                                                                       // 15619
           scope.$digest();                                                                                            // 15620
           // but now it will not be called unless the value changes                                                   // 15621
           expect(scope.counter).toEqual(1);                                                                           // 15622
                                                                                                                       // 15623
           scope.name = 'adam';                                                                                        // 15624
           scope.$digest();                                                                                            // 15625
           expect(scope.counter).toEqual(2);                                                                           // 15626
       * ```                                                                                                           // 15627
       *                                                                                                               // 15628
       */                                                                                                              // 15629
      $digest: function() {                                                                                            // 15630
        var watch, value, last,                                                                                        // 15631
            watchers,                                                                                                  // 15632
            length,                                                                                                    // 15633
            dirty, ttl = TTL,                                                                                          // 15634
            next, current, target = this,                                                                              // 15635
            watchLog = [],                                                                                             // 15636
            logIdx, logMsg, asyncTask;                                                                                 // 15637
                                                                                                                       // 15638
        beginPhase('$digest');                                                                                         // 15639
        // Check for changes to browser url that happened in sync before the call to $digest                           // 15640
        $browser.$$checkUrlChange();                                                                                   // 15641
                                                                                                                       // 15642
        if (this === $rootScope && applyAsyncId !== null) {                                                            // 15643
          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then                        // 15644
          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.                           // 15645
          $browser.defer.cancel(applyAsyncId);                                                                         // 15646
          flushApplyAsync();                                                                                           // 15647
        }                                                                                                              // 15648
                                                                                                                       // 15649
        lastDirtyWatch = null;                                                                                         // 15650
                                                                                                                       // 15651
        do { // "while dirty" loop                                                                                     // 15652
          dirty = false;                                                                                               // 15653
          current = target;                                                                                            // 15654
                                                                                                                       // 15655
          while (asyncQueue.length) {                                                                                  // 15656
            try {                                                                                                      // 15657
              asyncTask = asyncQueue.shift();                                                                          // 15658
              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);                                           // 15659
            } catch (e) {                                                                                              // 15660
              $exceptionHandler(e);                                                                                    // 15661
            }                                                                                                          // 15662
            lastDirtyWatch = null;                                                                                     // 15663
          }                                                                                                            // 15664
                                                                                                                       // 15665
          traverseScopesLoop:                                                                                          // 15666
          do { // "traverse the scopes" loop                                                                           // 15667
            if ((watchers = current.$$watchers)) {                                                                     // 15668
              // process our watches                                                                                   // 15669
              length = watchers.length;                                                                                // 15670
              while (length--) {                                                                                       // 15671
                try {                                                                                                  // 15672
                  watch = watchers[length];                                                                            // 15673
                  // Most common watches are on primitives, in which case we can short                                 // 15674
                  // circuit it with === operator, only when === fails do we use .equals                               // 15675
                  if (watch) {                                                                                         // 15676
                    if ((value = watch.get(current)) !== (last = watch.last) &&                                        // 15677
                        !(watch.eq                                                                                     // 15678
                            ? equals(value, last)                                                                      // 15679
                            : (typeof value === 'number' && typeof last === 'number'                                   // 15680
                               && isNaN(value) && isNaN(last)))) {                                                     // 15681
                      dirty = true;                                                                                    // 15682
                      lastDirtyWatch = watch;                                                                          // 15683
                      watch.last = watch.eq ? copy(value, null) : value;                                               // 15684
                      watch.fn(value, ((last === initWatchVal) ? value : last), current);                              // 15685
                      if (ttl < 5) {                                                                                   // 15686
                        logIdx = 4 - ttl;                                                                              // 15687
                        if (!watchLog[logIdx]) watchLog[logIdx] = [];                                                  // 15688
                        watchLog[logIdx].push({                                                                        // 15689
                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,  // 15690
                          newVal: value,                                                                               // 15691
                          oldVal: last                                                                                 // 15692
                        });                                                                                            // 15693
                      }                                                                                                // 15694
                    } else if (watch === lastDirtyWatch) {                                                             // 15695
                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers   // 15696
                      // have already been tested.                                                                     // 15697
                      dirty = false;                                                                                   // 15698
                      break traverseScopesLoop;                                                                        // 15699
                    }                                                                                                  // 15700
                  }                                                                                                    // 15701
                } catch (e) {                                                                                          // 15702
                  $exceptionHandler(e);                                                                                // 15703
                }                                                                                                      // 15704
              }                                                                                                        // 15705
            }                                                                                                          // 15706
                                                                                                                       // 15707
            // Insanity Warning: scope depth-first traversal                                                           // 15708
            // yes, this code is a bit crazy, but it works and we have tests to prove it!                              // 15709
            // this piece should be kept in sync with the traversal in $broadcast                                      // 15710
            if (!(next = ((current.$$watchersCount && current.$$childHead) ||                                          // 15711
                (current !== target && current.$$nextSibling)))) {                                                     // 15712
              while (current !== target && !(next = current.$$nextSibling)) {                                          // 15713
                current = current.$parent;                                                                             // 15714
              }                                                                                                        // 15715
            }                                                                                                          // 15716
          } while ((current = next));                                                                                  // 15717
                                                                                                                       // 15718
          // `break traverseScopesLoop;` takes us to here                                                              // 15719
                                                                                                                       // 15720
          if ((dirty || asyncQueue.length) && !(ttl--)) {                                                              // 15721
            clearPhase();                                                                                              // 15722
            throw $rootScopeMinErr('infdig',                                                                           // 15723
                '{0} $digest() iterations reached. Aborting!\n' +                                                      // 15724
                'Watchers fired in the last 5 iterations: {1}',                                                        // 15725
                TTL, watchLog);                                                                                        // 15726
          }                                                                                                            // 15727
                                                                                                                       // 15728
        } while (dirty || asyncQueue.length);                                                                          // 15729
                                                                                                                       // 15730
        clearPhase();                                                                                                  // 15731
                                                                                                                       // 15732
        while (postDigestQueue.length) {                                                                               // 15733
          try {                                                                                                        // 15734
            postDigestQueue.shift()();                                                                                 // 15735
          } catch (e) {                                                                                                // 15736
            $exceptionHandler(e);                                                                                      // 15737
          }                                                                                                            // 15738
        }                                                                                                              // 15739
      },                                                                                                               // 15740
                                                                                                                       // 15741
                                                                                                                       // 15742
      /**                                                                                                              // 15743
       * @ngdoc event                                                                                                  // 15744
       * @name $rootScope.Scope#$destroy                                                                               // 15745
       * @eventType broadcast on scope being destroyed                                                                 // 15746
       *                                                                                                               // 15747
       * @description                                                                                                  // 15748
       * Broadcasted when a scope and its children are being destroyed.                                                // 15749
       *                                                                                                               // 15750
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to                        // 15751
       * clean up DOM bindings before an element is removed from the DOM.                                              // 15752
       */                                                                                                              // 15753
                                                                                                                       // 15754
      /**                                                                                                              // 15755
       * @ngdoc method                                                                                                 // 15756
       * @name $rootScope.Scope#$destroy                                                                               // 15757
       * @kind function                                                                                                // 15758
       *                                                                                                               // 15759
       * @description                                                                                                  // 15760
       * Removes the current scope (and all of its children) from the parent scope. Removal implies                    // 15761
       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer                                    // 15762
       * propagate to the current scope and its children. Removal also implies that the current                        // 15763
       * scope is eligible for garbage collection.                                                                     // 15764
       *                                                                                                               // 15765
       * The `$destroy()` is usually used by directives such as                                                        // 15766
       * {@link ng.directive:ngRepeat ngRepeat} for managing the                                                       // 15767
       * unrolling of the loop.                                                                                        // 15768
       *                                                                                                               // 15769
       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.                            // 15770
       * Application code can register a `$destroy` event handler that will give it a chance to                        // 15771
       * perform any necessary cleanup.                                                                                // 15772
       *                                                                                                               // 15773
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to                        // 15774
       * clean up DOM bindings before an element is removed from the DOM.                                              // 15775
       */                                                                                                              // 15776
      $destroy: function() {                                                                                           // 15777
        // We can't destroy a scope that has been already destroyed.                                                   // 15778
        if (this.$$destroyed) return;                                                                                  // 15779
        var parent = this.$parent;                                                                                     // 15780
                                                                                                                       // 15781
        this.$broadcast('$destroy');                                                                                   // 15782
        this.$$destroyed = true;                                                                                       // 15783
                                                                                                                       // 15784
        if (this === $rootScope) {                                                                                     // 15785
          //Remove handlers attached to window when $rootScope is removed                                              // 15786
          $browser.$$applicationDestroyed();                                                                           // 15787
        }                                                                                                              // 15788
                                                                                                                       // 15789
        incrementWatchersCount(this, -this.$$watchersCount);                                                           // 15790
        for (var eventName in this.$$listenerCount) {                                                                  // 15791
          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);                                    // 15792
        }                                                                                                              // 15793
                                                                                                                       // 15794
        // sever all the references to parent scopes (after this cleanup, the current scope should                     // 15795
        // not be retained by any of our references and should be eligible for garbage collection)                     // 15796
        if (parent && parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;                             // 15797
        if (parent && parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;                             // 15798
        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;                                 // 15799
        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;                                 // 15800
                                                                                                                       // 15801
        // Disable listeners, watchers and apply/digest methods                                                        // 15802
        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;                        // 15803
        this.$on = this.$watch = this.$watchGroup = function() { return noop; };                                       // 15804
        this.$$listeners = {};                                                                                         // 15805
                                                                                                                       // 15806
        // All of the code below is bogus code that works around V8's memory leak via optimized code                   // 15807
        // and inline caches.                                                                                          // 15808
        //                                                                                                             // 15809
        // see:                                                                                                        // 15810
        // - https://code.google.com/p/v8/issues/detail?id=2073#c26                                                    // 15811
        // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909                                   // 15812
        // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451                                   // 15813
                                                                                                                       // 15814
        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =                                    // 15815
            this.$$childTail = this.$root = this.$$watchers = null;                                                    // 15816
      },                                                                                                               // 15817
                                                                                                                       // 15818
      /**                                                                                                              // 15819
       * @ngdoc method                                                                                                 // 15820
       * @name $rootScope.Scope#$eval                                                                                  // 15821
       * @kind function                                                                                                // 15822
       *                                                                                                               // 15823
       * @description                                                                                                  // 15824
       * Executes the `expression` on the current scope and returns the result. Any exceptions in                      // 15825
       * the expression are propagated (uncaught). This is useful when evaluating Angular                              // 15826
       * expressions.                                                                                                  // 15827
       *                                                                                                               // 15828
       * # Example                                                                                                     // 15829
       * ```js                                                                                                         // 15830
           var scope = ng.$rootScope.Scope();                                                                          // 15831
           scope.a = 1;                                                                                                // 15832
           scope.b = 2;                                                                                                // 15833
                                                                                                                       // 15834
           expect(scope.$eval('a+b')).toEqual(3);                                                                      // 15835
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);                               // 15836
       * ```                                                                                                           // 15837
       *                                                                                                               // 15838
       * @param {(string|function())=} expression An angular expression to be executed.                                // 15839
       *                                                                                                               // 15840
       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.                    // 15841
       *    - `function(scope)`: execute the function with the current `scope` parameter.                              // 15842
       *                                                                                                               // 15843
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.                      // 15844
       * @returns {*} The result of evaluating the expression.                                                         // 15845
       */                                                                                                              // 15846
      $eval: function(expr, locals) {                                                                                  // 15847
        return $parse(expr)(this, locals);                                                                             // 15848
      },                                                                                                               // 15849
                                                                                                                       // 15850
      /**                                                                                                              // 15851
       * @ngdoc method                                                                                                 // 15852
       * @name $rootScope.Scope#$evalAsync                                                                             // 15853
       * @kind function                                                                                                // 15854
       *                                                                                                               // 15855
       * @description                                                                                                  // 15856
       * Executes the expression on the current scope at a later point in time.                                        // 15857
       *                                                                                                               // 15858
       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only                       // 15859
       * that:                                                                                                         // 15860
       *                                                                                                               // 15861
       *   - it will execute after the function that scheduled the evaluation (preferably before DOM                   // 15862
       *     rendering).                                                                                               // 15863
       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after                    // 15864
       *     `expression` execution.                                                                                   // 15865
       *                                                                                                               // 15866
       * Any exceptions from the execution of the expression are forwarded to the                                      // 15867
       * {@link ng.$exceptionHandler $exceptionHandler} service.                                                       // 15868
       *                                                                                                               // 15869
       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle                      // 15870
       * will be scheduled. However, it is encouraged to always call code that changes the model                       // 15871
       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.                                  // 15872
       *                                                                                                               // 15873
       * @param {(string|function())=} expression An angular expression to be executed.                                // 15874
       *                                                                                                               // 15875
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 15876
       *    - `function(scope)`: execute the function with the current `scope` parameter.                              // 15877
       *                                                                                                               // 15878
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.                      // 15879
       */                                                                                                              // 15880
      $evalAsync: function(expr, locals) {                                                                             // 15881
        // if we are outside of an $digest loop and this is the first time we are scheduling async                     // 15882
        // task also schedule async auto-flush                                                                         // 15883
        if (!$rootScope.$$phase && !asyncQueue.length) {                                                               // 15884
          $browser.defer(function() {                                                                                  // 15885
            if (asyncQueue.length) {                                                                                   // 15886
              $rootScope.$digest();                                                                                    // 15887
            }                                                                                                          // 15888
          });                                                                                                          // 15889
        }                                                                                                              // 15890
                                                                                                                       // 15891
        asyncQueue.push({scope: this, expression: expr, locals: locals});                                              // 15892
      },                                                                                                               // 15893
                                                                                                                       // 15894
      $$postDigest: function(fn) {                                                                                     // 15895
        postDigestQueue.push(fn);                                                                                      // 15896
      },                                                                                                               // 15897
                                                                                                                       // 15898
      /**                                                                                                              // 15899
       * @ngdoc method                                                                                                 // 15900
       * @name $rootScope.Scope#$apply                                                                                 // 15901
       * @kind function                                                                                                // 15902
       *                                                                                                               // 15903
       * @description                                                                                                  // 15904
       * `$apply()` is used to execute an expression in angular from outside of the angular                            // 15905
       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).                   // 15906
       * Because we are calling into the angular framework we need to perform proper scope life                        // 15907
       * cycle of {@link ng.$exceptionHandler exception handling},                                                     // 15908
       * {@link ng.$rootScope.Scope#$digest executing watches}.                                                        // 15909
       *                                                                                                               // 15910
       * ## Life cycle                                                                                                 // 15911
       *                                                                                                               // 15912
       * # Pseudo-Code of `$apply()`                                                                                   // 15913
       * ```js                                                                                                         // 15914
           function $apply(expr) {                                                                                     // 15915
             try {                                                                                                     // 15916
               return $eval(expr);                                                                                     // 15917
             } catch (e) {                                                                                             // 15918
               $exceptionHandler(e);                                                                                   // 15919
             } finally {                                                                                               // 15920
               $root.$digest();                                                                                        // 15921
             }                                                                                                         // 15922
           }                                                                                                           // 15923
       * ```                                                                                                           // 15924
       *                                                                                                               // 15925
       *                                                                                                               // 15926
       * Scope's `$apply()` method transitions through the following stages:                                           // 15927
       *                                                                                                               // 15928
       * 1. The {@link guide/expression expression} is executed using the                                              // 15929
       *    {@link ng.$rootScope.Scope#$eval $eval()} method.                                                          // 15930
       * 2. Any exceptions from the execution of the expression are forwarded to the                                   // 15931
       *    {@link ng.$exceptionHandler $exceptionHandler} service.                                                    // 15932
       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the                     // 15933
       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.                    // 15934
       *                                                                                                               // 15935
       *                                                                                                               // 15936
       * @param {(string|function())=} exp An angular expression to be executed.                                       // 15937
       *                                                                                                               // 15938
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 15939
       *    - `function(scope)`: execute the function with current `scope` parameter.                                  // 15940
       *                                                                                                               // 15941
       * @returns {*} The result of evaluating the expression.                                                         // 15942
       */                                                                                                              // 15943
      $apply: function(expr) {                                                                                         // 15944
        try {                                                                                                          // 15945
          beginPhase('$apply');                                                                                        // 15946
          return this.$eval(expr);                                                                                     // 15947
        } catch (e) {                                                                                                  // 15948
          $exceptionHandler(e);                                                                                        // 15949
        } finally {                                                                                                    // 15950
          clearPhase();                                                                                                // 15951
          try {                                                                                                        // 15952
            $rootScope.$digest();                                                                                      // 15953
          } catch (e) {                                                                                                // 15954
            $exceptionHandler(e);                                                                                      // 15955
            throw e;                                                                                                   // 15956
          }                                                                                                            // 15957
        }                                                                                                              // 15958
      },                                                                                                               // 15959
                                                                                                                       // 15960
      /**                                                                                                              // 15961
       * @ngdoc method                                                                                                 // 15962
       * @name $rootScope.Scope#$applyAsync                                                                            // 15963
       * @kind function                                                                                                // 15964
       *                                                                                                               // 15965
       * @description                                                                                                  // 15966
       * Schedule the invocation of $apply to occur at a later time. The actual time difference                        // 15967
       * varies across browsers, but is typically around ~10 milliseconds.                                             // 15968
       *                                                                                                               // 15969
       * This can be used to queue up multiple expressions which need to be evaluated in the same                      // 15970
       * digest.                                                                                                       // 15971
       *                                                                                                               // 15972
       * @param {(string|function())=} exp An angular expression to be executed.                                       // 15973
       *                                                                                                               // 15974
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 15975
       *    - `function(scope)`: execute the function with current `scope` parameter.                                  // 15976
       */                                                                                                              // 15977
      $applyAsync: function(expr) {                                                                                    // 15978
        var scope = this;                                                                                              // 15979
        expr && applyAsyncQueue.push($applyAsyncExpression);                                                           // 15980
        scheduleApplyAsync();                                                                                          // 15981
                                                                                                                       // 15982
        function $applyAsyncExpression() {                                                                             // 15983
          scope.$eval(expr);                                                                                           // 15984
        }                                                                                                              // 15985
      },                                                                                                               // 15986
                                                                                                                       // 15987
      /**                                                                                                              // 15988
       * @ngdoc method                                                                                                 // 15989
       * @name $rootScope.Scope#$on                                                                                    // 15990
       * @kind function                                                                                                // 15991
       *                                                                                                               // 15992
       * @description                                                                                                  // 15993
       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for                            // 15994
       * discussion of event life cycle.                                                                               // 15995
       *                                                                                                               // 15996
       * The event listener function format is: `function(event, args...)`. The `event` object                         // 15997
       * passed into the listener has the following attributes:                                                        // 15998
       *                                                                                                               // 15999
       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or                                 // 16000
       *     `$broadcast`-ed.                                                                                          // 16001
       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the                      // 16002
       *     event propagates through the scope hierarchy, this property is set to null.                               // 16003
       *   - `name` - `{string}`: name of the event.                                                                   // 16004
       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel                         // 16005
       *     further event propagation (available only for events that were `$emit`-ed).                               // 16006
       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag                    // 16007
       *     to true.                                                                                                  // 16008
       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.                                    // 16009
       *                                                                                                               // 16010
       * @param {string} name Event name to listen on.                                                                 // 16011
       * @param {function(event, ...args)} listener Function to call when the event is emitted.                        // 16012
       * @returns {function()} Returns a deregistration function for this listener.                                    // 16013
       */                                                                                                              // 16014
      $on: function(name, listener) {                                                                                  // 16015
        var namedListeners = this.$$listeners[name];                                                                   // 16016
        if (!namedListeners) {                                                                                         // 16017
          this.$$listeners[name] = namedListeners = [];                                                                // 16018
        }                                                                                                              // 16019
        namedListeners.push(listener);                                                                                 // 16020
                                                                                                                       // 16021
        var current = this;                                                                                            // 16022
        do {                                                                                                           // 16023
          if (!current.$$listenerCount[name]) {                                                                        // 16024
            current.$$listenerCount[name] = 0;                                                                         // 16025
          }                                                                                                            // 16026
          current.$$listenerCount[name]++;                                                                             // 16027
        } while ((current = current.$parent));                                                                         // 16028
                                                                                                                       // 16029
        var self = this;                                                                                               // 16030
        return function() {                                                                                            // 16031
          var indexOfListener = namedListeners.indexOf(listener);                                                      // 16032
          if (indexOfListener !== -1) {                                                                                // 16033
            namedListeners[indexOfListener] = null;                                                                    // 16034
            decrementListenerCount(self, 1, name);                                                                     // 16035
          }                                                                                                            // 16036
        };                                                                                                             // 16037
      },                                                                                                               // 16038
                                                                                                                       // 16039
                                                                                                                       // 16040
      /**                                                                                                              // 16041
       * @ngdoc method                                                                                                 // 16042
       * @name $rootScope.Scope#$emit                                                                                  // 16043
       * @kind function                                                                                                // 16044
       *                                                                                                               // 16045
       * @description                                                                                                  // 16046
       * Dispatches an event `name` upwards through the scope hierarchy notifying the                                  // 16047
       * registered {@link ng.$rootScope.Scope#$on} listeners.                                                         // 16048
       *                                                                                                               // 16049
       * The event life cycle starts at the scope on which `$emit` was called. All                                     // 16050
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get                        // 16051
       * notified. Afterwards, the event traverses upwards toward the root scope and calls all                         // 16052
       * registered listeners along the way. The event will stop propagating if one of the listeners                   // 16053
       * cancels it.                                                                                                   // 16054
       *                                                                                                               // 16055
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed                       // 16056
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.                                              // 16057
       *                                                                                                               // 16058
       * @param {string} name Event name to emit.                                                                      // 16059
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.              // 16060
       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).                                          // 16061
       */                                                                                                              // 16062
      $emit: function(name, args) {                                                                                    // 16063
        var empty = [],                                                                                                // 16064
            namedListeners,                                                                                            // 16065
            scope = this,                                                                                              // 16066
            stopPropagation = false,                                                                                   // 16067
            event = {                                                                                                  // 16068
              name: name,                                                                                              // 16069
              targetScope: scope,                                                                                      // 16070
              stopPropagation: function() {stopPropagation = true;},                                                   // 16071
              preventDefault: function() {                                                                             // 16072
                event.defaultPrevented = true;                                                                         // 16073
              },                                                                                                       // 16074
              defaultPrevented: false                                                                                  // 16075
            },                                                                                                         // 16076
            listenerArgs = concat([event], arguments, 1),                                                              // 16077
            i, length;                                                                                                 // 16078
                                                                                                                       // 16079
        do {                                                                                                           // 16080
          namedListeners = scope.$$listeners[name] || empty;                                                           // 16081
          event.currentScope = scope;                                                                                  // 16082
          for (i = 0, length = namedListeners.length; i < length; i++) {                                               // 16083
                                                                                                                       // 16084
            // if listeners were deregistered, defragment the array                                                    // 16085
            if (!namedListeners[i]) {                                                                                  // 16086
              namedListeners.splice(i, 1);                                                                             // 16087
              i--;                                                                                                     // 16088
              length--;                                                                                                // 16089
              continue;                                                                                                // 16090
            }                                                                                                          // 16091
            try {                                                                                                      // 16092
              //allow all listeners attached to the current scope to run                                               // 16093
              namedListeners[i].apply(null, listenerArgs);                                                             // 16094
            } catch (e) {                                                                                              // 16095
              $exceptionHandler(e);                                                                                    // 16096
            }                                                                                                          // 16097
          }                                                                                                            // 16098
          //if any listener on the current scope stops propagation, prevent bubbling                                   // 16099
          if (stopPropagation) {                                                                                       // 16100
            event.currentScope = null;                                                                                 // 16101
            return event;                                                                                              // 16102
          }                                                                                                            // 16103
          //traverse upwards                                                                                           // 16104
          scope = scope.$parent;                                                                                       // 16105
        } while (scope);                                                                                               // 16106
                                                                                                                       // 16107
        event.currentScope = null;                                                                                     // 16108
                                                                                                                       // 16109
        return event;                                                                                                  // 16110
      },                                                                                                               // 16111
                                                                                                                       // 16112
                                                                                                                       // 16113
      /**                                                                                                              // 16114
       * @ngdoc method                                                                                                 // 16115
       * @name $rootScope.Scope#$broadcast                                                                             // 16116
       * @kind function                                                                                                // 16117
       *                                                                                                               // 16118
       * @description                                                                                                  // 16119
       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the                   // 16120
       * registered {@link ng.$rootScope.Scope#$on} listeners.                                                         // 16121
       *                                                                                                               // 16122
       * The event life cycle starts at the scope on which `$broadcast` was called. All                                // 16123
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get                        // 16124
       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current                   // 16125
       * scope and calls all registered listeners along the way. The event cannot be canceled.                         // 16126
       *                                                                                                               // 16127
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed                       // 16128
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.                                              // 16129
       *                                                                                                               // 16130
       * @param {string} name Event name to broadcast.                                                                 // 16131
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.              // 16132
       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}                                            // 16133
       */                                                                                                              // 16134
      $broadcast: function(name, args) {                                                                               // 16135
        var target = this,                                                                                             // 16136
            current = target,                                                                                          // 16137
            next = target,                                                                                             // 16138
            event = {                                                                                                  // 16139
              name: name,                                                                                              // 16140
              targetScope: target,                                                                                     // 16141
              preventDefault: function() {                                                                             // 16142
                event.defaultPrevented = true;                                                                         // 16143
              },                                                                                                       // 16144
              defaultPrevented: false                                                                                  // 16145
            };                                                                                                         // 16146
                                                                                                                       // 16147
        if (!target.$$listenerCount[name]) return event;                                                               // 16148
                                                                                                                       // 16149
        var listenerArgs = concat([event], arguments, 1),                                                              // 16150
            listeners, i, length;                                                                                      // 16151
                                                                                                                       // 16152
        //down while you can, then up and next sibling or up and next sibling until back at root                       // 16153
        while ((current = next)) {                                                                                     // 16154
          event.currentScope = current;                                                                                // 16155
          listeners = current.$$listeners[name] || [];                                                                 // 16156
          for (i = 0, length = listeners.length; i < length; i++) {                                                    // 16157
            // if listeners were deregistered, defragment the array                                                    // 16158
            if (!listeners[i]) {                                                                                       // 16159
              listeners.splice(i, 1);                                                                                  // 16160
              i--;                                                                                                     // 16161
              length--;                                                                                                // 16162
              continue;                                                                                                // 16163
            }                                                                                                          // 16164
                                                                                                                       // 16165
            try {                                                                                                      // 16166
              listeners[i].apply(null, listenerArgs);                                                                  // 16167
            } catch (e) {                                                                                              // 16168
              $exceptionHandler(e);                                                                                    // 16169
            }                                                                                                          // 16170
          }                                                                                                            // 16171
                                                                                                                       // 16172
          // Insanity Warning: scope depth-first traversal                                                             // 16173
          // yes, this code is a bit crazy, but it works and we have tests to prove it!                                // 16174
          // this piece should be kept in sync with the traversal in $digest                                           // 16175
          // (though it differs due to having the extra check for $$listenerCount)                                     // 16176
          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||                                      // 16177
              (current !== target && current.$$nextSibling)))) {                                                       // 16178
            while (current !== target && !(next = current.$$nextSibling)) {                                            // 16179
              current = current.$parent;                                                                               // 16180
            }                                                                                                          // 16181
          }                                                                                                            // 16182
        }                                                                                                              // 16183
                                                                                                                       // 16184
        event.currentScope = null;                                                                                     // 16185
        return event;                                                                                                  // 16186
      }                                                                                                                // 16187
    };                                                                                                                 // 16188
                                                                                                                       // 16189
    var $rootScope = new Scope();                                                                                      // 16190
                                                                                                                       // 16191
    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.                               // 16192
    var asyncQueue = $rootScope.$$asyncQueue = [];                                                                     // 16193
    var postDigestQueue = $rootScope.$$postDigestQueue = [];                                                           // 16194
    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];                                                           // 16195
                                                                                                                       // 16196
    return $rootScope;                                                                                                 // 16197
                                                                                                                       // 16198
                                                                                                                       // 16199
    function beginPhase(phase) {                                                                                       // 16200
      if ($rootScope.$$phase) {                                                                                        // 16201
        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);                               // 16202
      }                                                                                                                // 16203
                                                                                                                       // 16204
      $rootScope.$$phase = phase;                                                                                      // 16205
    }                                                                                                                  // 16206
                                                                                                                       // 16207
    function clearPhase() {                                                                                            // 16208
      $rootScope.$$phase = null;                                                                                       // 16209
    }                                                                                                                  // 16210
                                                                                                                       // 16211
    function incrementWatchersCount(current, count) {                                                                  // 16212
      do {                                                                                                             // 16213
        current.$$watchersCount += count;                                                                              // 16214
      } while ((current = current.$parent));                                                                           // 16215
    }                                                                                                                  // 16216
                                                                                                                       // 16217
    function decrementListenerCount(current, count, name) {                                                            // 16218
      do {                                                                                                             // 16219
        current.$$listenerCount[name] -= count;                                                                        // 16220
                                                                                                                       // 16221
        if (current.$$listenerCount[name] === 0) {                                                                     // 16222
          delete current.$$listenerCount[name];                                                                        // 16223
        }                                                                                                              // 16224
      } while ((current = current.$parent));                                                                           // 16225
    }                                                                                                                  // 16226
                                                                                                                       // 16227
    /**                                                                                                                // 16228
     * function used as an initial value for watchers.                                                                 // 16229
     * because it's unique we can easily tell it apart from other values                                               // 16230
     */                                                                                                                // 16231
    function initWatchVal() {}                                                                                         // 16232
                                                                                                                       // 16233
    function flushApplyAsync() {                                                                                       // 16234
      while (applyAsyncQueue.length) {                                                                                 // 16235
        try {                                                                                                          // 16236
          applyAsyncQueue.shift()();                                                                                   // 16237
        } catch (e) {                                                                                                  // 16238
          $exceptionHandler(e);                                                                                        // 16239
        }                                                                                                              // 16240
      }                                                                                                                // 16241
      applyAsyncId = null;                                                                                             // 16242
    }                                                                                                                  // 16243
                                                                                                                       // 16244
    function scheduleApplyAsync() {                                                                                    // 16245
      if (applyAsyncId === null) {                                                                                     // 16246
        applyAsyncId = $browser.defer(function() {                                                                     // 16247
          $rootScope.$apply(flushApplyAsync);                                                                          // 16248
        });                                                                                                            // 16249
      }                                                                                                                // 16250
    }                                                                                                                  // 16251
  }];                                                                                                                  // 16252
}                                                                                                                      // 16253
                                                                                                                       // 16254
/**                                                                                                                    // 16255
 * @description                                                                                                        // 16256
 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.                              // 16257
 */                                                                                                                    // 16258
function $$SanitizeUriProvider() {                                                                                     // 16259
  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,                                                // 16260
    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;                                        // 16261
                                                                                                                       // 16262
  /**                                                                                                                  // 16263
   * @description                                                                                                      // 16264
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 16265
   * urls during a[href] sanitization.                                                                                 // 16266
   *                                                                                                                   // 16267
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 16268
   *                                                                                                                   // 16269
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into                      // 16270
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`                          // 16271
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 16272
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 16273
   *                                                                                                                   // 16274
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 16275
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 16276
   *    chaining otherwise.                                                                                            // 16277
   */                                                                                                                  // 16278
  this.aHrefSanitizationWhitelist = function(regexp) {                                                                 // 16279
    if (isDefined(regexp)) {                                                                                           // 16280
      aHrefSanitizationWhitelist = regexp;                                                                             // 16281
      return this;                                                                                                     // 16282
    }                                                                                                                  // 16283
    return aHrefSanitizationWhitelist;                                                                                 // 16284
  };                                                                                                                   // 16285
                                                                                                                       // 16286
                                                                                                                       // 16287
  /**                                                                                                                  // 16288
   * @description                                                                                                      // 16289
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 16290
   * urls during img[src] sanitization.                                                                                // 16291
   *                                                                                                                   // 16292
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 16293
   *                                                                                                                   // 16294
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into                     // 16295
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`                         // 16296
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 16297
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 16298
   *                                                                                                                   // 16299
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 16300
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 16301
   *    chaining otherwise.                                                                                            // 16302
   */                                                                                                                  // 16303
  this.imgSrcSanitizationWhitelist = function(regexp) {                                                                // 16304
    if (isDefined(regexp)) {                                                                                           // 16305
      imgSrcSanitizationWhitelist = regexp;                                                                            // 16306
      return this;                                                                                                     // 16307
    }                                                                                                                  // 16308
    return imgSrcSanitizationWhitelist;                                                                                // 16309
  };                                                                                                                   // 16310
                                                                                                                       // 16311
  this.$get = function() {                                                                                             // 16312
    return function sanitizeUri(uri, isImage) {                                                                        // 16313
      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;                                  // 16314
      var normalizedVal;                                                                                               // 16315
      normalizedVal = urlResolve(uri).href;                                                                            // 16316
      if (normalizedVal !== '' && !normalizedVal.match(regex)) {                                                       // 16317
        return 'unsafe:' + normalizedVal;                                                                              // 16318
      }                                                                                                                // 16319
      return uri;                                                                                                      // 16320
    };                                                                                                                 // 16321
  };                                                                                                                   // 16322
}                                                                                                                      // 16323
                                                                                                                       // 16324
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 16325
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 16326
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 16327
 *          An approval from 2 Core members with history of modifying      *                                           // 16328
 *                         this file is required.                          *                                           // 16329
 *                                                                         *                                           // 16330
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 16331
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 16332
 *     Or gives undesired access to variables likes document or window?    *                                           // 16333
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 16334
                                                                                                                       // 16335
var $sceMinErr = minErr('$sce');                                                                                       // 16336
                                                                                                                       // 16337
var SCE_CONTEXTS = {                                                                                                   // 16338
  HTML: 'html',                                                                                                        // 16339
  CSS: 'css',                                                                                                          // 16340
  URL: 'url',                                                                                                          // 16341
  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a                   // 16342
  // url.  (e.g. ng-include, script src, templateUrl)                                                                  // 16343
  RESOURCE_URL: 'resourceUrl',                                                                                         // 16344
  JS: 'js'                                                                                                             // 16345
};                                                                                                                     // 16346
                                                                                                                       // 16347
// Helper functions follow.                                                                                            // 16348
                                                                                                                       // 16349
function adjustMatcher(matcher) {                                                                                      // 16350
  if (matcher === 'self') {                                                                                            // 16351
    return matcher;                                                                                                    // 16352
  } else if (isString(matcher)) {                                                                                      // 16353
    // Strings match exactly except for 2 wildcards - '*' and '**'.                                                    // 16354
    // '*' matches any character except those from the set ':/.?&'.                                                    // 16355
    // '**' matches any character (like .* in a RegExp).                                                               // 16356
    // More than 2 *'s raises an error as it's ill defined.                                                            // 16357
    if (matcher.indexOf('***') > -1) {                                                                                 // 16358
      throw $sceMinErr('iwcard',                                                                                       // 16359
          'Illegal sequence *** in string matcher.  String: {0}', matcher);                                            // 16360
    }                                                                                                                  // 16361
    matcher = escapeForRegexp(matcher).                                                                                // 16362
                  replace('\\*\\*', '.*').                                                                             // 16363
                  replace('\\*', '[^:/.?&;]*');                                                                        // 16364
    return new RegExp('^' + matcher + '$');                                                                            // 16365
  } else if (isRegExp(matcher)) {                                                                                      // 16366
    // The only other type of matcher allowed is a Regexp.                                                             // 16367
    // Match entire URL / disallow partial matches.                                                                    // 16368
    // Flags are reset (i.e. no global, ignoreCase or multiline)                                                       // 16369
    return new RegExp('^' + matcher.source + '$');                                                                     // 16370
  } else {                                                                                                             // 16371
    throw $sceMinErr('imatcher',                                                                                       // 16372
        'Matchers may only be "self", string patterns or RegExp objects');                                             // 16373
  }                                                                                                                    // 16374
}                                                                                                                      // 16375
                                                                                                                       // 16376
                                                                                                                       // 16377
function adjustMatchers(matchers) {                                                                                    // 16378
  var adjustedMatchers = [];                                                                                           // 16379
  if (isDefined(matchers)) {                                                                                           // 16380
    forEach(matchers, function(matcher) {                                                                              // 16381
      adjustedMatchers.push(adjustMatcher(matcher));                                                                   // 16382
    });                                                                                                                // 16383
  }                                                                                                                    // 16384
  return adjustedMatchers;                                                                                             // 16385
}                                                                                                                      // 16386
                                                                                                                       // 16387
                                                                                                                       // 16388
/**                                                                                                                    // 16389
 * @ngdoc service                                                                                                      // 16390
 * @name $sceDelegate                                                                                                  // 16391
 * @kind function                                                                                                      // 16392
 *                                                                                                                     // 16393
 * @description                                                                                                        // 16394
 *                                                                                                                     // 16395
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict                     // 16396
 * Contextual Escaping (SCE)} services to AngularJS.                                                                   // 16397
 *                                                                                                                     // 16398
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of                      // 16399
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is                     // 16400
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to                        // 16401
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things                         // 16402
 * work because `$sce` delegates to `$sceDelegate` for these operations.                                               // 16403
 *                                                                                                                     // 16404
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.                               // 16405
 *                                                                                                                     // 16406
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you                      // 16407
 * can override it completely to change the behavior of `$sce`, the common case would                                  // 16408
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting                     // 16409
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as                   // 16410
 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist                                               // 16411
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link                                                               // 16412
 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}                             // 16413
 */                                                                                                                    // 16414
                                                                                                                       // 16415
/**                                                                                                                    // 16416
 * @ngdoc provider                                                                                                     // 16417
 * @name $sceDelegateProvider                                                                                          // 16418
 * @description                                                                                                        // 16419
 *                                                                                                                     // 16420
 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate                       // 16421
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure                     // 16422
 * that the URLs used for sourcing Angular templates are safe.  Refer {@link                                           // 16423
 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and                         // 16424
 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}                      // 16425
 *                                                                                                                     // 16426
 * For the general details about this service in Angular, read the main page for {@link ng.$sce                        // 16427
 * Strict Contextual Escaping (SCE)}.                                                                                  // 16428
 *                                                                                                                     // 16429
 * **Example**:  Consider the following case. <a name="example"></a>                                                   // 16430
 *                                                                                                                     // 16431
 * - your app is hosted at url `http://myapp.example.com/`                                                             // 16432
 * - but some of your templates are hosted on other domains you control such as                                        // 16433
 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.                                     // 16434
 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.                                        // 16435
 *                                                                                                                     // 16436
 * Here is what a secure configuration for this scenario might look like:                                              // 16437
 *                                                                                                                     // 16438
 * ```                                                                                                                 // 16439
 *  angular.module('myApp', []).config(function($sceDelegateProvider) {                                                // 16440
 *    $sceDelegateProvider.resourceUrlWhitelist([                                                                      // 16441
 *      // Allow same origin resource loads.                                                                           // 16442
 *      'self',                                                                                                        // 16443
 *      // Allow loading from our assets domain.  Notice the difference between * and **.                              // 16444
 *      'http://srv*.assets.example.com/**'                                                                            // 16445
 *    ]);                                                                                                              // 16446
 *                                                                                                                     // 16447
 *    // The blacklist overrides the whitelist so the open redirect here is blocked.                                   // 16448
 *    $sceDelegateProvider.resourceUrlBlacklist([                                                                      // 16449
 *      'http://myapp.example.com/clickThru**'                                                                         // 16450
 *    ]);                                                                                                              // 16451
 *  });                                                                                                                // 16452
 * ```                                                                                                                 // 16453
 */                                                                                                                    // 16454
                                                                                                                       // 16455
function $SceDelegateProvider() {                                                                                      // 16456
  this.SCE_CONTEXTS = SCE_CONTEXTS;                                                                                    // 16457
                                                                                                                       // 16458
  // Resource URLs can also be trusted by policy.                                                                      // 16459
  var resourceUrlWhitelist = ['self'],                                                                                 // 16460
      resourceUrlBlacklist = [];                                                                                       // 16461
                                                                                                                       // 16462
  /**                                                                                                                  // 16463
   * @ngdoc method                                                                                                     // 16464
   * @name $sceDelegateProvider#resourceUrlWhitelist                                                                   // 16465
   * @kind function                                                                                                    // 16466
   *                                                                                                                   // 16467
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value                         // 16468
   *     provided.  This must be an array or null.  A snapshot of this array is used so further                        // 16469
   *     changes to the array are ignored.                                                                             // 16470
   *                                                                                                                   // 16471
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items                        // 16472
   *     allowed in this array.                                                                                        // 16473
   *                                                                                                                   // 16474
   *     Note: **an empty whitelist array will block all URLs**!                                                       // 16475
   *                                                                                                                   // 16476
   * @return {Array} the currently set whitelist array.                                                                // 16477
   *                                                                                                                   // 16478
   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only                       // 16479
   * same origin resource requests.                                                                                    // 16480
   *                                                                                                                   // 16481
   * @description                                                                                                      // 16482
   * Sets/Gets the whitelist of trusted resource URLs.                                                                 // 16483
   */                                                                                                                  // 16484
  this.resourceUrlWhitelist = function(value) {                                                                        // 16485
    if (arguments.length) {                                                                                            // 16486
      resourceUrlWhitelist = adjustMatchers(value);                                                                    // 16487
    }                                                                                                                  // 16488
    return resourceUrlWhitelist;                                                                                       // 16489
  };                                                                                                                   // 16490
                                                                                                                       // 16491
  /**                                                                                                                  // 16492
   * @ngdoc method                                                                                                     // 16493
   * @name $sceDelegateProvider#resourceUrlBlacklist                                                                   // 16494
   * @kind function                                                                                                    // 16495
   *                                                                                                                   // 16496
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value                         // 16497
   *     provided.  This must be an array or null.  A snapshot of this array is used so further                        // 16498
   *     changes to the array are ignored.                                                                             // 16499
   *                                                                                                                   // 16500
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items                        // 16501
   *     allowed in this array.                                                                                        // 16502
   *                                                                                                                   // 16503
   *     The typical usage for the blacklist is to **block                                                             // 16504
   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as                   // 16505
   *     these would otherwise be trusted but actually return content from the redirected domain.                      // 16506
   *                                                                                                                   // 16507
   *     Finally, **the blacklist overrides the whitelist** and has the final say.                                     // 16508
   *                                                                                                                   // 16509
   * @return {Array} the currently set blacklist array.                                                                // 16510
   *                                                                                                                   // 16511
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there                    // 16512
   * is no blacklist.)                                                                                                 // 16513
   *                                                                                                                   // 16514
   * @description                                                                                                      // 16515
   * Sets/Gets the blacklist of trusted resource URLs.                                                                 // 16516
   */                                                                                                                  // 16517
                                                                                                                       // 16518
  this.resourceUrlBlacklist = function(value) {                                                                        // 16519
    if (arguments.length) {                                                                                            // 16520
      resourceUrlBlacklist = adjustMatchers(value);                                                                    // 16521
    }                                                                                                                  // 16522
    return resourceUrlBlacklist;                                                                                       // 16523
  };                                                                                                                   // 16524
                                                                                                                       // 16525
  this.$get = ['$injector', function($injector) {                                                                      // 16526
                                                                                                                       // 16527
    var htmlSanitizer = function htmlSanitizer(html) {                                                                 // 16528
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');                              // 16529
    };                                                                                                                 // 16530
                                                                                                                       // 16531
    if ($injector.has('$sanitize')) {                                                                                  // 16532
      htmlSanitizer = $injector.get('$sanitize');                                                                      // 16533
    }                                                                                                                  // 16534
                                                                                                                       // 16535
                                                                                                                       // 16536
    function matchUrl(matcher, parsedUrl) {                                                                            // 16537
      if (matcher === 'self') {                                                                                        // 16538
        return urlIsSameOrigin(parsedUrl);                                                                             // 16539
      } else {                                                                                                         // 16540
        // definitely a regex.  See adjustMatchers()                                                                   // 16541
        return !!matcher.exec(parsedUrl.href);                                                                         // 16542
      }                                                                                                                // 16543
    }                                                                                                                  // 16544
                                                                                                                       // 16545
    function isResourceUrlAllowedByPolicy(url) {                                                                       // 16546
      var parsedUrl = urlResolve(url.toString());                                                                      // 16547
      var i, n, allowed = false;                                                                                       // 16548
      // Ensure that at least one item from the whitelist allows this url.                                             // 16549
      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {                                                       // 16550
        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {                                                            // 16551
          allowed = true;                                                                                              // 16552
          break;                                                                                                       // 16553
        }                                                                                                              // 16554
      }                                                                                                                // 16555
      if (allowed) {                                                                                                   // 16556
        // Ensure that no item from the blacklist blocked this url.                                                    // 16557
        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {                                                     // 16558
          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {                                                          // 16559
            allowed = false;                                                                                           // 16560
            break;                                                                                                     // 16561
          }                                                                                                            // 16562
        }                                                                                                              // 16563
      }                                                                                                                // 16564
      return allowed;                                                                                                  // 16565
    }                                                                                                                  // 16566
                                                                                                                       // 16567
    function generateHolderType(Base) {                                                                                // 16568
      var holderType = function TrustedValueHolderType(trustedValue) {                                                 // 16569
        this.$$unwrapTrustedValue = function() {                                                                       // 16570
          return trustedValue;                                                                                         // 16571
        };                                                                                                             // 16572
      };                                                                                                               // 16573
      if (Base) {                                                                                                      // 16574
        holderType.prototype = new Base();                                                                             // 16575
      }                                                                                                                // 16576
      holderType.prototype.valueOf = function sceValueOf() {                                                           // 16577
        return this.$$unwrapTrustedValue();                                                                            // 16578
      };                                                                                                               // 16579
      holderType.prototype.toString = function sceToString() {                                                         // 16580
        return this.$$unwrapTrustedValue().toString();                                                                 // 16581
      };                                                                                                               // 16582
      return holderType;                                                                                               // 16583
    }                                                                                                                  // 16584
                                                                                                                       // 16585
    var trustedValueHolderBase = generateHolderType(),                                                                 // 16586
        byType = {};                                                                                                   // 16587
                                                                                                                       // 16588
    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);                                            // 16589
    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);                                             // 16590
    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);                                             // 16591
    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);                                              // 16592
    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);                                  // 16593
                                                                                                                       // 16594
    /**                                                                                                                // 16595
     * @ngdoc method                                                                                                   // 16596
     * @name $sceDelegate#trustAs                                                                                      // 16597
     *                                                                                                                 // 16598
     * @description                                                                                                    // 16599
     * Returns an object that is trusted by angular for use in specified strict                                        // 16600
     * contextual escaping contexts (such as ng-bind-html, ng-include, any src                                         // 16601
     * attribute interpolation, any dom event binding attribute interpolation                                          // 16602
     * such as for onclick,  etc.) that uses the provided value.                                                       // 16603
     * See {@link ng.$sce $sce} for enabling strict contextual escaping.                                               // 16604
     *                                                                                                                 // 16605
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,                        // 16606
     *   resourceUrl, html, js and css.                                                                                // 16607
     * @param {*} value The value that that should be considered trusted/safe.                                         // 16608
     * @returns {*} A value that can be used to stand in for the provided `value` in places                            // 16609
     * where Angular expects a $sce.trustAs() return value.                                                            // 16610
     */                                                                                                                // 16611
    function trustAs(type, trustedValue) {                                                                             // 16612
      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);                                           // 16613
      if (!Constructor) {                                                                                              // 16614
        throw $sceMinErr('icontext',                                                                                   // 16615
            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',                                 // 16616
            type, trustedValue);                                                                                       // 16617
      }                                                                                                                // 16618
      if (trustedValue === null || trustedValue === undefined || trustedValue === '') {                                // 16619
        return trustedValue;                                                                                           // 16620
      }                                                                                                                // 16621
      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting                    // 16622
      // mutable objects, we ensure here that the value passed in is actually a string.                                // 16623
      if (typeof trustedValue !== 'string') {                                                                          // 16624
        throw $sceMinErr('itype',                                                                                      // 16625
            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',                     // 16626
            type);                                                                                                     // 16627
      }                                                                                                                // 16628
      return new Constructor(trustedValue);                                                                            // 16629
    }                                                                                                                  // 16630
                                                                                                                       // 16631
    /**                                                                                                                // 16632
     * @ngdoc method                                                                                                   // 16633
     * @name $sceDelegate#valueOf                                                                                      // 16634
     *                                                                                                                 // 16635
     * @description                                                                                                    // 16636
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs                     // 16637
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link                                       // 16638
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.                                                                // 16639
     *                                                                                                                 // 16640
     * If the passed parameter is not a value that had been returned by {@link                                         // 16641
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.                                              // 16642
     *                                                                                                                 // 16643
     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}                   // 16644
     *      call or anything else.                                                                                     // 16645
     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs                         // 16646
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns                        // 16647
     *     `value` unchanged.                                                                                          // 16648
     */                                                                                                                // 16649
    function valueOf(maybeTrusted) {                                                                                   // 16650
      if (maybeTrusted instanceof trustedValueHolderBase) {                                                            // 16651
        return maybeTrusted.$$unwrapTrustedValue();                                                                    // 16652
      } else {                                                                                                         // 16653
        return maybeTrusted;                                                                                           // 16654
      }                                                                                                                // 16655
    }                                                                                                                  // 16656
                                                                                                                       // 16657
    /**                                                                                                                // 16658
     * @ngdoc method                                                                                                   // 16659
     * @name $sceDelegate#getTrusted                                                                                   // 16660
     *                                                                                                                 // 16661
     * @description                                                                                                    // 16662
     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and                           // 16663
     * returns the originally supplied value if the queried context type is a supertype of the                         // 16664
     * created type.  If this condition isn't satisfied, throws an exception.                                          // 16665
     *                                                                                                                 // 16666
     * @param {string} type The kind of context in which this value is to be used.                                     // 16667
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs                                    // 16668
     *     `$sceDelegate.trustAs`} call.                                                                               // 16669
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs                            // 16670
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.                          // 16671
     */                                                                                                                // 16672
    function getTrusted(type, maybeTrusted) {                                                                          // 16673
      if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {                                // 16674
        return maybeTrusted;                                                                                           // 16675
      }                                                                                                                // 16676
      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);                                           // 16677
      if (constructor && maybeTrusted instanceof constructor) {                                                        // 16678
        return maybeTrusted.$$unwrapTrustedValue();                                                                    // 16679
      }                                                                                                                // 16680
      // If we get here, then we may only take one of two actions.                                                     // 16681
      // 1. sanitize the value for the requested type, or                                                              // 16682
      // 2. throw an exception.                                                                                        // 16683
      if (type === SCE_CONTEXTS.RESOURCE_URL) {                                                                        // 16684
        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {                                                              // 16685
          return maybeTrusted;                                                                                         // 16686
        } else {                                                                                                       // 16687
          throw $sceMinErr('insecurl',                                                                                 // 16688
              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',                       // 16689
              maybeTrusted.toString());                                                                                // 16690
        }                                                                                                              // 16691
      } else if (type === SCE_CONTEXTS.HTML) {                                                                         // 16692
        return htmlSanitizer(maybeTrusted);                                                                            // 16693
      }                                                                                                                // 16694
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');                              // 16695
    }                                                                                                                  // 16696
                                                                                                                       // 16697
    return { trustAs: trustAs,                                                                                         // 16698
             getTrusted: getTrusted,                                                                                   // 16699
             valueOf: valueOf };                                                                                       // 16700
  }];                                                                                                                  // 16701
}                                                                                                                      // 16702
                                                                                                                       // 16703
                                                                                                                       // 16704
/**                                                                                                                    // 16705
 * @ngdoc provider                                                                                                     // 16706
 * @name $sceProvider                                                                                                  // 16707
 * @description                                                                                                        // 16708
 *                                                                                                                     // 16709
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.                          // 16710
 * -   enable/disable Strict Contextual Escaping (SCE) in a module                                                     // 16711
 * -   override the default implementation with a custom delegate                                                      // 16712
 *                                                                                                                     // 16713
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.                                                   // 16714
 */                                                                                                                    // 16715
                                                                                                                       // 16716
/* jshint maxlen: false*/                                                                                              // 16717
                                                                                                                       // 16718
/**                                                                                                                    // 16719
 * @ngdoc service                                                                                                      // 16720
 * @name $sce                                                                                                          // 16721
 * @kind function                                                                                                      // 16722
 *                                                                                                                     // 16723
 * @description                                                                                                        // 16724
 *                                                                                                                     // 16725
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.                                 // 16726
 *                                                                                                                     // 16727
 * # Strict Contextual Escaping                                                                                        // 16728
 *                                                                                                                     // 16729
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain                          // 16730
 * contexts to result in a value that is marked as safe to use for that context.  One example of                       // 16731
 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer                       // 16732
 * to these contexts as privileged or SCE contexts.                                                                    // 16733
 *                                                                                                                     // 16734
 * As of version 1.2, Angular ships with SCE enabled by default.                                                       // 16735
 *                                                                                                                     // 16736
 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow                // 16737
 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer                                   // 16738
 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.                   // 16739
 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`                   // 16740
 * to the top of your HTML document.                                                                                   // 16741
 *                                                                                                                     // 16742
 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for                         // 16743
 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.                                              // 16744
 *                                                                                                                     // 16745
 * Here's an example of a binding in a privileged context:                                                             // 16746
 *                                                                                                                     // 16747
 * ```                                                                                                                 // 16748
 * <input ng-model="userHtml" aria-label="User input">                                                                 // 16749
 * <div ng-bind-html="userHtml"></div>                                                                                 // 16750
 * ```                                                                                                                 // 16751
 *                                                                                                                     // 16752
 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE                                 // 16753
 * disabled, this application allows the user to render arbitrary HTML into the DIV.                                   // 16754
 * In a more realistic example, one may be rendering user comments, blog articles, etc. via                            // 16755
 * bindings.  (HTML is just one example of a context where rendering user controlled input creates                     // 16756
 * security vulnerabilities.)                                                                                          // 16757
 *                                                                                                                     // 16758
 * For the case of HTML, you might use a library, either on the client side, or on the server side,                    // 16759
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.                               // 16760
 *                                                                                                                     // 16761
 * How would you ensure that every place that used these types of bindings was bound to a value that                   // 16762
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you                      // 16763
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some                       // 16764
 * properties/fields and forgot to update the binding to the sanitized value?                                          // 16765
 *                                                                                                                     // 16766
 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can                    // 16767
 * determine that something explicitly says it's safe to use a value for binding in that                               // 16768
 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done                    // 16769
 * for those values that you can easily tell are safe - because they were received from your server,                   // 16770
 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps                         // 16771
 * allowing only the files in a specific directory to do this.  Ensuring that the internal API                         // 16772
 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.                   // 16773
 *                                                                                                                     // 16774
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}                                // 16775
 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to                               // 16776
 * obtain values that will be accepted by SCE / privileged contexts.                                                   // 16777
 *                                                                                                                     // 16778
 *                                                                                                                     // 16779
 * ## How does it work?                                                                                                // 16780
 *                                                                                                                     // 16781
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted                    // 16782
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link                          // 16783
 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the                  // 16784
 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.                              // 16785
 *                                                                                                                     // 16786
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link                                               // 16787
 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly                        // 16788
 * simplified):                                                                                                        // 16789
 *                                                                                                                     // 16790
 * ```                                                                                                                 // 16791
 * var ngBindHtmlDirective = ['$sce', function($sce) {                                                                 // 16792
 *   return function(scope, element, attr) {                                                                           // 16793
 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {                                               // 16794
 *       element.html(value || '');                                                                                    // 16795
 *     });                                                                                                             // 16796
 *   };                                                                                                                // 16797
 * }];                                                                                                                 // 16798
 * ```                                                                                                                 // 16799
 *                                                                                                                     // 16800
 * ## Impact on loading templates                                                                                      // 16801
 *                                                                                                                     // 16802
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as                           // 16803
 * `templateUrl`'s specified by {@link guide/directive directives}.                                                    // 16804
 *                                                                                                                     // 16805
 * By default, Angular only loads templates from the same domain and protocol as the application                       // 16806
 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl                                             // 16807
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or                       // 16808
 * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist                      // 16809
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.                                           // 16810
 *                                                                                                                     // 16811
 * *Please note*:                                                                                                      // 16812
 * The browser's                                                                                                       // 16813
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)         // 16814
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)                                              // 16815
 * policy apply in addition to this and may further restrict whether the template is successfully                      // 16816
 * loaded.  This means that without the right CORS policy, loading templates from a different domain                   // 16817
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some                       // 16818
 * browsers.                                                                                                           // 16819
 *                                                                                                                     // 16820
 * ## This feels like too much overhead                                                                                // 16821
 *                                                                                                                     // 16822
 * It's important to remember that SCE only applies to interpolation expressions.                                      // 16823
 *                                                                                                                     // 16824
 * If your expressions are constant literals, they're automatically trusted and you don't need to                      // 16825
 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.                                     // 16826
 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.                                               // 16827
 *                                                                                                                     // 16828
 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them                       // 16829
 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.                                  // 16830
 *                                                                                                                     // 16831
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load                     // 16832
 * templates in `ng-include` from your application's domain without having to even know about SCE.                     // 16833
 * It blocks loading templates from other domains or loading templates over http from an https                         // 16834
 * served document.  You can change these by setting your own custom {@link                                            // 16835
 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link                                                 // 16836
 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.                                    // 16837
 *                                                                                                                     // 16838
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an                    // 16839
 * application that's secure and can be audited to verify that with much more ease than bolting                        // 16840
 * security onto an application later.                                                                                 // 16841
 *                                                                                                                     // 16842
 * <a name="contexts"></a>                                                                                             // 16843
 * ## What trusted context types are supported?                                                                        // 16844
 *                                                                                                                     // 16845
 * | Context             | Notes          |                                                                            // 16846
 * |---------------------|----------------|                                                                            // 16847
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
 *                                                                                                                     // 16853
 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
 *                                                                                                                     // 16855
 *  Each element in these arrays must be one of the following:                                                         // 16856
 *                                                                                                                     // 16857
 *  - **'self'**                                                                                                       // 16858
 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same                          // 16859
 *      domain** as the application document using the **same protocol**.                                              // 16860
 *  - **String** (except the special value `'self'`)                                                                   // 16861
 *    - The string is matched against the full *normalized / absolute URL* of the resource                             // 16862
 *      being tested (substring matches are not good enough.)                                                          // 16863
 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters                             // 16864
 *      match themselves.                                                                                              // 16865
 *    - `*`: matches zero or more occurrences of any character other than one of the following 6                       // 16866
 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use                         // 16867
 *      in a whitelist.                                                                                                // 16868
 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not                                  // 16869
 *      not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.                        // 16870
 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might                        // 16871
 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.                             // 16872
 *      http://foo.example.com/templates/**).                                                                          // 16873
 *  - **RegExp** (*see caveat below*)                                                                                  // 16874
 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax                   // 16875
 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to                               // 16876
 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should                   // 16877
 *      have good test coverage.).  For instance, the use of `.` in the regex is correct only in a                     // 16878
 *      small number of cases.  A `.` character in the regex used when matching the scheme or a                        // 16879
 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It                     // 16880
 *      is highly recommended to use the string patterns and only fall back to regular expressions                     // 16881
 *      if they as a last resort.                                                                                      // 16882
 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is                               // 16883
 *      matched against the **entire** *normalized / absolute URL* of the resource being tested                        // 16884
 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags                             // 16885
 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.                                     // 16886
 *    - If you are generating your JavaScript from some other templating engine (not                                   // 16887
 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),                        // 16888
 *      remember to escape your regular expression (and be aware that you might need more than                         // 16889
 *      one level of escaping depending on your templating engine and the way you interpolated                         // 16890
 *      the value.)  Do make use of your platform's escaping mechanism as it might be good                             // 16891
 *      enough before coding your own.  e.g. Ruby has                                                                  // 16892
 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)                           // 16893
 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).                                  // 16894
 *      Javascript lacks a similar built in function for escaping.  Take a look at Google                              // 16895
 *      Closure library's [goog.string.regExpEscape(s)](                                                               // 16896
 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).             // 16897
 *                                                                                                                     // 16898
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.                                          // 16899
 *                                                                                                                     // 16900
 * ## Show me an example using SCE.                                                                                    // 16901
 *                                                                                                                     // 16902
 * <example module="mySceApp" deps="angular-sanitize.js">                                                              // 16903
 * <file name="index.html">                                                                                            // 16904
 *   <div ng-controller="AppController as myCtrl">                                                                     // 16905
 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>                          // 16906
 *     <b>User comments</b><br>                                                                                        // 16907
 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when                         // 16908
 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an                   // 16909
 *     exploit.                                                                                                        // 16910
 *     <div class="well">                                                                                              // 16911
 *       <div ng-repeat="userComment in myCtrl.userComments">                                                          // 16912
 *         <b>{{userComment.name}}</b>:                                                                                // 16913
 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>                                    // 16914
 *         <br>                                                                                                        // 16915
 *       </div>                                                                                                        // 16916
 *     </div>                                                                                                          // 16917
 *   </div>                                                                                                            // 16918
 * </file>                                                                                                             // 16919
 *                                                                                                                     // 16920
 * <file name="script.js">                                                                                             // 16921
 *   angular.module('mySceApp', ['ngSanitize'])                                                                        // 16922
 *     .controller('AppController', ['$http', '$templateCache', '$sce',                                                // 16923
 *       function($http, $templateCache, $sce) {                                                                       // 16924
 *         var self = this;                                                                                            // 16925
 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {                       // 16926
 *           self.userComments = userComments;                                                                         // 16927
 *         });                                                                                                         // 16928
 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(                                                              // 16929
 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +                         // 16930
 *             'sanitization.&quot;">Hover over this text.</span>');                                                   // 16931
 *       }]);                                                                                                          // 16932
 * </file>                                                                                                             // 16933
 *                                                                                                                     // 16934
 * <file name="test_data.json">                                                                                        // 16935
 * [                                                                                                                   // 16936
 *   { "name": "Alice",                                                                                                // 16937
 *     "htmlComment":                                                                                                  // 16938
 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"                     // 16939
 *   },                                                                                                                // 16940
 *   { "name": "Bob",                                                                                                  // 16941
 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"                                                          // 16942
 *   }                                                                                                                 // 16943
 * ]                                                                                                                   // 16944
 * </file>                                                                                                             // 16945
 *                                                                                                                     // 16946
 * <file name="protractor.js" type="protractor">                                                                       // 16947
 *   describe('SCE doc demo', function() {                                                                             // 16948
 *     it('should sanitize untrusted values', function() {                                                             // 16949
 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())                                            // 16950
 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');                                                     // 16951
 *     });                                                                                                             // 16952
 *                                                                                                                     // 16953
 *     it('should NOT sanitize explicitly trusted values', function() {                                                // 16954
 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(                                          // 16955
 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +                           // 16956
 *           'sanitization.&quot;">Hover over this text.</span>');                                                     // 16957
 *     });                                                                                                             // 16958
 *   });                                                                                                               // 16959
 * </file>                                                                                                             // 16960
 * </example>                                                                                                          // 16961
 *                                                                                                                     // 16962
 *                                                                                                                     // 16963
 *                                                                                                                     // 16964
 * ## Can I disable SCE completely?                                                                                    // 16965
 *                                                                                                                     // 16966
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits                     // 16967
 * for little coding overhead.  It will be much harder to take an SCE disabled application and                         // 16968
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE                    // 16969
 * for cases where you have a lot of existing code that was written before SCE was introduced and                      // 16970
 * you're migrating them a module at a time.                                                                           // 16971
 *                                                                                                                     // 16972
 * That said, here's how you can completely disable SCE:                                                               // 16973
 *                                                                                                                     // 16974
 * ```                                                                                                                 // 16975
 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {                                     // 16976
 *   // Completely disable SCE.  For demonstration purposes only!                                                      // 16977
 *   // Do not use in new projects.                                                                                    // 16978
 *   $sceProvider.enabled(false);                                                                                      // 16979
 * });                                                                                                                 // 16980
 * ```                                                                                                                 // 16981
 *                                                                                                                     // 16982
 */                                                                                                                    // 16983
/* jshint maxlen: 100 */                                                                                               // 16984
                                                                                                                       // 16985
function $SceProvider() {                                                                                              // 16986
  var enabled = true;                                                                                                  // 16987
                                                                                                                       // 16988
  /**                                                                                                                  // 16989
   * @ngdoc method                                                                                                     // 16990
   * @name $sceProvider#enabled                                                                                        // 16991
   * @kind function                                                                                                    // 16992
   *                                                                                                                   // 16993
   * @param {boolean=} value If provided, then enables/disables SCE.                                                   // 16994
   * @return {boolean} true if SCE is enabled, false otherwise.                                                        // 16995
   *                                                                                                                   // 16996
   * @description                                                                                                      // 16997
   * Enables/disables SCE and returns the current value.                                                               // 16998
   */                                                                                                                  // 16999
  this.enabled = function(value) {                                                                                     // 17000
    if (arguments.length) {                                                                                            // 17001
      enabled = !!value;                                                                                               // 17002
    }                                                                                                                  // 17003
    return enabled;                                                                                                    // 17004
  };                                                                                                                   // 17005
                                                                                                                       // 17006
                                                                                                                       // 17007
  /* Design notes on the default implementation for SCE.                                                               // 17008
   *                                                                                                                   // 17009
   * The API contract for the SCE delegate                                                                             // 17010
   * -------------------------------------                                                                             // 17011
   * The SCE delegate object must provide the following 3 methods:                                                     // 17012
   *                                                                                                                   // 17013
   * - trustAs(contextEnum, value)                                                                                     // 17014
   *     This method is used to tell the SCE service that the provided value is OK to use in the                       // 17015
   *     contexts specified by contextEnum.  It must return an object that will be accepted by                         // 17016
   *     getTrusted() for a compatible contextEnum and return this value.                                              // 17017
   *                                                                                                                   // 17018
   * - valueOf(value)                                                                                                  // 17019
   *     For values that were not produced by trustAs(), return them as is.  For values that were                      // 17020
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if                        // 17021
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given                     // 17022
   *     such a value.                                                                                                 // 17023
   *                                                                                                                   // 17024
   * - getTrusted(contextEnum, value)                                                                                  // 17025
   *     This function should return the a value that is safe to use in the context specified by                       // 17026
   *     contextEnum or throw and exception otherwise.                                                                 // 17027
   *                                                                                                                   // 17028
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be                         // 17029
   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For                       // 17030
   * instance, an implementation could maintain a registry of all trusted objects by context.  In                      // 17031
   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would                       // 17032
   * return the same object passed in if it was found in the registry under a compatible context or                    // 17033
   * throw an exception otherwise.  An implementation might only wrap values some of the time based                    // 17034
   * on some criteria.  getTrusted() might return a value and not throw an exception for special                       // 17035
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.                        // 17036
   *                                                                                                                   // 17037
   *                                                                                                                   // 17038
   * A note on the inheritance model for SCE contexts                                                                  // 17039
   * ------------------------------------------------                                                                  // 17040
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This                   // 17041
   * is purely an implementation details.                                                                              // 17042
   *                                                                                                                   // 17043
   * The contract is simply this:                                                                                      // 17044
   *                                                                                                                   // 17045
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)                      // 17046
   *     will also succeed.                                                                                            // 17047
   *                                                                                                                   // 17048
   * Inheritance happens to capture this in a natural way.  In some future, we                                         // 17049
   * may not use inheritance anymore.  That is OK because no code outside of                                           // 17050
   * sce.js and sceSpecs.js would need to be aware of this detail.                                                     // 17051
   */                                                                                                                  // 17052
                                                                                                                       // 17053
  this.$get = ['$parse', '$sceDelegate', function(                                                                     // 17054
                $parse,   $sceDelegate) {                                                                              // 17055
    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow                        // 17056
    // the "expression(javascript expression)" syntax which is insecure.                                               // 17057
    if (enabled && msie < 8) {                                                                                         // 17058
      throw $sceMinErr('iequirks',                                                                                     // 17059
        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +                      // 17060
        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +                        // 17061
        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');                                 // 17062
    }                                                                                                                  // 17063
                                                                                                                       // 17064
    var sce = shallowCopy(SCE_CONTEXTS);                                                                               // 17065
                                                                                                                       // 17066
    /**                                                                                                                // 17067
     * @ngdoc method                                                                                                   // 17068
     * @name $sce#isEnabled                                                                                            // 17069
     * @kind function                                                                                                  // 17070
     *                                                                                                                 // 17071
     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you                   // 17072
     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.                                    // 17073
     *                                                                                                                 // 17074
     * @description                                                                                                    // 17075
     * Returns a boolean indicating if SCE is enabled.                                                                 // 17076
     */                                                                                                                // 17077
    sce.isEnabled = function() {                                                                                       // 17078
      return enabled;                                                                                                  // 17079
    };                                                                                                                 // 17080
    sce.trustAs = $sceDelegate.trustAs;                                                                                // 17081
    sce.getTrusted = $sceDelegate.getTrusted;                                                                          // 17082
    sce.valueOf = $sceDelegate.valueOf;                                                                                // 17083
                                                                                                                       // 17084
    if (!enabled) {                                                                                                    // 17085
      sce.trustAs = sce.getTrusted = function(type, value) { return value; };                                          // 17086
      sce.valueOf = identity;                                                                                          // 17087
    }                                                                                                                  // 17088
                                                                                                                       // 17089
    /**                                                                                                                // 17090
     * @ngdoc method                                                                                                   // 17091
     * @name $sce#parseAs                                                                                              // 17092
     *                                                                                                                 // 17093
     * @description                                                                                                    // 17094
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link                      // 17095
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it                    // 17096
     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,                             // 17097
     * *result*)}                                                                                                      // 17098
     *                                                                                                                 // 17099
     * @param {string} type The kind of SCE context in which this result will be used.                                 // 17100
     * @param {string} expression String expression to compile.                                                        // 17101
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17102
     *                                                                                                                 // 17103
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17104
     *      are evaluated against (typically a scope object).                                                          // 17105
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17106
     *      `context`.                                                                                                 // 17107
     */                                                                                                                // 17108
    sce.parseAs = function sceParseAs(type, expr) {                                                                    // 17109
      var parsed = $parse(expr);                                                                                       // 17110
      if (parsed.literal && parsed.constant) {                                                                         // 17111
        return parsed;                                                                                                 // 17112
      } else {                                                                                                         // 17113
        return $parse(expr, function(value) {                                                                          // 17114
          return sce.getTrusted(type, value);                                                                          // 17115
        });                                                                                                            // 17116
      }                                                                                                                // 17117
    };                                                                                                                 // 17118
                                                                                                                       // 17119
    /**                                                                                                                // 17120
     * @ngdoc method                                                                                                   // 17121
     * @name $sce#trustAs                                                                                              // 17122
     *                                                                                                                 // 17123
     * @description                                                                                                    // 17124
     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,                                  // 17125
     * returns an object that is trusted by angular for use in specified strict contextual                             // 17126
     * escaping contexts (such as ng-bind-html, ng-include, any src attribute                                          // 17127
     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)                        // 17128
     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual                        // 17129
     * escaping.                                                                                                       // 17130
     *                                                                                                                 // 17131
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,                        // 17132
     *   resourceUrl, html, js and css.                                                                                // 17133
     * @param {*} value The value that that should be considered trusted/safe.                                         // 17134
     * @returns {*} A value that can be used to stand in for the provided `value` in places                            // 17135
     * where Angular expects a $sce.trustAs() return value.                                                            // 17136
     */                                                                                                                // 17137
                                                                                                                       // 17138
    /**                                                                                                                // 17139
     * @ngdoc method                                                                                                   // 17140
     * @name $sce#trustAsHtml                                                                                          // 17141
     *                                                                                                                 // 17142
     * @description                                                                                                    // 17143
     * Shorthand method.  `$sce.trustAsHtml(value)` →                                                                  // 17144
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}                                    // 17145
     *                                                                                                                 // 17146
     * @param {*} value The value to trustAs.                                                                          // 17147
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml                                      // 17148
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives                           // 17149
     *     only accept expressions that are either literal constants or are the                                        // 17150
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17151
     */                                                                                                                // 17152
                                                                                                                       // 17153
    /**                                                                                                                // 17154
     * @ngdoc method                                                                                                   // 17155
     * @name $sce#trustAsUrl                                                                                           // 17156
     *                                                                                                                 // 17157
     * @description                                                                                                    // 17158
     * Shorthand method.  `$sce.trustAsUrl(value)` →                                                                   // 17159
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}                                     // 17160
     *                                                                                                                 // 17161
     * @param {*} value The value to trustAs.                                                                          // 17162
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl                                       // 17163
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives                            // 17164
     *     only accept expressions that are either literal constants or are the                                        // 17165
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17166
     */                                                                                                                // 17167
                                                                                                                       // 17168
    /**                                                                                                                // 17169
     * @ngdoc method                                                                                                   // 17170
     * @name $sce#trustAsResourceUrl                                                                                   // 17171
     *                                                                                                                 // 17172
     * @description                                                                                                    // 17173
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →                                                           // 17174
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}                            // 17175
     *                                                                                                                 // 17176
     * @param {*} value The value to trustAs.                                                                          // 17177
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl                               // 17178
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives                    // 17179
     *     only accept expressions that are either literal constants or are the return                                 // 17180
     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                             // 17181
     */                                                                                                                // 17182
                                                                                                                       // 17183
    /**                                                                                                                // 17184
     * @ngdoc method                                                                                                   // 17185
     * @name $sce#trustAsJs                                                                                            // 17186
     *                                                                                                                 // 17187
     * @description                                                                                                    // 17188
     * Shorthand method.  `$sce.trustAsJs(value)` →                                                                    // 17189
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}                                      // 17190
     *                                                                                                                 // 17191
     * @param {*} value The value to trustAs.                                                                          // 17192
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs                                        // 17193
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives                             // 17194
     *     only accept expressions that are either literal constants or are the                                        // 17195
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17196
     */                                                                                                                // 17197
                                                                                                                       // 17198
    /**                                                                                                                // 17199
     * @ngdoc method                                                                                                   // 17200
     * @name $sce#getTrusted                                                                                           // 17201
     *                                                                                                                 // 17202
     * @description                                                                                                    // 17203
     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,                            // 17204
     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the                             // 17205
     * originally supplied value if the queried context type is a supertype of the created type.                       // 17206
     * If this condition isn't satisfied, throws an exception.                                                         // 17207
     *                                                                                                                 // 17208
     * @param {string} type The kind of context in which this value is to be used.                                     // 17209
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}                            // 17210
     *                         call.                                                                                   // 17211
     * @returns {*} The value the was originally provided to                                                           // 17212
     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.                                   // 17213
     *              Otherwise, throws an exception.                                                                    // 17214
     */                                                                                                                // 17215
                                                                                                                       // 17216
    /**                                                                                                                // 17217
     * @ngdoc method                                                                                                   // 17218
     * @name $sce#getTrustedHtml                                                                                       // 17219
     *                                                                                                                 // 17220
     * @description                                                                                                    // 17221
     * Shorthand method.  `$sce.getTrustedHtml(value)` →                                                               // 17222
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}                              // 17223
     *                                                                                                                 // 17224
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17225
     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`                                            // 17226
     */                                                                                                                // 17227
                                                                                                                       // 17228
    /**                                                                                                                // 17229
     * @ngdoc method                                                                                                   // 17230
     * @name $sce#getTrustedCss                                                                                        // 17231
     *                                                                                                                 // 17232
     * @description                                                                                                    // 17233
     * Shorthand method.  `$sce.getTrustedCss(value)` →                                                                // 17234
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}                               // 17235
     *                                                                                                                 // 17236
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17237
     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`                                             // 17238
     */                                                                                                                // 17239
                                                                                                                       // 17240
    /**                                                                                                                // 17241
     * @ngdoc method                                                                                                   // 17242
     * @name $sce#getTrustedUrl                                                                                        // 17243
     *                                                                                                                 // 17244
     * @description                                                                                                    // 17245
     * Shorthand method.  `$sce.getTrustedUrl(value)` →                                                                // 17246
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}                               // 17247
     *                                                                                                                 // 17248
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17249
     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`                                             // 17250
     */                                                                                                                // 17251
                                                                                                                       // 17252
    /**                                                                                                                // 17253
     * @ngdoc method                                                                                                   // 17254
     * @name $sce#getTrustedResourceUrl                                                                                // 17255
     *                                                                                                                 // 17256
     * @description                                                                                                    // 17257
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →                                                        // 17258
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}                      // 17259
     *                                                                                                                 // 17260
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.                                                // 17261
     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`                                    // 17262
     */                                                                                                                // 17263
                                                                                                                       // 17264
    /**                                                                                                                // 17265
     * @ngdoc method                                                                                                   // 17266
     * @name $sce#getTrustedJs                                                                                         // 17267
     *                                                                                                                 // 17268
     * @description                                                                                                    // 17269
     * Shorthand method.  `$sce.getTrustedJs(value)` →                                                                 // 17270
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}                                // 17271
     *                                                                                                                 // 17272
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17273
     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`                                              // 17274
     */                                                                                                                // 17275
                                                                                                                       // 17276
    /**                                                                                                                // 17277
     * @ngdoc method                                                                                                   // 17278
     * @name $sce#parseAsHtml                                                                                          // 17279
     *                                                                                                                 // 17280
     * @description                                                                                                    // 17281
     * Shorthand method.  `$sce.parseAsHtml(expression string)` →                                                      // 17282
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}                                                    // 17283
     *                                                                                                                 // 17284
     * @param {string} expression String expression to compile.                                                        // 17285
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17286
     *                                                                                                                 // 17287
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17288
     *      are evaluated against (typically a scope object).                                                          // 17289
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17290
     *      `context`.                                                                                                 // 17291
     */                                                                                                                // 17292
                                                                                                                       // 17293
    /**                                                                                                                // 17294
     * @ngdoc method                                                                                                   // 17295
     * @name $sce#parseAsCss                                                                                           // 17296
     *                                                                                                                 // 17297
     * @description                                                                                                    // 17298
     * Shorthand method.  `$sce.parseAsCss(value)` →                                                                   // 17299
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}                                                     // 17300
     *                                                                                                                 // 17301
     * @param {string} expression String expression to compile.                                                        // 17302
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17303
     *                                                                                                                 // 17304
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17305
     *      are evaluated against (typically a scope object).                                                          // 17306
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17307
     *      `context`.                                                                                                 // 17308
     */                                                                                                                // 17309
                                                                                                                       // 17310
    /**                                                                                                                // 17311
     * @ngdoc method                                                                                                   // 17312
     * @name $sce#parseAsUrl                                                                                           // 17313
     *                                                                                                                 // 17314
     * @description                                                                                                    // 17315
     * Shorthand method.  `$sce.parseAsUrl(value)` →                                                                   // 17316
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}                                                     // 17317
     *                                                                                                                 // 17318
     * @param {string} expression String expression to compile.                                                        // 17319
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17320
     *                                                                                                                 // 17321
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17322
     *      are evaluated against (typically a scope object).                                                          // 17323
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17324
     *      `context`.                                                                                                 // 17325
     */                                                                                                                // 17326
                                                                                                                       // 17327
    /**                                                                                                                // 17328
     * @ngdoc method                                                                                                   // 17329
     * @name $sce#parseAsResourceUrl                                                                                   // 17330
     *                                                                                                                 // 17331
     * @description                                                                                                    // 17332
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →                                                           // 17333
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}                                            // 17334
     *                                                                                                                 // 17335
     * @param {string} expression String expression to compile.                                                        // 17336
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17337
     *                                                                                                                 // 17338
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17339
     *      are evaluated against (typically a scope object).                                                          // 17340
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17341
     *      `context`.                                                                                                 // 17342
     */                                                                                                                // 17343
                                                                                                                       // 17344
    /**                                                                                                                // 17345
     * @ngdoc method                                                                                                   // 17346
     * @name $sce#parseAsJs                                                                                            // 17347
     *                                                                                                                 // 17348
     * @description                                                                                                    // 17349
     * Shorthand method.  `$sce.parseAsJs(value)` →                                                                    // 17350
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}                                                      // 17351
     *                                                                                                                 // 17352
     * @param {string} expression String expression to compile.                                                        // 17353
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17354
     *                                                                                                                 // 17355
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17356
     *      are evaluated against (typically a scope object).                                                          // 17357
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17358
     *      `context`.                                                                                                 // 17359
     */                                                                                                                // 17360
                                                                                                                       // 17361
    // Shorthand delegations.                                                                                          // 17362
    var parse = sce.parseAs,                                                                                           // 17363
        getTrusted = sce.getTrusted,                                                                                   // 17364
        trustAs = sce.trustAs;                                                                                         // 17365
                                                                                                                       // 17366
    forEach(SCE_CONTEXTS, function(enumValue, name) {                                                                  // 17367
      var lName = lowercase(name);                                                                                     // 17368
      sce[camelCase("parse_as_" + lName)] = function(expr) {                                                           // 17369
        return parse(enumValue, expr);                                                                                 // 17370
      };                                                                                                               // 17371
      sce[camelCase("get_trusted_" + lName)] = function(value) {                                                       // 17372
        return getTrusted(enumValue, value);                                                                           // 17373
      };                                                                                                               // 17374
      sce[camelCase("trust_as_" + lName)] = function(value) {                                                          // 17375
        return trustAs(enumValue, value);                                                                              // 17376
      };                                                                                                               // 17377
    });                                                                                                                // 17378
                                                                                                                       // 17379
    return sce;                                                                                                        // 17380
  }];                                                                                                                  // 17381
}                                                                                                                      // 17382
                                                                                                                       // 17383
/**                                                                                                                    // 17384
 * !!! This is an undocumented "private" service !!!                                                                   // 17385
 *                                                                                                                     // 17386
 * @name $sniffer                                                                                                      // 17387
 * @requires $window                                                                                                   // 17388
 * @requires $document                                                                                                 // 17389
 *                                                                                                                     // 17390
 * @property {boolean} history Does the browser support html5 history api ?                                            // 17391
 * @property {boolean} transitions Does the browser support CSS transition events ?                                    // 17392
 * @property {boolean} animations Does the browser support CSS animation events ?                                      // 17393
 *                                                                                                                     // 17394
 * @description                                                                                                        // 17395
 * This is very simple implementation of testing browser's features.                                                   // 17396
 */                                                                                                                    // 17397
function $SnifferProvider() {                                                                                          // 17398
  this.$get = ['$window', '$document', function($window, $document) {                                                  // 17399
    var eventSupport = {},                                                                                             // 17400
        android =                                                                                                      // 17401
          toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),                      // 17402
        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),                                                    // 17403
        document = $document[0] || {},                                                                                 // 17404
        vendorPrefix,                                                                                                  // 17405
        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,                                                                     // 17406
        bodyStyle = document.body && document.body.style,                                                              // 17407
        transitions = false,                                                                                           // 17408
        animations = false,                                                                                            // 17409
        match;                                                                                                         // 17410
                                                                                                                       // 17411
    if (bodyStyle) {                                                                                                   // 17412
      for (var prop in bodyStyle) {                                                                                    // 17413
        if (match = vendorRegex.exec(prop)) {                                                                          // 17414
          vendorPrefix = match[0];                                                                                     // 17415
          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);                             // 17416
          break;                                                                                                       // 17417
        }                                                                                                              // 17418
      }                                                                                                                // 17419
                                                                                                                       // 17420
      if (!vendorPrefix) {                                                                                             // 17421
        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';                                                     // 17422
      }                                                                                                                // 17423
                                                                                                                       // 17424
      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));                     // 17425
      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));                       // 17426
                                                                                                                       // 17427
      if (android && (!transitions ||  !animations)) {                                                                 // 17428
        transitions = isString(bodyStyle.webkitTransition);                                                            // 17429
        animations = isString(bodyStyle.webkitAnimation);                                                              // 17430
      }                                                                                                                // 17431
    }                                                                                                                  // 17432
                                                                                                                       // 17433
                                                                                                                       // 17434
    return {                                                                                                           // 17435
      // Android has history.pushState, but it does not update location correctly                                      // 17436
      // so let's not use the history API at all.                                                                      // 17437
      // http://code.google.com/p/android/issues/detail?id=17471                                                       // 17438
      // https://github.com/angular/angular.js/issues/904                                                              // 17439
                                                                                                                       // 17440
      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has                         // 17441
      // so let's not use the history API also                                                                         // 17442
      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined                      // 17443
      // jshint -W018                                                                                                  // 17444
      history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),                           // 17445
      // jshint +W018                                                                                                  // 17446
      hasEvent: function(event) {                                                                                      // 17447
        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have                    // 17448
        // it. In particular the event is not fired when backspace or delete key are pressed or                        // 17449
        // when cut operation is performed.                                                                            // 17450
        // IE10+ implements 'input' event but it erroneously fires under various situations,                           // 17451
        // e.g. when placeholder changes, or a form is focused.                                                        // 17452
        if (event === 'input' && msie <= 11) return false;                                                             // 17453
                                                                                                                       // 17454
        if (isUndefined(eventSupport[event])) {                                                                        // 17455
          var divElm = document.createElement('div');                                                                  // 17456
          eventSupport[event] = 'on' + event in divElm;                                                                // 17457
        }                                                                                                              // 17458
                                                                                                                       // 17459
        return eventSupport[event];                                                                                    // 17460
      },                                                                                                               // 17461
      csp: csp(),                                                                                                      // 17462
      vendorPrefix: vendorPrefix,                                                                                      // 17463
      transitions: transitions,                                                                                        // 17464
      animations: animations,                                                                                          // 17465
      android: android                                                                                                 // 17466
    };                                                                                                                 // 17467
  }];                                                                                                                  // 17468
}                                                                                                                      // 17469
                                                                                                                       // 17470
var $compileMinErr = minErr('$compile');                                                                               // 17471
                                                                                                                       // 17472
/**                                                                                                                    // 17473
 * @ngdoc service                                                                                                      // 17474
 * @name $templateRequest                                                                                              // 17475
 *                                                                                                                     // 17476
 * @description                                                                                                        // 17477
 * The `$templateRequest` service runs security checks then downloads the provided template using                      // 17478
 * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request                      // 17479
 * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the                     // 17480
 * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the                      // 17481
 * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted                       // 17482
 * when `tpl` is of type string and `$templateCache` has the matching entry.                                           // 17483
 *                                                                                                                     // 17484
 * @param {string|TrustedResourceUrl} tpl The HTTP request template URL                                                // 17485
 * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
 *                                                                                                                     // 17487
 * @return {Promise} a promise for the HTTP response data of the given URL.                                            // 17488
 *                                                                                                                     // 17489
 * @property {number} totalPendingRequests total amount of pending template requests being downloaded.                 // 17490
 */                                                                                                                    // 17491
function $TemplateRequestProvider() {                                                                                  // 17492
  this.$get = ['$templateCache', '$http', '$q', '$sce', function($templateCache, $http, $q, $sce) {                    // 17493
    function handleRequestFn(tpl, ignoreRequestError) {                                                                // 17494
      handleRequestFn.totalPendingRequests++;                                                                          // 17495
                                                                                                                       // 17496
      // We consider the template cache holds only trusted templates, so                                               // 17497
      // there's no need to go through whitelisting again for keys that already                                        // 17498
      // are included in there. This also makes Angular accept any script                                              // 17499
      // directive, no matter its name. However, we still need to unwrap trusted                                       // 17500
      // types.                                                                                                        // 17501
      if (!isString(tpl) || !$templateCache.get(tpl)) {                                                                // 17502
        tpl = $sce.getTrustedResourceUrl(tpl);                                                                         // 17503
      }                                                                                                                // 17504
                                                                                                                       // 17505
      var transformResponse = $http.defaults && $http.defaults.transformResponse;                                      // 17506
                                                                                                                       // 17507
      if (isArray(transformResponse)) {                                                                                // 17508
        transformResponse = transformResponse.filter(function(transformer) {                                           // 17509
          return transformer !== defaultHttpResponseTransform;                                                         // 17510
        });                                                                                                            // 17511
      } else if (transformResponse === defaultHttpResponseTransform) {                                                 // 17512
        transformResponse = null;                                                                                      // 17513
      }                                                                                                                // 17514
                                                                                                                       // 17515
      var httpOptions = {                                                                                              // 17516
        cache: $templateCache,                                                                                         // 17517
        transformResponse: transformResponse                                                                           // 17518
      };                                                                                                               // 17519
                                                                                                                       // 17520
      return $http.get(tpl, httpOptions)                                                                               // 17521
        ['finally'](function() {                                                                                       // 17522
          handleRequestFn.totalPendingRequests--;                                                                      // 17523
        })                                                                                                             // 17524
        .then(function(response) {                                                                                     // 17525
          $templateCache.put(tpl, response.data);                                                                      // 17526
          return response.data;                                                                                        // 17527
        }, handleError);                                                                                               // 17528
                                                                                                                       // 17529
      function handleError(resp) {                                                                                     // 17530
        if (!ignoreRequestError) {                                                                                     // 17531
          throw $compileMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})',                        // 17532
            tpl, resp.status, resp.statusText);                                                                        // 17533
        }                                                                                                              // 17534
        return $q.reject(resp);                                                                                        // 17535
      }                                                                                                                // 17536
    }                                                                                                                  // 17537
                                                                                                                       // 17538
    handleRequestFn.totalPendingRequests = 0;                                                                          // 17539
                                                                                                                       // 17540
    return handleRequestFn;                                                                                            // 17541
  }];                                                                                                                  // 17542
}                                                                                                                      // 17543
                                                                                                                       // 17544
function $$TestabilityProvider() {                                                                                     // 17545
  this.$get = ['$rootScope', '$browser', '$location',                                                                  // 17546
       function($rootScope,   $browser,   $location) {                                                                 // 17547
                                                                                                                       // 17548
    /**                                                                                                                // 17549
     * @name $testability                                                                                              // 17550
     *                                                                                                                 // 17551
     * @description                                                                                                    // 17552
     * The private $$testability service provides a collection of methods for use when debugging                       // 17553
     * or by automated test and debugging tools.                                                                       // 17554
     */                                                                                                                // 17555
    var testability = {};                                                                                              // 17556
                                                                                                                       // 17557
    /**                                                                                                                // 17558
     * @name $$testability#findBindings                                                                                // 17559
     *                                                                                                                 // 17560
     * @description                                                                                                    // 17561
     * Returns an array of elements that are bound (via ng-bind or {{}})                                               // 17562
     * to expressions matching the input.                                                                              // 17563
     *                                                                                                                 // 17564
     * @param {Element} element The element root to search from.                                                       // 17565
     * @param {string} expression The binding expression to match.                                                     // 17566
     * @param {boolean} opt_exactMatch If true, only returns exact matches                                             // 17567
     *     for the expression. Filters and whitespace are ignored.                                                     // 17568
     */                                                                                                                // 17569
    testability.findBindings = function(element, expression, opt_exactMatch) {                                         // 17570
      var bindings = element.getElementsByClassName('ng-binding');                                                     // 17571
      var matches = [];                                                                                                // 17572
      forEach(bindings, function(binding) {                                                                            // 17573
        var dataBinding = angular.element(binding).data('$binding');                                                   // 17574
        if (dataBinding) {                                                                                             // 17575
          forEach(dataBinding, function(bindingName) {                                                                 // 17576
            if (opt_exactMatch) {                                                                                      // 17577
              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');                       // 17578
              if (matcher.test(bindingName)) {                                                                         // 17579
                matches.push(binding);                                                                                 // 17580
              }                                                                                                        // 17581
            } else {                                                                                                   // 17582
              if (bindingName.indexOf(expression) != -1) {                                                             // 17583
                matches.push(binding);                                                                                 // 17584
              }                                                                                                        // 17585
            }                                                                                                          // 17586
          });                                                                                                          // 17587
        }                                                                                                              // 17588
      });                                                                                                              // 17589
      return matches;                                                                                                  // 17590
    };                                                                                                                 // 17591
                                                                                                                       // 17592
    /**                                                                                                                // 17593
     * @name $$testability#findModels                                                                                  // 17594
     *                                                                                                                 // 17595
     * @description                                                                                                    // 17596
     * Returns an array of elements that are two-way found via ng-model to                                             // 17597
     * expressions matching the input.                                                                                 // 17598
     *                                                                                                                 // 17599
     * @param {Element} element The element root to search from.                                                       // 17600
     * @param {string} expression The model expression to match.                                                       // 17601
     * @param {boolean} opt_exactMatch If true, only returns exact matches                                             // 17602
     *     for the expression.                                                                                         // 17603
     */                                                                                                                // 17604
    testability.findModels = function(element, expression, opt_exactMatch) {                                           // 17605
      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];                                                                     // 17606
      for (var p = 0; p < prefixes.length; ++p) {                                                                      // 17607
        var attributeEquals = opt_exactMatch ? '=' : '*=';                                                             // 17608
        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';                        // 17609
        var elements = element.querySelectorAll(selector);                                                             // 17610
        if (elements.length) {                                                                                         // 17611
          return elements;                                                                                             // 17612
        }                                                                                                              // 17613
      }                                                                                                                // 17614
    };                                                                                                                 // 17615
                                                                                                                       // 17616
    /**                                                                                                                // 17617
     * @name $$testability#getLocation                                                                                 // 17618
     *                                                                                                                 // 17619
     * @description                                                                                                    // 17620
     * Shortcut for getting the location in a browser agnostic way. Returns                                            // 17621
     *     the path, search, and hash. (e.g. /path?a=b#hash)                                                           // 17622
     */                                                                                                                // 17623
    testability.getLocation = function() {                                                                             // 17624
      return $location.url();                                                                                          // 17625
    };                                                                                                                 // 17626
                                                                                                                       // 17627
    /**                                                                                                                // 17628
     * @name $$testability#setLocation                                                                                 // 17629
     *                                                                                                                 // 17630
     * @description                                                                                                    // 17631
     * Shortcut for navigating to a location without doing a full page reload.                                         // 17632
     *                                                                                                                 // 17633
     * @param {string} url The location url (path, search and hash,                                                    // 17634
     *     e.g. /path?a=b#hash) to go to.                                                                              // 17635
     */                                                                                                                // 17636
    testability.setLocation = function(url) {                                                                          // 17637
      if (url !== $location.url()) {                                                                                   // 17638
        $location.url(url);                                                                                            // 17639
        $rootScope.$digest();                                                                                          // 17640
      }                                                                                                                // 17641
    };                                                                                                                 // 17642
                                                                                                                       // 17643
    /**                                                                                                                // 17644
     * @name $$testability#whenStable                                                                                  // 17645
     *                                                                                                                 // 17646
     * @description                                                                                                    // 17647
     * Calls the callback when $timeout and $http requests are completed.                                              // 17648
     *                                                                                                                 // 17649
     * @param {function} callback                                                                                      // 17650
     */                                                                                                                // 17651
    testability.whenStable = function(callback) {                                                                      // 17652
      $browser.notifyWhenNoOutstandingRequests(callback);                                                              // 17653
    };                                                                                                                 // 17654
                                                                                                                       // 17655
    return testability;                                                                                                // 17656
  }];                                                                                                                  // 17657
}                                                                                                                      // 17658
                                                                                                                       // 17659
function $TimeoutProvider() {                                                                                          // 17660
  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',                                             // 17661
       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {                                            // 17662
                                                                                                                       // 17663
    var deferreds = {};                                                                                                // 17664
                                                                                                                       // 17665
                                                                                                                       // 17666
     /**                                                                                                               // 17667
      * @ngdoc service                                                                                                 // 17668
      * @name $timeout                                                                                                 // 17669
      *                                                                                                                // 17670
      * @description                                                                                                   // 17671
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch                       // 17672
      * block and delegates any exceptions to                                                                          // 17673
      * {@link ng.$exceptionHandler $exceptionHandler} service.                                                        // 17674
      *                                                                                                                // 17675
      * The return value of calling `$timeout` is a promise, which will be resolved when                               // 17676
      * the delay has passed and the timeout function, if provided, is executed.                                       // 17677
      *                                                                                                                // 17678
      * To cancel a timeout request, call `$timeout.cancel(promise)`.                                                  // 17679
      *                                                                                                                // 17680
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to                                             // 17681
      * synchronously flush the queue of deferred functions.                                                           // 17682
      *                                                                                                                // 17683
      * If you only want a promise that will be resolved after some specified delay                                    // 17684
      * then you can call `$timeout` without the `fn` function.                                                        // 17685
      *                                                                                                                // 17686
      * @param {function()=} fn A function, whose execution should be delayed.                                         // 17687
      * @param {number=} [delay=0] Delay in milliseconds.                                                              // 17688
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise                   // 17689
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.                                 // 17690
      * @param {...*=} Pass additional parameters to the executed function.                                            // 17691
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this                   // 17692
      *   promise will be resolved with is the return value of the `fn` function.                                      // 17693
      *                                                                                                                // 17694
      */                                                                                                               // 17695
    function timeout(fn, delay, invokeApply) {                                                                         // 17696
      if (!isFunction(fn)) {                                                                                           // 17697
        invokeApply = delay;                                                                                           // 17698
        delay = fn;                                                                                                    // 17699
        fn = noop;                                                                                                     // 17700
      }                                                                                                                // 17701
                                                                                                                       // 17702
      var args = sliceArgs(arguments, 3),                                                                              // 17703
          skipApply = (isDefined(invokeApply) && !invokeApply),                                                        // 17704
          deferred = (skipApply ? $$q : $q).defer(),                                                                   // 17705
          promise = deferred.promise,                                                                                  // 17706
          timeoutId;                                                                                                   // 17707
                                                                                                                       // 17708
      timeoutId = $browser.defer(function() {                                                                          // 17709
        try {                                                                                                          // 17710
          deferred.resolve(fn.apply(null, args));                                                                      // 17711
        } catch (e) {                                                                                                  // 17712
          deferred.reject(e);                                                                                          // 17713
          $exceptionHandler(e);                                                                                        // 17714
        }                                                                                                              // 17715
        finally {                                                                                                      // 17716
          delete deferreds[promise.$$timeoutId];                                                                       // 17717
        }                                                                                                              // 17718
                                                                                                                       // 17719
        if (!skipApply) $rootScope.$apply();                                                                           // 17720
      }, delay);                                                                                                       // 17721
                                                                                                                       // 17722
      promise.$$timeoutId = timeoutId;                                                                                 // 17723
      deferreds[timeoutId] = deferred;                                                                                 // 17724
                                                                                                                       // 17725
      return promise;                                                                                                  // 17726
    }                                                                                                                  // 17727
                                                                                                                       // 17728
                                                                                                                       // 17729
     /**                                                                                                               // 17730
      * @ngdoc method                                                                                                  // 17731
      * @name $timeout#cancel                                                                                          // 17732
      *                                                                                                                // 17733
      * @description                                                                                                   // 17734
      * Cancels a task associated with the `promise`. As a result of this, the promise will be                         // 17735
      * resolved with a rejection.                                                                                     // 17736
      *                                                                                                                // 17737
      * @param {Promise=} promise Promise returned by the `$timeout` function.                                         // 17738
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully                         // 17739
      *   canceled.                                                                                                    // 17740
      */                                                                                                               // 17741
    timeout.cancel = function(promise) {                                                                               // 17742
      if (promise && promise.$$timeoutId in deferreds) {                                                               // 17743
        deferreds[promise.$$timeoutId].reject('canceled');                                                             // 17744
        delete deferreds[promise.$$timeoutId];                                                                         // 17745
        return $browser.defer.cancel(promise.$$timeoutId);                                                             // 17746
      }                                                                                                                // 17747
      return false;                                                                                                    // 17748
    };                                                                                                                 // 17749
                                                                                                                       // 17750
    return timeout;                                                                                                    // 17751
  }];                                                                                                                  // 17752
}                                                                                                                      // 17753
                                                                                                                       // 17754
// NOTE:  The usage of window and document instead of $window and $document here is                                    // 17755
// deliberate.  This service depends on the specific behavior of anchor nodes created by the                           // 17756
// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and                            // 17757
// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it                                  // 17758
// doesn't know about mocked locations and resolves URLs to the real document - which is                               // 17759
// exactly the behavior needed here.  There is little value is mocking these out for this                              // 17760
// service.                                                                                                            // 17761
var urlParsingNode = document.createElement("a");                                                                      // 17762
var originUrl = urlResolve(window.location.href);                                                                      // 17763
                                                                                                                       // 17764
                                                                                                                       // 17765
/**                                                                                                                    // 17766
 *                                                                                                                     // 17767
 * Implementation Notes for non-IE browsers                                                                            // 17768
 * ----------------------------------------                                                                            // 17769
 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,                           // 17770
 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative                          // 17771
 * URL will be resolved into an absolute URL in the context of the application document.                               // 17772
 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related                           // 17773
 * properties are all populated to reflect the normalized URL.  This approach has wide                                 // 17774
 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See                                                         // 17775
 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html                                                     // 17776
 *                                                                                                                     // 17777
 * Implementation Notes for IE                                                                                         // 17778
 * ---------------------------                                                                                         // 17779
 * IE >= 8 and <= 10 normalizes the URL when assigned to the anchor node similar to the other                          // 17780
 * browsers.  However, the parsed components will not be set if the URL assigned did not specify                       // 17781
 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We                        // 17782
 * work around that by performing the parsing in a 2nd step by taking a previously normalized                          // 17783
 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the                      // 17784
 * properties such as protocol, hostname, port, etc.                                                                   // 17785
 *                                                                                                                     // 17786
 * IE7 does not normalize the URL when assigned to an anchor node.  (Apparently, it does, if one                       // 17787
 * uses the inner HTML approach to assign the URL as part of an HTML snippet -                                         // 17788
 * http://stackoverflow.com/a/472729)  However, setting img[src] does normalize the URL.                               // 17789
 * Unfortunately, setting img[src] to something like "javascript:foo" on IE throws an exception.                       // 17790
 * Since the primary usage for normalizing URLs is to sanitize such URLs, we can't use that                            // 17791
 * method and IE < 8 is unsupported.                                                                                   // 17792
 *                                                                                                                     // 17793
 * References:                                                                                                         // 17794
 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement                                                 // 17795
 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html                                                   // 17796
 *   http://url.spec.whatwg.org/#urlutils                                                                              // 17797
 *   https://github.com/angular/angular.js/pull/2902                                                                   // 17798
 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/                                                   // 17799
 *                                                                                                                     // 17800
 * @kind function                                                                                                      // 17801
 * @param {string} url The URL to be parsed.                                                                           // 17802
 * @description Normalizes and parses a URL.                                                                           // 17803
 * @returns {object} Returns the normalized URL as a dictionary.                                                       // 17804
 *                                                                                                                     // 17805
 *   | member name   | Description    |                                                                                // 17806
 *   |---------------|----------------|                                                                                // 17807
 *   | href          | A normalized version of the provided URL if it was not an absolute URL |                        // 17808
 *   | protocol      | The protocol including the trailing colon                              |                        // 17809
 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |                        // 17810
 *   | search        | The search params, minus the question mark                             |                        // 17811
 *   | hash          | The hash string, minus the hash symbol                                                          // 17812
 *   | hostname      | The hostname                                                                                    // 17813
 *   | port          | The port, without ":"                                                                           // 17814
 *   | pathname      | The pathname, beginning with "/"                                                                // 17815
 *                                                                                                                     // 17816
 */                                                                                                                    // 17817
function urlResolve(url) {                                                                                             // 17818
  var href = url;                                                                                                      // 17819
                                                                                                                       // 17820
  if (msie) {                                                                                                          // 17821
    // Normalize before parse.  Refer Implementation Notes on why this is                                              // 17822
    // done in two steps on IE.                                                                                        // 17823
    urlParsingNode.setAttribute("href", href);                                                                         // 17824
    href = urlParsingNode.href;                                                                                        // 17825
  }                                                                                                                    // 17826
                                                                                                                       // 17827
  urlParsingNode.setAttribute('href', href);                                                                           // 17828
                                                                                                                       // 17829
  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils                             // 17830
  return {                                                                                                             // 17831
    href: urlParsingNode.href,                                                                                         // 17832
    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',                                // 17833
    host: urlParsingNode.host,                                                                                         // 17834
    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',                                     // 17835
    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',                                            // 17836
    hostname: urlParsingNode.hostname,                                                                                 // 17837
    port: urlParsingNode.port,                                                                                         // 17838
    pathname: (urlParsingNode.pathname.charAt(0) === '/')                                                              // 17839
      ? urlParsingNode.pathname                                                                                        // 17840
      : '/' + urlParsingNode.pathname                                                                                  // 17841
  };                                                                                                                   // 17842
}                                                                                                                      // 17843
                                                                                                                       // 17844
/**                                                                                                                    // 17845
 * Parse a request URL and determine whether this is a same-origin request as the application document.                // 17846
 *                                                                                                                     // 17847
 * @param {string|object} requestUrl The url of the request as a string that will be resolved                          // 17848
 * or a parsed URL object.                                                                                             // 17849
 * @returns {boolean} Whether the request is for the same origin as the application document.                          // 17850
 */                                                                                                                    // 17851
function urlIsSameOrigin(requestUrl) {                                                                                 // 17852
  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;                                           // 17853
  return (parsed.protocol === originUrl.protocol &&                                                                    // 17854
          parsed.host === originUrl.host);                                                                             // 17855
}                                                                                                                      // 17856
                                                                                                                       // 17857
/**                                                                                                                    // 17858
 * @ngdoc service                                                                                                      // 17859
 * @name $window                                                                                                       // 17860
 *                                                                                                                     // 17861
 * @description                                                                                                        // 17862
 * A reference to the browser's `window` object. While `window`                                                        // 17863
 * is globally available in JavaScript, it causes testability problems, because                                        // 17864
 * it is a global variable. In angular we always refer to it through the                                               // 17865
 * `$window` service, so it may be overridden, removed or mocked for testing.                                          // 17866
 *                                                                                                                     // 17867
 * Expressions, like the one defined for the `ngClick` directive in the example                                        // 17868
 * below, are evaluated with respect to the current scope.  Therefore, there is                                        // 17869
 * no risk of inadvertently coding in a dependency on a global value in such an                                        // 17870
 * expression.                                                                                                         // 17871
 *                                                                                                                     // 17872
 * @example                                                                                                            // 17873
   <example module="windowExample">                                                                                    // 17874
     <file name="index.html">                                                                                          // 17875
       <script>                                                                                                        // 17876
         angular.module('windowExample', [])                                                                           // 17877
           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {                          // 17878
             $scope.greeting = 'Hello, World!';                                                                        // 17879
             $scope.doGreeting = function(greeting) {                                                                  // 17880
               $window.alert(greeting);                                                                                // 17881
             };                                                                                                        // 17882
           }]);                                                                                                        // 17883
       </script>                                                                                                       // 17884
       <div ng-controller="ExampleController">                                                                         // 17885
         <input type="text" ng-model="greeting" aria-label="greeting" />                                               // 17886
         <button ng-click="doGreeting(greeting)">ALERT</button>                                                        // 17887
       </div>                                                                                                          // 17888
     </file>                                                                                                           // 17889
     <file name="protractor.js" type="protractor">                                                                     // 17890
      it('should display the greeting in the input box', function() {                                                  // 17891
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');                                                     // 17892
       // If we click the button it will block the test runner                                                         // 17893
       // element(':button').click();                                                                                  // 17894
      });                                                                                                              // 17895
     </file>                                                                                                           // 17896
   </example>                                                                                                          // 17897
 */                                                                                                                    // 17898
function $WindowProvider() {                                                                                           // 17899
  this.$get = valueFn(window);                                                                                         // 17900
}                                                                                                                      // 17901
                                                                                                                       // 17902
/**                                                                                                                    // 17903
 * @name $$cookieReader                                                                                                // 17904
 * @requires $document                                                                                                 // 17905
 *                                                                                                                     // 17906
 * @description                                                                                                        // 17907
 * This is a private service for reading cookies used by $http and ngCookies                                           // 17908
 *                                                                                                                     // 17909
 * @return {Object} a key/value map of the current cookies                                                             // 17910
 */                                                                                                                    // 17911
function $$CookieReader($document) {                                                                                   // 17912
  var rawDocument = $document[0] || {};                                                                                // 17913
  var lastCookies = {};                                                                                                // 17914
  var lastCookieString = '';                                                                                           // 17915
                                                                                                                       // 17916
  function safeDecodeURIComponent(str) {                                                                               // 17917
    try {                                                                                                              // 17918
      return decodeURIComponent(str);                                                                                  // 17919
    } catch (e) {                                                                                                      // 17920
      return str;                                                                                                      // 17921
    }                                                                                                                  // 17922
  }                                                                                                                    // 17923
                                                                                                                       // 17924
  return function() {                                                                                                  // 17925
    var cookieArray, cookie, i, index, name;                                                                           // 17926
    var currentCookieString = rawDocument.cookie || '';                                                                // 17927
                                                                                                                       // 17928
    if (currentCookieString !== lastCookieString) {                                                                    // 17929
      lastCookieString = currentCookieString;                                                                          // 17930
      cookieArray = lastCookieString.split('; ');                                                                      // 17931
      lastCookies = {};                                                                                                // 17932
                                                                                                                       // 17933
      for (i = 0; i < cookieArray.length; i++) {                                                                       // 17934
        cookie = cookieArray[i];                                                                                       // 17935
        index = cookie.indexOf('=');                                                                                   // 17936
        if (index > 0) { //ignore nameless cookies                                                                     // 17937
          name = safeDecodeURIComponent(cookie.substring(0, index));                                                   // 17938
          // the first value that is seen for a cookie is the most                                                     // 17939
          // specific one.  values for the same cookie name that                                                       // 17940
          // follow are for less specific paths.                                                                       // 17941
          if (lastCookies[name] === undefined) {                                                                       // 17942
            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));                                   // 17943
          }                                                                                                            // 17944
        }                                                                                                              // 17945
      }                                                                                                                // 17946
    }                                                                                                                  // 17947
    return lastCookies;                                                                                                // 17948
  };                                                                                                                   // 17949
}                                                                                                                      // 17950
                                                                                                                       // 17951
$$CookieReader.$inject = ['$document'];                                                                                // 17952
                                                                                                                       // 17953
function $$CookieReaderProvider() {                                                                                    // 17954
  this.$get = $$CookieReader;                                                                                          // 17955
}                                                                                                                      // 17956
                                                                                                                       // 17957
/* global currencyFilter: true,                                                                                        // 17958
 dateFilter: true,                                                                                                     // 17959
 filterFilter: true,                                                                                                   // 17960
 jsonFilter: true,                                                                                                     // 17961
 limitToFilter: true,                                                                                                  // 17962
 lowercaseFilter: true,                                                                                                // 17963
 numberFilter: true,                                                                                                   // 17964
 orderByFilter: true,                                                                                                  // 17965
 uppercaseFilter: true,                                                                                                // 17966
 */                                                                                                                    // 17967
                                                                                                                       // 17968
/**                                                                                                                    // 17969
 * @ngdoc provider                                                                                                     // 17970
 * @name $filterProvider                                                                                               // 17971
 * @description                                                                                                        // 17972
 *                                                                                                                     // 17973
 * Filters are just functions which transform input to an output. However filters need to be                           // 17974
 * Dependency Injected. To achieve this a filter definition consists of a factory function which is                    // 17975
 * annotated with dependencies and is responsible for creating a filter function.                                      // 17976
 *                                                                                                                     // 17977
 * <div class="alert alert-warning">                                                                                   // 17978
 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.      // 17979
 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace                  // 17980
 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                             // 17981
 * (`myapp_subsection_filterx`).                                                                                       // 17982
 * </div>                                                                                                              // 17983
 *                                                                                                                     // 17984
 * ```js                                                                                                               // 17985
 *   // Filter registration                                                                                            // 17986
 *   function MyModule($provide, $filterProvider) {                                                                    // 17987
 *     // create a service to demonstrate injection (not always needed)                                                // 17988
 *     $provide.value('greet', function(name){                                                                         // 17989
 *       return 'Hello ' + name + '!';                                                                                 // 17990
 *     });                                                                                                             // 17991
 *                                                                                                                     // 17992
 *     // register a filter factory which uses the                                                                     // 17993
 *     // greet service to demonstrate DI.                                                                             // 17994
 *     $filterProvider.register('greet', function(greet){                                                              // 17995
 *       // return the filter function which uses the greet service                                                    // 17996
 *       // to generate salutation                                                                                     // 17997
 *       return function(text) {                                                                                       // 17998
 *         // filters need to be forgiving so check input validity                                                     // 17999
 *         return text && greet(text) || text;                                                                         // 18000
 *       };                                                                                                            // 18001
 *     });                                                                                                             // 18002
 *   }                                                                                                                 // 18003
 * ```                                                                                                                 // 18004
 *                                                                                                                     // 18005
 * The filter function is registered with the `$injector` under the filter name suffix with                            // 18006
 * `Filter`.                                                                                                           // 18007
 *                                                                                                                     // 18008
 * ```js                                                                                                               // 18009
 *   it('should be the same instance', inject(                                                                         // 18010
 *     function($filterProvider) {                                                                                     // 18011
 *       $filterProvider.register('reverse', function(){                                                               // 18012
 *         return ...;                                                                                                 // 18013
 *       });                                                                                                           // 18014
 *     },                                                                                                              // 18015
 *     function($filter, reverseFilter) {                                                                              // 18016
 *       expect($filter('reverse')).toBe(reverseFilter);                                                               // 18017
 *     });                                                                                                             // 18018
 * ```                                                                                                                 // 18019
 *                                                                                                                     // 18020
 *                                                                                                                     // 18021
 * For more information about how angular filters work, and how to create your own filters, see                        // 18022
 * {@link guide/filter Filters} in the Angular Developer Guide.                                                        // 18023
 */                                                                                                                    // 18024
                                                                                                                       // 18025
/**                                                                                                                    // 18026
 * @ngdoc service                                                                                                      // 18027
 * @name $filter                                                                                                       // 18028
 * @kind function                                                                                                      // 18029
 * @description                                                                                                        // 18030
 * Filters are used for formatting data displayed to the user.                                                         // 18031
 *                                                                                                                     // 18032
 * The general syntax in templates is as follows:                                                                      // 18033
 *                                                                                                                     // 18034
 *         {{ expression [| filter_name[:parameter_value] ... ] }}                                                     // 18035
 *                                                                                                                     // 18036
 * @param {String} name Name of the filter function to retrieve                                                        // 18037
 * @return {Function} the filter function                                                                              // 18038
 * @example                                                                                                            // 18039
   <example name="$filter" module="filterExample">                                                                     // 18040
     <file name="index.html">                                                                                          // 18041
       <div ng-controller="MainCtrl">                                                                                  // 18042
        <h3>{{ originalText }}</h3>                                                                                    // 18043
        <h3>{{ filteredText }}</h3>                                                                                    // 18044
       </div>                                                                                                          // 18045
     </file>                                                                                                           // 18046
                                                                                                                       // 18047
     <file name="script.js">                                                                                           // 18048
      angular.module('filterExample', [])                                                                              // 18049
      .controller('MainCtrl', function($scope, $filter) {                                                              // 18050
        $scope.originalText = 'hello';                                                                                 // 18051
        $scope.filteredText = $filter('uppercase')($scope.originalText);                                               // 18052
      });                                                                                                              // 18053
     </file>                                                                                                           // 18054
   </example>                                                                                                          // 18055
  */                                                                                                                   // 18056
$FilterProvider.$inject = ['$provide'];                                                                                // 18057
function $FilterProvider($provide) {                                                                                   // 18058
  var suffix = 'Filter';                                                                                               // 18059
                                                                                                                       // 18060
  /**                                                                                                                  // 18061
   * @ngdoc method                                                                                                     // 18062
   * @name $filterProvider#register                                                                                    // 18063
   * @param {string|Object} name Name of the filter function, or an object map of filters where                        // 18064
   *    the keys are the filter names and the values are the filter factories.                                         // 18065
   *                                                                                                                   // 18066
   *    <div class="alert alert-warning">                                                                              // 18067
   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`. // 18068
   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace             // 18069
   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                        // 18070
   *    (`myapp_subsection_filterx`).                                                                                  // 18071
   *    </div>                                                                                                         // 18072
   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map                      // 18073
   *    of the registered filter instances.                                                                            // 18074
   */                                                                                                                  // 18075
  function register(name, factory) {                                                                                   // 18076
    if (isObject(name)) {                                                                                              // 18077
      var filters = {};                                                                                                // 18078
      forEach(name, function(filter, key) {                                                                            // 18079
        filters[key] = register(key, filter);                                                                          // 18080
      });                                                                                                              // 18081
      return filters;                                                                                                  // 18082
    } else {                                                                                                           // 18083
      return $provide.factory(name + suffix, factory);                                                                 // 18084
    }                                                                                                                  // 18085
  }                                                                                                                    // 18086
  this.register = register;                                                                                            // 18087
                                                                                                                       // 18088
  this.$get = ['$injector', function($injector) {                                                                      // 18089
    return function(name) {                                                                                            // 18090
      return $injector.get(name + suffix);                                                                             // 18091
    };                                                                                                                 // 18092
  }];                                                                                                                  // 18093
                                                                                                                       // 18094
  ////////////////////////////////////////                                                                             // 18095
                                                                                                                       // 18096
  /* global                                                                                                            // 18097
    currencyFilter: false,                                                                                             // 18098
    dateFilter: false,                                                                                                 // 18099
    filterFilter: false,                                                                                               // 18100
    jsonFilter: false,                                                                                                 // 18101
    limitToFilter: false,                                                                                              // 18102
    lowercaseFilter: false,                                                                                            // 18103
    numberFilter: false,                                                                                               // 18104
    orderByFilter: false,                                                                                              // 18105
    uppercaseFilter: false,                                                                                            // 18106
  */                                                                                                                   // 18107
                                                                                                                       // 18108
  register('currency', currencyFilter);                                                                                // 18109
  register('date', dateFilter);                                                                                        // 18110
  register('filter', filterFilter);                                                                                    // 18111
  register('json', jsonFilter);                                                                                        // 18112
  register('limitTo', limitToFilter);                                                                                  // 18113
  register('lowercase', lowercaseFilter);                                                                              // 18114
  register('number', numberFilter);                                                                                    // 18115
  register('orderBy', orderByFilter);                                                                                  // 18116
  register('uppercase', uppercaseFilter);                                                                              // 18117
}                                                                                                                      // 18118
                                                                                                                       // 18119
/**                                                                                                                    // 18120
 * @ngdoc filter                                                                                                       // 18121
 * @name filter                                                                                                        // 18122
 * @kind function                                                                                                      // 18123
 *                                                                                                                     // 18124
 * @description                                                                                                        // 18125
 * Selects a subset of items from `array` and returns it as a new array.                                               // 18126
 *                                                                                                                     // 18127
 * @param {Array} array The source array.                                                                              // 18128
 * @param {string|Object|function()} expression The predicate to be used for selecting items from                      // 18129
 *   `array`.                                                                                                          // 18130
 *                                                                                                                     // 18131
 *   Can be one of:                                                                                                    // 18132
 *                                                                                                                     // 18133
 *   - `string`: The string is used for matching against the contents of the `array`. All strings or                   // 18134
 *     objects with string properties in `array` that match this string will be returned. This also                    // 18135
 *     applies to nested object properties.                                                                            // 18136
 *     The predicate can be negated by prefixing the string with `!`.                                                  // 18137
 *                                                                                                                     // 18138
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained                       // 18139
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items                         // 18140
 *     which have property `name` containing "M" and property `phone` containing "1". A special                        // 18141
 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any                                // 18142
 *     property of the object or its nested object properties. That's equivalent to the simple                         // 18143
 *     substring match with a `string` as described above. The predicate can be negated by prefixing                   // 18144
 *     the string with `!`.                                                                                            // 18145
 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`                   // 18146
 *     not containing "M".                                                                                             // 18147
 *                                                                                                                     // 18148
 *     Note that a named property will match properties on the same level only, while the special                      // 18149
 *     `$` property will match properties on the same level or deeper. E.g. an array item like                         // 18150
 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but                         // 18151
 *     **will** be matched by `{$: 'John'}`.                                                                           // 18152
 *                                                                                                                     // 18153
 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.                   // 18154
 *     The function is called for each element of the array, with the element, its index, and                          // 18155
 *     the entire array itself as arguments.                                                                           // 18156
 *                                                                                                                     // 18157
 *     The final result is an array of those elements that the predicate returned true for.                            // 18158
 *                                                                                                                     // 18159
 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in                           // 18160
 *     determining if the expected value (from the filter expression) and actual value (from                           // 18161
 *     the object in the array) should be considered a match.                                                          // 18162
 *                                                                                                                     // 18163
 *   Can be one of:                                                                                                    // 18164
 *                                                                                                                     // 18165
 *   - `function(actual, expected)`:                                                                                   // 18166
 *     The function will be given the object value and the predicate value to compare and                              // 18167
 *     should return true if both values should be considered equal.                                                   // 18168
 *                                                                                                                     // 18169
 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.                // 18170
 *     This is essentially strict comparison of expected and actual.                                                   // 18171
 *                                                                                                                     // 18172
 *   - `false|undefined`: A short hand for a function which will look for a substring match in case                    // 18173
 *     insensitive way.                                                                                                // 18174
 *                                                                                                                     // 18175
 *     Primitive values are converted to strings. Objects are not compared against primitives,                         // 18176
 *     unless they have a custom `toString` method (e.g. `Date` objects).                                              // 18177
 *                                                                                                                     // 18178
 * @example                                                                                                            // 18179
   <example>                                                                                                           // 18180
     <file name="index.html">                                                                                          // 18181
       <div ng-init="friends = [{name:'John', phone:'555-1276'},                                                       // 18182
                                {name:'Mary', phone:'800-BIG-MARY'},                                                   // 18183
                                {name:'Mike', phone:'555-4321'},                                                       // 18184
                                {name:'Adam', phone:'555-5678'},                                                       // 18185
                                {name:'Julie', phone:'555-8765'},                                                      // 18186
                                {name:'Juliette', phone:'555-5678'}]"></div>                                           // 18187
                                                                                                                       // 18188
       <label>Search: <input ng-model="searchText"></label>                                                            // 18189
       <table id="searchTextResults">                                                                                  // 18190
         <tr><th>Name</th><th>Phone</th></tr>                                                                          // 18191
         <tr ng-repeat="friend in friends | filter:searchText">                                                        // 18192
           <td>{{friend.name}}</td>                                                                                    // 18193
           <td>{{friend.phone}}</td>                                                                                   // 18194
         </tr>                                                                                                         // 18195
       </table>                                                                                                        // 18196
       <hr>                                                                                                            // 18197
       <label>Any: <input ng-model="search.$"></label> <br>                                                            // 18198
       <label>Name only <input ng-model="search.name"></label><br>                                                     // 18199
       <label>Phone only <input ng-model="search.phone"></label><br>                                                   // 18200
       <label>Equality <input type="checkbox" ng-model="strict"></label><br>                                           // 18201
       <table id="searchObjResults">                                                                                   // 18202
         <tr><th>Name</th><th>Phone</th></tr>                                                                          // 18203
         <tr ng-repeat="friendObj in friends | filter:search:strict">                                                  // 18204
           <td>{{friendObj.name}}</td>                                                                                 // 18205
           <td>{{friendObj.phone}}</td>                                                                                // 18206
         </tr>                                                                                                         // 18207
       </table>                                                                                                        // 18208
     </file>                                                                                                           // 18209
     <file name="protractor.js" type="protractor">                                                                     // 18210
       var expectFriendNames = function(expectedNames, key) {                                                          // 18211
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {                      // 18212
           arr.forEach(function(wd, i) {                                                                               // 18213
             expect(wd.getText()).toMatch(expectedNames[i]);                                                           // 18214
           });                                                                                                         // 18215
         });                                                                                                           // 18216
       };                                                                                                              // 18217
                                                                                                                       // 18218
       it('should search across all fields when filtering with a string', function() {                                 // 18219
         var searchText = element(by.model('searchText'));                                                             // 18220
         searchText.clear();                                                                                           // 18221
         searchText.sendKeys('m');                                                                                     // 18222
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');                                                        // 18223
                                                                                                                       // 18224
         searchText.clear();                                                                                           // 18225
         searchText.sendKeys('76');                                                                                    // 18226
         expectFriendNames(['John', 'Julie'], 'friend');                                                               // 18227
       });                                                                                                             // 18228
                                                                                                                       // 18229
       it('should search in specific fields when filtering with a predicate object', function() {                      // 18230
         var searchAny = element(by.model('search.$'));                                                                // 18231
         searchAny.clear();                                                                                            // 18232
         searchAny.sendKeys('i');                                                                                      // 18233
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');                                        // 18234
       });                                                                                                             // 18235
       it('should use a equal comparison when comparator is true', function() {                                        // 18236
         var searchName = element(by.model('search.name'));                                                            // 18237
         var strict = element(by.model('strict'));                                                                     // 18238
         searchName.clear();                                                                                           // 18239
         searchName.sendKeys('Julie');                                                                                 // 18240
         strict.click();                                                                                               // 18241
         expectFriendNames(['Julie'], 'friendObj');                                                                    // 18242
       });                                                                                                             // 18243
     </file>                                                                                                           // 18244
   </example>                                                                                                          // 18245
 */                                                                                                                    // 18246
function filterFilter() {                                                                                              // 18247
  return function(array, expression, comparator) {                                                                     // 18248
    if (!isArrayLike(array)) {                                                                                         // 18249
      if (array == null) {                                                                                             // 18250
        return array;                                                                                                  // 18251
      } else {                                                                                                         // 18252
        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);                                 // 18253
      }                                                                                                                // 18254
    }                                                                                                                  // 18255
                                                                                                                       // 18256
    var expressionType = getTypeForFilter(expression);                                                                 // 18257
    var predicateFn;                                                                                                   // 18258
    var matchAgainstAnyProp;                                                                                           // 18259
                                                                                                                       // 18260
    switch (expressionType) {                                                                                          // 18261
      case 'function':                                                                                                 // 18262
        predicateFn = expression;                                                                                      // 18263
        break;                                                                                                         // 18264
      case 'boolean':                                                                                                  // 18265
      case 'null':                                                                                                     // 18266
      case 'number':                                                                                                   // 18267
      case 'string':                                                                                                   // 18268
        matchAgainstAnyProp = true;                                                                                    // 18269
        //jshint -W086                                                                                                 // 18270
      case 'object':                                                                                                   // 18271
        //jshint +W086                                                                                                 // 18272
        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);                                  // 18273
        break;                                                                                                         // 18274
      default:                                                                                                         // 18275
        return array;                                                                                                  // 18276
    }                                                                                                                  // 18277
                                                                                                                       // 18278
    return Array.prototype.filter.call(array, predicateFn);                                                            // 18279
  };                                                                                                                   // 18280
}                                                                                                                      // 18281
                                                                                                                       // 18282
// Helper functions for `filterFilter`                                                                                 // 18283
function createPredicateFn(expression, comparator, matchAgainstAnyProp) {                                              // 18284
  var shouldMatchPrimitives = isObject(expression) && ('$' in expression);                                             // 18285
  var predicateFn;                                                                                                     // 18286
                                                                                                                       // 18287
  if (comparator === true) {                                                                                           // 18288
    comparator = equals;                                                                                               // 18289
  } else if (!isFunction(comparator)) {                                                                                // 18290
    comparator = function(actual, expected) {                                                                          // 18291
      if (isUndefined(actual)) {                                                                                       // 18292
        // No substring matching against `undefined`                                                                   // 18293
        return false;                                                                                                  // 18294
      }                                                                                                                // 18295
      if ((actual === null) || (expected === null)) {                                                                  // 18296
        // No substring matching against `null`; only match against `null`                                             // 18297
        return actual === expected;                                                                                    // 18298
      }                                                                                                                // 18299
      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {                                    // 18300
        // Should not compare primitives against objects, unless they have custom `toString` method                    // 18301
        return false;                                                                                                  // 18302
      }                                                                                                                // 18303
                                                                                                                       // 18304
      actual = lowercase('' + actual);                                                                                 // 18305
      expected = lowercase('' + expected);                                                                             // 18306
      return actual.indexOf(expected) !== -1;                                                                          // 18307
    };                                                                                                                 // 18308
  }                                                                                                                    // 18309
                                                                                                                       // 18310
  predicateFn = function(item) {                                                                                       // 18311
    if (shouldMatchPrimitives && !isObject(item)) {                                                                    // 18312
      return deepCompare(item, expression.$, comparator, false);                                                       // 18313
    }                                                                                                                  // 18314
    return deepCompare(item, expression, comparator, matchAgainstAnyProp);                                             // 18315
  };                                                                                                                   // 18316
                                                                                                                       // 18317
  return predicateFn;                                                                                                  // 18318
}                                                                                                                      // 18319
                                                                                                                       // 18320
function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {                        // 18321
  var actualType = getTypeForFilter(actual);                                                                           // 18322
  var expectedType = getTypeForFilter(expected);                                                                       // 18323
                                                                                                                       // 18324
  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {                                                   // 18325
    return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);                               // 18326
  } else if (isArray(actual)) {                                                                                        // 18327
    // In case `actual` is an array, consider it a match                                                               // 18328
    // if ANY of it's items matches `expected`                                                                         // 18329
    return actual.some(function(item) {                                                                                // 18330
      return deepCompare(item, expected, comparator, matchAgainstAnyProp);                                             // 18331
    });                                                                                                                // 18332
  }                                                                                                                    // 18333
                                                                                                                       // 18334
  switch (actualType) {                                                                                                // 18335
    case 'object':                                                                                                     // 18336
      var key;                                                                                                         // 18337
      if (matchAgainstAnyProp) {                                                                                       // 18338
        for (key in actual) {                                                                                          // 18339
          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {                       // 18340
            return true;                                                                                               // 18341
          }                                                                                                            // 18342
        }                                                                                                              // 18343
        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);                        // 18344
      } else if (expectedType === 'object') {                                                                          // 18345
        for (key in expected) {                                                                                        // 18346
          var expectedVal = expected[key];                                                                             // 18347
          if (isFunction(expectedVal) || isUndefined(expectedVal)) {                                                   // 18348
            continue;                                                                                                  // 18349
          }                                                                                                            // 18350
                                                                                                                       // 18351
          var matchAnyProperty = key === '$';                                                                          // 18352
          var actualVal = matchAnyProperty ? actual : actual[key];                                                     // 18353
          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {                  // 18354
            return false;                                                                                              // 18355
          }                                                                                                            // 18356
        }                                                                                                              // 18357
        return true;                                                                                                   // 18358
      } else {                                                                                                         // 18359
        return comparator(actual, expected);                                                                           // 18360
      }                                                                                                                // 18361
      break;                                                                                                           // 18362
    case 'function':                                                                                                   // 18363
      return false;                                                                                                    // 18364
    default:                                                                                                           // 18365
      return comparator(actual, expected);                                                                             // 18366
  }                                                                                                                    // 18367
}                                                                                                                      // 18368
                                                                                                                       // 18369
// Used for easily differentiating between `null` and actual `object`                                                  // 18370
function getTypeForFilter(val) {                                                                                       // 18371
  return (val === null) ? 'null' : typeof val;                                                                         // 18372
}                                                                                                                      // 18373
                                                                                                                       // 18374
/**                                                                                                                    // 18375
 * @ngdoc filter                                                                                                       // 18376
 * @name currency                                                                                                      // 18377
 * @kind function                                                                                                      // 18378
 *                                                                                                                     // 18379
 * @description                                                                                                        // 18380
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default                         // 18381
 * symbol for current locale is used.                                                                                  // 18382
 *                                                                                                                     // 18383
 * @param {number} amount Input to filter.                                                                             // 18384
 * @param {string=} symbol Currency symbol or identifier to be displayed.                                              // 18385
 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
 * @returns {string} Formatted number.                                                                                 // 18387
 *                                                                                                                     // 18388
 *                                                                                                                     // 18389
 * @example                                                                                                            // 18390
   <example module="currencyExample">                                                                                  // 18391
     <file name="index.html">                                                                                          // 18392
       <script>                                                                                                        // 18393
         angular.module('currencyExample', [])                                                                         // 18394
           .controller('ExampleController', ['$scope', function($scope) {                                              // 18395
             $scope.amount = 1234.56;                                                                                  // 18396
           }]);                                                                                                        // 18397
       </script>                                                                                                       // 18398
       <div ng-controller="ExampleController">                                                                         // 18399
         <input type="number" ng-model="amount" aria-label="amount"> <br>                                              // 18400
         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>                     // 18401
         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>             // 18402
         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>                      // 18403
       </div>                                                                                                          // 18404
     </file>                                                                                                           // 18405
     <file name="protractor.js" type="protractor">                                                                     // 18406
       it('should init with 1234.56', function() {                                                                     // 18407
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');                                       // 18408
         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');                                     // 18409
         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');                                  // 18410
       });                                                                                                             // 18411
       it('should update', function() {                                                                                // 18412
         if (browser.params.browser == 'safari') {                                                                     // 18413
           // Safari does not understand the minus key. See                                                            // 18414
           // https://github.com/angular/protractor/issues/481                                                         // 18415
           return;                                                                                                     // 18416
         }                                                                                                             // 18417
         element(by.model('amount')).clear();                                                                          // 18418
         element(by.model('amount')).sendKeys('-1234');                                                                // 18419
         expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');                                     // 18420
         expect(element(by.id('currency-custom')).getText()).toBe('(USD$1,234.00)');                                   // 18421
         expect(element(by.id('currency-no-fractions')).getText()).toBe('(USD$1,234)');                                // 18422
       });                                                                                                             // 18423
     </file>                                                                                                           // 18424
   </example>                                                                                                          // 18425
 */                                                                                                                    // 18426
currencyFilter.$inject = ['$locale'];                                                                                  // 18427
function currencyFilter($locale) {                                                                                     // 18428
  var formats = $locale.NUMBER_FORMATS;                                                                                // 18429
  return function(amount, currencySymbol, fractionSize) {                                                              // 18430
    if (isUndefined(currencySymbol)) {                                                                                 // 18431
      currencySymbol = formats.CURRENCY_SYM;                                                                           // 18432
    }                                                                                                                  // 18433
                                                                                                                       // 18434
    if (isUndefined(fractionSize)) {                                                                                   // 18435
      fractionSize = formats.PATTERNS[1].maxFrac;                                                                      // 18436
    }                                                                                                                  // 18437
                                                                                                                       // 18438
    // if null or undefined pass it through                                                                            // 18439
    return (amount == null)                                                                                            // 18440
        ? amount                                                                                                       // 18441
        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).             // 18442
            replace(/\u00A4/g, currencySymbol);                                                                        // 18443
  };                                                                                                                   // 18444
}                                                                                                                      // 18445
                                                                                                                       // 18446
/**                                                                                                                    // 18447
 * @ngdoc filter                                                                                                       // 18448
 * @name number                                                                                                        // 18449
 * @kind function                                                                                                      // 18450
 *                                                                                                                     // 18451
 * @description                                                                                                        // 18452
 * Formats a number as text.                                                                                           // 18453
 *                                                                                                                     // 18454
 * If the input is null or undefined, it will just be returned.                                                        // 18455
 * If the input is infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.                                  // 18456
 * If the input is not a number an empty string is returned.                                                           // 18457
 *                                                                                                                     // 18458
 *                                                                                                                     // 18459
 * @param {number|string} number Number to format.                                                                     // 18460
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.                             // 18461
 * If this is not provided then the fraction size is computed from the current locale's number                         // 18462
 * formatting pattern. In the case of the default locale, it will be 3.                                                // 18463
 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.                          // 18464
 *                                                                                                                     // 18465
 * @example                                                                                                            // 18466
   <example module="numberFilterExample">                                                                              // 18467
     <file name="index.html">                                                                                          // 18468
       <script>                                                                                                        // 18469
         angular.module('numberFilterExample', [])                                                                     // 18470
           .controller('ExampleController', ['$scope', function($scope) {                                              // 18471
             $scope.val = 1234.56789;                                                                                  // 18472
           }]);                                                                                                        // 18473
       </script>                                                                                                       // 18474
       <div ng-controller="ExampleController">                                                                         // 18475
         <label>Enter number: <input ng-model='val'></label><br>                                                       // 18476
         Default formatting: <span id='number-default'>{{val | number}}</span><br>                                     // 18477
         No fractions: <span>{{val | number:0}}</span><br>                                                             // 18478
         Negative number: <span>{{-val | number:4}}</span>                                                             // 18479
       </div>                                                                                                          // 18480
     </file>                                                                                                           // 18481
     <file name="protractor.js" type="protractor">                                                                     // 18482
       it('should format numbers', function() {                                                                        // 18483
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');                                         // 18484
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');                                        // 18485
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');                                 // 18486
       });                                                                                                             // 18487
                                                                                                                       // 18488
       it('should update', function() {                                                                                // 18489
         element(by.model('val')).clear();                                                                             // 18490
         element(by.model('val')).sendKeys('3374.333');                                                                // 18491
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');                                         // 18492
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');                                        // 18493
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');                                 // 18494
      });                                                                                                              // 18495
     </file>                                                                                                           // 18496
   </example>                                                                                                          // 18497
 */                                                                                                                    // 18498
                                                                                                                       // 18499
                                                                                                                       // 18500
numberFilter.$inject = ['$locale'];                                                                                    // 18501
function numberFilter($locale) {                                                                                       // 18502
  var formats = $locale.NUMBER_FORMATS;                                                                                // 18503
  return function(number, fractionSize) {                                                                              // 18504
                                                                                                                       // 18505
    // if null or undefined pass it through                                                                            // 18506
    return (number == null)                                                                                            // 18507
        ? number                                                                                                       // 18508
        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,                            // 18509
                       fractionSize);                                                                                  // 18510
  };                                                                                                                   // 18511
}                                                                                                                      // 18512
                                                                                                                       // 18513
var DECIMAL_SEP = '.';                                                                                                 // 18514
function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {                                           // 18515
  if (isObject(number)) return '';                                                                                     // 18516
                                                                                                                       // 18517
  var isNegative = number < 0;                                                                                         // 18518
  number = Math.abs(number);                                                                                           // 18519
                                                                                                                       // 18520
  var isInfinity = number === Infinity;                                                                                // 18521
  if (!isInfinity && !isFinite(number)) return '';                                                                     // 18522
                                                                                                                       // 18523
  var numStr = number + '',                                                                                            // 18524
      formatedText = '',                                                                                               // 18525
      hasExponent = false,                                                                                             // 18526
      parts = [];                                                                                                      // 18527
                                                                                                                       // 18528
  if (isInfinity) formatedText = '\u221e';                                                                             // 18529
                                                                                                                       // 18530
  if (!isInfinity && numStr.indexOf('e') !== -1) {                                                                     // 18531
    var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);                                                                   // 18532
    if (match && match[2] == '-' && match[3] > fractionSize + 1) {                                                     // 18533
      number = 0;                                                                                                      // 18534
    } else {                                                                                                           // 18535
      formatedText = numStr;                                                                                           // 18536
      hasExponent = true;                                                                                              // 18537
    }                                                                                                                  // 18538
  }                                                                                                                    // 18539
                                                                                                                       // 18540
  if (!isInfinity && !hasExponent) {                                                                                   // 18541
    var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;                                                     // 18542
                                                                                                                       // 18543
    // determine fractionSize if it is not specified                                                                   // 18544
    if (isUndefined(fractionSize)) {                                                                                   // 18545
      fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);                                // 18546
    }                                                                                                                  // 18547
                                                                                                                       // 18548
    // safely round numbers in JS without hitting imprecisions of floating-point arithmetics                           // 18549
    // inspired by:                                                                                                    // 18550
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round                     // 18551
    number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);                // 18552
                                                                                                                       // 18553
    var fraction = ('' + number).split(DECIMAL_SEP);                                                                   // 18554
    var whole = fraction[0];                                                                                           // 18555
    fraction = fraction[1] || '';                                                                                      // 18556
                                                                                                                       // 18557
    var i, pos = 0,                                                                                                    // 18558
        lgroup = pattern.lgSize,                                                                                       // 18559
        group = pattern.gSize;                                                                                         // 18560
                                                                                                                       // 18561
    if (whole.length >= (lgroup + group)) {                                                                            // 18562
      pos = whole.length - lgroup;                                                                                     // 18563
      for (i = 0; i < pos; i++) {                                                                                      // 18564
        if ((pos - i) % group === 0 && i !== 0) {                                                                      // 18565
          formatedText += groupSep;                                                                                    // 18566
        }                                                                                                              // 18567
        formatedText += whole.charAt(i);                                                                               // 18568
      }                                                                                                                // 18569
    }                                                                                                                  // 18570
                                                                                                                       // 18571
    for (i = pos; i < whole.length; i++) {                                                                             // 18572
      if ((whole.length - i) % lgroup === 0 && i !== 0) {                                                              // 18573
        formatedText += groupSep;                                                                                      // 18574
      }                                                                                                                // 18575
      formatedText += whole.charAt(i);                                                                                 // 18576
    }                                                                                                                  // 18577
                                                                                                                       // 18578
    // format fraction part.                                                                                           // 18579
    while (fraction.length < fractionSize) {                                                                           // 18580
      fraction += '0';                                                                                                 // 18581
    }                                                                                                                  // 18582
                                                                                                                       // 18583
    if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);           // 18584
  } else {                                                                                                             // 18585
    if (fractionSize > 0 && number < 1) {                                                                              // 18586
      formatedText = number.toFixed(fractionSize);                                                                     // 18587
      number = parseFloat(formatedText);                                                                               // 18588
    }                                                                                                                  // 18589
  }                                                                                                                    // 18590
                                                                                                                       // 18591
  if (number === 0) {                                                                                                  // 18592
    isNegative = false;                                                                                                // 18593
  }                                                                                                                    // 18594
                                                                                                                       // 18595
  parts.push(isNegative ? pattern.negPre : pattern.posPre,                                                             // 18596
             formatedText,                                                                                             // 18597
             isNegative ? pattern.negSuf : pattern.posSuf);                                                            // 18598
  return parts.join('');                                                                                               // 18599
}                                                                                                                      // 18600
                                                                                                                       // 18601
function padNumber(num, digits, trim) {                                                                                // 18602
  var neg = '';                                                                                                        // 18603
  if (num < 0) {                                                                                                       // 18604
    neg =  '-';                                                                                                        // 18605
    num = -num;                                                                                                        // 18606
  }                                                                                                                    // 18607
  num = '' + num;                                                                                                      // 18608
  while (num.length < digits) num = '0' + num;                                                                         // 18609
  if (trim) {                                                                                                          // 18610
    num = num.substr(num.length - digits);                                                                             // 18611
  }                                                                                                                    // 18612
  return neg + num;                                                                                                    // 18613
}                                                                                                                      // 18614
                                                                                                                       // 18615
                                                                                                                       // 18616
function dateGetter(name, size, offset, trim) {                                                                        // 18617
  offset = offset || 0;                                                                                                // 18618
  return function(date) {                                                                                              // 18619
    var value = date['get' + name]();                                                                                  // 18620
    if (offset > 0 || value > -offset) {                                                                               // 18621
      value += offset;                                                                                                 // 18622
    }                                                                                                                  // 18623
    if (value === 0 && offset == -12) value = 12;                                                                      // 18624
    return padNumber(value, size, trim);                                                                               // 18625
  };                                                                                                                   // 18626
}                                                                                                                      // 18627
                                                                                                                       // 18628
function dateStrGetter(name, shortForm) {                                                                              // 18629
  return function(date, formats) {                                                                                     // 18630
    var value = date['get' + name]();                                                                                  // 18631
    var get = uppercase(shortForm ? ('SHORT' + name) : name);                                                          // 18632
                                                                                                                       // 18633
    return formats[get][value];                                                                                        // 18634
  };                                                                                                                   // 18635
}                                                                                                                      // 18636
                                                                                                                       // 18637
function timeZoneGetter(date, formats, offset) {                                                                       // 18638
  var zone = -1 * offset;                                                                                              // 18639
  var paddedZone = (zone >= 0) ? "+" : "";                                                                             // 18640
                                                                                                                       // 18641
  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +                                           // 18642
                padNumber(Math.abs(zone % 60), 2);                                                                     // 18643
                                                                                                                       // 18644
  return paddedZone;                                                                                                   // 18645
}                                                                                                                      // 18646
                                                                                                                       // 18647
function getFirstThursdayOfYear(year) {                                                                                // 18648
    // 0 = index of January                                                                                            // 18649
    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();                                                            // 18650
    // 4 = index of Thursday (+1 to account for 1st = 5)                                                               // 18651
    // 11 = index of *next* Thursday (+1 account for 1st = 12)                                                         // 18652
    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);                                   // 18653
}                                                                                                                      // 18654
                                                                                                                       // 18655
function getThursdayThisWeek(datetime) {                                                                               // 18656
    return new Date(datetime.getFullYear(), datetime.getMonth(),                                                       // 18657
      // 4 = index of Thursday                                                                                         // 18658
      datetime.getDate() + (4 - datetime.getDay()));                                                                   // 18659
}                                                                                                                      // 18660
                                                                                                                       // 18661
function weekGetter(size) {                                                                                            // 18662
   return function(date) {                                                                                             // 18663
      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),                                                     // 18664
         thisThurs = getThursdayThisWeek(date);                                                                        // 18665
                                                                                                                       // 18666
      var diff = +thisThurs - +firstThurs,                                                                             // 18667
         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week                                               // 18668
                                                                                                                       // 18669
      return padNumber(result, size);                                                                                  // 18670
   };                                                                                                                  // 18671
}                                                                                                                      // 18672
                                                                                                                       // 18673
function ampmGetter(date, formats) {                                                                                   // 18674
  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];                                                   // 18675
}                                                                                                                      // 18676
                                                                                                                       // 18677
function eraGetter(date, formats) {                                                                                    // 18678
  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];                                                  // 18679
}                                                                                                                      // 18680
                                                                                                                       // 18681
function longEraGetter(date, formats) {                                                                                // 18682
  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];                                          // 18683
}                                                                                                                      // 18684
                                                                                                                       // 18685
var DATE_FORMATS = {                                                                                                   // 18686
  yyyy: dateGetter('FullYear', 4),                                                                                     // 18687
    yy: dateGetter('FullYear', 2, 0, true),                                                                            // 18688
     y: dateGetter('FullYear', 1),                                                                                     // 18689
  MMMM: dateStrGetter('Month'),                                                                                        // 18690
   MMM: dateStrGetter('Month', true),                                                                                  // 18691
    MM: dateGetter('Month', 2, 1),                                                                                     // 18692
     M: dateGetter('Month', 1, 1),                                                                                     // 18693
    dd: dateGetter('Date', 2),                                                                                         // 18694
     d: dateGetter('Date', 1),                                                                                         // 18695
    HH: dateGetter('Hours', 2),                                                                                        // 18696
     H: dateGetter('Hours', 1),                                                                                        // 18697
    hh: dateGetter('Hours', 2, -12),                                                                                   // 18698
     h: dateGetter('Hours', 1, -12),                                                                                   // 18699
    mm: dateGetter('Minutes', 2),                                                                                      // 18700
     m: dateGetter('Minutes', 1),                                                                                      // 18701
    ss: dateGetter('Seconds', 2),                                                                                      // 18702
     s: dateGetter('Seconds', 1),                                                                                      // 18703
     // while ISO 8601 requires fractions to be prefixed with `.` or `,`                                               // 18704
     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions       // 18705
   sss: dateGetter('Milliseconds', 3),                                                                                 // 18706
  EEEE: dateStrGetter('Day'),                                                                                          // 18707
   EEE: dateStrGetter('Day', true),                                                                                    // 18708
     a: ampmGetter,                                                                                                    // 18709
     Z: timeZoneGetter,                                                                                                // 18710
    ww: weekGetter(2),                                                                                                 // 18711
     w: weekGetter(1),                                                                                                 // 18712
     G: eraGetter,                                                                                                     // 18713
     GG: eraGetter,                                                                                                    // 18714
     GGG: eraGetter,                                                                                                   // 18715
     GGGG: longEraGetter                                                                                               // 18716
};                                                                                                                     // 18717
                                                                                                                       // 18718
var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,       // 18719
    NUMBER_STRING = /^\-?\d+$/;                                                                                        // 18720
                                                                                                                       // 18721
/**                                                                                                                    // 18722
 * @ngdoc filter                                                                                                       // 18723
 * @name date                                                                                                          // 18724
 * @kind function                                                                                                      // 18725
 *                                                                                                                     // 18726
 * @description                                                                                                        // 18727
 *   Formats `date` to a string based on the requested `format`.                                                       // 18728
 *                                                                                                                     // 18729
 *   `format` string can be composed of the following elements:                                                        // 18730
 *                                                                                                                     // 18731
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)                                   // 18732
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)                     // 18733
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)                                          // 18734
 *   * `'MMMM'`: Month in year (January-December)                                                                      // 18735
 *   * `'MMM'`: Month in year (Jan-Dec)                                                                                // 18736
 *   * `'MM'`: Month in year, padded (01-12)                                                                           // 18737
 *   * `'M'`: Month in year (1-12)                                                                                     // 18738
 *   * `'dd'`: Day in month, padded (01-31)                                                                            // 18739
 *   * `'d'`: Day in month (1-31)                                                                                      // 18740
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)                                                                         // 18741
 *   * `'EEE'`: Day in Week, (Sun-Sat)                                                                                 // 18742
 *   * `'HH'`: Hour in day, padded (00-23)                                                                             // 18743
 *   * `'H'`: Hour in day (0-23)                                                                                       // 18744
 *   * `'hh'`: Hour in AM/PM, padded (01-12)                                                                           // 18745
 *   * `'h'`: Hour in AM/PM, (1-12)                                                                                    // 18746
 *   * `'mm'`: Minute in hour, padded (00-59)                                                                          // 18747
 *   * `'m'`: Minute in hour (0-59)                                                                                    // 18748
 *   * `'ss'`: Second in minute, padded (00-59)                                                                        // 18749
 *   * `'s'`: Second in minute (0-59)                                                                                  // 18750
 *   * `'sss'`: Millisecond in second, padded (000-999)                                                                // 18751
 *   * `'a'`: AM/PM marker                                                                                             // 18752
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)                                      // 18753
 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year                   // 18754
 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year                              // 18755
 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')                                      // 18756
 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')                                                  // 18757
 *                                                                                                                     // 18758
 *   `format` string can also be one of the following predefined                                                       // 18759
 *   {@link guide/i18n localizable formats}:                                                                           // 18760
 *                                                                                                                     // 18761
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale                                               // 18762
 *     (e.g. Sep 3, 2010 12:05:08 PM)                                                                                  // 18763
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)                             // 18764
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale                                               // 18765
 *     (e.g. Friday, September 3, 2010)                                                                                // 18766
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)                            // 18767
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)                                 // 18768
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)                                          // 18769
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)                                 // 18770
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)                                        // 18771
 *                                                                                                                     // 18772
 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.      // 18773
 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence     // 18774
 *   (e.g. `"h 'o''clock'"`).                                                                                          // 18775
 *                                                                                                                     // 18776
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or                    // 18777
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its                       // 18778
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is                      // 18779
 *    specified in the string input, the time is considered to be in the local timezone.                               // 18780
 * @param {string=} format Formatting rules (see Description). If not specified,                                       // 18781
 *    `mediumDate` is used.                                                                                            // 18782
 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the                        // 18783
 *    continental US time zone abbreviations, but for general use, use a time zone offset, for                         // 18784
 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)                                          // 18785
 *    If not specified, the timezone of the browser will be used.                                                      // 18786
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.                          // 18787
 *                                                                                                                     // 18788
 * @example                                                                                                            // 18789
   <example>                                                                                                           // 18790
     <file name="index.html">                                                                                          // 18791
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:                                                 // 18792
           <span>{{1288323623006 | date:'medium'}}</span><br>                                                          // 18793
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:                                  // 18794
          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>                                            // 18795
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:                                     // 18796
          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>                                             // 18797
       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:                                  // 18798
          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>                                          // 18799
     </file>                                                                                                           // 18800
     <file name="protractor.js" type="protractor">                                                                     // 18801
       it('should format date', function() {                                                                           // 18802
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).                                       // 18803
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);                                                      // 18804
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).                        // 18805
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);                                                  // 18806
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).                         // 18807
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);                                                           // 18808
         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).                    // 18809
            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);                                                          // 18810
       });                                                                                                             // 18811
     </file>                                                                                                           // 18812
   </example>                                                                                                          // 18813
 */                                                                                                                    // 18814
dateFilter.$inject = ['$locale'];                                                                                      // 18815
function dateFilter($locale) {                                                                                         // 18816
                                                                                                                       // 18817
                                                                                                                       // 18818
  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
                     // 1        2       3         4          5          6          7          8  9     10      11     // 18820
  function jsonStringToDate(string) {                                                                                  // 18821
    var match;                                                                                                         // 18822
    if (match = string.match(R_ISO8601_STR)) {                                                                         // 18823
      var date = new Date(0),                                                                                          // 18824
          tzHour = 0,                                                                                                  // 18825
          tzMin  = 0,                                                                                                  // 18826
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,                                              // 18827
          timeSetter = match[8] ? date.setUTCHours : date.setHours;                                                    // 18828
                                                                                                                       // 18829
      if (match[9]) {                                                                                                  // 18830
        tzHour = toInt(match[9] + match[10]);                                                                          // 18831
        tzMin = toInt(match[9] + match[11]);                                                                           // 18832
      }                                                                                                                // 18833
      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));                                    // 18834
      var h = toInt(match[4] || 0) - tzHour;                                                                           // 18835
      var m = toInt(match[5] || 0) - tzMin;                                                                            // 18836
      var s = toInt(match[6] || 0);                                                                                    // 18837
      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);                                                  // 18838
      timeSetter.call(date, h, m, s, ms);                                                                              // 18839
      return date;                                                                                                     // 18840
    }                                                                                                                  // 18841
    return string;                                                                                                     // 18842
  }                                                                                                                    // 18843
                                                                                                                       // 18844
                                                                                                                       // 18845
  return function(date, format, timezone) {                                                                            // 18846
    var text = '',                                                                                                     // 18847
        parts = [],                                                                                                    // 18848
        fn, match;                                                                                                     // 18849
                                                                                                                       // 18850
    format = format || 'mediumDate';                                                                                   // 18851
    format = $locale.DATETIME_FORMATS[format] || format;                                                               // 18852
    if (isString(date)) {                                                                                              // 18853
      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);                                          // 18854
    }                                                                                                                  // 18855
                                                                                                                       // 18856
    if (isNumber(date)) {                                                                                              // 18857
      date = new Date(date);                                                                                           // 18858
    }                                                                                                                  // 18859
                                                                                                                       // 18860
    if (!isDate(date) || !isFinite(date.getTime())) {                                                                  // 18861
      return date;                                                                                                     // 18862
    }                                                                                                                  // 18863
                                                                                                                       // 18864
    while (format) {                                                                                                   // 18865
      match = DATE_FORMATS_SPLIT.exec(format);                                                                         // 18866
      if (match) {                                                                                                     // 18867
        parts = concat(parts, match, 1);                                                                               // 18868
        format = parts.pop();                                                                                          // 18869
      } else {                                                                                                         // 18870
        parts.push(format);                                                                                            // 18871
        format = null;                                                                                                 // 18872
      }                                                                                                                // 18873
    }                                                                                                                  // 18874
                                                                                                                       // 18875
    var dateTimezoneOffset = date.getTimezoneOffset();                                                                 // 18876
    if (timezone) {                                                                                                    // 18877
      dateTimezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());                                       // 18878
      date = convertTimezoneToLocal(date, timezone, true);                                                             // 18879
    }                                                                                                                  // 18880
    forEach(parts, function(value) {                                                                                   // 18881
      fn = DATE_FORMATS[value];                                                                                        // 18882
      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)                                              // 18883
                 : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");                                                  // 18884
    });                                                                                                                // 18885
                                                                                                                       // 18886
    return text;                                                                                                       // 18887
  };                                                                                                                   // 18888
}                                                                                                                      // 18889
                                                                                                                       // 18890
                                                                                                                       // 18891
/**                                                                                                                    // 18892
 * @ngdoc filter                                                                                                       // 18893
 * @name json                                                                                                          // 18894
 * @kind function                                                                                                      // 18895
 *                                                                                                                     // 18896
 * @description                                                                                                        // 18897
 *   Allows you to convert a JavaScript object into JSON string.                                                       // 18898
 *                                                                                                                     // 18899
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation                        // 18900
 *   the binding is automatically converted to JSON.                                                                   // 18901
 *                                                                                                                     // 18902
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.                           // 18903
 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.                                // 18904
 * @returns {string} JSON string.                                                                                      // 18905
 *                                                                                                                     // 18906
 *                                                                                                                     // 18907
 * @example                                                                                                            // 18908
   <example>                                                                                                           // 18909
     <file name="index.html">                                                                                          // 18910
       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>                                                   // 18911
       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>                                                  // 18912
     </file>                                                                                                           // 18913
     <file name="protractor.js" type="protractor">                                                                     // 18914
       it('should jsonify filtered objects', function() {                                                              // 18915
         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);                     // 18916
         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);                    // 18917
       });                                                                                                             // 18918
     </file>                                                                                                           // 18919
   </example>                                                                                                          // 18920
 *                                                                                                                     // 18921
 */                                                                                                                    // 18922
function jsonFilter() {                                                                                                // 18923
  return function(object, spacing) {                                                                                   // 18924
    if (isUndefined(spacing)) {                                                                                        // 18925
        spacing = 2;                                                                                                   // 18926
    }                                                                                                                  // 18927
    return toJson(object, spacing);                                                                                    // 18928
  };                                                                                                                   // 18929
}                                                                                                                      // 18930
                                                                                                                       // 18931
                                                                                                                       // 18932
/**                                                                                                                    // 18933
 * @ngdoc filter                                                                                                       // 18934
 * @name lowercase                                                                                                     // 18935
 * @kind function                                                                                                      // 18936
 * @description                                                                                                        // 18937
 * Converts string to lowercase.                                                                                       // 18938
 * @see angular.lowercase                                                                                              // 18939
 */                                                                                                                    // 18940
var lowercaseFilter = valueFn(lowercase);                                                                              // 18941
                                                                                                                       // 18942
                                                                                                                       // 18943
/**                                                                                                                    // 18944
 * @ngdoc filter                                                                                                       // 18945
 * @name uppercase                                                                                                     // 18946
 * @kind function                                                                                                      // 18947
 * @description                                                                                                        // 18948
 * Converts string to uppercase.                                                                                       // 18949
 * @see angular.uppercase                                                                                              // 18950
 */                                                                                                                    // 18951
var uppercaseFilter = valueFn(uppercase);                                                                              // 18952
                                                                                                                       // 18953
/**                                                                                                                    // 18954
 * @ngdoc filter                                                                                                       // 18955
 * @name limitTo                                                                                                       // 18956
 * @kind function                                                                                                      // 18957
 *                                                                                                                     // 18958
 * @description                                                                                                        // 18959
 * Creates a new array or string containing only a specified number of elements. The elements                          // 18960
 * are taken from either the beginning or the end of the source array, string or number, as specified by               // 18961
 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is                           // 18962
 * converted to a string.                                                                                              // 18963
 *                                                                                                                     // 18964
 * @param {Array|string|number} input Source array, string or number to be limited.                                    // 18965
 * @param {string|number} limit The length of the returned array or string. If the `limit` number                      // 18966
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.                  // 18967
 *     If the number is negative, `limit` number  of items from the end of the source array/string                     // 18968
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,                  // 18969
 *     the input will be returned unchanged.                                                                           // 18970
 * @param {(string|number)=} begin Index at which to begin limitation. As a negative index, `begin`                    // 18971
 *     indicates an offset from the end of `input`. Defaults to `0`.                                                   // 18972
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array                       // 18973
 *     had less than `limit` elements.                                                                                 // 18974
 *                                                                                                                     // 18975
 * @example                                                                                                            // 18976
   <example module="limitToExample">                                                                                   // 18977
     <file name="index.html">                                                                                          // 18978
       <script>                                                                                                        // 18979
         angular.module('limitToExample', [])                                                                          // 18980
           .controller('ExampleController', ['$scope', function($scope) {                                              // 18981
             $scope.numbers = [1,2,3,4,5,6,7,8,9];                                                                     // 18982
             $scope.letters = "abcdefghi";                                                                             // 18983
             $scope.longNumber = 2345432342;                                                                           // 18984
             $scope.numLimit = 3;                                                                                      // 18985
             $scope.letterLimit = 3;                                                                                   // 18986
             $scope.longNumberLimit = 3;                                                                               // 18987
           }]);                                                                                                        // 18988
       </script>                                                                                                       // 18989
       <div ng-controller="ExampleController">                                                                         // 18990
         <label>                                                                                                       // 18991
            Limit {{numbers}} to:                                                                                      // 18992
            <input type="number" step="1" ng-model="numLimit">                                                         // 18993
         </label>                                                                                                      // 18994
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>                                                       // 18995
         <label>                                                                                                       // 18996
            Limit {{letters}} to:                                                                                      // 18997
            <input type="number" step="1" ng-model="letterLimit">                                                      // 18998
         </label>                                                                                                      // 18999
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>                                                    // 19000
         <label>                                                                                                       // 19001
            Limit {{longNumber}} to:                                                                                   // 19002
            <input type="number" step="1" ng-model="longNumberLimit">                                                  // 19003
         </label>                                                                                                      // 19004
         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>                                         // 19005
       </div>                                                                                                          // 19006
     </file>                                                                                                           // 19007
     <file name="protractor.js" type="protractor">                                                                     // 19008
       var numLimitInput = element(by.model('numLimit'));                                                              // 19009
       var letterLimitInput = element(by.model('letterLimit'));                                                        // 19010
       var longNumberLimitInput = element(by.model('longNumberLimit'));                                                // 19011
       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));                                         // 19012
       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));                                      // 19013
       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));                            // 19014
                                                                                                                       // 19015
       it('should limit the number array to first three items', function() {                                           // 19016
         expect(numLimitInput.getAttribute('value')).toBe('3');                                                        // 19017
         expect(letterLimitInput.getAttribute('value')).toBe('3');                                                     // 19018
         expect(longNumberLimitInput.getAttribute('value')).toBe('3');                                                 // 19019
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');                                          // 19020
         expect(limitedLetters.getText()).toEqual('Output letters: abc');                                              // 19021
         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');                                       // 19022
       });                                                                                                             // 19023
                                                                                                                       // 19024
       // There is a bug in safari and protractor that doesn't like the minus key                                      // 19025
       // it('should update the output when -3 is entered', function() {                                               // 19026
       //   numLimitInput.clear();                                                                                     // 19027
       //   numLimitInput.sendKeys('-3');                                                                              // 19028
       //   letterLimitInput.clear();                                                                                  // 19029
       //   letterLimitInput.sendKeys('-3');                                                                           // 19030
       //   longNumberLimitInput.clear();                                                                              // 19031
       //   longNumberLimitInput.sendKeys('-3');                                                                       // 19032
       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');                                       // 19033
       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');                                           // 19034
       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');                                    // 19035
       // });                                                                                                          // 19036
                                                                                                                       // 19037
       it('should not exceed the maximum size of input array', function() {                                            // 19038
         numLimitInput.clear();                                                                                        // 19039
         numLimitInput.sendKeys('100');                                                                                // 19040
         letterLimitInput.clear();                                                                                     // 19041
         letterLimitInput.sendKeys('100');                                                                             // 19042
         longNumberLimitInput.clear();                                                                                 // 19043
         longNumberLimitInput.sendKeys('100');                                                                         // 19044
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');                              // 19045
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');                                        // 19046
         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');                                // 19047
       });                                                                                                             // 19048
     </file>                                                                                                           // 19049
   </example>                                                                                                          // 19050
*/                                                                                                                     // 19051
function limitToFilter() {                                                                                             // 19052
  return function(input, limit, begin) {                                                                               // 19053
    if (Math.abs(Number(limit)) === Infinity) {                                                                        // 19054
      limit = Number(limit);                                                                                           // 19055
    } else {                                                                                                           // 19056
      limit = toInt(limit);                                                                                            // 19057
    }                                                                                                                  // 19058
    if (isNaN(limit)) return input;                                                                                    // 19059
                                                                                                                       // 19060
    if (isNumber(input)) input = input.toString();                                                                     // 19061
    if (!isArray(input) && !isString(input)) return input;                                                             // 19062
                                                                                                                       // 19063
    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);                                                               // 19064
    begin = (begin < 0 && begin >= -input.length) ? input.length + begin : begin;                                      // 19065
                                                                                                                       // 19066
    if (limit >= 0) {                                                                                                  // 19067
      return input.slice(begin, begin + limit);                                                                        // 19068
    } else {                                                                                                           // 19069
      if (begin === 0) {                                                                                               // 19070
        return input.slice(limit, input.length);                                                                       // 19071
      } else {                                                                                                         // 19072
        return input.slice(Math.max(0, begin + limit), begin);                                                         // 19073
      }                                                                                                                // 19074
    }                                                                                                                  // 19075
  };                                                                                                                   // 19076
}                                                                                                                      // 19077
                                                                                                                       // 19078
/**                                                                                                                    // 19079
 * @ngdoc filter                                                                                                       // 19080
 * @name orderBy                                                                                                       // 19081
 * @kind function                                                                                                      // 19082
 *                                                                                                                     // 19083
 * @description                                                                                                        // 19084
 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically                              // 19085
 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted                           // 19086
 * as expected, make sure they are actually being saved as numbers and not strings.                                    // 19087
 *                                                                                                                     // 19088
 * @param {Array} array The array to sort.                                                                             // 19089
 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be                              // 19090
 *    used by the comparator to determine the order of elements.                                                       // 19091
 *                                                                                                                     // 19092
 *    Can be one of:                                                                                                   // 19093
 *                                                                                                                     // 19094
 *    - `function`: Getter function. The result of this function will be sorted using the                              // 19095
 *      `<`, `===`, `>` operator.                                                                                      // 19096
 *    - `string`: An Angular expression. The result of this expression is used to compare elements                     // 19097
 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by                      // 19098
 *      3 first characters of a property called `name`). The result of a constant expression                           // 19099
 *      is interpreted as a property name to be used in comparisons (for example `"special name"`                      // 19100
 *      to sort object by the value of their `special name` property). An expression can be                            // 19101
 *      optionally prefixed with `+` or `-` to control ascending or descending sort order                              // 19102
 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array                     // 19103
 *      element itself is used to compare where sorting.                                                               // 19104
 *    - `Array`: An array of function or string predicates. The first predicate in the array                           // 19105
 *      is used for sorting, but when two items are equivalent, the next predicate is used.                            // 19106
 *                                                                                                                     // 19107
 *    If the predicate is missing or empty then it defaults to `'+'`.                                                  // 19108
 *                                                                                                                     // 19109
 * @param {boolean=} reverse Reverse the order of the array.                                                           // 19110
 * @returns {Array} Sorted copy of the source array.                                                                   // 19111
 *                                                                                                                     // 19112
 *                                                                                                                     // 19113
 * @example                                                                                                            // 19114
 * The example below demonstrates a simple ngRepeat, where the data is sorted                                          // 19115
 * by age in descending order (predicate is set to `'-age'`).                                                          // 19116
 * `reverse` is not set, which means it defaults to `false`.                                                           // 19117
   <example module="orderByExample">                                                                                   // 19118
     <file name="index.html">                                                                                          // 19119
       <script>                                                                                                        // 19120
         angular.module('orderByExample', [])                                                                          // 19121
           .controller('ExampleController', ['$scope', function($scope) {                                              // 19122
             $scope.friends =                                                                                          // 19123
                 [{name:'John', phone:'555-1212', age:10},                                                             // 19124
                  {name:'Mary', phone:'555-9876', age:19},                                                             // 19125
                  {name:'Mike', phone:'555-4321', age:21},                                                             // 19126
                  {name:'Adam', phone:'555-5678', age:35},                                                             // 19127
                  {name:'Julie', phone:'555-8765', age:29}];                                                           // 19128
           }]);                                                                                                        // 19129
       </script>                                                                                                       // 19130
       <div ng-controller="ExampleController">                                                                         // 19131
         <table class="friend">                                                                                        // 19132
           <tr>                                                                                                        // 19133
             <th>Name</th>                                                                                             // 19134
             <th>Phone Number</th>                                                                                     // 19135
             <th>Age</th>                                                                                              // 19136
           </tr>                                                                                                       // 19137
           <tr ng-repeat="friend in friends | orderBy:'-age'">                                                         // 19138
             <td>{{friend.name}}</td>                                                                                  // 19139
             <td>{{friend.phone}}</td>                                                                                 // 19140
             <td>{{friend.age}}</td>                                                                                   // 19141
           </tr>                                                                                                       // 19142
         </table>                                                                                                      // 19143
       </div>                                                                                                          // 19144
     </file>                                                                                                           // 19145
   </example>                                                                                                          // 19146
 *                                                                                                                     // 19147
 * The predicate and reverse parameters can be controlled dynamically through scope properties,                        // 19148
 * as shown in the next example.                                                                                       // 19149
 * @example                                                                                                            // 19150
   <example module="orderByExample">                                                                                   // 19151
     <file name="index.html">                                                                                          // 19152
       <script>                                                                                                        // 19153
         angular.module('orderByExample', [])                                                                          // 19154
           .controller('ExampleController', ['$scope', function($scope) {                                              // 19155
             $scope.friends =                                                                                          // 19156
                 [{name:'John', phone:'555-1212', age:10},                                                             // 19157
                  {name:'Mary', phone:'555-9876', age:19},                                                             // 19158
                  {name:'Mike', phone:'555-4321', age:21},                                                             // 19159
                  {name:'Adam', phone:'555-5678', age:35},                                                             // 19160
                  {name:'Julie', phone:'555-8765', age:29}];                                                           // 19161
             $scope.predicate = 'age';                                                                                 // 19162
             $scope.reverse = true;                                                                                    // 19163
             $scope.order = function(predicate) {                                                                      // 19164
               $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;                            // 19165
               $scope.predicate = predicate;                                                                           // 19166
             };                                                                                                        // 19167
           }]);                                                                                                        // 19168
       </script>                                                                                                       // 19169
       <style type="text/css">                                                                                         // 19170
         .sortorder:after {                                                                                            // 19171
           content: '\25b2';                                                                                           // 19172
         }                                                                                                             // 19173
         .sortorder.reverse:after {                                                                                    // 19174
           content: '\25bc';                                                                                           // 19175
         }                                                                                                             // 19176
       </style>                                                                                                        // 19177
       <div ng-controller="ExampleController">                                                                         // 19178
         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>                                           // 19179
         <hr/>                                                                                                         // 19180
         [ <a href="" ng-click="predicate=''">unsorted</a> ]                                                           // 19181
         <table class="friend">                                                                                        // 19182
           <tr>                                                                                                        // 19183
             <th>                                                                                                      // 19184
               <a href="" ng-click="order('name')">Name</a>                                                            // 19185
               <span class="sortorder" ng-show="predicate === 'name'" ng-class="{reverse:reverse}"></span>             // 19186
             </th>                                                                                                     // 19187
             <th>                                                                                                      // 19188
               <a href="" ng-click="order('phone')">Phone Number</a>                                                   // 19189
               <span class="sortorder" ng-show="predicate === 'phone'" ng-class="{reverse:reverse}"></span>            // 19190
             </th>                                                                                                     // 19191
             <th>                                                                                                      // 19192
               <a href="" ng-click="order('age')">Age</a>                                                              // 19193
               <span class="sortorder" ng-show="predicate === 'age'" ng-class="{reverse:reverse}"></span>              // 19194
             </th>                                                                                                     // 19195
           </tr>                                                                                                       // 19196
           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">                                              // 19197
             <td>{{friend.name}}</td>                                                                                  // 19198
             <td>{{friend.phone}}</td>                                                                                 // 19199
             <td>{{friend.age}}</td>                                                                                   // 19200
           </tr>                                                                                                       // 19201
         </table>                                                                                                      // 19202
       </div>                                                                                                          // 19203
     </file>                                                                                                           // 19204
   </example>                                                                                                          // 19205
 *                                                                                                                     // 19206
 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the                      // 19207
 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the                          // 19208
 * desired parameters.                                                                                                 // 19209
 *                                                                                                                     // 19210
 * Example:                                                                                                            // 19211
 *                                                                                                                     // 19212
 * @example                                                                                                            // 19213
  <example module="orderByExample">                                                                                    // 19214
    <file name="index.html">                                                                                           // 19215
      <div ng-controller="ExampleController">                                                                          // 19216
        <table class="friend">                                                                                         // 19217
          <tr>                                                                                                         // 19218
            <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>                                      // 19219
              (<a href="" ng-click="order('-name',false)">^</a>)</th>                                                  // 19220
            <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>                   // 19221
            <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>                               // 19222
          </tr>                                                                                                        // 19223
          <tr ng-repeat="friend in friends">                                                                           // 19224
            <td>{{friend.name}}</td>                                                                                   // 19225
            <td>{{friend.phone}}</td>                                                                                  // 19226
            <td>{{friend.age}}</td>                                                                                    // 19227
          </tr>                                                                                                        // 19228
        </table>                                                                                                       // 19229
      </div>                                                                                                           // 19230
    </file>                                                                                                            // 19231
                                                                                                                       // 19232
    <file name="script.js">                                                                                            // 19233
      angular.module('orderByExample', [])                                                                             // 19234
        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {                             // 19235
          var orderBy = $filter('orderBy');                                                                            // 19236
          $scope.friends = [                                                                                           // 19237
            { name: 'John',    phone: '555-1212',    age: 10 },                                                        // 19238
            { name: 'Mary',    phone: '555-9876',    age: 19 },                                                        // 19239
            { name: 'Mike',    phone: '555-4321',    age: 21 },                                                        // 19240
            { name: 'Adam',    phone: '555-5678',    age: 35 },                                                        // 19241
            { name: 'Julie',   phone: '555-8765',    age: 29 }                                                         // 19242
          ];                                                                                                           // 19243
          $scope.order = function(predicate, reverse) {                                                                // 19244
            $scope.friends = orderBy($scope.friends, predicate, reverse);                                              // 19245
          };                                                                                                           // 19246
          $scope.order('-age',false);                                                                                  // 19247
        }]);                                                                                                           // 19248
    </file>                                                                                                            // 19249
</example>                                                                                                             // 19250
 */                                                                                                                    // 19251
orderByFilter.$inject = ['$parse'];                                                                                    // 19252
function orderByFilter($parse) {                                                                                       // 19253
  return function(array, sortPredicate, reverseOrder) {                                                                // 19254
                                                                                                                       // 19255
    if (!(isArrayLike(array))) return array;                                                                           // 19256
                                                                                                                       // 19257
    if (!isArray(sortPredicate)) { sortPredicate = [sortPredicate]; }                                                  // 19258
    if (sortPredicate.length === 0) { sortPredicate = ['+']; }                                                         // 19259
                                                                                                                       // 19260
    var predicates = processPredicates(sortPredicate, reverseOrder);                                                   // 19261
                                                                                                                       // 19262
    // The next three lines are a version of a Swartzian Transform idiom from Perl                                     // 19263
    // (sometimes called the Decorate-Sort-Undecorate idiom)                                                           // 19264
    // See https://en.wikipedia.org/wiki/Schwartzian_transform                                                         // 19265
    var compareValues = Array.prototype.map.call(array, getComparisonObject);                                          // 19266
    compareValues.sort(doComparison);                                                                                  // 19267
    array = compareValues.map(function(item) { return item.value; });                                                  // 19268
                                                                                                                       // 19269
    return array;                                                                                                      // 19270
                                                                                                                       // 19271
    function getComparisonObject(value, index) {                                                                       // 19272
      return {                                                                                                         // 19273
        value: value,                                                                                                  // 19274
        predicateValues: predicates.map(function(predicate) {                                                          // 19275
          return getPredicateValue(predicate.get(value), index);                                                       // 19276
        })                                                                                                             // 19277
      };                                                                                                               // 19278
    }                                                                                                                  // 19279
                                                                                                                       // 19280
    function doComparison(v1, v2) {                                                                                    // 19281
      var result = 0;                                                                                                  // 19282
      for (var index=0, length = predicates.length; index < length; ++index) {                                         // 19283
        result = compare(v1.predicateValues[index], v2.predicateValues[index]) * predicates[index].descending;         // 19284
        if (result) break;                                                                                             // 19285
      }                                                                                                                // 19286
      return result;                                                                                                   // 19287
    }                                                                                                                  // 19288
  };                                                                                                                   // 19289
                                                                                                                       // 19290
  function processPredicates(sortPredicate, reverseOrder) {                                                            // 19291
    reverseOrder = reverseOrder ? -1 : 1;                                                                              // 19292
    return sortPredicate.map(function(predicate) {                                                                     // 19293
      var descending = 1, get = identity;                                                                              // 19294
                                                                                                                       // 19295
      if (isFunction(predicate)) {                                                                                     // 19296
        get = predicate;                                                                                               // 19297
      } else if (isString(predicate)) {                                                                                // 19298
        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {                                              // 19299
          descending = predicate.charAt(0) == '-' ? -1 : 1;                                                            // 19300
          predicate = predicate.substring(1);                                                                          // 19301
        }                                                                                                              // 19302
        if (predicate !== '') {                                                                                        // 19303
          get = $parse(predicate);                                                                                     // 19304
          if (get.constant) {                                                                                          // 19305
            var key = get();                                                                                           // 19306
            get = function(value) { return value[key]; };                                                              // 19307
          }                                                                                                            // 19308
        }                                                                                                              // 19309
      }                                                                                                                // 19310
      return { get: get, descending: descending * reverseOrder };                                                      // 19311
    });                                                                                                                // 19312
  }                                                                                                                    // 19313
                                                                                                                       // 19314
  function isPrimitive(value) {                                                                                        // 19315
    switch (typeof value) {                                                                                            // 19316
      case 'number': /* falls through */                                                                               // 19317
      case 'boolean': /* falls through */                                                                              // 19318
      case 'string':                                                                                                   // 19319
        return true;                                                                                                   // 19320
      default:                                                                                                         // 19321
        return false;                                                                                                  // 19322
    }                                                                                                                  // 19323
  }                                                                                                                    // 19324
                                                                                                                       // 19325
  function objectValue(value, index) {                                                                                 // 19326
    // If `valueOf` is a valid function use that                                                                       // 19327
    if (typeof value.valueOf === 'function') {                                                                         // 19328
      value = value.valueOf();                                                                                         // 19329
      if (isPrimitive(value)) return value;                                                                            // 19330
    }                                                                                                                  // 19331
    // If `toString` is a valid function and not the one from `Object.prototype` use that                              // 19332
    if (hasCustomToString(value)) {                                                                                    // 19333
      value = value.toString();                                                                                        // 19334
      if (isPrimitive(value)) return value;                                                                            // 19335
    }                                                                                                                  // 19336
    // We have a basic object so we use the position of the object in the collection                                   // 19337
    return index;                                                                                                      // 19338
  }                                                                                                                    // 19339
                                                                                                                       // 19340
  function getPredicateValue(value, index) {                                                                           // 19341
    var type = typeof value;                                                                                           // 19342
    if (value === null) {                                                                                              // 19343
      type = 'string';                                                                                                 // 19344
      value = 'null';                                                                                                  // 19345
    } else if (type === 'string') {                                                                                    // 19346
      value = value.toLowerCase();                                                                                     // 19347
    } else if (type === 'object') {                                                                                    // 19348
      value = objectValue(value, index);                                                                               // 19349
    }                                                                                                                  // 19350
    return { value: value, type: type };                                                                               // 19351
  }                                                                                                                    // 19352
                                                                                                                       // 19353
  function compare(v1, v2) {                                                                                           // 19354
    var result = 0;                                                                                                    // 19355
    if (v1.type === v2.type) {                                                                                         // 19356
      if (v1.value !== v2.value) {                                                                                     // 19357
        result = v1.value < v2.value ? -1 : 1;                                                                         // 19358
      }                                                                                                                // 19359
    } else {                                                                                                           // 19360
      result = v1.type < v2.type ? -1 : 1;                                                                             // 19361
    }                                                                                                                  // 19362
    return result;                                                                                                     // 19363
  }                                                                                                                    // 19364
}                                                                                                                      // 19365
                                                                                                                       // 19366
function ngDirective(directive) {                                                                                      // 19367
  if (isFunction(directive)) {                                                                                         // 19368
    directive = {                                                                                                      // 19369
      link: directive                                                                                                  // 19370
    };                                                                                                                 // 19371
  }                                                                                                                    // 19372
  directive.restrict = directive.restrict || 'AC';                                                                     // 19373
  return valueFn(directive);                                                                                           // 19374
}                                                                                                                      // 19375
                                                                                                                       // 19376
/**                                                                                                                    // 19377
 * @ngdoc directive                                                                                                    // 19378
 * @name a                                                                                                             // 19379
 * @restrict E                                                                                                         // 19380
 *                                                                                                                     // 19381
 * @description                                                                                                        // 19382
 * Modifies the default behavior of the html A tag so that the default action is prevented when                        // 19383
 * the href attribute is empty.                                                                                        // 19384
 *                                                                                                                     // 19385
 * This change permits the easy creation of action links with the `ngClick` directive                                  // 19386
 * without changing the location or causing page reloads, e.g.:                                                        // 19387
 * `<a href="" ng-click="list.addItem()">Add Item</a>`                                                                 // 19388
 */                                                                                                                    // 19389
var htmlAnchorDirective = valueFn({                                                                                    // 19390
  restrict: 'E',                                                                                                       // 19391
  compile: function(element, attr) {                                                                                   // 19392
    if (!attr.href && !attr.xlinkHref) {                                                                               // 19393
      return function(scope, element) {                                                                                // 19394
        // If the linked element is not an anchor tag anymore, do nothing                                              // 19395
        if (element[0].nodeName.toLowerCase() !== 'a') return;                                                         // 19396
                                                                                                                       // 19397
        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.                          // 19398
        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?                              // 19399
                   'xlink:href' : 'href';                                                                              // 19400
        element.on('click', function(event) {                                                                          // 19401
          // if we have no href url, then don't navigate anywhere.                                                     // 19402
          if (!element.attr(href)) {                                                                                   // 19403
            event.preventDefault();                                                                                    // 19404
          }                                                                                                            // 19405
        });                                                                                                            // 19406
      };                                                                                                               // 19407
    }                                                                                                                  // 19408
  }                                                                                                                    // 19409
});                                                                                                                    // 19410
                                                                                                                       // 19411
/**                                                                                                                    // 19412
 * @ngdoc directive                                                                                                    // 19413
 * @name ngHref                                                                                                        // 19414
 * @restrict A                                                                                                         // 19415
 * @priority 99                                                                                                        // 19416
 *                                                                                                                     // 19417
 * @description                                                                                                        // 19418
 * Using Angular markup like `{{hash}}` in an href attribute will                                                      // 19419
 * make the link go to the wrong URL if the user clicks it before                                                      // 19420
 * Angular has a chance to replace the `{{hash}}` markup with its                                                      // 19421
 * value. Until Angular replaces the markup the link will be broken                                                    // 19422
 * and will most likely return a 404 error. The `ngHref` directive                                                     // 19423
 * solves this problem.                                                                                                // 19424
 *                                                                                                                     // 19425
 * The wrong way to write it:                                                                                          // 19426
 * ```html                                                                                                             // 19427
 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>                                                         // 19428
 * ```                                                                                                                 // 19429
 *                                                                                                                     // 19430
 * The correct way to write it:                                                                                        // 19431
 * ```html                                                                                                             // 19432
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>                                                      // 19433
 * ```                                                                                                                 // 19434
 *                                                                                                                     // 19435
 * @element A                                                                                                          // 19436
 * @param {template} ngHref any string which can contain `{{}}` markup.                                                // 19437
 *                                                                                                                     // 19438
 * @example                                                                                                            // 19439
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes                              // 19440
 * in links and their different behaviors:                                                                             // 19441
    <example>                                                                                                          // 19442
      <file name="index.html">                                                                                         // 19443
        <input ng-model="value" /><br />                                                                               // 19444
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />                                 // 19445
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />                              // 19446
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />                                           // 19447
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />                    // 19448
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />                                      // 19449
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)                                            // 19450
      </file>                                                                                                          // 19451
      <file name="protractor.js" type="protractor">                                                                    // 19452
        it('should execute ng-click but not reload when href without value', function() {                              // 19453
          element(by.id('link-1')).click();                                                                            // 19454
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');                                       // 19455
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');                                              // 19456
        });                                                                                                            // 19457
                                                                                                                       // 19458
        it('should execute ng-click but not reload when href empty string', function() {                               // 19459
          element(by.id('link-2')).click();                                                                            // 19460
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');                                       // 19461
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');                                              // 19462
        });                                                                                                            // 19463
                                                                                                                       // 19464
        it('should execute ng-click and change url when ng-href specified', function() {                               // 19465
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);                                     // 19466
                                                                                                                       // 19467
          element(by.id('link-3')).click();                                                                            // 19468
                                                                                                                       // 19469
          // At this point, we navigate away from an Angular page, so we need                                          // 19470
          // to use browser.driver to get the base webdriver.                                                          // 19471
                                                                                                                       // 19472
          browser.wait(function() {                                                                                    // 19473
            return browser.driver.getCurrentUrl().then(function(url) {                                                 // 19474
              return url.match(/\/123$/);                                                                              // 19475
            });                                                                                                        // 19476
          }, 5000, 'page should navigate to /123');                                                                    // 19477
        });                                                                                                            // 19478
                                                                                                                       // 19479
        it('should execute ng-click but not reload when href empty string and name specified', function() {            // 19480
          element(by.id('link-4')).click();                                                                            // 19481
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');                                       // 19482
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');                                              // 19483
        });                                                                                                            // 19484
                                                                                                                       // 19485
        it('should execute ng-click but not reload when no href but name specified', function() {                      // 19486
          element(by.id('link-5')).click();                                                                            // 19487
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');                                       // 19488
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);                                            // 19489
        });                                                                                                            // 19490
                                                                                                                       // 19491
        it('should only change url when only ng-href', function() {                                                    // 19492
          element(by.model('value')).clear();                                                                          // 19493
          element(by.model('value')).sendKeys('6');                                                                    // 19494
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);                                       // 19495
                                                                                                                       // 19496
          element(by.id('link-6')).click();                                                                            // 19497
                                                                                                                       // 19498
          // At this point, we navigate away from an Angular page, so we need                                          // 19499
          // to use browser.driver to get the base webdriver.                                                          // 19500
          browser.wait(function() {                                                                                    // 19501
            return browser.driver.getCurrentUrl().then(function(url) {                                                 // 19502
              return url.match(/\/6$/);                                                                                // 19503
            });                                                                                                        // 19504
          }, 5000, 'page should navigate to /6');                                                                      // 19505
        });                                                                                                            // 19506
      </file>                                                                                                          // 19507
    </example>                                                                                                         // 19508
 */                                                                                                                    // 19509
                                                                                                                       // 19510
/**                                                                                                                    // 19511
 * @ngdoc directive                                                                                                    // 19512
 * @name ngSrc                                                                                                         // 19513
 * @restrict A                                                                                                         // 19514
 * @priority 99                                                                                                        // 19515
 *                                                                                                                     // 19516
 * @description                                                                                                        // 19517
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't                                                   // 19518
 * work right: The browser will fetch from the URL with the literal                                                    // 19519
 * text `{{hash}}` until Angular replaces the expression inside                                                        // 19520
 * `{{hash}}`. The `ngSrc` directive solves this problem.                                                              // 19521
 *                                                                                                                     // 19522
 * The buggy way to write it:                                                                                          // 19523
 * ```html                                                                                                             // 19524
 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>                                              // 19525
 * ```                                                                                                                 // 19526
 *                                                                                                                     // 19527
 * The correct way to write it:                                                                                        // 19528
 * ```html                                                                                                             // 19529
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />                                          // 19530
 * ```                                                                                                                 // 19531
 *                                                                                                                     // 19532
 * @element IMG                                                                                                        // 19533
 * @param {template} ngSrc any string which can contain `{{}}` markup.                                                 // 19534
 */                                                                                                                    // 19535
                                                                                                                       // 19536
/**                                                                                                                    // 19537
 * @ngdoc directive                                                                                                    // 19538
 * @name ngSrcset                                                                                                      // 19539
 * @restrict A                                                                                                         // 19540
 * @priority 99                                                                                                        // 19541
 *                                                                                                                     // 19542
 * @description                                                                                                        // 19543
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't                                                // 19544
 * work right: The browser will fetch from the URL with the literal                                                    // 19545
 * text `{{hash}}` until Angular replaces the expression inside                                                        // 19546
 * `{{hash}}`. The `ngSrcset` directive solves this problem.                                                           // 19547
 *                                                                                                                     // 19548
 * The buggy way to write it:                                                                                          // 19549
 * ```html                                                                                                             // 19550
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>                                        // 19551
 * ```                                                                                                                 // 19552
 *                                                                                                                     // 19553
 * The correct way to write it:                                                                                        // 19554
 * ```html                                                                                                             // 19555
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />                                    // 19556
 * ```                                                                                                                 // 19557
 *                                                                                                                     // 19558
 * @element IMG                                                                                                        // 19559
 * @param {template} ngSrcset any string which can contain `{{}}` markup.                                              // 19560
 */                                                                                                                    // 19561
                                                                                                                       // 19562
/**                                                                                                                    // 19563
 * @ngdoc directive                                                                                                    // 19564
 * @name ngDisabled                                                                                                    // 19565
 * @restrict A                                                                                                         // 19566
 * @priority 100                                                                                                       // 19567
 *                                                                                                                     // 19568
 * @description                                                                                                        // 19569
 *                                                                                                                     // 19570
 * This directive sets the `disabled` attribute on the element if the                                                  // 19571
 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.                                        // 19572
 *                                                                                                                     // 19573
 * A special directive is necessary because we cannot use interpolation inside the `disabled`                          // 19574
 * attribute.  The following example would make the button enabled on Chrome/Firefox                                   // 19575
 * but not on older IEs:                                                                                               // 19576
 *                                                                                                                     // 19577
 * ```html                                                                                                             // 19578
 * <!-- See below for an example of ng-disabled being used correctly -->                                               // 19579
 * <div ng-init="isDisabled = false">                                                                                  // 19580
 *  <button disabled="{{isDisabled}}">Disabled</button>                                                                // 19581
 * </div>                                                                                                              // 19582
 * ```                                                                                                                 // 19583
 *                                                                                                                     // 19584
 * This is because the HTML specification does not require browsers to preserve the values of                          // 19585
 * boolean attributes such as `disabled` (Their presence means true and their absence means false.)                    // 19586
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19587
 * binding information would be lost when the browser removes the attribute.                                           // 19588
 *                                                                                                                     // 19589
 * @example                                                                                                            // 19590
    <example>                                                                                                          // 19591
      <file name="index.html">                                                                                         // 19592
        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>                             // 19593
        <button ng-model="button" ng-disabled="checked">Button</button>                                                // 19594
      </file>                                                                                                          // 19595
      <file name="protractor.js" type="protractor">                                                                    // 19596
        it('should toggle button', function() {                                                                        // 19597
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();                                      // 19598
          element(by.model('checked')).click();                                                                        // 19599
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();                                     // 19600
        });                                                                                                            // 19601
      </file>                                                                                                          // 19602
    </example>                                                                                                         // 19603
 *                                                                                                                     // 19604
 * @element INPUT                                                                                                      // 19605
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,                                // 19606
 *     then the `disabled` attribute will be set on the element                                                        // 19607
 */                                                                                                                    // 19608
                                                                                                                       // 19609
                                                                                                                       // 19610
/**                                                                                                                    // 19611
 * @ngdoc directive                                                                                                    // 19612
 * @name ngChecked                                                                                                     // 19613
 * @restrict A                                                                                                         // 19614
 * @priority 100                                                                                                       // 19615
 *                                                                                                                     // 19616
 * @description                                                                                                        // 19617
 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.                        // 19618
 *                                                                                                                     // 19619
 * Note that this directive should not be used together with {@link ngModel `ngModel`},                                // 19620
 * as this can lead to unexpected behavior.                                                                            // 19621
 *                                                                                                                     // 19622
 * ### Why do we need `ngChecked`?                                                                                     // 19623
 *                                                                                                                     // 19624
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19625
 * such as checked. (Their presence means true and their absence means false.)                                         // 19626
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19627
 * binding information would be lost when the browser removes the attribute.                                           // 19628
 * The `ngChecked` directive solves this problem for the `checked` attribute.                                          // 19629
 * This complementary directive is not removed by the browser and so provides                                          // 19630
 * a permanent reliable place to store the binding information.                                                        // 19631
 * @example                                                                                                            // 19632
    <example>                                                                                                          // 19633
      <file name="index.html">                                                                                         // 19634
        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>                          // 19635
        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">                           // 19636
      </file>                                                                                                          // 19637
      <file name="protractor.js" type="protractor">                                                                    // 19638
        it('should check both checkBoxes', function() {                                                                // 19639
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();                                    // 19640
          element(by.model('master')).click();                                                                         // 19641
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();                                   // 19642
        });                                                                                                            // 19643
      </file>                                                                                                          // 19644
    </example>                                                                                                         // 19645
 *                                                                                                                     // 19646
 * @element INPUT                                                                                                      // 19647
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,                                 // 19648
 *     then the `checked` attribute will be set on the element                                                         // 19649
 */                                                                                                                    // 19650
                                                                                                                       // 19651
                                                                                                                       // 19652
/**                                                                                                                    // 19653
 * @ngdoc directive                                                                                                    // 19654
 * @name ngReadonly                                                                                                    // 19655
 * @restrict A                                                                                                         // 19656
 * @priority 100                                                                                                       // 19657
 *                                                                                                                     // 19658
 * @description                                                                                                        // 19659
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19660
 * such as readonly. (Their presence means true and their absence means false.)                                        // 19661
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19662
 * binding information would be lost when the browser removes the attribute.                                           // 19663
 * The `ngReadonly` directive solves this problem for the `readonly` attribute.                                        // 19664
 * This complementary directive is not removed by the browser and so provides                                          // 19665
 * a permanent reliable place to store the binding information.                                                        // 19666
 * @example                                                                                                            // 19667
    <example>                                                                                                          // 19668
      <file name="index.html">                                                                                         // 19669
        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>                 // 19670
        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />                    // 19671
      </file>                                                                                                          // 19672
      <file name="protractor.js" type="protractor">                                                                    // 19673
        it('should toggle readonly attr', function() {                                                                 // 19674
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();                               // 19675
          element(by.model('checked')).click();                                                                        // 19676
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();                              // 19677
        });                                                                                                            // 19678
      </file>                                                                                                          // 19679
    </example>                                                                                                         // 19680
 *                                                                                                                     // 19681
 * @element INPUT                                                                                                      // 19682
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,                                // 19683
 *     then special attribute "readonly" will be set on the element                                                    // 19684
 */                                                                                                                    // 19685
                                                                                                                       // 19686
                                                                                                                       // 19687
/**                                                                                                                    // 19688
 * @ngdoc directive                                                                                                    // 19689
 * @name ngSelected                                                                                                    // 19690
 * @restrict A                                                                                                         // 19691
 * @priority 100                                                                                                       // 19692
 *                                                                                                                     // 19693
 * @description                                                                                                        // 19694
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19695
 * such as selected. (Their presence means true and their absence means false.)                                        // 19696
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19697
 * binding information would be lost when the browser removes the attribute.                                           // 19698
 * The `ngSelected` directive solves this problem for the `selected` attribute.                                        // 19699
 * This complementary directive is not removed by the browser and so provides                                          // 19700
 * a permanent reliable place to store the binding information.                                                        // 19701
 *                                                                                                                     // 19702
 * @example                                                                                                            // 19703
    <example>                                                                                                          // 19704
      <file name="index.html">                                                                                         // 19705
        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>                            // 19706
        <select aria-label="ngSelected demo">                                                                          // 19707
          <option>Hello!</option>                                                                                      // 19708
          <option id="greet" ng-selected="selected">Greetings!</option>                                                // 19709
        </select>                                                                                                      // 19710
      </file>                                                                                                          // 19711
      <file name="protractor.js" type="protractor">                                                                    // 19712
        it('should select Greetings!', function() {                                                                    // 19713
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();                                        // 19714
          element(by.model('selected')).click();                                                                       // 19715
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();                                       // 19716
        });                                                                                                            // 19717
      </file>                                                                                                          // 19718
    </example>                                                                                                         // 19719
 *                                                                                                                     // 19720
 * @element OPTION                                                                                                     // 19721
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,                                // 19722
 *     then special attribute "selected" will be set on the element                                                    // 19723
 */                                                                                                                    // 19724
                                                                                                                       // 19725
/**                                                                                                                    // 19726
 * @ngdoc directive                                                                                                    // 19727
 * @name ngOpen                                                                                                        // 19728
 * @restrict A                                                                                                         // 19729
 * @priority 100                                                                                                       // 19730
 *                                                                                                                     // 19731
 * @description                                                                                                        // 19732
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19733
 * such as open. (Their presence means true and their absence means false.)                                            // 19734
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19735
 * binding information would be lost when the browser removes the attribute.                                           // 19736
 * The `ngOpen` directive solves this problem for the `open` attribute.                                                // 19737
 * This complementary directive is not removed by the browser and so provides                                          // 19738
 * a permanent reliable place to store the binding information.                                                        // 19739
 * @example                                                                                                            // 19740
     <example>                                                                                                         // 19741
       <file name="index.html">                                                                                        // 19742
         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>                          // 19743
         <details id="details" ng-open="open">                                                                         // 19744
            <summary>Show/Hide me</summary>                                                                            // 19745
         </details>                                                                                                    // 19746
       </file>                                                                                                         // 19747
       <file name="protractor.js" type="protractor">                                                                   // 19748
         it('should toggle open', function() {                                                                         // 19749
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();                                         // 19750
           element(by.model('open')).click();                                                                          // 19751
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();                                        // 19752
         });                                                                                                           // 19753
       </file>                                                                                                         // 19754
     </example>                                                                                                        // 19755
 *                                                                                                                     // 19756
 * @element DETAILS                                                                                                    // 19757
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,                                    // 19758
 *     then special attribute "open" will be set on the element                                                        // 19759
 */                                                                                                                    // 19760
                                                                                                                       // 19761
var ngAttributeAliasDirectives = {};                                                                                   // 19762
                                                                                                                       // 19763
// boolean attrs are evaluated                                                                                         // 19764
forEach(BOOLEAN_ATTR, function(propName, attrName) {                                                                   // 19765
  // binding to multiple is not supported                                                                              // 19766
  if (propName == "multiple") return;                                                                                  // 19767
                                                                                                                       // 19768
  function defaultLinkFn(scope, element, attr) {                                                                       // 19769
    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {                                          // 19770
      attr.$set(attrName, !!value);                                                                                    // 19771
    });                                                                                                                // 19772
  }                                                                                                                    // 19773
                                                                                                                       // 19774
  var normalized = directiveNormalize('ng-' + attrName);                                                               // 19775
  var linkFn = defaultLinkFn;                                                                                          // 19776
                                                                                                                       // 19777
  if (propName === 'checked') {                                                                                        // 19778
    linkFn = function(scope, element, attr) {                                                                          // 19779
      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input                         // 19780
      if (attr.ngModel !== attr[normalized]) {                                                                         // 19781
        defaultLinkFn(scope, element, attr);                                                                           // 19782
      }                                                                                                                // 19783
    };                                                                                                                 // 19784
  }                                                                                                                    // 19785
                                                                                                                       // 19786
  ngAttributeAliasDirectives[normalized] = function() {                                                                // 19787
    return {                                                                                                           // 19788
      restrict: 'A',                                                                                                   // 19789
      priority: 100,                                                                                                   // 19790
      link: linkFn                                                                                                     // 19791
    };                                                                                                                 // 19792
  };                                                                                                                   // 19793
});                                                                                                                    // 19794
                                                                                                                       // 19795
// aliased input attrs are evaluated                                                                                   // 19796
forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {                                                                     // 19797
  ngAttributeAliasDirectives[ngAttr] = function() {                                                                    // 19798
    return {                                                                                                           // 19799
      priority: 100,                                                                                                   // 19800
      link: function(scope, element, attr) {                                                                           // 19801
        //special case ngPattern when a literal regular expression value                                               // 19802
        //is used as the expression (this way we don't have to watch anything).                                        // 19803
        if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {                                               // 19804
          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);                                                       // 19805
          if (match) {                                                                                                 // 19806
            attr.$set("ngPattern", new RegExp(match[1], match[2]));                                                    // 19807
            return;                                                                                                    // 19808
          }                                                                                                            // 19809
        }                                                                                                              // 19810
                                                                                                                       // 19811
        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {                                            // 19812
          attr.$set(ngAttr, value);                                                                                    // 19813
        });                                                                                                            // 19814
      }                                                                                                                // 19815
    };                                                                                                                 // 19816
  };                                                                                                                   // 19817
});                                                                                                                    // 19818
                                                                                                                       // 19819
// ng-src, ng-srcset, ng-href are interpolated                                                                         // 19820
forEach(['src', 'srcset', 'href'], function(attrName) {                                                                // 19821
  var normalized = directiveNormalize('ng-' + attrName);                                                               // 19822
  ngAttributeAliasDirectives[normalized] = function() {                                                                // 19823
    return {                                                                                                           // 19824
      priority: 99, // it needs to run after the attributes are interpolated                                           // 19825
      link: function(scope, element, attr) {                                                                           // 19826
        var propName = attrName,                                                                                       // 19827
            name = attrName;                                                                                           // 19828
                                                                                                                       // 19829
        if (attrName === 'href' &&                                                                                     // 19830
            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {                                    // 19831
          name = 'xlinkHref';                                                                                          // 19832
          attr.$attr[name] = 'xlink:href';                                                                             // 19833
          propName = null;                                                                                             // 19834
        }                                                                                                              // 19835
                                                                                                                       // 19836
        attr.$observe(normalized, function(value) {                                                                    // 19837
          if (!value) {                                                                                                // 19838
            if (attrName === 'href') {                                                                                 // 19839
              attr.$set(name, null);                                                                                   // 19840
            }                                                                                                          // 19841
            return;                                                                                                    // 19842
          }                                                                                                            // 19843
                                                                                                                       // 19844
          attr.$set(name, value);                                                                                      // 19845
                                                                                                                       // 19846
          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist                        // 19847
          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need                           // 19848
          // to set the property as well to achieve the desired effect.                                                // 19849
          // we use attr[attrName] value since $set can sanitize the url.                                              // 19850
          if (msie && propName) element.prop(propName, attr[name]);                                                    // 19851
        });                                                                                                            // 19852
      }                                                                                                                // 19853
    };                                                                                                                 // 19854
  };                                                                                                                   // 19855
});                                                                                                                    // 19856
                                                                                                                       // 19857
/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true                                                  // 19858
 */                                                                                                                    // 19859
var nullFormCtrl = {                                                                                                   // 19860
  $addControl: noop,                                                                                                   // 19861
  $$renameControl: nullFormRenameControl,                                                                              // 19862
  $removeControl: noop,                                                                                                // 19863
  $setValidity: noop,                                                                                                  // 19864
  $setDirty: noop,                                                                                                     // 19865
  $setPristine: noop,                                                                                                  // 19866
  $setSubmitted: noop                                                                                                  // 19867
},                                                                                                                     // 19868
SUBMITTED_CLASS = 'ng-submitted';                                                                                      // 19869
                                                                                                                       // 19870
function nullFormRenameControl(control, name) {                                                                        // 19871
  control.$name = name;                                                                                                // 19872
}                                                                                                                      // 19873
                                                                                                                       // 19874
/**                                                                                                                    // 19875
 * @ngdoc type                                                                                                         // 19876
 * @name form.FormController                                                                                           // 19877
 *                                                                                                                     // 19878
 * @property {boolean} $pristine True if user has not interacted with the form yet.                                    // 19879
 * @property {boolean} $dirty True if user has already interacted with the form.                                       // 19880
 * @property {boolean} $valid True if all of the containing forms and controls are valid.                              // 19881
 * @property {boolean} $invalid True if at least one containing control or form is invalid.                            // 19882
 * @property {boolean} $submitted True if user has submitted the form even if its invalid.                             // 19883
 *                                                                                                                     // 19884
 * @property {Object} $error Is an object hash, containing references to controls or                                   // 19885
 *  forms with failing validators, where:                                                                              // 19886
 *                                                                                                                     // 19887
 *  - keys are validation tokens (error names),                                                                        // 19888
 *  - values are arrays of controls or forms that have a failing validator for given error name.                       // 19889
 *                                                                                                                     // 19890
 *  Built-in validation tokens:                                                                                        // 19891
 *                                                                                                                     // 19892
 *  - `email`                                                                                                          // 19893
 *  - `max`                                                                                                            // 19894
 *  - `maxlength`                                                                                                      // 19895
 *  - `min`                                                                                                            // 19896
 *  - `minlength`                                                                                                      // 19897
 *  - `number`                                                                                                         // 19898
 *  - `pattern`                                                                                                        // 19899
 *  - `required`                                                                                                       // 19900
 *  - `url`                                                                                                            // 19901
 *  - `date`                                                                                                           // 19902
 *  - `datetimelocal`                                                                                                  // 19903
 *  - `time`                                                                                                           // 19904
 *  - `week`                                                                                                           // 19905
 *  - `month`                                                                                                          // 19906
 *                                                                                                                     // 19907
 * @description                                                                                                        // 19908
 * `FormController` keeps track of all its controls and nested forms as well as the state of them,                     // 19909
 * such as being valid/invalid or dirty/pristine.                                                                      // 19910
 *                                                                                                                     // 19911
 * Each {@link ng.directive:form form} directive creates an instance                                                   // 19912
 * of `FormController`.                                                                                                // 19913
 *                                                                                                                     // 19914
 */                                                                                                                    // 19915
//asks for $scope to fool the BC controller module                                                                     // 19916
FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];                                 // 19917
function FormController(element, attrs, $scope, $animate, $interpolate) {                                              // 19918
  var form = this,                                                                                                     // 19919
      controls = [];                                                                                                   // 19920
                                                                                                                       // 19921
  var parentForm = form.$$parentForm = element.parent().controller('form') || nullFormCtrl;                            // 19922
                                                                                                                       // 19923
  // init state                                                                                                        // 19924
  form.$error = {};                                                                                                    // 19925
  form.$$success = {};                                                                                                 // 19926
  form.$pending = undefined;                                                                                           // 19927
  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);                                                 // 19928
  form.$dirty = false;                                                                                                 // 19929
  form.$pristine = true;                                                                                               // 19930
  form.$valid = true;                                                                                                  // 19931
  form.$invalid = false;                                                                                               // 19932
  form.$submitted = false;                                                                                             // 19933
                                                                                                                       // 19934
  parentForm.$addControl(form);                                                                                        // 19935
                                                                                                                       // 19936
  /**                                                                                                                  // 19937
   * @ngdoc method                                                                                                     // 19938
   * @name form.FormController#$rollbackViewValue                                                                      // 19939
   *                                                                                                                   // 19940
   * @description                                                                                                      // 19941
   * Rollback all form controls pending updates to the `$modelValue`.                                                  // 19942
   *                                                                                                                   // 19943
   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 19944
   * event defined in `ng-model-options`. This method is typically needed by the reset button of                       // 19945
   * a form that uses `ng-model-options` to pend updates.                                                              // 19946
   */                                                                                                                  // 19947
  form.$rollbackViewValue = function() {                                                                               // 19948
    forEach(controls, function(control) {                                                                              // 19949
      control.$rollbackViewValue();                                                                                    // 19950
    });                                                                                                                // 19951
  };                                                                                                                   // 19952
                                                                                                                       // 19953
  /**                                                                                                                  // 19954
   * @ngdoc method                                                                                                     // 19955
   * @name form.FormController#$commitViewValue                                                                        // 19956
   *                                                                                                                   // 19957
   * @description                                                                                                      // 19958
   * Commit all form controls pending updates to the `$modelValue`.                                                    // 19959
   *                                                                                                                   // 19960
   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 19961
   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`                          // 19962
   * usually handles calling this in response to input events.                                                         // 19963
   */                                                                                                                  // 19964
  form.$commitViewValue = function() {                                                                                 // 19965
    forEach(controls, function(control) {                                                                              // 19966
      control.$commitViewValue();                                                                                      // 19967
    });                                                                                                                // 19968
  };                                                                                                                   // 19969
                                                                                                                       // 19970
  /**                                                                                                                  // 19971
   * @ngdoc method                                                                                                     // 19972
   * @name form.FormController#$addControl                                                                             // 19973
   *                                                                                                                   // 19974
   * @description                                                                                                      // 19975
   * Register a control with the form.                                                                                 // 19976
   *                                                                                                                   // 19977
   * Input elements using ngModelController do this automatically when they are linked.                                // 19978
   */                                                                                                                  // 19979
  form.$addControl = function(control) {                                                                               // 19980
    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored                           // 19981
    // and not added to the scope.  Now we throw an error.                                                             // 19982
    assertNotHasOwnProperty(control.$name, 'input');                                                                   // 19983
    controls.push(control);                                                                                            // 19984
                                                                                                                       // 19985
    if (control.$name) {                                                                                               // 19986
      form[control.$name] = control;                                                                                   // 19987
    }                                                                                                                  // 19988
  };                                                                                                                   // 19989
                                                                                                                       // 19990
  // Private API: rename a form control                                                                                // 19991
  form.$$renameControl = function(control, newName) {                                                                  // 19992
    var oldName = control.$name;                                                                                       // 19993
                                                                                                                       // 19994
    if (form[oldName] === control) {                                                                                   // 19995
      delete form[oldName];                                                                                            // 19996
    }                                                                                                                  // 19997
    form[newName] = control;                                                                                           // 19998
    control.$name = newName;                                                                                           // 19999
  };                                                                                                                   // 20000
                                                                                                                       // 20001
  /**                                                                                                                  // 20002
   * @ngdoc method                                                                                                     // 20003
   * @name form.FormController#$removeControl                                                                          // 20004
   *                                                                                                                   // 20005
   * @description                                                                                                      // 20006
   * Deregister a control from the form.                                                                               // 20007
   *                                                                                                                   // 20008
   * Input elements using ngModelController do this automatically when they are destroyed.                             // 20009
   */                                                                                                                  // 20010
  form.$removeControl = function(control) {                                                                            // 20011
    if (control.$name && form[control.$name] === control) {                                                            // 20012
      delete form[control.$name];                                                                                      // 20013
    }                                                                                                                  // 20014
    forEach(form.$pending, function(value, name) {                                                                     // 20015
      form.$setValidity(name, null, control);                                                                          // 20016
    });                                                                                                                // 20017
    forEach(form.$error, function(value, name) {                                                                       // 20018
      form.$setValidity(name, null, control);                                                                          // 20019
    });                                                                                                                // 20020
    forEach(form.$$success, function(value, name) {                                                                    // 20021
      form.$setValidity(name, null, control);                                                                          // 20022
    });                                                                                                                // 20023
                                                                                                                       // 20024
    arrayRemove(controls, control);                                                                                    // 20025
  };                                                                                                                   // 20026
                                                                                                                       // 20027
                                                                                                                       // 20028
  /**                                                                                                                  // 20029
   * @ngdoc method                                                                                                     // 20030
   * @name form.FormController#$setValidity                                                                            // 20031
   *                                                                                                                   // 20032
   * @description                                                                                                      // 20033
   * Sets the validity of a form control.                                                                              // 20034
   *                                                                                                                   // 20035
   * This method will also propagate to parent forms.                                                                  // 20036
   */                                                                                                                  // 20037
  addSetValidityMethod({                                                                                               // 20038
    ctrl: this,                                                                                                        // 20039
    $element: element,                                                                                                 // 20040
    set: function(object, property, controller) {                                                                      // 20041
      var list = object[property];                                                                                     // 20042
      if (!list) {                                                                                                     // 20043
        object[property] = [controller];                                                                               // 20044
      } else {                                                                                                         // 20045
        var index = list.indexOf(controller);                                                                          // 20046
        if (index === -1) {                                                                                            // 20047
          list.push(controller);                                                                                       // 20048
        }                                                                                                              // 20049
      }                                                                                                                // 20050
    },                                                                                                                 // 20051
    unset: function(object, property, controller) {                                                                    // 20052
      var list = object[property];                                                                                     // 20053
      if (!list) {                                                                                                     // 20054
        return;                                                                                                        // 20055
      }                                                                                                                // 20056
      arrayRemove(list, controller);                                                                                   // 20057
      if (list.length === 0) {                                                                                         // 20058
        delete object[property];                                                                                       // 20059
      }                                                                                                                // 20060
    },                                                                                                                 // 20061
    parentForm: parentForm,                                                                                            // 20062
    $animate: $animate                                                                                                 // 20063
  });                                                                                                                  // 20064
                                                                                                                       // 20065
  /**                                                                                                                  // 20066
   * @ngdoc method                                                                                                     // 20067
   * @name form.FormController#$setDirty                                                                               // 20068
   *                                                                                                                   // 20069
   * @description                                                                                                      // 20070
   * Sets the form to a dirty state.                                                                                   // 20071
   *                                                                                                                   // 20072
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty                                 // 20073
   * state (ng-dirty class). This method will also propagate to parent forms.                                          // 20074
   */                                                                                                                  // 20075
  form.$setDirty = function() {                                                                                        // 20076
    $animate.removeClass(element, PRISTINE_CLASS);                                                                     // 20077
    $animate.addClass(element, DIRTY_CLASS);                                                                           // 20078
    form.$dirty = true;                                                                                                // 20079
    form.$pristine = false;                                                                                            // 20080
    parentForm.$setDirty();                                                                                            // 20081
  };                                                                                                                   // 20082
                                                                                                                       // 20083
  /**                                                                                                                  // 20084
   * @ngdoc method                                                                                                     // 20085
   * @name form.FormController#$setPristine                                                                            // 20086
   *                                                                                                                   // 20087
   * @description                                                                                                      // 20088
   * Sets the form to its pristine state.                                                                              // 20089
   *                                                                                                                   // 20090
   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine                         // 20091
   * state (ng-pristine class). This method will also propagate to all the controls contained                          // 20092
   * in this form.                                                                                                     // 20093
   *                                                                                                                   // 20094
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after                      // 20095
   * saving or resetting it.                                                                                           // 20096
   */                                                                                                                  // 20097
  form.$setPristine = function() {                                                                                     // 20098
    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);                                   // 20099
    form.$dirty = false;                                                                                               // 20100
    form.$pristine = true;                                                                                             // 20101
    form.$submitted = false;                                                                                           // 20102
    forEach(controls, function(control) {                                                                              // 20103
      control.$setPristine();                                                                                          // 20104
    });                                                                                                                // 20105
  };                                                                                                                   // 20106
                                                                                                                       // 20107
  /**                                                                                                                  // 20108
   * @ngdoc method                                                                                                     // 20109
   * @name form.FormController#$setUntouched                                                                           // 20110
   *                                                                                                                   // 20111
   * @description                                                                                                      // 20112
   * Sets the form to its untouched state.                                                                             // 20113
   *                                                                                                                   // 20114
   * This method can be called to remove the 'ng-touched' class and set the form controls to their                     // 20115
   * untouched state (ng-untouched class).                                                                             // 20116
   *                                                                                                                   // 20117
   * Setting a form controls back to their untouched state is often useful when setting the form                       // 20118
   * back to its pristine state.                                                                                       // 20119
   */                                                                                                                  // 20120
  form.$setUntouched = function() {                                                                                    // 20121
    forEach(controls, function(control) {                                                                              // 20122
      control.$setUntouched();                                                                                         // 20123
    });                                                                                                                // 20124
  };                                                                                                                   // 20125
                                                                                                                       // 20126
  /**                                                                                                                  // 20127
   * @ngdoc method                                                                                                     // 20128
   * @name form.FormController#$setSubmitted                                                                           // 20129
   *                                                                                                                   // 20130
   * @description                                                                                                      // 20131
   * Sets the form to its submitted state.                                                                             // 20132
   */                                                                                                                  // 20133
  form.$setSubmitted = function() {                                                                                    // 20134
    $animate.addClass(element, SUBMITTED_CLASS);                                                                       // 20135
    form.$submitted = true;                                                                                            // 20136
    parentForm.$setSubmitted();                                                                                        // 20137
  };                                                                                                                   // 20138
}                                                                                                                      // 20139
                                                                                                                       // 20140
/**                                                                                                                    // 20141
 * @ngdoc directive                                                                                                    // 20142
 * @name ngForm                                                                                                        // 20143
 * @restrict EAC                                                                                                       // 20144
 *                                                                                                                     // 20145
 * @description                                                                                                        // 20146
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML                                                  // 20147
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a               // 20148
 * sub-group of controls needs to be determined.                                                                       // 20149
 *                                                                                                                     // 20150
 * Note: the purpose of `ngForm` is to group controls,                                                                 // 20151
 * but not to be a replacement for the `<form>` tag with all of its capabilities                                       // 20152
 * (e.g. posting to the server, ...).                                                                                  // 20153
 *                                                                                                                     // 20154
 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into             // 20155
 *                       related scope, under this name.                                                               // 20156
 *                                                                                                                     // 20157
 */                                                                                                                    // 20158
                                                                                                                       // 20159
 /**                                                                                                                   // 20160
 * @ngdoc directive                                                                                                    // 20161
 * @name form                                                                                                          // 20162
 * @restrict E                                                                                                         // 20163
 *                                                                                                                     // 20164
 * @description                                                                                                        // 20165
 * Directive that instantiates                                                                                         // 20166
 * {@link form.FormController FormController}.                                                                         // 20167
 *                                                                                                                     // 20168
 * If the `name` attribute is specified, the form controller is published onto the current scope under                 // 20169
 * this name.                                                                                                          // 20170
 *                                                                                                                     // 20171
 * # Alias: {@link ng.directive:ngForm `ngForm`}                                                                       // 20172
 *                                                                                                                     // 20173
 * In Angular, forms can be nested. This means that the outer form is valid when all of the child                      // 20174
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so                            // 20175
 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to                    // 20176
 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when                        // 20177
 * using Angular validation directives in forms that are dynamically generated using the                               // 20178
 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`                // 20179
 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an                 // 20180
 * `ngForm` directive and nest these in an outer `form` element.                                                       // 20181
 *                                                                                                                     // 20182
 *                                                                                                                     // 20183
 * # CSS classes                                                                                                       // 20184
 *  - `ng-valid` is set if the form is valid.                                                                          // 20185
 *  - `ng-invalid` is set if the form is invalid.                                                                      // 20186
 *  - `ng-pristine` is set if the form is pristine.                                                                    // 20187
 *  - `ng-dirty` is set if the form is dirty.                                                                          // 20188
 *  - `ng-submitted` is set if the form was submitted.                                                                 // 20189
 *                                                                                                                     // 20190
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.                                // 20191
 *                                                                                                                     // 20192
 *                                                                                                                     // 20193
 * # Submitting a form and preventing the default action                                                               // 20194
 *                                                                                                                     // 20195
 * Since the role of forms in client-side Angular applications is different than in classical                          // 20196
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full                    // 20197
 * page reload that sends the data to the server. Instead some javascript logic should be triggered                    // 20198
 * to handle the form submission in an application-specific way.                                                       // 20199
 *                                                                                                                     // 20200
 * For this reason, Angular prevents the default action (form submission to the server) unless the                     // 20201
 * `<form>` element has an `action` attribute specified.                                                               // 20202
 *                                                                                                                     // 20203
 * You can use one of the following two ways to specify what javascript method should be called when                   // 20204
 * a form is submitted:                                                                                                // 20205
 *                                                                                                                     // 20206
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element                                              // 20207
 * - {@link ng.directive:ngClick ngClick} directive on the first                                                       // 20208
  *  button or input field of type submit (input[type=submit])                                                         // 20209
 *                                                                                                                     // 20210
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}              // 20211
 * or {@link ng.directive:ngClick ngClick} directives.                                                                 // 20212
 * This is because of the following form submission rules in the HTML specification:                                   // 20213
 *                                                                                                                     // 20214
 * - If a form has only one input field then hitting enter in this field triggers form submit                          // 20215
 * (`ngSubmit`)                                                                                                        // 20216
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter                             // 20217
 * doesn't trigger submit                                                                                              // 20218
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then                         // 20219
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or                    // 20220
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)                            // 20221
 *                                                                                                                     // 20222
 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is                          // 20223
 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`                        // 20224
 * to have access to the updated model.                                                                                // 20225
 *                                                                                                                     // 20226
 * ## Animation Hooks                                                                                                  // 20227
 *                                                                                                                     // 20228
 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.                    // 20229
 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any                        // 20230
 * other validations that are performed within the form. Animations in ngForm are similar to how                       // 20231
 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well                     // 20232
 * as JS animations.                                                                                                   // 20233
 *                                                                                                                     // 20234
 * The following example shows a simple way to utilize CSS transitions to style a form element                         // 20235
 * that has been rendered as invalid after it has been validated:                                                      // 20236
 *                                                                                                                     // 20237
 * <pre>                                                                                                               // 20238
 * //be sure to include ngAnimate as a module to hook into more                                                        // 20239
 * //advanced animations                                                                                               // 20240
 * .my-form {                                                                                                          // 20241
 *   transition:0.5s linear all;                                                                                       // 20242
 *   background: white;                                                                                                // 20243
 * }                                                                                                                   // 20244
 * .my-form.ng-invalid {                                                                                               // 20245
 *   background: red;                                                                                                  // 20246
 *   color:white;                                                                                                      // 20247
 * }                                                                                                                   // 20248
 * </pre>                                                                                                              // 20249
 *                                                                                                                     // 20250
 * @example                                                                                                            // 20251
    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">                          // 20252
      <file name="index.html">                                                                                         // 20253
       <script>                                                                                                        // 20254
         angular.module('formExample', [])                                                                             // 20255
           .controller('FormController', ['$scope', function($scope) {                                                 // 20256
             $scope.userType = 'guest';                                                                                // 20257
           }]);                                                                                                        // 20258
       </script>                                                                                                       // 20259
       <style>                                                                                                         // 20260
        .my-form {                                                                                                     // 20261
          -webkit-transition:all linear 0.5s;                                                                          // 20262
          transition:all linear 0.5s;                                                                                  // 20263
          background: transparent;                                                                                     // 20264
        }                                                                                                              // 20265
        .my-form.ng-invalid {                                                                                          // 20266
          background: red;                                                                                             // 20267
        }                                                                                                              // 20268
       </style>                                                                                                        // 20269
       <form name="myForm" ng-controller="FormController" class="my-form">                                             // 20270
         userType: <input name="input" ng-model="userType" required>                                                   // 20271
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>                               // 20272
         <code>userType = {{userType}}</code><br>                                                                      // 20273
         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>                                                // 20274
         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>                                                // 20275
         <code>myForm.$valid = {{myForm.$valid}}</code><br>                                                            // 20276
         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>                                        // 20277
        </form>                                                                                                        // 20278
      </file>                                                                                                          // 20279
      <file name="protractor.js" type="protractor">                                                                    // 20280
        it('should initialize to model', function() {                                                                  // 20281
          var userType = element(by.binding('userType'));                                                              // 20282
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20283
                                                                                                                       // 20284
          expect(userType.getText()).toContain('guest');                                                               // 20285
          expect(valid.getText()).toContain('true');                                                                   // 20286
        });                                                                                                            // 20287
                                                                                                                       // 20288
        it('should be invalid if empty', function() {                                                                  // 20289
          var userType = element(by.binding('userType'));                                                              // 20290
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20291
          var userInput = element(by.model('userType'));                                                               // 20292
                                                                                                                       // 20293
          userInput.clear();                                                                                           // 20294
          userInput.sendKeys('');                                                                                      // 20295
                                                                                                                       // 20296
          expect(userType.getText()).toEqual('userType =');                                                            // 20297
          expect(valid.getText()).toContain('false');                                                                  // 20298
        });                                                                                                            // 20299
      </file>                                                                                                          // 20300
    </example>                                                                                                         // 20301
 *                                                                                                                     // 20302
 * @param {string=} name Name of the form. If specified, the form controller will be published into                    // 20303
 *                       related scope, under this name.                                                               // 20304
 */                                                                                                                    // 20305
var formDirectiveFactory = function(isNgForm) {                                                                        // 20306
  return ['$timeout', function($timeout) {                                                                             // 20307
    var formDirective = {                                                                                              // 20308
      name: 'form',                                                                                                    // 20309
      restrict: isNgForm ? 'EAC' : 'E',                                                                                // 20310
      controller: FormController,                                                                                      // 20311
      compile: function ngFormCompile(formElement, attr) {                                                             // 20312
        // Setup initial state of the control                                                                          // 20313
        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);                                                    // 20314
                                                                                                                       // 20315
        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);                              // 20316
                                                                                                                       // 20317
        return {                                                                                                       // 20318
          pre: function ngFormPreLink(scope, formElement, attr, controller) {                                          // 20319
            // if `action` attr is not present on the form, prevent the default action (submission)                    // 20320
            if (!('action' in attr)) {                                                                                 // 20321
              // we can't use jq events because if a form is destroyed during submission the default                   // 20322
              // action is not prevented. see #1238                                                                    // 20323
              //                                                                                                       // 20324
              // IE 9 is not affected because it doesn't fire a submit event and try to do a full                      // 20325
              // page reload if the form was destroyed by submission of the form via a click handler                   // 20326
              // on a button in the form. Looks like an IE9 specific bug.                                              // 20327
              var handleFormSubmission = function(event) {                                                             // 20328
                scope.$apply(function() {                                                                              // 20329
                  controller.$commitViewValue();                                                                       // 20330
                  controller.$setSubmitted();                                                                          // 20331
                });                                                                                                    // 20332
                                                                                                                       // 20333
                event.preventDefault();                                                                                // 20334
              };                                                                                                       // 20335
                                                                                                                       // 20336
              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);                                      // 20337
                                                                                                                       // 20338
              // unregister the preventDefault listener so that we don't not leak memory but in a                      // 20339
              // way that will achieve the prevention of the default action.                                           // 20340
              formElement.on('$destroy', function() {                                                                  // 20341
                $timeout(function() {                                                                                  // 20342
                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);                               // 20343
                }, 0, false);                                                                                          // 20344
              });                                                                                                      // 20345
            }                                                                                                          // 20346
                                                                                                                       // 20347
            var parentFormCtrl = controller.$$parentForm;                                                              // 20348
                                                                                                                       // 20349
            if (nameAttr) {                                                                                            // 20350
              setter(scope, controller.$name, controller, controller.$name);                                           // 20351
              attr.$observe(nameAttr, function(newValue) {                                                             // 20352
                if (controller.$name === newValue) return;                                                             // 20353
                setter(scope, controller.$name, undefined, controller.$name);                                          // 20354
                parentFormCtrl.$$renameControl(controller, newValue);                                                  // 20355
                setter(scope, controller.$name, controller, controller.$name);                                         // 20356
              });                                                                                                      // 20357
            }                                                                                                          // 20358
            formElement.on('$destroy', function() {                                                                    // 20359
              parentFormCtrl.$removeControl(controller);                                                               // 20360
              if (nameAttr) {                                                                                          // 20361
                setter(scope, attr[nameAttr], undefined, controller.$name);                                            // 20362
              }                                                                                                        // 20363
              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards                  // 20364
            });                                                                                                        // 20365
          }                                                                                                            // 20366
        };                                                                                                             // 20367
      }                                                                                                                // 20368
    };                                                                                                                 // 20369
                                                                                                                       // 20370
    return formDirective;                                                                                              // 20371
  }];                                                                                                                  // 20372
};                                                                                                                     // 20373
                                                                                                                       // 20374
var formDirective = formDirectiveFactory();                                                                            // 20375
var ngFormDirective = formDirectiveFactory(true);                                                                      // 20376
                                                                                                                       // 20377
/* global VALID_CLASS: false,                                                                                          // 20378
  INVALID_CLASS: false,                                                                                                // 20379
  PRISTINE_CLASS: false,                                                                                               // 20380
  DIRTY_CLASS: false,                                                                                                  // 20381
  UNTOUCHED_CLASS: false,                                                                                              // 20382
  TOUCHED_CLASS: false,                                                                                                // 20383
  $ngModelMinErr: false,                                                                                               // 20384
*/                                                                                                                     // 20385
                                                                                                                       // 20386
// Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
var ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/;                      // 20388
var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;                // 20389
var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;                                               // 20391
var DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/;                                                                         // 20392
var DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;                            // 20393
var WEEK_REGEXP = /^(\d{4})-W(\d\d)$/;                                                                                 // 20394
var MONTH_REGEXP = /^(\d{4})-(\d\d)$/;                                                                                 // 20395
var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;                                                           // 20396
                                                                                                                       // 20397
var inputType = {                                                                                                      // 20398
                                                                                                                       // 20399
  /**                                                                                                                  // 20400
   * @ngdoc input                                                                                                      // 20401
   * @name input[text]                                                                                                 // 20402
   *                                                                                                                   // 20403
   * @description                                                                                                      // 20404
   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.                    // 20405
   *                                                                                                                   // 20406
   *                                                                                                                   // 20407
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 20408
   * @param {string=} name Property name of the form under which the control is published.                             // 20409
   * @param {string=} required Adds `required` validation error key if the value is not entered.                       // 20410
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 20411
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 20412
   *    `required` when you want to data-bind to the `required` attribute.                                             // 20413
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 20414
   *    minlength.                                                                                                     // 20415
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 20416
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 20417
   *    any length.                                                                                                    // 20418
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 20419
   *    that contains the regular expression body that will be converted to a regular expression                       // 20420
   *    as in the ngPattern directive.                                                                                 // 20421
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 20422
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 20423
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 20424
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 20425
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 20426
   *    `new RegExp('^abc$')`.<br />                                                                                   // 20427
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 20428
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 20429
   *    account.                                                                                                       // 20430
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 20431
   *    interaction with the input element.                                                                            // 20432
   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                    // 20433
   *    This parameter is ignored for input[type=password] controls, which will never trim the                         // 20434
   *    input.                                                                                                         // 20435
   *                                                                                                                   // 20436
   * @example                                                                                                          // 20437
      <example name="text-input-directive" module="textInputExample">                                                  // 20438
        <file name="index.html">                                                                                       // 20439
         <script>                                                                                                      // 20440
           angular.module('textInputExample', [])                                                                      // 20441
             .controller('ExampleController', ['$scope', function($scope) {                                            // 20442
               $scope.example = {                                                                                      // 20443
                 text: 'guest',                                                                                        // 20444
                 word: /^\s*\w*\s*$/                                                                                   // 20445
               };                                                                                                      // 20446
             }]);                                                                                                      // 20447
         </script>                                                                                                     // 20448
         <form name="myForm" ng-controller="ExampleController">                                                        // 20449
           <label>Single word:                                                                                         // 20450
             <input type="text" name="input" ng-model="example.text"                                                   // 20451
                    ng-pattern="example.word" required ng-trim="false">                                                // 20452
           </label>                                                                                                    // 20453
           <div role="alert">                                                                                          // 20454
             <span class="error" ng-show="myForm.input.$error.required">                                               // 20455
               Required!</span>                                                                                        // 20456
             <span class="error" ng-show="myForm.input.$error.pattern">                                                // 20457
               Single word only!</span>                                                                                // 20458
           </div>                                                                                                      // 20459
           <tt>text = {{example.text}}</tt><br/>                                                                       // 20460
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 20461
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 20462
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 20463
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 20464
          </form>                                                                                                      // 20465
        </file>                                                                                                        // 20466
        <file name="protractor.js" type="protractor">                                                                  // 20467
          var text = element(by.binding('example.text'));                                                              // 20468
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20469
          var input = element(by.model('example.text'));                                                               // 20470
                                                                                                                       // 20471
          it('should initialize to model', function() {                                                                // 20472
            expect(text.getText()).toContain('guest');                                                                 // 20473
            expect(valid.getText()).toContain('true');                                                                 // 20474
          });                                                                                                          // 20475
                                                                                                                       // 20476
          it('should be invalid if empty', function() {                                                                // 20477
            input.clear();                                                                                             // 20478
            input.sendKeys('');                                                                                        // 20479
                                                                                                                       // 20480
            expect(text.getText()).toEqual('text =');                                                                  // 20481
            expect(valid.getText()).toContain('false');                                                                // 20482
          });                                                                                                          // 20483
                                                                                                                       // 20484
          it('should be invalid if multi word', function() {                                                           // 20485
            input.clear();                                                                                             // 20486
            input.sendKeys('hello world');                                                                             // 20487
                                                                                                                       // 20488
            expect(valid.getText()).toContain('false');                                                                // 20489
          });                                                                                                          // 20490
        </file>                                                                                                        // 20491
      </example>                                                                                                       // 20492
   */                                                                                                                  // 20493
  'text': textInputType,                                                                                               // 20494
                                                                                                                       // 20495
    /**                                                                                                                // 20496
     * @ngdoc input                                                                                                    // 20497
     * @name input[date]                                                                                               // 20498
     *                                                                                                                 // 20499
     * @description                                                                                                    // 20500
     * Input with date validation and transformation. In browsers that do not yet support                              // 20501
     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601       // 20502
     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many                                                 // 20503
     * modern browsers do not yet support this input type, it is important to provide cues to users on the             // 20504
     * expected input format via a placeholder or label.                                                               // 20505
     *                                                                                                                 // 20506
     * The model must always be a Date object, otherwise Angular will throw an error.                                  // 20507
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                  // 20508
     *                                                                                                                 // 20509
     * The timezone to be used to read/write the `Date` instance in the model can be defined using                     // 20510
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.            // 20511
     *                                                                                                                 // 20512
     * @param {string} ngModel Assignable angular expression to data-bind to.                                          // 20513
     * @param {string=} name Property name of the form under which the control is published.                           // 20514
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
     * valid ISO date string (yyyy-MM-dd).                                                                             // 20516
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
     * a valid ISO date string (yyyy-MM-dd).                                                                           // 20518
     * @param {string=} required Sets `required` validation error key if the value is not entered.                     // 20519
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                   // 20520
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                    // 20521
     *    `required` when you want to data-bind to the `required` attribute.                                           // 20522
     * @param {string=} ngChange Angular expression to be executed when input changes due to user                      // 20523
     *    interaction with the input element.                                                                          // 20524
     *                                                                                                                 // 20525
     * @example                                                                                                        // 20526
     <example name="date-input-directive" module="dateInputExample">                                                   // 20527
     <file name="index.html">                                                                                          // 20528
       <script>                                                                                                        // 20529
          angular.module('dateInputExample', [])                                                                       // 20530
            .controller('DateController', ['$scope', function($scope) {                                                // 20531
              $scope.example = {                                                                                       // 20532
                value: new Date(2013, 9, 22)                                                                           // 20533
              };                                                                                                       // 20534
            }]);                                                                                                       // 20535
       </script>                                                                                                       // 20536
       <form name="myForm" ng-controller="DateController as dateCtrl">                                                 // 20537
          <label for="exampleInput">Pick a date in 2013:</label>                                                       // 20538
          <input type="date" id="exampleInput" name="input" ng-model="example.value"                                   // 20539
              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />                                   // 20540
          <div role="alert">                                                                                           // 20541
            <span class="error" ng-show="myForm.input.$error.required">                                                // 20542
                Required!</span>                                                                                       // 20543
            <span class="error" ng-show="myForm.input.$error.date">                                                    // 20544
                Not a valid date!</span>                                                                               // 20545
           </div>                                                                                                      // 20546
           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>                                                // 20547
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 20548
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 20549
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 20550
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 20551
       </form>                                                                                                         // 20552
     </file>                                                                                                           // 20553
     <file name="protractor.js" type="protractor">                                                                     // 20554
        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));                                         // 20555
        var valid = element(by.binding('myForm.input.$valid'));                                                        // 20556
        var input = element(by.model('example.value'));                                                                // 20557
                                                                                                                       // 20558
        // currently protractor/webdriver does not support                                                             // 20559
        // sending keys to all known HTML5 input controls                                                              // 20560
        // for various browsers (see https://github.com/angular/protractor/issues/562).                                // 20561
        function setInput(val) {                                                                                       // 20562
          // set the value of the element and force validation.                                                        // 20563
          var scr = "var ipt = document.getElementById('exampleInput'); " +                                            // 20564
          "ipt.value = '" + val + "';" +                                                                               // 20565
          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";    // 20566
          browser.executeScript(scr);                                                                                  // 20567
        }                                                                                                              // 20568
                                                                                                                       // 20569
        it('should initialize to model', function() {                                                                  // 20570
          expect(value.getText()).toContain('2013-10-22');                                                             // 20571
          expect(valid.getText()).toContain('myForm.input.$valid = true');                                             // 20572
        });                                                                                                            // 20573
                                                                                                                       // 20574
        it('should be invalid if empty', function() {                                                                  // 20575
          setInput('');                                                                                                // 20576
          expect(value.getText()).toEqual('value =');                                                                  // 20577
          expect(valid.getText()).toContain('myForm.input.$valid = false');                                            // 20578
        });                                                                                                            // 20579
                                                                                                                       // 20580
        it('should be invalid if over max', function() {                                                               // 20581
          setInput('2015-01-01');                                                                                      // 20582
          expect(value.getText()).toContain('');                                                                       // 20583
          expect(valid.getText()).toContain('myForm.input.$valid = false');                                            // 20584
        });                                                                                                            // 20585
     </file>                                                                                                           // 20586
     </example>                                                                                                        // 20587
     */                                                                                                                // 20588
  'date': createDateInputType('date', DATE_REGEXP,                                                                     // 20589
         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),                                                          // 20590
         'yyyy-MM-dd'),                                                                                                // 20591
                                                                                                                       // 20592
   /**                                                                                                                 // 20593
    * @ngdoc input                                                                                                     // 20594
    * @name input[datetime-local]                                                                                      // 20595
    *                                                                                                                  // 20596
    * @description                                                                                                     // 20597
    * Input with datetime validation and transformation. In browsers that do not yet support                           // 20598
    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 20599
    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.                                 // 20600
    *                                                                                                                  // 20601
    * The model must always be a Date object, otherwise Angular will throw an error.                                   // 20602
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                   // 20603
    *                                                                                                                  // 20604
    * The timezone to be used to read/write the `Date` instance in the model can be defined using                      // 20605
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.             // 20606
    *                                                                                                                  // 20607
    * @param {string} ngModel Assignable angular expression to data-bind to.                                           // 20608
    * @param {string=} name Property name of the form under which the control is published.                            // 20609
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a // 20610
    * valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).                                                                 // 20611
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
    * a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).                                                               // 20613
    * @param {string=} required Sets `required` validation error key if the value is not entered.                      // 20614
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                    // 20615
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                     // 20616
    *    `required` when you want to data-bind to the `required` attribute.                                            // 20617
    * @param {string=} ngChange Angular expression to be executed when input changes due to user                       // 20618
    *    interaction with the input element.                                                                           // 20619
    *                                                                                                                  // 20620
    * @example                                                                                                         // 20621
    <example name="datetimelocal-input-directive" module="dateExample">                                                // 20622
    <file name="index.html">                                                                                           // 20623
      <script>                                                                                                         // 20624
        angular.module('dateExample', [])                                                                              // 20625
          .controller('DateController', ['$scope', function($scope) {                                                  // 20626
            $scope.example = {                                                                                         // 20627
              value: new Date(2010, 11, 28, 14, 57)                                                                    // 20628
            };                                                                                                         // 20629
          }]);                                                                                                         // 20630
      </script>                                                                                                        // 20631
      <form name="myForm" ng-controller="DateController as dateCtrl">                                                  // 20632
        <label for="exampleInput">Pick a date between in 2013:</label>                                                 // 20633
        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"                           // 20634
            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />          // 20635
        <div role="alert">                                                                                             // 20636
          <span class="error" ng-show="myForm.input.$error.required">                                                  // 20637
              Required!</span>                                                                                         // 20638
          <span class="error" ng-show="myForm.input.$error.datetimelocal">                                             // 20639
              Not a valid date!</span>                                                                                 // 20640
        </div>                                                                                                         // 20641
        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>                                          // 20642
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 20643
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 20644
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 20645
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 20646
      </form>                                                                                                          // 20647
    </file>                                                                                                            // 20648
    <file name="protractor.js" type="protractor">                                                                      // 20649
      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));                                  // 20650
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 20651
      var input = element(by.model('example.value'));                                                                  // 20652
                                                                                                                       // 20653
      // currently protractor/webdriver does not support                                                               // 20654
      // sending keys to all known HTML5 input controls                                                                // 20655
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 20656
      function setInput(val) {                                                                                         // 20657
        // set the value of the element and force validation.                                                          // 20658
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 20659
        "ipt.value = '" + val + "';" +                                                                                 // 20660
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 20661
        browser.executeScript(scr);                                                                                    // 20662
      }                                                                                                                // 20663
                                                                                                                       // 20664
      it('should initialize to model', function() {                                                                    // 20665
        expect(value.getText()).toContain('2010-12-28T14:57:00');                                                      // 20666
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 20667
      });                                                                                                              // 20668
                                                                                                                       // 20669
      it('should be invalid if empty', function() {                                                                    // 20670
        setInput('');                                                                                                  // 20671
        expect(value.getText()).toEqual('value =');                                                                    // 20672
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20673
      });                                                                                                              // 20674
                                                                                                                       // 20675
      it('should be invalid if over max', function() {                                                                 // 20676
        setInput('2015-01-01T23:59:00');                                                                               // 20677
        expect(value.getText()).toContain('');                                                                         // 20678
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20679
      });                                                                                                              // 20680
    </file>                                                                                                            // 20681
    </example>                                                                                                         // 20682
    */                                                                                                                 // 20683
  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,                                         // 20684
      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),                           // 20685
      'yyyy-MM-ddTHH:mm:ss.sss'),                                                                                      // 20686
                                                                                                                       // 20687
  /**                                                                                                                  // 20688
   * @ngdoc input                                                                                                      // 20689
   * @name input[time]                                                                                                 // 20690
   *                                                                                                                   // 20691
   * @description                                                                                                      // 20692
   * Input with time validation and transformation. In browsers that do not yet support                                // 20693
   * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601     // 20694
   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.                    // 20696
   *                                                                                                                   // 20697
   * The model must always be a Date object, otherwise Angular will throw an error.                                    // 20698
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                    // 20699
   *                                                                                                                   // 20700
   * The timezone to be used to read/write the `Date` instance in the model can be defined using                       // 20701
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.              // 20702
   *                                                                                                                   // 20703
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 20704
   * @param {string=} name Property name of the form under which the control is published.                             // 20705
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a  // 20706
   * valid ISO time format (HH:mm:ss).                                                                                 // 20707
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be a
   * valid ISO time format (HH:mm:ss).                                                                                 // 20709
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 20710
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 20711
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 20712
   *    `required` when you want to data-bind to the `required` attribute.                                             // 20713
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 20714
   *    interaction with the input element.                                                                            // 20715
   *                                                                                                                   // 20716
   * @example                                                                                                          // 20717
   <example name="time-input-directive" module="timeExample">                                                          // 20718
   <file name="index.html">                                                                                            // 20719
     <script>                                                                                                          // 20720
      angular.module('timeExample', [])                                                                                // 20721
        .controller('DateController', ['$scope', function($scope) {                                                    // 20722
          $scope.example = {                                                                                           // 20723
            value: new Date(1970, 0, 1, 14, 57, 0)                                                                     // 20724
          };                                                                                                           // 20725
        }]);                                                                                                           // 20726
     </script>                                                                                                         // 20727
     <form name="myForm" ng-controller="DateController as dateCtrl">                                                   // 20728
        <label for="exampleInput">Pick a between 8am and 5pm:</label>                                                  // 20729
        <input type="time" id="exampleInput" name="input" ng-model="example.value"                                     // 20730
            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />                                           // 20731
        <div role="alert">                                                                                             // 20732
          <span class="error" ng-show="myForm.input.$error.required">                                                  // 20733
              Required!</span>                                                                                         // 20734
          <span class="error" ng-show="myForm.input.$error.time">                                                      // 20735
              Not a valid date!</span>                                                                                 // 20736
        </div>                                                                                                         // 20737
        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>                                                     // 20738
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 20739
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 20740
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 20741
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 20742
     </form>                                                                                                           // 20743
   </file>                                                                                                             // 20744
   <file name="protractor.js" type="protractor">                                                                       // 20745
      var value = element(by.binding('example.value | date: "HH:mm:ss"'));                                             // 20746
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 20747
      var input = element(by.model('example.value'));                                                                  // 20748
                                                                                                                       // 20749
      // currently protractor/webdriver does not support                                                               // 20750
      // sending keys to all known HTML5 input controls                                                                // 20751
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 20752
      function setInput(val) {                                                                                         // 20753
        // set the value of the element and force validation.                                                          // 20754
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 20755
        "ipt.value = '" + val + "';" +                                                                                 // 20756
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 20757
        browser.executeScript(scr);                                                                                    // 20758
      }                                                                                                                // 20759
                                                                                                                       // 20760
      it('should initialize to model', function() {                                                                    // 20761
        expect(value.getText()).toContain('14:57:00');                                                                 // 20762
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 20763
      });                                                                                                              // 20764
                                                                                                                       // 20765
      it('should be invalid if empty', function() {                                                                    // 20766
        setInput('');                                                                                                  // 20767
        expect(value.getText()).toEqual('value =');                                                                    // 20768
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20769
      });                                                                                                              // 20770
                                                                                                                       // 20771
      it('should be invalid if over max', function() {                                                                 // 20772
        setInput('23:59:00');                                                                                          // 20773
        expect(value.getText()).toContain('');                                                                         // 20774
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20775
      });                                                                                                              // 20776
   </file>                                                                                                             // 20777
   </example>                                                                                                          // 20778
   */                                                                                                                  // 20779
  'time': createDateInputType('time', TIME_REGEXP,                                                                     // 20780
      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),                                                        // 20781
     'HH:mm:ss.sss'),                                                                                                  // 20782
                                                                                                                       // 20783
   /**                                                                                                                 // 20784
    * @ngdoc input                                                                                                     // 20785
    * @name input[week]                                                                                                // 20786
    *                                                                                                                  // 20787
    * @description                                                                                                     // 20788
    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support           // 20789
    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 20790
    * week format (yyyy-W##), for example: `2013-W02`.                                                                 // 20791
    *                                                                                                                  // 20792
    * The model must always be a Date object, otherwise Angular will throw an error.                                   // 20793
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                   // 20794
    *                                                                                                                  // 20795
    * The timezone to be used to read/write the `Date` instance in the model can be defined using                      // 20796
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.             // 20797
    *                                                                                                                  // 20798
    * @param {string} ngModel Assignable angular expression to data-bind to.                                           // 20799
    * @param {string=} name Property name of the form under which the control is published.                            // 20800
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a // 20801
    * valid ISO week format (yyyy-W##).                                                                                // 20802
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
    * a valid ISO week format (yyyy-W##).                                                                              // 20804
    * @param {string=} required Sets `required` validation error key if the value is not entered.                      // 20805
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                    // 20806
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                     // 20807
    *    `required` when you want to data-bind to the `required` attribute.                                            // 20808
    * @param {string=} ngChange Angular expression to be executed when input changes due to user                       // 20809
    *    interaction with the input element.                                                                           // 20810
    *                                                                                                                  // 20811
    * @example                                                                                                         // 20812
    <example name="week-input-directive" module="weekExample">                                                         // 20813
    <file name="index.html">                                                                                           // 20814
      <script>                                                                                                         // 20815
      angular.module('weekExample', [])                                                                                // 20816
        .controller('DateController', ['$scope', function($scope) {                                                    // 20817
          $scope.example = {                                                                                           // 20818
            value: new Date(2013, 0, 3)                                                                                // 20819
          };                                                                                                           // 20820
        }]);                                                                                                           // 20821
      </script>                                                                                                        // 20822
      <form name="myForm" ng-controller="DateController as dateCtrl">                                                  // 20823
        <label>Pick a date between in 2013:                                                                            // 20824
          <input id="exampleInput" type="week" name="input" ng-model="example.value"                                   // 20825
                 placeholder="YYYY-W##" min="2012-W32"                                                                 // 20826
                 max="2013-W52" required />                                                                            // 20827
        </label>                                                                                                       // 20828
        <div role="alert">                                                                                             // 20829
          <span class="error" ng-show="myForm.input.$error.required">                                                  // 20830
              Required!</span>                                                                                         // 20831
          <span class="error" ng-show="myForm.input.$error.week">                                                      // 20832
              Not a valid date!</span>                                                                                 // 20833
        </div>                                                                                                         // 20834
        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>                                                     // 20835
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 20836
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 20837
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 20838
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 20839
      </form>                                                                                                          // 20840
    </file>                                                                                                            // 20841
    <file name="protractor.js" type="protractor">                                                                      // 20842
      var value = element(by.binding('example.value | date: "yyyy-Www"'));                                             // 20843
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 20844
      var input = element(by.model('example.value'));                                                                  // 20845
                                                                                                                       // 20846
      // currently protractor/webdriver does not support                                                               // 20847
      // sending keys to all known HTML5 input controls                                                                // 20848
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 20849
      function setInput(val) {                                                                                         // 20850
        // set the value of the element and force validation.                                                          // 20851
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 20852
        "ipt.value = '" + val + "';" +                                                                                 // 20853
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 20854
        browser.executeScript(scr);                                                                                    // 20855
      }                                                                                                                // 20856
                                                                                                                       // 20857
      it('should initialize to model', function() {                                                                    // 20858
        expect(value.getText()).toContain('2013-W01');                                                                 // 20859
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 20860
      });                                                                                                              // 20861
                                                                                                                       // 20862
      it('should be invalid if empty', function() {                                                                    // 20863
        setInput('');                                                                                                  // 20864
        expect(value.getText()).toEqual('value =');                                                                    // 20865
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20866
      });                                                                                                              // 20867
                                                                                                                       // 20868
      it('should be invalid if over max', function() {                                                                 // 20869
        setInput('2015-W01');                                                                                          // 20870
        expect(value.getText()).toContain('');                                                                         // 20871
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20872
      });                                                                                                              // 20873
    </file>                                                                                                            // 20874
    </example>                                                                                                         // 20875
    */                                                                                                                 // 20876
  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),                                            // 20877
                                                                                                                       // 20878
  /**                                                                                                                  // 20879
   * @ngdoc input                                                                                                      // 20880
   * @name input[month]                                                                                                // 20881
   *                                                                                                                   // 20882
   * @description                                                                                                      // 20883
   * Input with month validation and transformation. In browsers that do not yet support                               // 20884
   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 20885
   * month format (yyyy-MM), for example: `2009-01`.                                                                   // 20886
   *                                                                                                                   // 20887
   * The model must always be a Date object, otherwise Angular will throw an error.                                    // 20888
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                    // 20889
   * If the model is not set to the first of the month, the next view to model update will set it                      // 20890
   * to the first of the month.                                                                                        // 20891
   *                                                                                                                   // 20892
   * The timezone to be used to read/write the `Date` instance in the model can be defined using                       // 20893
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.              // 20894
   *                                                                                                                   // 20895
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 20896
   * @param {string=} name Property name of the form under which the control is published.                             // 20897
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be    // 20898
   * a valid ISO month format (yyyy-MM).                                                                               // 20899
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must    // 20900
   * be a valid ISO month format (yyyy-MM).                                                                            // 20901
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 20902
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 20903
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 20904
   *    `required` when you want to data-bind to the `required` attribute.                                             // 20905
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 20906
   *    interaction with the input element.                                                                            // 20907
   *                                                                                                                   // 20908
   * @example                                                                                                          // 20909
   <example name="month-input-directive" module="monthExample">                                                        // 20910
   <file name="index.html">                                                                                            // 20911
     <script>                                                                                                          // 20912
      angular.module('monthExample', [])                                                                               // 20913
        .controller('DateController', ['$scope', function($scope) {                                                    // 20914
          $scope.example = {                                                                                           // 20915
            value: new Date(2013, 9, 1)                                                                                // 20916
          };                                                                                                           // 20917
        }]);                                                                                                           // 20918
     </script>                                                                                                         // 20919
     <form name="myForm" ng-controller="DateController as dateCtrl">                                                   // 20920
       <label for="exampleInput">Pick a month in 2013:</label>                                                         // 20921
       <input id="exampleInput" type="month" name="input" ng-model="example.value"                                     // 20922
          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />                                                // 20923
       <div role="alert">                                                                                              // 20924
         <span class="error" ng-show="myForm.input.$error.required">                                                   // 20925
            Required!</span>                                                                                           // 20926
         <span class="error" ng-show="myForm.input.$error.month">                                                      // 20927
            Not a valid month!</span>                                                                                  // 20928
       </div>                                                                                                          // 20929
       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>                                                       // 20930
       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                     // 20931
       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                     // 20932
       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                 // 20933
       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                             // 20934
     </form>                                                                                                           // 20935
   </file>                                                                                                             // 20936
   <file name="protractor.js" type="protractor">                                                                       // 20937
      var value = element(by.binding('example.value | date: "yyyy-MM"'));                                              // 20938
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 20939
      var input = element(by.model('example.value'));                                                                  // 20940
                                                                                                                       // 20941
      // currently protractor/webdriver does not support                                                               // 20942
      // sending keys to all known HTML5 input controls                                                                // 20943
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 20944
      function setInput(val) {                                                                                         // 20945
        // set the value of the element and force validation.                                                          // 20946
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 20947
        "ipt.value = '" + val + "';" +                                                                                 // 20948
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 20949
        browser.executeScript(scr);                                                                                    // 20950
      }                                                                                                                // 20951
                                                                                                                       // 20952
      it('should initialize to model', function() {                                                                    // 20953
        expect(value.getText()).toContain('2013-10');                                                                  // 20954
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 20955
      });                                                                                                              // 20956
                                                                                                                       // 20957
      it('should be invalid if empty', function() {                                                                    // 20958
        setInput('');                                                                                                  // 20959
        expect(value.getText()).toEqual('value =');                                                                    // 20960
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20961
      });                                                                                                              // 20962
                                                                                                                       // 20963
      it('should be invalid if over max', function() {                                                                 // 20964
        setInput('2015-01');                                                                                           // 20965
        expect(value.getText()).toContain('');                                                                         // 20966
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20967
      });                                                                                                              // 20968
   </file>                                                                                                             // 20969
   </example>                                                                                                          // 20970
   */                                                                                                                  // 20971
  'month': createDateInputType('month', MONTH_REGEXP,                                                                  // 20972
     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),                                                                   // 20973
     'yyyy-MM'),                                                                                                       // 20974
                                                                                                                       // 20975
  /**                                                                                                                  // 20976
   * @ngdoc input                                                                                                      // 20977
   * @name input[number]                                                                                               // 20978
   *                                                                                                                   // 20979
   * @description                                                                                                      // 20980
   * Text input with number validation and transformation. Sets the `number` validation                                // 20981
   * error if not a valid number.                                                                                      // 20982
   *                                                                                                                   // 20983
   * <div class="alert alert-warning">                                                                                 // 20984
   * The model must always be of type `number` otherwise Angular will throw an error.                                  // 20985
   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}                          // 20986
   * error docs for more information and an example of how to convert your model if necessary.                         // 20987
   * </div>                                                                                                            // 20988
   *                                                                                                                   // 20989
   * ## Issues with HTML5 constraint validation                                                                        // 20990
   *                                                                                                                   // 20991
   * In browsers that follow the                                                                                       // 20992
   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),          // 20993
   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.              // 20994
   * If a non-number is entered in the input, the browser will report the value as an empty string,                    // 20995
   * which means the view / model values in `ngModel` and subsequently the scope value                                 // 20996
   * will also be an empty string.                                                                                     // 20997
   *                                                                                                                   // 20998
   *                                                                                                                   // 20999
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21000
   * @param {string=} name Property name of the form under which the control is published.                             // 21001
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                 // 21002
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.              // 21003
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21004
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21005
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21006
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21007
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21008
   *    minlength.                                                                                                     // 21009
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21010
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21011
   *    any length.                                                                                                    // 21012
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21013
   *    that contains the regular expression body that will be converted to a regular expression                       // 21014
   *    as in the ngPattern directive.                                                                                 // 21015
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21016
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21017
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21018
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21019
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 21020
   *    `new RegExp('^abc$')`.<br />                                                                                   // 21021
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21022
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21023
   *    account.                                                                                                       // 21024
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21025
   *    interaction with the input element.                                                                            // 21026
   *                                                                                                                   // 21027
   * @example                                                                                                          // 21028
      <example name="number-input-directive" module="numberExample">                                                   // 21029
        <file name="index.html">                                                                                       // 21030
         <script>                                                                                                      // 21031
           angular.module('numberExample', [])                                                                         // 21032
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21033
               $scope.example = {                                                                                      // 21034
                 value: 12                                                                                             // 21035
               };                                                                                                      // 21036
             }]);                                                                                                      // 21037
         </script>                                                                                                     // 21038
         <form name="myForm" ng-controller="ExampleController">                                                        // 21039
           <label>Number:                                                                                              // 21040
             <input type="number" name="input" ng-model="example.value"                                                // 21041
                    min="0" max="99" required>                                                                         // 21042
          </label>                                                                                                     // 21043
           <div role="alert">                                                                                          // 21044
             <span class="error" ng-show="myForm.input.$error.required">                                               // 21045
               Required!</span>                                                                                        // 21046
             <span class="error" ng-show="myForm.input.$error.number">                                                 // 21047
               Not valid number!</span>                                                                                // 21048
           </div>                                                                                                      // 21049
           <tt>value = {{example.value}}</tt><br/>                                                                     // 21050
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 21051
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 21052
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 21053
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 21054
          </form>                                                                                                      // 21055
        </file>                                                                                                        // 21056
        <file name="protractor.js" type="protractor">                                                                  // 21057
          var value = element(by.binding('example.value'));                                                            // 21058
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21059
          var input = element(by.model('example.value'));                                                              // 21060
                                                                                                                       // 21061
          it('should initialize to model', function() {                                                                // 21062
            expect(value.getText()).toContain('12');                                                                   // 21063
            expect(valid.getText()).toContain('true');                                                                 // 21064
          });                                                                                                          // 21065
                                                                                                                       // 21066
          it('should be invalid if empty', function() {                                                                // 21067
            input.clear();                                                                                             // 21068
            input.sendKeys('');                                                                                        // 21069
            expect(value.getText()).toEqual('value =');                                                                // 21070
            expect(valid.getText()).toContain('false');                                                                // 21071
          });                                                                                                          // 21072
                                                                                                                       // 21073
          it('should be invalid if over max', function() {                                                             // 21074
            input.clear();                                                                                             // 21075
            input.sendKeys('123');                                                                                     // 21076
            expect(value.getText()).toEqual('value =');                                                                // 21077
            expect(valid.getText()).toContain('false');                                                                // 21078
          });                                                                                                          // 21079
        </file>                                                                                                        // 21080
      </example>                                                                                                       // 21081
   */                                                                                                                  // 21082
  'number': numberInputType,                                                                                           // 21083
                                                                                                                       // 21084
                                                                                                                       // 21085
  /**                                                                                                                  // 21086
   * @ngdoc input                                                                                                      // 21087
   * @name input[url]                                                                                                  // 21088
   *                                                                                                                   // 21089
   * @description                                                                                                      // 21090
   * Text input with URL validation. Sets the `url` validation error key if the content is not a                       // 21091
   * valid URL.                                                                                                        // 21092
   *                                                                                                                   // 21093
   * <div class="alert alert-warning">                                                                                 // 21094
   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex                               // 21095
   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify                             // 21096
   * the built-in validators (see the {@link guide/forms Forms guide})                                                 // 21097
   * </div>                                                                                                            // 21098
   *                                                                                                                   // 21099
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21100
   * @param {string=} name Property name of the form under which the control is published.                             // 21101
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21102
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21103
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21104
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21105
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21106
   *    minlength.                                                                                                     // 21107
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21108
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21109
   *    any length.                                                                                                    // 21110
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21111
   *    that contains the regular expression body that will be converted to a regular expression                       // 21112
   *    as in the ngPattern directive.                                                                                 // 21113
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21114
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21115
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21116
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21117
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 21118
   *    `new RegExp('^abc$')`.<br />                                                                                   // 21119
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21120
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21121
   *    account.                                                                                                       // 21122
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21123
   *    interaction with the input element.                                                                            // 21124
   *                                                                                                                   // 21125
   * @example                                                                                                          // 21126
      <example name="url-input-directive" module="urlExample">                                                         // 21127
        <file name="index.html">                                                                                       // 21128
         <script>                                                                                                      // 21129
           angular.module('urlExample', [])                                                                            // 21130
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21131
               $scope.url = {                                                                                          // 21132
                 text: 'http://google.com'                                                                             // 21133
               };                                                                                                      // 21134
             }]);                                                                                                      // 21135
         </script>                                                                                                     // 21136
         <form name="myForm" ng-controller="ExampleController">                                                        // 21137
           <label>URL:                                                                                                 // 21138
             <input type="url" name="input" ng-model="url.text" required>                                              // 21139
           <label>                                                                                                     // 21140
           <div role="alert">                                                                                          // 21141
             <span class="error" ng-show="myForm.input.$error.required">                                               // 21142
               Required!</span>                                                                                        // 21143
             <span class="error" ng-show="myForm.input.$error.url">                                                    // 21144
               Not valid url!</span>                                                                                   // 21145
           </div>                                                                                                      // 21146
           <tt>text = {{url.text}}</tt><br/>                                                                           // 21147
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 21148
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 21149
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 21150
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 21151
           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>                                                   // 21152
          </form>                                                                                                      // 21153
        </file>                                                                                                        // 21154
        <file name="protractor.js" type="protractor">                                                                  // 21155
          var text = element(by.binding('url.text'));                                                                  // 21156
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21157
          var input = element(by.model('url.text'));                                                                   // 21158
                                                                                                                       // 21159
          it('should initialize to model', function() {                                                                // 21160
            expect(text.getText()).toContain('http://google.com');                                                     // 21161
            expect(valid.getText()).toContain('true');                                                                 // 21162
          });                                                                                                          // 21163
                                                                                                                       // 21164
          it('should be invalid if empty', function() {                                                                // 21165
            input.clear();                                                                                             // 21166
            input.sendKeys('');                                                                                        // 21167
                                                                                                                       // 21168
            expect(text.getText()).toEqual('text =');                                                                  // 21169
            expect(valid.getText()).toContain('false');                                                                // 21170
          });                                                                                                          // 21171
                                                                                                                       // 21172
          it('should be invalid if not url', function() {                                                              // 21173
            input.clear();                                                                                             // 21174
            input.sendKeys('box');                                                                                     // 21175
                                                                                                                       // 21176
            expect(valid.getText()).toContain('false');                                                                // 21177
          });                                                                                                          // 21178
        </file>                                                                                                        // 21179
      </example>                                                                                                       // 21180
   */                                                                                                                  // 21181
  'url': urlInputType,                                                                                                 // 21182
                                                                                                                       // 21183
                                                                                                                       // 21184
  /**                                                                                                                  // 21185
   * @ngdoc input                                                                                                      // 21186
   * @name input[email]                                                                                                // 21187
   *                                                                                                                   // 21188
   * @description                                                                                                      // 21189
   * Text input with email validation. Sets the `email` validation error key if not a valid email                      // 21190
   * address.                                                                                                          // 21191
   *                                                                                                                   // 21192
   * <div class="alert alert-warning">                                                                                 // 21193
   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex                  // 21194
   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can                    // 21195
   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})                      // 21196
   * </div>                                                                                                            // 21197
   *                                                                                                                   // 21198
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21199
   * @param {string=} name Property name of the form under which the control is published.                             // 21200
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21201
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21202
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21203
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21204
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21205
   *    minlength.                                                                                                     // 21206
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21207
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21208
   *    any length.                                                                                                    // 21209
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21210
   *    that contains the regular expression body that will be converted to a regular expression                       // 21211
   *    as in the ngPattern directive.                                                                                 // 21212
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21213
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21214
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21215
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21216
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 21217
   *    `new RegExp('^abc$')`.<br />                                                                                   // 21218
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21219
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21220
   *    account.                                                                                                       // 21221
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21222
   *    interaction with the input element.                                                                            // 21223
   *                                                                                                                   // 21224
   * @example                                                                                                          // 21225
      <example name="email-input-directive" module="emailExample">                                                     // 21226
        <file name="index.html">                                                                                       // 21227
         <script>                                                                                                      // 21228
           angular.module('emailExample', [])                                                                          // 21229
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21230
               $scope.email = {                                                                                        // 21231
                 text: 'me@example.com'                                                                                // 21232
               };                                                                                                      // 21233
             }]);                                                                                                      // 21234
         </script>                                                                                                     // 21235
           <form name="myForm" ng-controller="ExampleController">                                                      // 21236
             <label>Email:                                                                                             // 21237
               <input type="email" name="input" ng-model="email.text" required>                                        // 21238
             </label>                                                                                                  // 21239
             <div role="alert">                                                                                        // 21240
               <span class="error" ng-show="myForm.input.$error.required">                                             // 21241
                 Required!</span>                                                                                      // 21242
               <span class="error" ng-show="myForm.input.$error.email">                                                // 21243
                 Not valid email!</span>                                                                               // 21244
             </div>                                                                                                    // 21245
             <tt>text = {{email.text}}</tt><br/>                                                                       // 21246
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                               // 21247
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                               // 21248
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                           // 21249
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                       // 21250
             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>                                             // 21251
           </form>                                                                                                     // 21252
         </file>                                                                                                       // 21253
        <file name="protractor.js" type="protractor">                                                                  // 21254
          var text = element(by.binding('email.text'));                                                                // 21255
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21256
          var input = element(by.model('email.text'));                                                                 // 21257
                                                                                                                       // 21258
          it('should initialize to model', function() {                                                                // 21259
            expect(text.getText()).toContain('me@example.com');                                                        // 21260
            expect(valid.getText()).toContain('true');                                                                 // 21261
          });                                                                                                          // 21262
                                                                                                                       // 21263
          it('should be invalid if empty', function() {                                                                // 21264
            input.clear();                                                                                             // 21265
            input.sendKeys('');                                                                                        // 21266
            expect(text.getText()).toEqual('text =');                                                                  // 21267
            expect(valid.getText()).toContain('false');                                                                // 21268
          });                                                                                                          // 21269
                                                                                                                       // 21270
          it('should be invalid if not email', function() {                                                            // 21271
            input.clear();                                                                                             // 21272
            input.sendKeys('xxx');                                                                                     // 21273
                                                                                                                       // 21274
            expect(valid.getText()).toContain('false');                                                                // 21275
          });                                                                                                          // 21276
        </file>                                                                                                        // 21277
      </example>                                                                                                       // 21278
   */                                                                                                                  // 21279
  'email': emailInputType,                                                                                             // 21280
                                                                                                                       // 21281
                                                                                                                       // 21282
  /**                                                                                                                  // 21283
   * @ngdoc input                                                                                                      // 21284
   * @name input[radio]                                                                                                // 21285
   *                                                                                                                   // 21286
   * @description                                                                                                      // 21287
   * HTML radio button.                                                                                                // 21288
   *                                                                                                                   // 21289
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21290
   * @param {string} value The value to which the `ngModel` expression should be set when selected.                    // 21291
   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,                    // 21292
   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).                                       // 21293
   * @param {string=} name Property name of the form under which the control is published.                             // 21294
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21295
   *    interaction with the input element.                                                                            // 21296
   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio                       // 21297
   *    is selected. Should be used instead of the `value` attribute if you need                                       // 21298
   *    a non-string `ngModel` (`boolean`, `array`, ...).                                                              // 21299
   *                                                                                                                   // 21300
   * @example                                                                                                          // 21301
      <example name="radio-input-directive" module="radioExample">                                                     // 21302
        <file name="index.html">                                                                                       // 21303
         <script>                                                                                                      // 21304
           angular.module('radioExample', [])                                                                          // 21305
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21306
               $scope.color = {                                                                                        // 21307
                 name: 'blue'                                                                                          // 21308
               };                                                                                                      // 21309
               $scope.specialValue = {                                                                                 // 21310
                 "id": "12345",                                                                                        // 21311
                 "value": "green"                                                                                      // 21312
               };                                                                                                      // 21313
             }]);                                                                                                      // 21314
         </script>                                                                                                     // 21315
         <form name="myForm" ng-controller="ExampleController">                                                        // 21316
           <label>                                                                                                     // 21317
             <input type="radio" ng-model="color.name" value="red">                                                    // 21318
             Red                                                                                                       // 21319
           </label><br/>                                                                                               // 21320
           <label>                                                                                                     // 21321
             <input type="radio" ng-model="color.name" ng-value="specialValue">                                        // 21322
             Green                                                                                                     // 21323
           </label><br/>                                                                                               // 21324
           <label>                                                                                                     // 21325
             <input type="radio" ng-model="color.name" value="blue">                                                   // 21326
             Blue                                                                                                      // 21327
           </label><br/>                                                                                               // 21328
           <tt>color = {{color.name | json}}</tt><br/>                                                                 // 21329
          </form>                                                                                                      // 21330
          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.        // 21331
        </file>                                                                                                        // 21332
        <file name="protractor.js" type="protractor">                                                                  // 21333
          it('should change state', function() {                                                                       // 21334
            var color = element(by.binding('color.name'));                                                             // 21335
                                                                                                                       // 21336
            expect(color.getText()).toContain('blue');                                                                 // 21337
                                                                                                                       // 21338
            element.all(by.model('color.name')).get(0).click();                                                        // 21339
                                                                                                                       // 21340
            expect(color.getText()).toContain('red');                                                                  // 21341
          });                                                                                                          // 21342
        </file>                                                                                                        // 21343
      </example>                                                                                                       // 21344
   */                                                                                                                  // 21345
  'radio': radioInputType,                                                                                             // 21346
                                                                                                                       // 21347
                                                                                                                       // 21348
  /**                                                                                                                  // 21349
   * @ngdoc input                                                                                                      // 21350
   * @name input[checkbox]                                                                                             // 21351
   *                                                                                                                   // 21352
   * @description                                                                                                      // 21353
   * HTML checkbox.                                                                                                    // 21354
   *                                                                                                                   // 21355
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21356
   * @param {string=} name Property name of the form under which the control is published.                             // 21357
   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.                   // 21358
   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.              // 21359
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21360
   *    interaction with the input element.                                                                            // 21361
   *                                                                                                                   // 21362
   * @example                                                                                                          // 21363
      <example name="checkbox-input-directive" module="checkboxExample">                                               // 21364
        <file name="index.html">                                                                                       // 21365
         <script>                                                                                                      // 21366
           angular.module('checkboxExample', [])                                                                       // 21367
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21368
               $scope.checkboxModel = {                                                                                // 21369
                value1 : true,                                                                                         // 21370
                value2 : 'YES'                                                                                         // 21371
              };                                                                                                       // 21372
             }]);                                                                                                      // 21373
         </script>                                                                                                     // 21374
         <form name="myForm" ng-controller="ExampleController">                                                        // 21375
           <label>Value1:                                                                                              // 21376
             <input type="checkbox" ng-model="checkboxModel.value1">                                                   // 21377
           </label><br/>                                                                                               // 21378
           <label>Value2:                                                                                              // 21379
             <input type="checkbox" ng-model="checkboxModel.value2"                                                    // 21380
                    ng-true-value="'YES'" ng-false-value="'NO'">                                                       // 21381
            </label><br/>                                                                                              // 21382
           <tt>value1 = {{checkboxModel.value1}}</tt><br/>                                                             // 21383
           <tt>value2 = {{checkboxModel.value2}}</tt><br/>                                                             // 21384
          </form>                                                                                                      // 21385
        </file>                                                                                                        // 21386
        <file name="protractor.js" type="protractor">                                                                  // 21387
          it('should change state', function() {                                                                       // 21388
            var value1 = element(by.binding('checkboxModel.value1'));                                                  // 21389
            var value2 = element(by.binding('checkboxModel.value2'));                                                  // 21390
                                                                                                                       // 21391
            expect(value1.getText()).toContain('true');                                                                // 21392
            expect(value2.getText()).toContain('YES');                                                                 // 21393
                                                                                                                       // 21394
            element(by.model('checkboxModel.value1')).click();                                                         // 21395
            element(by.model('checkboxModel.value2')).click();                                                         // 21396
                                                                                                                       // 21397
            expect(value1.getText()).toContain('false');                                                               // 21398
            expect(value2.getText()).toContain('NO');                                                                  // 21399
          });                                                                                                          // 21400
        </file>                                                                                                        // 21401
      </example>                                                                                                       // 21402
   */                                                                                                                  // 21403
  'checkbox': checkboxInputType,                                                                                       // 21404
                                                                                                                       // 21405
  'hidden': noop,                                                                                                      // 21406
  'button': noop,                                                                                                      // 21407
  'submit': noop,                                                                                                      // 21408
  'reset': noop,                                                                                                       // 21409
  'file': noop                                                                                                         // 21410
};                                                                                                                     // 21411
                                                                                                                       // 21412
function stringBasedInputType(ctrl) {                                                                                  // 21413
  ctrl.$formatters.push(function(value) {                                                                              // 21414
    return ctrl.$isEmpty(value) ? value : value.toString();                                                            // 21415
  });                                                                                                                  // 21416
}                                                                                                                      // 21417
                                                                                                                       // 21418
function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                               // 21419
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21420
  stringBasedInputType(ctrl);                                                                                          // 21421
}                                                                                                                      // 21422
                                                                                                                       // 21423
function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                               // 21424
  var type = lowercase(element[0].type);                                                                               // 21425
                                                                                                                       // 21426
  // In composition mode, users are still inputing intermediate text buffer,                                           // 21427
  // hold the listener until composition is done.                                                                      // 21428
  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent                  // 21429
  if (!$sniffer.android) {                                                                                             // 21430
    var composing = false;                                                                                             // 21431
                                                                                                                       // 21432
    element.on('compositionstart', function(data) {                                                                    // 21433
      composing = true;                                                                                                // 21434
    });                                                                                                                // 21435
                                                                                                                       // 21436
    element.on('compositionend', function() {                                                                          // 21437
      composing = false;                                                                                               // 21438
      listener();                                                                                                      // 21439
    });                                                                                                                // 21440
  }                                                                                                                    // 21441
                                                                                                                       // 21442
  var listener = function(ev) {                                                                                        // 21443
    if (timeout) {                                                                                                     // 21444
      $browser.defer.cancel(timeout);                                                                                  // 21445
      timeout = null;                                                                                                  // 21446
    }                                                                                                                  // 21447
    if (composing) return;                                                                                             // 21448
    var value = element.val(),                                                                                         // 21449
        event = ev && ev.type;                                                                                         // 21450
                                                                                                                       // 21451
    // By default we will trim the value                                                                               // 21452
    // If the attribute ng-trim exists we will avoid trimming                                                          // 21453
    // If input type is 'password', the value is never trimmed                                                         // 21454
    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {                                            // 21455
      value = trim(value);                                                                                             // 21456
    }                                                                                                                  // 21457
                                                                                                                       // 21458
    // If a control is suffering from bad input (due to native validators), browsers discard its                       // 21459
    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the                        // 21460
    // control's value is the same empty value twice in a row.                                                         // 21461
    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {                                   // 21462
      ctrl.$setViewValue(value, event);                                                                                // 21463
    }                                                                                                                  // 21464
  };                                                                                                                   // 21465
                                                                                                                       // 21466
  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the                     // 21467
  // input event on backspace, delete or cut                                                                           // 21468
  if ($sniffer.hasEvent('input')) {                                                                                    // 21469
    element.on('input', listener);                                                                                     // 21470
  } else {                                                                                                             // 21471
    var timeout;                                                                                                       // 21472
                                                                                                                       // 21473
    var deferListener = function(ev, input, origValue) {                                                               // 21474
      if (!timeout) {                                                                                                  // 21475
        timeout = $browser.defer(function() {                                                                          // 21476
          timeout = null;                                                                                              // 21477
          if (!input || input.value !== origValue) {                                                                   // 21478
            listener(ev);                                                                                              // 21479
          }                                                                                                            // 21480
        });                                                                                                            // 21481
      }                                                                                                                // 21482
    };                                                                                                                 // 21483
                                                                                                                       // 21484
    element.on('keydown', function(event) {                                                                            // 21485
      var key = event.keyCode;                                                                                         // 21486
                                                                                                                       // 21487
      // ignore                                                                                                        // 21488
      //    command            modifiers                   arrows                                                      // 21489
      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;                                    // 21490
                                                                                                                       // 21491
      deferListener(event, this, this.value);                                                                          // 21492
    });                                                                                                                // 21493
                                                                                                                       // 21494
    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it             // 21495
    if ($sniffer.hasEvent('paste')) {                                                                                  // 21496
      element.on('paste cut', deferListener);                                                                          // 21497
    }                                                                                                                  // 21498
  }                                                                                                                    // 21499
                                                                                                                       // 21500
  // if user paste into input using mouse on older browser                                                             // 21501
  // or form autocomplete on newer browser, we need "change" event to catch it                                         // 21502
  element.on('change', listener);                                                                                      // 21503
                                                                                                                       // 21504
  ctrl.$render = function() {                                                                                          // 21505
    element.val(ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);                                                // 21506
  };                                                                                                                   // 21507
}                                                                                                                      // 21508
                                                                                                                       // 21509
function weekParser(isoWeek, existingDate) {                                                                           // 21510
  if (isDate(isoWeek)) {                                                                                               // 21511
    return isoWeek;                                                                                                    // 21512
  }                                                                                                                    // 21513
                                                                                                                       // 21514
  if (isString(isoWeek)) {                                                                                             // 21515
    WEEK_REGEXP.lastIndex = 0;                                                                                         // 21516
    var parts = WEEK_REGEXP.exec(isoWeek);                                                                             // 21517
    if (parts) {                                                                                                       // 21518
      var year = +parts[1],                                                                                            // 21519
          week = +parts[2],                                                                                            // 21520
          hours = 0,                                                                                                   // 21521
          minutes = 0,                                                                                                 // 21522
          seconds = 0,                                                                                                 // 21523
          milliseconds = 0,                                                                                            // 21524
          firstThurs = getFirstThursdayOfYear(year),                                                                   // 21525
          addDays = (week - 1) * 7;                                                                                    // 21526
                                                                                                                       // 21527
      if (existingDate) {                                                                                              // 21528
        hours = existingDate.getHours();                                                                               // 21529
        minutes = existingDate.getMinutes();                                                                           // 21530
        seconds = existingDate.getSeconds();                                                                           // 21531
        milliseconds = existingDate.getMilliseconds();                                                                 // 21532
      }                                                                                                                // 21533
                                                                                                                       // 21534
      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);                 // 21535
    }                                                                                                                  // 21536
  }                                                                                                                    // 21537
                                                                                                                       // 21538
  return NaN;                                                                                                          // 21539
}                                                                                                                      // 21540
                                                                                                                       // 21541
function createDateParser(regexp, mapping) {                                                                           // 21542
  return function(iso, date) {                                                                                         // 21543
    var parts, map;                                                                                                    // 21544
                                                                                                                       // 21545
    if (isDate(iso)) {                                                                                                 // 21546
      return iso;                                                                                                      // 21547
    }                                                                                                                  // 21548
                                                                                                                       // 21549
    if (isString(iso)) {                                                                                               // 21550
      // When a date is JSON'ified to wraps itself inside of an extra                                                  // 21551
      // set of double quotes. This makes the date parsing code unable                                                 // 21552
      // to match the date string and parse it as a date.                                                              // 21553
      if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {                                                 // 21554
        iso = iso.substring(1, iso.length - 1);                                                                        // 21555
      }                                                                                                                // 21556
      if (ISO_DATE_REGEXP.test(iso)) {                                                                                 // 21557
        return new Date(iso);                                                                                          // 21558
      }                                                                                                                // 21559
      regexp.lastIndex = 0;                                                                                            // 21560
      parts = regexp.exec(iso);                                                                                        // 21561
                                                                                                                       // 21562
      if (parts) {                                                                                                     // 21563
        parts.shift();                                                                                                 // 21564
        if (date) {                                                                                                    // 21565
          map = {                                                                                                      // 21566
            yyyy: date.getFullYear(),                                                                                  // 21567
            MM: date.getMonth() + 1,                                                                                   // 21568
            dd: date.getDate(),                                                                                        // 21569
            HH: date.getHours(),                                                                                       // 21570
            mm: date.getMinutes(),                                                                                     // 21571
            ss: date.getSeconds(),                                                                                     // 21572
            sss: date.getMilliseconds() / 1000                                                                         // 21573
          };                                                                                                           // 21574
        } else {                                                                                                       // 21575
          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };                                             // 21576
        }                                                                                                              // 21577
                                                                                                                       // 21578
        forEach(parts, function(part, index) {                                                                         // 21579
          if (index < mapping.length) {                                                                                // 21580
            map[mapping[index]] = +part;                                                                               // 21581
          }                                                                                                            // 21582
        });                                                                                                            // 21583
        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);               // 21584
      }                                                                                                                // 21585
    }                                                                                                                  // 21586
                                                                                                                       // 21587
    return NaN;                                                                                                        // 21588
  };                                                                                                                   // 21589
}                                                                                                                      // 21590
                                                                                                                       // 21591
function createDateInputType(type, regexp, parseDate, format) {                                                        // 21592
  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {                      // 21593
    badInputChecker(scope, element, attr, ctrl);                                                                       // 21594
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                     // 21595
    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;                                                    // 21596
    var previousDate;                                                                                                  // 21597
                                                                                                                       // 21598
    ctrl.$$parserName = type;                                                                                          // 21599
    ctrl.$parsers.push(function(value) {                                                                               // 21600
      if (ctrl.$isEmpty(value)) return null;                                                                           // 21601
      if (regexp.test(value)) {                                                                                        // 21602
        // Note: We cannot read ctrl.$modelValue, as there might be a different                                        // 21603
        // parser/formatter in the processing chain so that the model                                                  // 21604
        // contains some different data format!                                                                        // 21605
        var parsedDate = parseDate(value, previousDate);                                                               // 21606
        if (timezone) {                                                                                                // 21607
          parsedDate = convertTimezoneToLocal(parsedDate, timezone);                                                   // 21608
        }                                                                                                              // 21609
        return parsedDate;                                                                                             // 21610
      }                                                                                                                // 21611
      return undefined;                                                                                                // 21612
    });                                                                                                                // 21613
                                                                                                                       // 21614
    ctrl.$formatters.push(function(value) {                                                                            // 21615
      if (value && !isDate(value)) {                                                                                   // 21616
        throw $ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);                                         // 21617
      }                                                                                                                // 21618
      if (isValidDate(value)) {                                                                                        // 21619
        previousDate = value;                                                                                          // 21620
        if (previousDate && timezone) {                                                                                // 21621
          previousDate = convertTimezoneToLocal(previousDate, timezone, true);                                         // 21622
        }                                                                                                              // 21623
        return $filter('date')(value, format, timezone);                                                               // 21624
      } else {                                                                                                         // 21625
        previousDate = null;                                                                                           // 21626
        return '';                                                                                                     // 21627
      }                                                                                                                // 21628
    });                                                                                                                // 21629
                                                                                                                       // 21630
    if (isDefined(attr.min) || attr.ngMin) {                                                                           // 21631
      var minVal;                                                                                                      // 21632
      ctrl.$validators.min = function(value) {                                                                         // 21633
        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;                               // 21634
      };                                                                                                               // 21635
      attr.$observe('min', function(val) {                                                                             // 21636
        minVal = parseObservedDateValue(val);                                                                          // 21637
        ctrl.$validate();                                                                                              // 21638
      });                                                                                                              // 21639
    }                                                                                                                  // 21640
                                                                                                                       // 21641
    if (isDefined(attr.max) || attr.ngMax) {                                                                           // 21642
      var maxVal;                                                                                                      // 21643
      ctrl.$validators.max = function(value) {                                                                         // 21644
        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;                               // 21645
      };                                                                                                               // 21646
      attr.$observe('max', function(val) {                                                                             // 21647
        maxVal = parseObservedDateValue(val);                                                                          // 21648
        ctrl.$validate();                                                                                              // 21649
      });                                                                                                              // 21650
    }                                                                                                                  // 21651
                                                                                                                       // 21652
    function isValidDate(value) {                                                                                      // 21653
      // Invalid Date: getTime() returns NaN                                                                           // 21654
      return value && !(value.getTime && value.getTime() !== value.getTime());                                         // 21655
    }                                                                                                                  // 21656
                                                                                                                       // 21657
    function parseObservedDateValue(val) {                                                                             // 21658
      return isDefined(val) ? (isDate(val) ? val : parseDate(val)) : undefined;                                        // 21659
    }                                                                                                                  // 21660
  };                                                                                                                   // 21661
}                                                                                                                      // 21662
                                                                                                                       // 21663
function badInputChecker(scope, element, attr, ctrl) {                                                                 // 21664
  var node = element[0];                                                                                               // 21665
  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);                                         // 21666
  if (nativeValidation) {                                                                                              // 21667
    ctrl.$parsers.push(function(value) {                                                                               // 21668
      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};                                                      // 21669
      // Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):                   // 21670
      // - also sets validity.badInput (should only be validity.typeMismatch).                                         // 21671
      // - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)        // 21672
      // - can ignore this case as we can still read out the erroneous email...                                        // 21673
      return validity.badInput && !validity.typeMismatch ? undefined : value;                                          // 21674
    });                                                                                                                // 21675
  }                                                                                                                    // 21676
}                                                                                                                      // 21677
                                                                                                                       // 21678
function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                             // 21679
  badInputChecker(scope, element, attr, ctrl);                                                                         // 21680
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21681
                                                                                                                       // 21682
  ctrl.$$parserName = 'number';                                                                                        // 21683
  ctrl.$parsers.push(function(value) {                                                                                 // 21684
    if (ctrl.$isEmpty(value))      return null;                                                                        // 21685
    if (NUMBER_REGEXP.test(value)) return parseFloat(value);                                                           // 21686
    return undefined;                                                                                                  // 21687
  });                                                                                                                  // 21688
                                                                                                                       // 21689
  ctrl.$formatters.push(function(value) {                                                                              // 21690
    if (!ctrl.$isEmpty(value)) {                                                                                       // 21691
      if (!isNumber(value)) {                                                                                          // 21692
        throw $ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);                                        // 21693
      }                                                                                                                // 21694
      value = value.toString();                                                                                        // 21695
    }                                                                                                                  // 21696
    return value;                                                                                                      // 21697
  });                                                                                                                  // 21698
                                                                                                                       // 21699
  if (isDefined(attr.min) || attr.ngMin) {                                                                             // 21700
    var minVal;                                                                                                        // 21701
    ctrl.$validators.min = function(value) {                                                                           // 21702
      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;                                           // 21703
    };                                                                                                                 // 21704
                                                                                                                       // 21705
    attr.$observe('min', function(val) {                                                                               // 21706
      if (isDefined(val) && !isNumber(val)) {                                                                          // 21707
        val = parseFloat(val, 10);                                                                                     // 21708
      }                                                                                                                // 21709
      minVal = isNumber(val) && !isNaN(val) ? val : undefined;                                                         // 21710
      // TODO(matsko): implement validateLater to reduce number of validations                                         // 21711
      ctrl.$validate();                                                                                                // 21712
    });                                                                                                                // 21713
  }                                                                                                                    // 21714
                                                                                                                       // 21715
  if (isDefined(attr.max) || attr.ngMax) {                                                                             // 21716
    var maxVal;                                                                                                        // 21717
    ctrl.$validators.max = function(value) {                                                                           // 21718
      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;                                           // 21719
    };                                                                                                                 // 21720
                                                                                                                       // 21721
    attr.$observe('max', function(val) {                                                                               // 21722
      if (isDefined(val) && !isNumber(val)) {                                                                          // 21723
        val = parseFloat(val, 10);                                                                                     // 21724
      }                                                                                                                // 21725
      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;                                                         // 21726
      // TODO(matsko): implement validateLater to reduce number of validations                                         // 21727
      ctrl.$validate();                                                                                                // 21728
    });                                                                                                                // 21729
  }                                                                                                                    // 21730
}                                                                                                                      // 21731
                                                                                                                       // 21732
function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                                // 21733
  // Note: no badInputChecker here by purpose as `url` is only a validation                                            // 21734
  // in browsers, i.e. we can always read out input.value even if it is not valid!                                     // 21735
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21736
  stringBasedInputType(ctrl);                                                                                          // 21737
                                                                                                                       // 21738
  ctrl.$$parserName = 'url';                                                                                           // 21739
  ctrl.$validators.url = function(modelValue, viewValue) {                                                             // 21740
    var value = modelValue || viewValue;                                                                               // 21741
    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);                                                             // 21742
  };                                                                                                                   // 21743
}                                                                                                                      // 21744
                                                                                                                       // 21745
function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                              // 21746
  // Note: no badInputChecker here by purpose as `url` is only a validation                                            // 21747
  // in browsers, i.e. we can always read out input.value even if it is not valid!                                     // 21748
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21749
  stringBasedInputType(ctrl);                                                                                          // 21750
                                                                                                                       // 21751
  ctrl.$$parserName = 'email';                                                                                         // 21752
  ctrl.$validators.email = function(modelValue, viewValue) {                                                           // 21753
    var value = modelValue || viewValue;                                                                               // 21754
    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);                                                           // 21755
  };                                                                                                                   // 21756
}                                                                                                                      // 21757
                                                                                                                       // 21758
function radioInputType(scope, element, attr, ctrl) {                                                                  // 21759
  // make the name unique, if not defined                                                                              // 21760
  if (isUndefined(attr.name)) {                                                                                        // 21761
    element.attr('name', nextUid());                                                                                   // 21762
  }                                                                                                                    // 21763
                                                                                                                       // 21764
  var listener = function(ev) {                                                                                        // 21765
    if (element[0].checked) {                                                                                          // 21766
      ctrl.$setViewValue(attr.value, ev && ev.type);                                                                   // 21767
    }                                                                                                                  // 21768
  };                                                                                                                   // 21769
                                                                                                                       // 21770
  element.on('click', listener);                                                                                       // 21771
                                                                                                                       // 21772
  ctrl.$render = function() {                                                                                          // 21773
    var value = attr.value;                                                                                            // 21774
    element[0].checked = (value == ctrl.$viewValue);                                                                   // 21775
  };                                                                                                                   // 21776
                                                                                                                       // 21777
  attr.$observe('value', ctrl.$render);                                                                                // 21778
}                                                                                                                      // 21779
                                                                                                                       // 21780
function parseConstantExpr($parse, context, name, expression, fallback) {                                              // 21781
  var parseFn;                                                                                                         // 21782
  if (isDefined(expression)) {                                                                                         // 21783
    parseFn = $parse(expression);                                                                                      // 21784
    if (!parseFn.constant) {                                                                                           // 21785
      throw minErr('ngModel')('constexpr', 'Expected constant expression for `{0}`, but saw ' +                        // 21786
                                   '`{1}`.', name, expression);                                                        // 21787
    }                                                                                                                  // 21788
    return parseFn(context);                                                                                           // 21789
  }                                                                                                                    // 21790
  return fallback;                                                                                                     // 21791
}                                                                                                                      // 21792
                                                                                                                       // 21793
function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {                          // 21794
  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);                             // 21795
  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);                         // 21796
                                                                                                                       // 21797
  var listener = function(ev) {                                                                                        // 21798
    ctrl.$setViewValue(element[0].checked, ev && ev.type);                                                             // 21799
  };                                                                                                                   // 21800
                                                                                                                       // 21801
  element.on('click', listener);                                                                                       // 21802
                                                                                                                       // 21803
  ctrl.$render = function() {                                                                                          // 21804
    element[0].checked = ctrl.$viewValue;                                                                              // 21805
  };                                                                                                                   // 21806
                                                                                                                       // 21807
  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`             // 21808
  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert                 // 21809
  // it to a boolean.                                                                                                  // 21810
  ctrl.$isEmpty = function(value) {                                                                                    // 21811
    return value === false;                                                                                            // 21812
  };                                                                                                                   // 21813
                                                                                                                       // 21814
  ctrl.$formatters.push(function(value) {                                                                              // 21815
    return equals(value, trueValue);                                                                                   // 21816
  });                                                                                                                  // 21817
                                                                                                                       // 21818
  ctrl.$parsers.push(function(value) {                                                                                 // 21819
    return value ? trueValue : falseValue;                                                                             // 21820
  });                                                                                                                  // 21821
}                                                                                                                      // 21822
                                                                                                                       // 21823
                                                                                                                       // 21824
/**                                                                                                                    // 21825
 * @ngdoc directive                                                                                                    // 21826
 * @name textarea                                                                                                      // 21827
 * @restrict E                                                                                                         // 21828
 *                                                                                                                     // 21829
 * @description                                                                                                        // 21830
 * HTML textarea element control with angular data-binding. The data-binding and validation                            // 21831
 * properties of this element are exactly the same as those of the                                                     // 21832
 * {@link ng.directive:input input element}.                                                                           // 21833
 *                                                                                                                     // 21834
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 21835
 * @param {string=} name Property name of the form under which the control is published.                               // 21836
 * @param {string=} required Sets `required` validation error key if the value is not entered.                         // 21837
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                       // 21838
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                        // 21839
 *    `required` when you want to data-bind to the `required` attribute.                                               // 21840
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                     // 21841
 *    minlength.                                                                                                       // 21842
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                      // 21843
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any                   // 21844
 *    length.                                                                                                          // 21845
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                  // 21846
 *    a RegExp found by evaluating the Angular expression given in the attribute value.                                // 21847
 *    If the expression evaluates to a RegExp object, then this is used directly.                                      // 21848
 *    If the expression evaluates to a string, then it will be converted to a RegExp                                   // 21849
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                          // 21850
 *    `new RegExp('^abc$')`.<br />                                                                                     // 21851
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                     // 21852
 *    start at the index of the last search's match, thus not taking the whole input value into                        // 21853
 *    account.                                                                                                         // 21854
 * @param {string=} ngChange Angular expression to be executed when input changes due to user                          // 21855
 *    interaction with the input element.                                                                              // 21856
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                      // 21857
 */                                                                                                                    // 21858
                                                                                                                       // 21859
                                                                                                                       // 21860
/**                                                                                                                    // 21861
 * @ngdoc directive                                                                                                    // 21862
 * @name input                                                                                                         // 21863
 * @restrict E                                                                                                         // 21864
 *                                                                                                                     // 21865
 * @description                                                                                                        // 21866
 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,            // 21867
 * input state control, and validation.                                                                                // 21868
 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.             // 21869
 *                                                                                                                     // 21870
 * <div class="alert alert-warning">                                                                                   // 21871
 * **Note:** Not every feature offered is available for all input types.                                               // 21872
 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.                      // 21873
 * </div>                                                                                                              // 21874
 *                                                                                                                     // 21875
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 21876
 * @param {string=} name Property name of the form under which the control is published.                               // 21877
 * @param {string=} required Sets `required` validation error key if the value is not entered.                         // 21878
 * @param {boolean=} ngRequired Sets `required` attribute if set to true                                               // 21879
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                     // 21880
 *    minlength.                                                                                                       // 21881
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                      // 21882
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any                   // 21883
 *    length.                                                                                                          // 21884
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                  // 21885
 *    a RegExp found by evaluating the Angular expression given in the attribute value.                                // 21886
 *    If the expression evaluates to a RegExp object, then this is used directly.                                      // 21887
 *    If the expression evaluates to a string, then it will be converted to a RegExp                                   // 21888
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                          // 21889
 *    `new RegExp('^abc$')`.<br />                                                                                     // 21890
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                     // 21891
 *    start at the index of the last search's match, thus not taking the whole input value into                        // 21892
 *    account.                                                                                                         // 21893
 * @param {string=} ngChange Angular expression to be executed when input changes due to user                          // 21894
 *    interaction with the input element.                                                                              // 21895
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                      // 21896
 *    This parameter is ignored for input[type=password] controls, which will never trim the                           // 21897
 *    input.                                                                                                           // 21898
 *                                                                                                                     // 21899
 * @example                                                                                                            // 21900
    <example name="input-directive" module="inputExample">                                                             // 21901
      <file name="index.html">                                                                                         // 21902
       <script>                                                                                                        // 21903
          angular.module('inputExample', [])                                                                           // 21904
            .controller('ExampleController', ['$scope', function($scope) {                                             // 21905
              $scope.user = {name: 'guest', last: 'visitor'};                                                          // 21906
            }]);                                                                                                       // 21907
       </script>                                                                                                       // 21908
       <div ng-controller="ExampleController">                                                                         // 21909
         <form name="myForm">                                                                                          // 21910
           <label>                                                                                                     // 21911
              User name:                                                                                               // 21912
              <input type="text" name="userName" ng-model="user.name" required>                                        // 21913
           </label>                                                                                                    // 21914
           <div role="alert">                                                                                          // 21915
             <span class="error" ng-show="myForm.userName.$error.required">                                            // 21916
              Required!</span>                                                                                         // 21917
           </div>                                                                                                      // 21918
           <label>                                                                                                     // 21919
              Last name:                                                                                               // 21920
              <input type="text" name="lastName" ng-model="user.last"                                                  // 21921
              ng-minlength="3" ng-maxlength="10">                                                                      // 21922
           </label>                                                                                                    // 21923
           <div role="alert">                                                                                          // 21924
             <span class="error" ng-show="myForm.lastName.$error.minlength">                                           // 21925
               Too short!</span>                                                                                       // 21926
             <span class="error" ng-show="myForm.lastName.$error.maxlength">                                           // 21927
               Too long!</span>                                                                                        // 21928
           </div>                                                                                                      // 21929
         </form>                                                                                                       // 21930
         <hr>                                                                                                          // 21931
         <tt>user = {{user}}</tt><br/>                                                                                 // 21932
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>                                             // 21933
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>                                             // 21934
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>                                             // 21935
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>                                             // 21936
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                               // 21937
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                           // 21938
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>                                         // 21939
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>                                         // 21940
       </div>                                                                                                          // 21941
      </file>                                                                                                          // 21942
      <file name="protractor.js" type="protractor">                                                                    // 21943
        var user = element(by.exactBinding('user'));                                                                   // 21944
        var userNameValid = element(by.binding('myForm.userName.$valid'));                                             // 21945
        var lastNameValid = element(by.binding('myForm.lastName.$valid'));                                             // 21946
        var lastNameError = element(by.binding('myForm.lastName.$error'));                                             // 21947
        var formValid = element(by.binding('myForm.$valid'));                                                          // 21948
        var userNameInput = element(by.model('user.name'));                                                            // 21949
        var userLastInput = element(by.model('user.last'));                                                            // 21950
                                                                                                                       // 21951
        it('should initialize to model', function() {                                                                  // 21952
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');                                       // 21953
          expect(userNameValid.getText()).toContain('true');                                                           // 21954
          expect(formValid.getText()).toContain('true');                                                               // 21955
        });                                                                                                            // 21956
                                                                                                                       // 21957
        it('should be invalid if empty when required', function() {                                                    // 21958
          userNameInput.clear();                                                                                       // 21959
          userNameInput.sendKeys('');                                                                                  // 21960
                                                                                                                       // 21961
          expect(user.getText()).toContain('{"last":"visitor"}');                                                      // 21962
          expect(userNameValid.getText()).toContain('false');                                                          // 21963
          expect(formValid.getText()).toContain('false');                                                              // 21964
        });                                                                                                            // 21965
                                                                                                                       // 21966
        it('should be valid if empty when min length is set', function() {                                             // 21967
          userLastInput.clear();                                                                                       // 21968
          userLastInput.sendKeys('');                                                                                  // 21969
                                                                                                                       // 21970
          expect(user.getText()).toContain('{"name":"guest","last":""}');                                              // 21971
          expect(lastNameValid.getText()).toContain('true');                                                           // 21972
          expect(formValid.getText()).toContain('true');                                                               // 21973
        });                                                                                                            // 21974
                                                                                                                       // 21975
        it('should be invalid if less than required min length', function() {                                          // 21976
          userLastInput.clear();                                                                                       // 21977
          userLastInput.sendKeys('xx');                                                                                // 21978
                                                                                                                       // 21979
          expect(user.getText()).toContain('{"name":"guest"}');                                                        // 21980
          expect(lastNameValid.getText()).toContain('false');                                                          // 21981
          expect(lastNameError.getText()).toContain('minlength');                                                      // 21982
          expect(formValid.getText()).toContain('false');                                                              // 21983
        });                                                                                                            // 21984
                                                                                                                       // 21985
        it('should be invalid if longer than max length', function() {                                                 // 21986
          userLastInput.clear();                                                                                       // 21987
          userLastInput.sendKeys('some ridiculously long name');                                                       // 21988
                                                                                                                       // 21989
          expect(user.getText()).toContain('{"name":"guest"}');                                                        // 21990
          expect(lastNameValid.getText()).toContain('false');                                                          // 21991
          expect(lastNameError.getText()).toContain('maxlength');                                                      // 21992
          expect(formValid.getText()).toContain('false');                                                              // 21993
        });                                                                                                            // 21994
      </file>                                                                                                          // 21995
    </example>                                                                                                         // 21996
 */                                                                                                                    // 21997
var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',                                                     // 21998
    function($browser, $sniffer, $filter, $parse) {                                                                    // 21999
  return {                                                                                                             // 22000
    restrict: 'E',                                                                                                     // 22001
    require: ['?ngModel'],                                                                                             // 22002
    link: {                                                                                                            // 22003
      pre: function(scope, element, attr, ctrls) {                                                                     // 22004
        if (ctrls[0]) {                                                                                                // 22005
          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,                // 22006
                                                              $browser, $filter, $parse);                              // 22007
        }                                                                                                              // 22008
      }                                                                                                                // 22009
    }                                                                                                                  // 22010
  };                                                                                                                   // 22011
}];                                                                                                                    // 22012
                                                                                                                       // 22013
                                                                                                                       // 22014
                                                                                                                       // 22015
var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;                                                                      // 22016
/**                                                                                                                    // 22017
 * @ngdoc directive                                                                                                    // 22018
 * @name ngValue                                                                                                       // 22019
 *                                                                                                                     // 22020
 * @description                                                                                                        // 22021
 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},                       // 22022
 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to                       // 22023
 * the bound value.                                                                                                    // 22024
 *                                                                                                                     // 22025
 * `ngValue` is useful when dynamically generating lists of radio buttons using                                        // 22026
 * {@link ngRepeat `ngRepeat`}, as shown below.                                                                        // 22027
 *                                                                                                                     // 22028
 * Likewise, `ngValue` can be used to generate `<option>` elements for                                                 // 22029
 * the {@link select `select`} element. In that case however, only strings are supported                               // 22030
 * for the `value `attribute, so the resulting `ngModel` will always be a string.                                      // 22031
 * Support for `select` models with non-string values is available via `ngOptions`.                                    // 22032
 *                                                                                                                     // 22033
 * @element input                                                                                                      // 22034
 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute                     // 22035
 *   of the `input` element                                                                                            // 22036
 *                                                                                                                     // 22037
 * @example                                                                                                            // 22038
    <example name="ngValue-directive" module="valueExample">                                                           // 22039
      <file name="index.html">                                                                                         // 22040
       <script>                                                                                                        // 22041
          angular.module('valueExample', [])                                                                           // 22042
            .controller('ExampleController', ['$scope', function($scope) {                                             // 22043
              $scope.names = ['pizza', 'unicorns', 'robots'];                                                          // 22044
              $scope.my = { favorite: 'unicorns' };                                                                    // 22045
            }]);                                                                                                       // 22046
       </script>                                                                                                       // 22047
        <form ng-controller="ExampleController">                                                                       // 22048
          <h2>Which is your favorite?</h2>                                                                             // 22049
            <label ng-repeat="name in names" for="{{name}}">                                                           // 22050
              {{name}}                                                                                                 // 22051
              <input type="radio"                                                                                      // 22052
                     ng-model="my.favorite"                                                                            // 22053
                     ng-value="name"                                                                                   // 22054
                     id="{{name}}"                                                                                     // 22055
                     name="favorite">                                                                                  // 22056
            </label>                                                                                                   // 22057
          <div>You chose {{my.favorite}}</div>                                                                         // 22058
        </form>                                                                                                        // 22059
      </file>                                                                                                          // 22060
      <file name="protractor.js" type="protractor">                                                                    // 22061
        var favorite = element(by.binding('my.favorite'));                                                             // 22062
                                                                                                                       // 22063
        it('should initialize to model', function() {                                                                  // 22064
          expect(favorite.getText()).toContain('unicorns');                                                            // 22065
        });                                                                                                            // 22066
        it('should bind the values to the inputs', function() {                                                        // 22067
          element.all(by.model('my.favorite')).get(0).click();                                                         // 22068
          expect(favorite.getText()).toContain('pizza');                                                               // 22069
        });                                                                                                            // 22070
      </file>                                                                                                          // 22071
    </example>                                                                                                         // 22072
 */                                                                                                                    // 22073
var ngValueDirective = function() {                                                                                    // 22074
  return {                                                                                                             // 22075
    restrict: 'A',                                                                                                     // 22076
    priority: 100,                                                                                                     // 22077
    compile: function(tpl, tplAttr) {                                                                                  // 22078
      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {                                                               // 22079
        return function ngValueConstantLink(scope, elm, attr) {                                                        // 22080
          attr.$set('value', scope.$eval(attr.ngValue));                                                               // 22081
        };                                                                                                             // 22082
      } else {                                                                                                         // 22083
        return function ngValueLink(scope, elm, attr) {                                                                // 22084
          scope.$watch(attr.ngValue, function valueWatchAction(value) {                                                // 22085
            attr.$set('value', value);                                                                                 // 22086
          });                                                                                                          // 22087
        };                                                                                                             // 22088
      }                                                                                                                // 22089
    }                                                                                                                  // 22090
  };                                                                                                                   // 22091
};                                                                                                                     // 22092
                                                                                                                       // 22093
/**                                                                                                                    // 22094
 * @ngdoc directive                                                                                                    // 22095
 * @name ngBind                                                                                                        // 22096
 * @restrict AC                                                                                                        // 22097
 *                                                                                                                     // 22098
 * @description                                                                                                        // 22099
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element                      // 22100
 * with the value of a given expression, and to update the text content when the value of that                         // 22101
 * expression changes.                                                                                                 // 22102
 *                                                                                                                     // 22103
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like                        // 22104
 * `{{ expression }}` which is similar but less verbose.                                                               // 22105
 *                                                                                                                     // 22106
 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily                         // 22107
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an                          // 22108
 * element attribute, it makes the bindings invisible to the user while the page is loading.                           // 22109
 *                                                                                                                     // 22110
 * An alternative solution to this problem would be using the                                                          // 22111
 * {@link ng.directive:ngCloak ngCloak} directive.                                                                     // 22112
 *                                                                                                                     // 22113
 *                                                                                                                     // 22114
 * @element ANY                                                                                                        // 22115
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.                                         // 22116
 *                                                                                                                     // 22117
 * @example                                                                                                            // 22118
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.                       // 22119
   <example module="bindExample">                                                                                      // 22120
     <file name="index.html">                                                                                          // 22121
       <script>                                                                                                        // 22122
         angular.module('bindExample', [])                                                                             // 22123
           .controller('ExampleController', ['$scope', function($scope) {                                              // 22124
             $scope.name = 'Whirled';                                                                                  // 22125
           }]);                                                                                                        // 22126
       </script>                                                                                                       // 22127
       <div ng-controller="ExampleController">                                                                         // 22128
         <label>Enter name: <input type="text" ng-model="name"></label><br>                                            // 22129
         Hello <span ng-bind="name"></span>!                                                                           // 22130
       </div>                                                                                                          // 22131
     </file>                                                                                                           // 22132
     <file name="protractor.js" type="protractor">                                                                     // 22133
       it('should check ng-bind', function() {                                                                         // 22134
         var nameInput = element(by.model('name'));                                                                    // 22135
                                                                                                                       // 22136
         expect(element(by.binding('name')).getText()).toBe('Whirled');                                                // 22137
         nameInput.clear();                                                                                            // 22138
         nameInput.sendKeys('world');                                                                                  // 22139
         expect(element(by.binding('name')).getText()).toBe('world');                                                  // 22140
       });                                                                                                             // 22141
     </file>                                                                                                           // 22142
   </example>                                                                                                          // 22143
 */                                                                                                                    // 22144
var ngBindDirective = ['$compile', function($compile) {                                                                // 22145
  return {                                                                                                             // 22146
    restrict: 'AC',                                                                                                    // 22147
    compile: function ngBindCompile(templateElement) {                                                                 // 22148
      $compile.$$addBindingClass(templateElement);                                                                     // 22149
      return function ngBindLink(scope, element, attr) {                                                               // 22150
        $compile.$$addBindingInfo(element, attr.ngBind);                                                               // 22151
        element = element[0];                                                                                          // 22152
        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {                                                  // 22153
          element.textContent = value === undefined ? '' : value;                                                      // 22154
        });                                                                                                            // 22155
      };                                                                                                               // 22156
    }                                                                                                                  // 22157
  };                                                                                                                   // 22158
}];                                                                                                                    // 22159
                                                                                                                       // 22160
                                                                                                                       // 22161
/**                                                                                                                    // 22162
 * @ngdoc directive                                                                                                    // 22163
 * @name ngBindTemplate                                                                                                // 22164
 *                                                                                                                     // 22165
 * @description                                                                                                        // 22166
 * The `ngBindTemplate` directive specifies that the element                                                           // 22167
 * text content should be replaced with the interpolation of the template                                              // 22168
 * in the `ngBindTemplate` attribute.                                                                                  // 22169
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`                                                // 22170
 * expressions. This directive is needed since some HTML elements                                                      // 22171
 * (such as TITLE and OPTION) cannot contain SPAN elements.                                                            // 22172
 *                                                                                                                     // 22173
 * @element ANY                                                                                                        // 22174
 * @param {string} ngBindTemplate template of form                                                                     // 22175
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.                                                              // 22176
 *                                                                                                                     // 22177
 * @example                                                                                                            // 22178
 * Try it here: enter text in text box and watch the greeting change.                                                  // 22179
   <example module="bindExample">                                                                                      // 22180
     <file name="index.html">                                                                                          // 22181
       <script>                                                                                                        // 22182
         angular.module('bindExample', [])                                                                             // 22183
           .controller('ExampleController', ['$scope', function($scope) {                                              // 22184
             $scope.salutation = 'Hello';                                                                              // 22185
             $scope.name = 'World';                                                                                    // 22186
           }]);                                                                                                        // 22187
       </script>                                                                                                       // 22188
       <div ng-controller="ExampleController">                                                                         // 22189
        <label>Salutation: <input type="text" ng-model="salutation"></label><br>                                       // 22190
        <label>Name: <input type="text" ng-model="name"></label><br>                                                   // 22191
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>                                                        // 22192
       </div>                                                                                                          // 22193
     </file>                                                                                                           // 22194
     <file name="protractor.js" type="protractor">                                                                     // 22195
       it('should check ng-bind', function() {                                                                         // 22196
         var salutationElem = element(by.binding('salutation'));                                                       // 22197
         var salutationInput = element(by.model('salutation'));                                                        // 22198
         var nameInput = element(by.model('name'));                                                                    // 22199
                                                                                                                       // 22200
         expect(salutationElem.getText()).toBe('Hello World!');                                                        // 22201
                                                                                                                       // 22202
         salutationInput.clear();                                                                                      // 22203
         salutationInput.sendKeys('Greetings');                                                                        // 22204
         nameInput.clear();                                                                                            // 22205
         nameInput.sendKeys('user');                                                                                   // 22206
                                                                                                                       // 22207
         expect(salutationElem.getText()).toBe('Greetings user!');                                                     // 22208
       });                                                                                                             // 22209
     </file>                                                                                                           // 22210
   </example>                                                                                                          // 22211
 */                                                                                                                    // 22212
var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {                          // 22213
  return {                                                                                                             // 22214
    compile: function ngBindTemplateCompile(templateElement) {                                                         // 22215
      $compile.$$addBindingClass(templateElement);                                                                     // 22216
      return function ngBindTemplateLink(scope, element, attr) {                                                       // 22217
        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));                                     // 22218
        $compile.$$addBindingInfo(element, interpolateFn.expressions);                                                 // 22219
        element = element[0];                                                                                          // 22220
        attr.$observe('ngBindTemplate', function(value) {                                                              // 22221
          element.textContent = value === undefined ? '' : value;                                                      // 22222
        });                                                                                                            // 22223
      };                                                                                                               // 22224
    }                                                                                                                  // 22225
  };                                                                                                                   // 22226
}];                                                                                                                    // 22227
                                                                                                                       // 22228
                                                                                                                       // 22229
/**                                                                                                                    // 22230
 * @ngdoc directive                                                                                                    // 22231
 * @name ngBindHtml                                                                                                    // 22232
 *                                                                                                                     // 22233
 * @description                                                                                                        // 22234
 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,               // 22235
 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.              // 22236
 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link               // 22237
 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}                 // 22238
 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.                       // 22239
 *                                                                                                                     // 22240
 * You may also bypass sanitization for values you know are safe. To do so, bind to                                    // 22241
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example                      // 22242
 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.                               // 22243
 *                                                                                                                     // 22244
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you                     // 22245
 * will have an exception (instead of an exploit.)                                                                     // 22246
 *                                                                                                                     // 22247
 * @element ANY                                                                                                        // 22248
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.                                     // 22249
 *                                                                                                                     // 22250
 * @example                                                                                                            // 22251
                                                                                                                       // 22252
   <example module="bindHtmlExample" deps="angular-sanitize.js">                                                       // 22253
     <file name="index.html">                                                                                          // 22254
       <div ng-controller="ExampleController">                                                                         // 22255
        <p ng-bind-html="myHTML"></p>                                                                                  // 22256
       </div>                                                                                                          // 22257
     </file>                                                                                                           // 22258
                                                                                                                       // 22259
     <file name="script.js">                                                                                           // 22260
       angular.module('bindHtmlExample', ['ngSanitize'])                                                               // 22261
         .controller('ExampleController', ['$scope', function($scope) {                                                // 22262
           $scope.myHTML =                                                                                             // 22263
              'I am an <code>HTML</code>string with ' +                                                                // 22264
              '<a href="#">links!</a> and other <em>stuff</em>';                                                       // 22265
         }]);                                                                                                          // 22266
     </file>                                                                                                           // 22267
                                                                                                                       // 22268
     <file name="protractor.js" type="protractor">                                                                     // 22269
       it('should check ng-bind-html', function() {                                                                    // 22270
         expect(element(by.binding('myHTML')).getText()).toBe(                                                         // 22271
             'I am an HTMLstring with links! and other stuff');                                                        // 22272
       });                                                                                                             // 22273
     </file>                                                                                                           // 22274
   </example>                                                                                                          // 22275
 */                                                                                                                    // 22276
var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {                            // 22277
  return {                                                                                                             // 22278
    restrict: 'A',                                                                                                     // 22279
    compile: function ngBindHtmlCompile(tElement, tAttrs) {                                                            // 22280
      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);                                                                // 22281
      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {                                 // 22282
        return (value || '').toString();                                                                               // 22283
      });                                                                                                              // 22284
      $compile.$$addBindingClass(tElement);                                                                            // 22285
                                                                                                                       // 22286
      return function ngBindHtmlLink(scope, element, attr) {                                                           // 22287
        $compile.$$addBindingInfo(element, attr.ngBindHtml);                                                           // 22288
                                                                                                                       // 22289
        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {                                               // 22290
          // we re-evaluate the expr because we want a TrustedValueHolderType                                          // 22291
          // for $sce, not a string                                                                                    // 22292
          element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');                                            // 22293
        });                                                                                                            // 22294
      };                                                                                                               // 22295
    }                                                                                                                  // 22296
  };                                                                                                                   // 22297
}];                                                                                                                    // 22298
                                                                                                                       // 22299
/**                                                                                                                    // 22300
 * @ngdoc directive                                                                                                    // 22301
 * @name ngChange                                                                                                      // 22302
 *                                                                                                                     // 22303
 * @description                                                                                                        // 22304
 * Evaluate the given expression when the user changes the input.                                                      // 22305
 * The expression is evaluated immediately, unlike the JavaScript onchange event                                       // 22306
 * which only triggers at the end of a change (usually, when the user leaves the                                       // 22307
 * form element or presses the return key).                                                                            // 22308
 *                                                                                                                     // 22309
 * The `ngChange` expression is only evaluated when a change in the input value causes                                 // 22310
 * a new value to be committed to the model.                                                                           // 22311
 *                                                                                                                     // 22312
 * It will not be evaluated:                                                                                           // 22313
 * * if the value returned from the `$parsers` transformation pipeline has not changed                                 // 22314
 * * if the input has continued to be invalid since the model will stay `null`                                         // 22315
 * * if the model is changed programmatically and not by a change to the input value                                   // 22316
 *                                                                                                                     // 22317
 *                                                                                                                     // 22318
 * Note, this directive requires `ngModel` to be present.                                                              // 22319
 *                                                                                                                     // 22320
 * @element input                                                                                                      // 22321
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change                            // 22322
 * in input value.                                                                                                     // 22323
 *                                                                                                                     // 22324
 * @example                                                                                                            // 22325
 * <example name="ngChange-directive" module="changeExample">                                                          // 22326
 *   <file name="index.html">                                                                                          // 22327
 *     <script>                                                                                                        // 22328
 *       angular.module('changeExample', [])                                                                           // 22329
 *         .controller('ExampleController', ['$scope', function($scope) {                                              // 22330
 *           $scope.counter = 0;                                                                                       // 22331
 *           $scope.change = function() {                                                                              // 22332
 *             $scope.counter++;                                                                                       // 22333
 *           };                                                                                                        // 22334
 *         }]);                                                                                                        // 22335
 *     </script>                                                                                                       // 22336
 *     <div ng-controller="ExampleController">                                                                         // 22337
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />                   // 22338
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />                                        // 22339
 *       <label for="ng-change-example2">Confirmed</label><br />                                                       // 22340
 *       <tt>debug = {{confirmed}}</tt><br/>                                                                           // 22341
 *       <tt>counter = {{counter}}</tt><br/>                                                                           // 22342
 *     </div>                                                                                                          // 22343
 *   </file>                                                                                                           // 22344
 *   <file name="protractor.js" type="protractor">                                                                     // 22345
 *     var counter = element(by.binding('counter'));                                                                   // 22346
 *     var debug = element(by.binding('confirmed'));                                                                   // 22347
 *                                                                                                                     // 22348
 *     it('should evaluate the expression if changing from view', function() {                                         // 22349
 *       expect(counter.getText()).toContain('0');                                                                     // 22350
 *                                                                                                                     // 22351
 *       element(by.id('ng-change-example1')).click();                                                                 // 22352
 *                                                                                                                     // 22353
 *       expect(counter.getText()).toContain('1');                                                                     // 22354
 *       expect(debug.getText()).toContain('true');                                                                    // 22355
 *     });                                                                                                             // 22356
 *                                                                                                                     // 22357
 *     it('should not evaluate the expression if changing from model', function() {                                    // 22358
 *       element(by.id('ng-change-example2')).click();                                                                 // 22359
                                                                                                                       // 22360
 *       expect(counter.getText()).toContain('0');                                                                     // 22361
 *       expect(debug.getText()).toContain('true');                                                                    // 22362
 *     });                                                                                                             // 22363
 *   </file>                                                                                                           // 22364
 * </example>                                                                                                          // 22365
 */                                                                                                                    // 22366
var ngChangeDirective = valueFn({                                                                                      // 22367
  restrict: 'A',                                                                                                       // 22368
  require: 'ngModel',                                                                                                  // 22369
  link: function(scope, element, attr, ctrl) {                                                                         // 22370
    ctrl.$viewChangeListeners.push(function() {                                                                        // 22371
      scope.$eval(attr.ngChange);                                                                                      // 22372
    });                                                                                                                // 22373
  }                                                                                                                    // 22374
});                                                                                                                    // 22375
                                                                                                                       // 22376
function classDirective(name, selector) {                                                                              // 22377
  name = 'ngClass' + name;                                                                                             // 22378
  return ['$animate', function($animate) {                                                                             // 22379
    return {                                                                                                           // 22380
      restrict: 'AC',                                                                                                  // 22381
      link: function(scope, element, attr) {                                                                           // 22382
        var oldVal;                                                                                                    // 22383
                                                                                                                       // 22384
        scope.$watch(attr[name], ngClassWatchAction, true);                                                            // 22385
                                                                                                                       // 22386
        attr.$observe('class', function(value) {                                                                       // 22387
          ngClassWatchAction(scope.$eval(attr[name]));                                                                 // 22388
        });                                                                                                            // 22389
                                                                                                                       // 22390
                                                                                                                       // 22391
        if (name !== 'ngClass') {                                                                                      // 22392
          scope.$watch('$index', function($index, old$index) {                                                         // 22393
            // jshint bitwise: false                                                                                   // 22394
            var mod = $index & 1;                                                                                      // 22395
            if (mod !== (old$index & 1)) {                                                                             // 22396
              var classes = arrayClasses(scope.$eval(attr[name]));                                                     // 22397
              mod === selector ?                                                                                       // 22398
                addClasses(classes) :                                                                                  // 22399
                removeClasses(classes);                                                                                // 22400
            }                                                                                                          // 22401
          });                                                                                                          // 22402
        }                                                                                                              // 22403
                                                                                                                       // 22404
        function addClasses(classes) {                                                                                 // 22405
          var newClasses = digestClassCounts(classes, 1);                                                              // 22406
          attr.$addClass(newClasses);                                                                                  // 22407
        }                                                                                                              // 22408
                                                                                                                       // 22409
        function removeClasses(classes) {                                                                              // 22410
          var newClasses = digestClassCounts(classes, -1);                                                             // 22411
          attr.$removeClass(newClasses);                                                                               // 22412
        }                                                                                                              // 22413
                                                                                                                       // 22414
        function digestClassCounts(classes, count) {                                                                   // 22415
          // Use createMap() to prevent class assumptions involving property                                           // 22416
          // names in Object.prototype                                                                                 // 22417
          var classCounts = element.data('$classCounts') || createMap();                                               // 22418
          var classesToUpdate = [];                                                                                    // 22419
          forEach(classes, function(className) {                                                                       // 22420
            if (count > 0 || classCounts[className]) {                                                                 // 22421
              classCounts[className] = (classCounts[className] || 0) + count;                                          // 22422
              if (classCounts[className] === +(count > 0)) {                                                           // 22423
                classesToUpdate.push(className);                                                                       // 22424
              }                                                                                                        // 22425
            }                                                                                                          // 22426
          });                                                                                                          // 22427
          element.data('$classCounts', classCounts);                                                                   // 22428
          return classesToUpdate.join(' ');                                                                            // 22429
        }                                                                                                              // 22430
                                                                                                                       // 22431
        function updateClasses(oldClasses, newClasses) {                                                               // 22432
          var toAdd = arrayDifference(newClasses, oldClasses);                                                         // 22433
          var toRemove = arrayDifference(oldClasses, newClasses);                                                      // 22434
          toAdd = digestClassCounts(toAdd, 1);                                                                         // 22435
          toRemove = digestClassCounts(toRemove, -1);                                                                  // 22436
          if (toAdd && toAdd.length) {                                                                                 // 22437
            $animate.addClass(element, toAdd);                                                                         // 22438
          }                                                                                                            // 22439
          if (toRemove && toRemove.length) {                                                                           // 22440
            $animate.removeClass(element, toRemove);                                                                   // 22441
          }                                                                                                            // 22442
        }                                                                                                              // 22443
                                                                                                                       // 22444
        function ngClassWatchAction(newVal) {                                                                          // 22445
          if (selector === true || scope.$index % 2 === selector) {                                                    // 22446
            var newClasses = arrayClasses(newVal || []);                                                               // 22447
            if (!oldVal) {                                                                                             // 22448
              addClasses(newClasses);                                                                                  // 22449
            } else if (!equals(newVal,oldVal)) {                                                                       // 22450
              var oldClasses = arrayClasses(oldVal);                                                                   // 22451
              updateClasses(oldClasses, newClasses);                                                                   // 22452
            }                                                                                                          // 22453
          }                                                                                                            // 22454
          oldVal = shallowCopy(newVal);                                                                                // 22455
        }                                                                                                              // 22456
      }                                                                                                                // 22457
    };                                                                                                                 // 22458
                                                                                                                       // 22459
    function arrayDifference(tokens1, tokens2) {                                                                       // 22460
      var values = [];                                                                                                 // 22461
                                                                                                                       // 22462
      outer:                                                                                                           // 22463
      for (var i = 0; i < tokens1.length; i++) {                                                                       // 22464
        var token = tokens1[i];                                                                                        // 22465
        for (var j = 0; j < tokens2.length; j++) {                                                                     // 22466
          if (token == tokens2[j]) continue outer;                                                                     // 22467
        }                                                                                                              // 22468
        values.push(token);                                                                                            // 22469
      }                                                                                                                // 22470
      return values;                                                                                                   // 22471
    }                                                                                                                  // 22472
                                                                                                                       // 22473
    function arrayClasses(classVal) {                                                                                  // 22474
      var classes = [];                                                                                                // 22475
      if (isArray(classVal)) {                                                                                         // 22476
        forEach(classVal, function(v) {                                                                                // 22477
          classes = classes.concat(arrayClasses(v));                                                                   // 22478
        });                                                                                                            // 22479
        return classes;                                                                                                // 22480
      } else if (isString(classVal)) {                                                                                 // 22481
        return classVal.split(' ');                                                                                    // 22482
      } else if (isObject(classVal)) {                                                                                 // 22483
        forEach(classVal, function(v, k) {                                                                             // 22484
          if (v) {                                                                                                     // 22485
            classes = classes.concat(k.split(' '));                                                                    // 22486
          }                                                                                                            // 22487
        });                                                                                                            // 22488
        return classes;                                                                                                // 22489
      }                                                                                                                // 22490
      return classVal;                                                                                                 // 22491
    }                                                                                                                  // 22492
  }];                                                                                                                  // 22493
}                                                                                                                      // 22494
                                                                                                                       // 22495
/**                                                                                                                    // 22496
 * @ngdoc directive                                                                                                    // 22497
 * @name ngClass                                                                                                       // 22498
 * @restrict AC                                                                                                        // 22499
 *                                                                                                                     // 22500
 * @description                                                                                                        // 22501
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding                 // 22502
 * an expression that represents all classes to be added.                                                              // 22503
 *                                                                                                                     // 22504
 * The directive operates in three different ways, depending on which of three types the expression                    // 22505
 * evaluates to:                                                                                                       // 22506
 *                                                                                                                     // 22507
 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class                  // 22508
 * names.                                                                                                              // 22509
 *                                                                                                                     // 22510
 * 2. If the expression evaluates to an object, then for each key-value pair of the                                    // 22511
 * object with a truthy value the corresponding key is used as a class name.                                           // 22512
 *                                                                                                                     // 22513
 * 3. If the expression evaluates to an array, each element of the array should either be a string as in               // 22514
 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array              // 22515
 * to give you more control over what CSS classes appear. See the code below for an example of this.                   // 22516
 *                                                                                                                     // 22517
 *                                                                                                                     // 22518
 * The directive won't add duplicate classes if a particular class was already set.                                    // 22519
 *                                                                                                                     // 22520
 * When the expression changes, the previously added classes are removed and only then are the                         // 22521
 * new classes added.                                                                                                  // 22522
 *                                                                                                                     // 22523
 * @animations                                                                                                         // 22524
 * **add** - happens just before the class is applied to the elements                                                  // 22525
 *                                                                                                                     // 22526
 * **remove** - happens just before the class is removed from the element                                              // 22527
 *                                                                                                                     // 22528
 * @element ANY                                                                                                        // 22529
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result                                 // 22530
 *   of the evaluation can be a string representing space delimited class                                              // 22531
 *   names, an array, or a map of class names to boolean values. In the case of a map, the                             // 22532
 *   names of the properties whose values are truthy will be added as css classes to the                               // 22533
 *   element.                                                                                                          // 22534
 *                                                                                                                     // 22535
 * @example Example that demonstrates basic bindings via ngClass directive.                                            // 22536
   <example>                                                                                                           // 22537
     <file name="index.html">                                                                                          // 22538
       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>                     // 22539
       <label>                                                                                                         // 22540
          <input type="checkbox" ng-model="deleted">                                                                   // 22541
          deleted (apply "strike" class)                                                                               // 22542
       </label><br>                                                                                                    // 22543
       <label>                                                                                                         // 22544
          <input type="checkbox" ng-model="important">                                                                 // 22545
          important (apply "bold" class)                                                                               // 22546
       </label><br>                                                                                                    // 22547
       <label>                                                                                                         // 22548
          <input type="checkbox" ng-model="error">                                                                     // 22549
          error (apply "has-error" class)                                                                              // 22550
       </label>                                                                                                        // 22551
       <hr>                                                                                                            // 22552
       <p ng-class="style">Using String Syntax</p>                                                                     // 22553
       <input type="text" ng-model="style"                                                                             // 22554
              placeholder="Type: bold strike red" aria-label="Type: bold strike red">                                  // 22555
       <hr>                                                                                                            // 22556
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>                                                   // 22557
       <input ng-model="style1"                                                                                        // 22558
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>                      // 22559
       <input ng-model="style2"                                                                                        // 22560
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>                    // 22561
       <input ng-model="style3"                                                                                        // 22562
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>                    // 22563
       <hr>                                                                                                            // 22564
       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>                                        // 22565
       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>                  // 22566
       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>                        // 22567
     </file>                                                                                                           // 22568
     <file name="style.css">                                                                                           // 22569
       .strike {                                                                                                       // 22570
           text-decoration: line-through;                                                                              // 22571
       }                                                                                                               // 22572
       .bold {                                                                                                         // 22573
           font-weight: bold;                                                                                          // 22574
       }                                                                                                               // 22575
       .red {                                                                                                          // 22576
           color: red;                                                                                                 // 22577
       }                                                                                                               // 22578
       .has-error {                                                                                                    // 22579
           color: red;                                                                                                 // 22580
           background-color: yellow;                                                                                   // 22581
       }                                                                                                               // 22582
       .orange {                                                                                                       // 22583
           color: orange;                                                                                              // 22584
       }                                                                                                               // 22585
     </file>                                                                                                           // 22586
     <file name="protractor.js" type="protractor">                                                                     // 22587
       var ps = element.all(by.css('p'));                                                                              // 22588
                                                                                                                       // 22589
       it('should let you toggle the class', function() {                                                              // 22590
                                                                                                                       // 22591
         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);                                                 // 22592
         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);                                            // 22593
                                                                                                                       // 22594
         element(by.model('important')).click();                                                                       // 22595
         expect(ps.first().getAttribute('class')).toMatch(/bold/);                                                     // 22596
                                                                                                                       // 22597
         element(by.model('error')).click();                                                                           // 22598
         expect(ps.first().getAttribute('class')).toMatch(/has-error/);                                                // 22599
       });                                                                                                             // 22600
                                                                                                                       // 22601
       it('should let you toggle string example', function() {                                                         // 22602
         expect(ps.get(1).getAttribute('class')).toBe('');                                                             // 22603
         element(by.model('style')).clear();                                                                           // 22604
         element(by.model('style')).sendKeys('red');                                                                   // 22605
         expect(ps.get(1).getAttribute('class')).toBe('red');                                                          // 22606
       });                                                                                                             // 22607
                                                                                                                       // 22608
       it('array example should have 3 classes', function() {                                                          // 22609
         expect(ps.get(2).getAttribute('class')).toBe('');                                                             // 22610
         element(by.model('style1')).sendKeys('bold');                                                                 // 22611
         element(by.model('style2')).sendKeys('strike');                                                               // 22612
         element(by.model('style3')).sendKeys('red');                                                                  // 22613
         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');                                              // 22614
       });                                                                                                             // 22615
                                                                                                                       // 22616
       it('array with map example should have 2 classes', function() {                                                 // 22617
         expect(ps.last().getAttribute('class')).toBe('');                                                             // 22618
         element(by.model('style4')).sendKeys('bold');                                                                 // 22619
         element(by.model('warning')).click();                                                                         // 22620
         expect(ps.last().getAttribute('class')).toBe('bold orange');                                                  // 22621
       });                                                                                                             // 22622
     </file>                                                                                                           // 22623
   </example>                                                                                                          // 22624
                                                                                                                       // 22625
   ## Animations                                                                                                       // 22626
                                                                                                                       // 22627
   The example below demonstrates how to perform animations using ngClass.                                             // 22628
                                                                                                                       // 22629
   <example module="ngAnimate" deps="angular-animate.js" animations="true">                                            // 22630
     <file name="index.html">                                                                                          // 22631
      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">                                        // 22632
      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">                                            // 22633
      <br>                                                                                                             // 22634
      <span class="base-class" ng-class="myVar">Sample Text</span>                                                     // 22635
     </file>                                                                                                           // 22636
     <file name="style.css">                                                                                           // 22637
       .base-class {                                                                                                   // 22638
         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                         // 22639
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                 // 22640
       }                                                                                                               // 22641
                                                                                                                       // 22642
       .base-class.my-class {                                                                                          // 22643
         color: red;                                                                                                   // 22644
         font-size:3em;                                                                                                // 22645
       }                                                                                                               // 22646
     </file>                                                                                                           // 22647
     <file name="protractor.js" type="protractor">                                                                     // 22648
       it('should check ng-class', function() {                                                                        // 22649
         expect(element(by.css('.base-class')).getAttribute('class')).not.                                             // 22650
           toMatch(/my-class/);                                                                                        // 22651
                                                                                                                       // 22652
         element(by.id('setbtn')).click();                                                                             // 22653
                                                                                                                       // 22654
         expect(element(by.css('.base-class')).getAttribute('class')).                                                 // 22655
           toMatch(/my-class/);                                                                                        // 22656
                                                                                                                       // 22657
         element(by.id('clearbtn')).click();                                                                           // 22658
                                                                                                                       // 22659
         expect(element(by.css('.base-class')).getAttribute('class')).not.                                             // 22660
           toMatch(/my-class/);                                                                                        // 22661
       });                                                                                                             // 22662
     </file>                                                                                                           // 22663
   </example>                                                                                                          // 22664
                                                                                                                       // 22665
                                                                                                                       // 22666
   ## ngClass and pre-existing CSS3 Transitions/Animations                                                             // 22667
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link $animate#addClass $animate.addClass} and                                 // 22671
   {@link $animate#removeClass $animate.removeClass}.                                                                  // 22672
 */                                                                                                                    // 22673
var ngClassDirective = classDirective('', true);                                                                       // 22674
                                                                                                                       // 22675
/**                                                                                                                    // 22676
 * @ngdoc directive                                                                                                    // 22677
 * @name ngClassOdd                                                                                                    // 22678
 * @restrict AC                                                                                                        // 22679
 *                                                                                                                     // 22680
 * @description                                                                                                        // 22681
 * The `ngClassOdd` and `ngClassEven` directives work exactly as                                                       // 22682
 * {@link ng.directive:ngClass ngClass}, except they work in                                                           // 22683
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.                                                // 22684
 *                                                                                                                     // 22685
 * This directive can be applied only within the scope of an                                                           // 22686
 * {@link ng.directive:ngRepeat ngRepeat}.                                                                             // 22687
 *                                                                                                                     // 22688
 * @element ANY                                                                                                        // 22689
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result                              // 22690
 *   of the evaluation can be a string representing space delimited class names or an array.                           // 22691
 *                                                                                                                     // 22692
 * @example                                                                                                            // 22693
   <example>                                                                                                           // 22694
     <file name="index.html">                                                                                          // 22695
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">                                                           // 22696
          <li ng-repeat="name in names">                                                                               // 22697
           <span ng-class-odd="'odd'" ng-class-even="'even'">                                                          // 22698
             {{name}}                                                                                                  // 22699
           </span>                                                                                                     // 22700
          </li>                                                                                                        // 22701
        </ol>                                                                                                          // 22702
     </file>                                                                                                           // 22703
     <file name="style.css">                                                                                           // 22704
       .odd {                                                                                                          // 22705
         color: red;                                                                                                   // 22706
       }                                                                                                               // 22707
       .even {                                                                                                         // 22708
         color: blue;                                                                                                  // 22709
       }                                                                                                               // 22710
     </file>                                                                                                           // 22711
     <file name="protractor.js" type="protractor">                                                                     // 22712
       it('should check ng-class-odd and ng-class-even', function() {                                                  // 22713
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).                    // 22714
           toMatch(/odd/);                                                                                             // 22715
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).                    // 22716
           toMatch(/even/);                                                                                            // 22717
       });                                                                                                             // 22718
     </file>                                                                                                           // 22719
   </example>                                                                                                          // 22720
 */                                                                                                                    // 22721
var ngClassOddDirective = classDirective('Odd', 0);                                                                    // 22722
                                                                                                                       // 22723
/**                                                                                                                    // 22724
 * @ngdoc directive                                                                                                    // 22725
 * @name ngClassEven                                                                                                   // 22726
 * @restrict AC                                                                                                        // 22727
 *                                                                                                                     // 22728
 * @description                                                                                                        // 22729
 * The `ngClassOdd` and `ngClassEven` directives work exactly as                                                       // 22730
 * {@link ng.directive:ngClass ngClass}, except they work in                                                           // 22731
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.                                                // 22732
 *                                                                                                                     // 22733
 * This directive can be applied only within the scope of an                                                           // 22734
 * {@link ng.directive:ngRepeat ngRepeat}.                                                                             // 22735
 *                                                                                                                     // 22736
 * @element ANY                                                                                                        // 22737
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The                                    // 22738
 *   result of the evaluation can be a string representing space delimited class names or an array.                    // 22739
 *                                                                                                                     // 22740
 * @example                                                                                                            // 22741
   <example>                                                                                                           // 22742
     <file name="index.html">                                                                                          // 22743
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">                                                           // 22744
          <li ng-repeat="name in names">                                                                               // 22745
           <span ng-class-odd="'odd'" ng-class-even="'even'">                                                          // 22746
             {{name}} &nbsp; &nbsp; &nbsp;                                                                             // 22747
           </span>                                                                                                     // 22748
          </li>                                                                                                        // 22749
        </ol>                                                                                                          // 22750
     </file>                                                                                                           // 22751
     <file name="style.css">                                                                                           // 22752
       .odd {                                                                                                          // 22753
         color: red;                                                                                                   // 22754
       }                                                                                                               // 22755
       .even {                                                                                                         // 22756
         color: blue;                                                                                                  // 22757
       }                                                                                                               // 22758
     </file>                                                                                                           // 22759
     <file name="protractor.js" type="protractor">                                                                     // 22760
       it('should check ng-class-odd and ng-class-even', function() {                                                  // 22761
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).                    // 22762
           toMatch(/odd/);                                                                                             // 22763
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).                    // 22764
           toMatch(/even/);                                                                                            // 22765
       });                                                                                                             // 22766
     </file>                                                                                                           // 22767
   </example>                                                                                                          // 22768
 */                                                                                                                    // 22769
var ngClassEvenDirective = classDirective('Even', 1);                                                                  // 22770
                                                                                                                       // 22771
/**                                                                                                                    // 22772
 * @ngdoc directive                                                                                                    // 22773
 * @name ngCloak                                                                                                       // 22774
 * @restrict AC                                                                                                        // 22775
 *                                                                                                                     // 22776
 * @description                                                                                                        // 22777
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly                             // 22778
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this                   // 22779
 * directive to avoid the undesirable flicker effect caused by the html template display.                              // 22780
 *                                                                                                                     // 22781
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply                           // 22782
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering                         // 22783
 * of the browser view.                                                                                                // 22784
 *                                                                                                                     // 22785
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and                         // 22786
 * `angular.min.js`.                                                                                                   // 22787
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 22788
 *                                                                                                                     // 22789
 * ```css                                                                                                              // 22790
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {                                    // 22791
 *   display: none !important;                                                                                         // 22792
 * }                                                                                                                   // 22793
 * ```                                                                                                                 // 22794
 *                                                                                                                     // 22795
 * When this css rule is loaded by the browser, all html elements (including their children) that                      // 22796
 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive                          // 22797
 * during the compilation of the template it deletes the `ngCloak` element attribute, making                           // 22798
 * the compiled element visible.                                                                                       // 22799
 *                                                                                                                     // 22800
 * For the best result, the `angular.js` script must be loaded in the head section of the html                         // 22801
 * document; alternatively, the css rule above must be included in the external stylesheet of the                      // 22802
 * application.                                                                                                        // 22803
 *                                                                                                                     // 22804
 * @element ANY                                                                                                        // 22805
 *                                                                                                                     // 22806
 * @example                                                                                                            // 22807
   <example>                                                                                                           // 22808
     <file name="index.html">                                                                                          // 22809
        <div id="template1" ng-cloak>{{ 'hello' }}</div>                                                               // 22810
        <div id="template2" class="ng-cloak">{{ 'world' }}</div>                                                       // 22811
     </file>                                                                                                           // 22812
     <file name="protractor.js" type="protractor">                                                                     // 22813
       it('should remove the template directive and css class', function() {                                           // 22814
         expect($('#template1').getAttribute('ng-cloak')).                                                             // 22815
           toBeNull();                                                                                                 // 22816
         expect($('#template2').getAttribute('ng-cloak')).                                                             // 22817
           toBeNull();                                                                                                 // 22818
       });                                                                                                             // 22819
     </file>                                                                                                           // 22820
   </example>                                                                                                          // 22821
 *                                                                                                                     // 22822
 */                                                                                                                    // 22823
var ngCloakDirective = ngDirective({                                                                                   // 22824
  compile: function(element, attr) {                                                                                   // 22825
    attr.$set('ngCloak', undefined);                                                                                   // 22826
    element.removeClass('ng-cloak');                                                                                   // 22827
  }                                                                                                                    // 22828
});                                                                                                                    // 22829
                                                                                                                       // 22830
/**                                                                                                                    // 22831
 * @ngdoc directive                                                                                                    // 22832
 * @name ngController                                                                                                  // 22833
 *                                                                                                                     // 22834
 * @description                                                                                                        // 22835
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular           // 22836
 * supports the principles behind the Model-View-Controller design pattern.                                            // 22837
 *                                                                                                                     // 22838
 * MVC components in angular:                                                                                          // 22839
 *                                                                                                                     // 22840
 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties               // 22841
 *   are accessed through bindings.                                                                                    // 22842
 * * View — The template (HTML with data bindings) that is rendered into the View.                                     // 22843
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business               // 22844
 *   logic behind the application to decorate the scope with functions and values                                      // 22845
 *                                                                                                                     // 22846
 * Note that you can also attach controllers to the DOM by declaring it in a route definition                          // 22847
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller                        // 22848
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached                  // 22849
 * and executed twice.                                                                                                 // 22850
 *                                                                                                                     // 22851
 * @element ANY                                                                                                        // 22852
 * @scope                                                                                                              // 22853
 * @priority 500                                                                                                       // 22854
 * @param {expression} ngController Name of a constructor function registered with the current                         // 22855
 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}                        // 22856
 * that on the current scope evaluates to a constructor function.                                                      // 22857
 *                                                                                                                     // 22858
 * The controller instance can be published into a scope property by specifying                                        // 22859
 * `ng-controller="as propertyName"`.                                                                                  // 22860
 *                                                                                                                     // 22861
 * If the current `$controllerProvider` is configured to use globals (via                                              // 22862
 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may                        // 22863
 * also be the name of a globally accessible constructor function (not recommended).                                   // 22864
 *                                                                                                                     // 22865
 * @example                                                                                                            // 22866
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and                         // 22867
 * greeting are methods declared on the controller (see source tab). These methods can                                 // 22868
 * easily be called from the angular markup. Any changes to the data are automatically reflected                       // 22869
 * in the View without the need for a manual update.                                                                   // 22870
 *                                                                                                                     // 22871
 * Two different declaration styles are included below:                                                                // 22872
 *                                                                                                                     // 22873
 * * one binds methods and properties directly onto the controller using `this`:                                       // 22874
 * `ng-controller="SettingsController1 as settings"`                                                                   // 22875
 * * one injects `$scope` into the controller:                                                                         // 22876
 * `ng-controller="SettingsController2"`                                                                               // 22877
 *                                                                                                                     // 22878
 * The second option is more common in the Angular community, and is generally used in boilerplates                    // 22879
 * and in this guide. However, there are advantages to binding properties directly to the controller                   // 22880
 * and avoiding scope.                                                                                                 // 22881
 *                                                                                                                     // 22882
 * * Using `controller as` makes it obvious which controller you are accessing in the template when                    // 22883
 * multiple controllers apply to an element.                                                                           // 22884
 * * If you are writing your controllers as classes you have easier access to the properties and                       // 22885
 * methods, which will appear on the scope, from inside the controller code.                                           // 22886
 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal                             // 22887
 * inheritance masking primitives.                                                                                     // 22888
 *                                                                                                                     // 22889
 * This example demonstrates the `controller as` syntax.                                                               // 22890
 *                                                                                                                     // 22891
 * <example name="ngControllerAs" module="controllerAsExample">                                                        // 22892
 *   <file name="index.html">                                                                                          // 22893
 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">                                         // 22894
 *      <label>Name: <input type="text" ng-model="settings.name"/></label>                                             // 22895
 *      <button ng-click="settings.greet()">greet</button><br/>                                                        // 22896
 *      Contact:                                                                                                       // 22897
 *      <ul>                                                                                                           // 22898
 *        <li ng-repeat="contact in settings.contacts">                                                                // 22899
 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">                        // 22900
 *             <option>phone</option>                                                                                  // 22901
 *             <option>email</option>                                                                                  // 22902
 *          </select>                                                                                                  // 22903
 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />                         // 22904
 *          <button ng-click="settings.clearContact(contact)">clear</button>                                           // 22905
 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>                          // 22906
 *        </li>                                                                                                        // 22907
 *        <li><button ng-click="settings.addContact()">add</button></li>                                               // 22908
 *     </ul>                                                                                                           // 22909
 *    </div>                                                                                                           // 22910
 *   </file>                                                                                                           // 22911
 *   <file name="app.js">                                                                                              // 22912
 *    angular.module('controllerAsExample', [])                                                                        // 22913
 *      .controller('SettingsController1', SettingsController1);                                                       // 22914
 *                                                                                                                     // 22915
 *    function SettingsController1() {                                                                                 // 22916
 *      this.name = "John Smith";                                                                                      // 22917
 *      this.contacts = [                                                                                              // 22918
 *        {type: 'phone', value: '408 555 1212'},                                                                      // 22919
 *        {type: 'email', value: 'john.smith@example.org'} ];                                                          // 22920
 *    }                                                                                                                // 22921
 *                                                                                                                     // 22922
 *    SettingsController1.prototype.greet = function() {                                                               // 22923
 *      alert(this.name);                                                                                              // 22924
 *    };                                                                                                               // 22925
 *                                                                                                                     // 22926
 *    SettingsController1.prototype.addContact = function() {                                                          // 22927
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});                                            // 22928
 *    };                                                                                                               // 22929
 *                                                                                                                     // 22930
 *    SettingsController1.prototype.removeContact = function(contactToRemove) {                                        // 22931
 *     var index = this.contacts.indexOf(contactToRemove);                                                             // 22932
 *      this.contacts.splice(index, 1);                                                                                // 22933
 *    };                                                                                                               // 22934
 *                                                                                                                     // 22935
 *    SettingsController1.prototype.clearContact = function(contact) {                                                 // 22936
 *      contact.type = 'phone';                                                                                        // 22937
 *      contact.value = '';                                                                                            // 22938
 *    };                                                                                                               // 22939
 *   </file>                                                                                                           // 22940
 *   <file name="protractor.js" type="protractor">                                                                     // 22941
 *     it('should check controller as', function() {                                                                   // 22942
 *       var container = element(by.id('ctrl-as-exmpl'));                                                              // 22943
 *         expect(container.element(by.model('settings.name'))                                                         // 22944
 *           .getAttribute('value')).toBe('John Smith');                                                               // 22945
 *                                                                                                                     // 22946
 *       var firstRepeat =                                                                                             // 22947
 *           container.element(by.repeater('contact in settings.contacts').row(0));                                    // 22948
 *       var secondRepeat =                                                                                            // 22949
 *           container.element(by.repeater('contact in settings.contacts').row(1));                                    // 22950
 *                                                                                                                     // 22951
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 22952
 *           .toBe('408 555 1212');                                                                                    // 22953
 *                                                                                                                     // 22954
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))                                 // 22955
 *           .toBe('john.smith@example.org');                                                                          // 22956
 *                                                                                                                     // 22957
 *       firstRepeat.element(by.buttonText('clear')).click();                                                          // 22958
 *                                                                                                                     // 22959
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 22960
 *           .toBe('');                                                                                                // 22961
 *                                                                                                                     // 22962
 *       container.element(by.buttonText('add')).click();                                                              // 22963
 *                                                                                                                     // 22964
 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))                                  // 22965
 *           .element(by.model('contact.value'))                                                                       // 22966
 *           .getAttribute('value'))                                                                                   // 22967
 *           .toBe('yourname@example.org');                                                                            // 22968
 *     });                                                                                                             // 22969
 *   </file>                                                                                                           // 22970
 * </example>                                                                                                          // 22971
 *                                                                                                                     // 22972
 * This example demonstrates the "attach to `$scope`" style of controller.                                             // 22973
 *                                                                                                                     // 22974
 * <example name="ngController" module="controllerExample">                                                            // 22975
 *  <file name="index.html">                                                                                           // 22976
 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">                                                         // 22977
 *     <label>Name: <input type="text" ng-model="name"/></label>                                                       // 22978
 *     <button ng-click="greet()">greet</button><br/>                                                                  // 22979
 *     Contact:                                                                                                        // 22980
 *     <ul>                                                                                                            // 22981
 *       <li ng-repeat="contact in contacts">                                                                          // 22982
 *         <select ng-model="contact.type" id="select_{{$index}}">                                                     // 22983
 *            <option>phone</option>                                                                                   // 22984
 *            <option>email</option>                                                                                   // 22985
 *         </select>                                                                                                   // 22986
 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />                          // 22987
 *         <button ng-click="clearContact(contact)">clear</button>                                                     // 22988
 *         <button ng-click="removeContact(contact)">X</button>                                                        // 22989
 *       </li>                                                                                                         // 22990
 *       <li>[ <button ng-click="addContact()">add</button> ]</li>                                                     // 22991
 *    </ul>                                                                                                            // 22992
 *   </div>                                                                                                            // 22993
 *  </file>                                                                                                            // 22994
 *  <file name="app.js">                                                                                               // 22995
 *   angular.module('controllerExample', [])                                                                           // 22996
 *     .controller('SettingsController2', ['$scope', SettingsController2]);                                            // 22997
 *                                                                                                                     // 22998
 *   function SettingsController2($scope) {                                                                            // 22999
 *     $scope.name = "John Smith";                                                                                     // 23000
 *     $scope.contacts = [                                                                                             // 23001
 *       {type:'phone', value:'408 555 1212'},                                                                         // 23002
 *       {type:'email', value:'john.smith@example.org'} ];                                                             // 23003
 *                                                                                                                     // 23004
 *     $scope.greet = function() {                                                                                     // 23005
 *       alert($scope.name);                                                                                           // 23006
 *     };                                                                                                              // 23007
 *                                                                                                                     // 23008
 *     $scope.addContact = function() {                                                                                // 23009
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});                                           // 23010
 *     };                                                                                                              // 23011
 *                                                                                                                     // 23012
 *     $scope.removeContact = function(contactToRemove) {                                                              // 23013
 *       var index = $scope.contacts.indexOf(contactToRemove);                                                         // 23014
 *       $scope.contacts.splice(index, 1);                                                                             // 23015
 *     };                                                                                                              // 23016
 *                                                                                                                     // 23017
 *     $scope.clearContact = function(contact) {                                                                       // 23018
 *       contact.type = 'phone';                                                                                       // 23019
 *       contact.value = '';                                                                                           // 23020
 *     };                                                                                                              // 23021
 *   }                                                                                                                 // 23022
 *  </file>                                                                                                            // 23023
 *  <file name="protractor.js" type="protractor">                                                                      // 23024
 *    it('should check controller', function() {                                                                       // 23025
 *      var container = element(by.id('ctrl-exmpl'));                                                                  // 23026
 *                                                                                                                     // 23027
 *      expect(container.element(by.model('name'))                                                                     // 23028
 *          .getAttribute('value')).toBe('John Smith');                                                                // 23029
 *                                                                                                                     // 23030
 *      var firstRepeat =                                                                                              // 23031
 *          container.element(by.repeater('contact in contacts').row(0));                                              // 23032
 *      var secondRepeat =                                                                                             // 23033
 *          container.element(by.repeater('contact in contacts').row(1));                                              // 23034
 *                                                                                                                     // 23035
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                   // 23036
 *          .toBe('408 555 1212');                                                                                     // 23037
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 23038
 *          .toBe('john.smith@example.org');                                                                           // 23039
 *                                                                                                                     // 23040
 *      firstRepeat.element(by.buttonText('clear')).click();                                                           // 23041
 *                                                                                                                     // 23042
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                   // 23043
 *          .toBe('');                                                                                                 // 23044
 *                                                                                                                     // 23045
 *      container.element(by.buttonText('add')).click();                                                               // 23046
 *                                                                                                                     // 23047
 *      expect(container.element(by.repeater('contact in contacts').row(2))                                            // 23048
 *          .element(by.model('contact.value'))                                                                        // 23049
 *          .getAttribute('value'))                                                                                    // 23050
 *          .toBe('yourname@example.org');                                                                             // 23051
 *    });                                                                                                              // 23052
 *  </file>                                                                                                            // 23053
 *</example>                                                                                                           // 23054
                                                                                                                       // 23055
 */                                                                                                                    // 23056
var ngControllerDirective = [function() {                                                                              // 23057
  return {                                                                                                             // 23058
    restrict: 'A',                                                                                                     // 23059
    scope: true,                                                                                                       // 23060
    controller: '@',                                                                                                   // 23061
    priority: 500                                                                                                      // 23062
  };                                                                                                                   // 23063
}];                                                                                                                    // 23064
                                                                                                                       // 23065
/**                                                                                                                    // 23066
 * @ngdoc directive                                                                                                    // 23067
 * @name ngCsp                                                                                                         // 23068
 *                                                                                                                     // 23069
 * @element html                                                                                                       // 23070
 * @description                                                                                                        // 23071
 * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.                     // 23072
 *                                                                                                                     // 23073
 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.                   // 23074
 *                                                                                                                     // 23075
 * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).                      // 23076
 * For Angular to be CSP compatible there are only two things that we need to do differently:                          // 23077
 *                                                                                                                     // 23078
 * - don't use `Function` constructor to generate optimized value getters                                              // 23079
 * - don't inject custom stylesheet into the document                                                                  // 23080
 *                                                                                                                     // 23081
 * AngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`                 // 23082
 * directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will                     // 23083
 * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will                     // 23084
 * be raised.                                                                                                          // 23085
 *                                                                                                                     // 23086
 * CSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically                            // 23087
 * includes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).                                                // 23088
 * To make those directives work in CSP mode, include the `angular-csp.css` manually.                                  // 23089
 *                                                                                                                     // 23090
 * Angular tries to autodetect if CSP is active and automatically turn on the CSP-safe mode. This                      // 23091
 * autodetection however triggers a CSP error to be logged in the console:                                             // 23092
 *                                                                                                                     // 23093
 * ```                                                                                                                 // 23094
 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of                        // 23095
 * script in the following Content Security Policy directive: "default-src 'self'". Note that                          // 23096
 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.                                        // 23097
 * ```                                                                                                                 // 23098
 *                                                                                                                     // 23099
 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`                          // 23100
 * directive on the root element of the application or on the `angular.js` script tag, whichever                       // 23101
 * appears first in the html document.                                                                                 // 23102
 *                                                                                                                     // 23103
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*                          // 23104
 *                                                                                                                     // 23105
 * @example                                                                                                            // 23106
 * This example shows how to apply the `ngCsp` directive to the `html` tag.                                            // 23107
   ```html                                                                                                             // 23108
     <!doctype html>                                                                                                   // 23109
     <html ng-app ng-csp>                                                                                              // 23110
     ...                                                                                                               // 23111
     ...                                                                                                               // 23112
     </html>                                                                                                           // 23113
   ```                                                                                                                 // 23114
  * @example                                                                                                           // 23115
      // Note: the suffix `.csp` in the example name triggers                                                          // 23116
      // csp mode in our http server!                                                                                  // 23117
      <example name="example.csp" module="cspExample" ng-csp="true">                                                   // 23118
        <file name="index.html">                                                                                       // 23119
          <div ng-controller="MainController as ctrl">                                                                 // 23120
            <div>                                                                                                      // 23121
              <button ng-click="ctrl.inc()" id="inc">Increment</button>                                                // 23122
              <span id="counter">                                                                                      // 23123
                {{ctrl.counter}}                                                                                       // 23124
              </span>                                                                                                  // 23125
            </div>                                                                                                     // 23126
                                                                                                                       // 23127
            <div>                                                                                                      // 23128
              <button ng-click="ctrl.evil()" id="evil">Evil</button>                                                   // 23129
              <span id="evilError">                                                                                    // 23130
                {{ctrl.evilError}}                                                                                     // 23131
              </span>                                                                                                  // 23132
            </div>                                                                                                     // 23133
          </div>                                                                                                       // 23134
        </file>                                                                                                        // 23135
        <file name="script.js">                                                                                        // 23136
           angular.module('cspExample', [])                                                                            // 23137
             .controller('MainController', function() {                                                                // 23138
                this.counter = 0;                                                                                      // 23139
                this.inc = function() {                                                                                // 23140
                  this.counter++;                                                                                      // 23141
                };                                                                                                     // 23142
                this.evil = function() {                                                                               // 23143
                  // jshint evil:true                                                                                  // 23144
                  try {                                                                                                // 23145
                    eval('1+2');                                                                                       // 23146
                  } catch (e) {                                                                                        // 23147
                    this.evilError = e.message;                                                                        // 23148
                  }                                                                                                    // 23149
                };                                                                                                     // 23150
              });                                                                                                      // 23151
        </file>                                                                                                        // 23152
        <file name="protractor.js" type="protractor">                                                                  // 23153
          var util, webdriver;                                                                                         // 23154
                                                                                                                       // 23155
          var incBtn = element(by.id('inc'));                                                                          // 23156
          var counter = element(by.id('counter'));                                                                     // 23157
          var evilBtn = element(by.id('evil'));                                                                        // 23158
          var evilError = element(by.id('evilError'));                                                                 // 23159
                                                                                                                       // 23160
          function getAndClearSevereErrors() {                                                                         // 23161
            return browser.manage().logs().get('browser').then(function(browserLog) {                                  // 23162
              return browserLog.filter(function(logEntry) {                                                            // 23163
                return logEntry.level.value > webdriver.logging.Level.WARNING.value;                                   // 23164
              });                                                                                                      // 23165
            });                                                                                                        // 23166
          }                                                                                                            // 23167
                                                                                                                       // 23168
          function clearErrors() {                                                                                     // 23169
            getAndClearSevereErrors();                                                                                 // 23170
          }                                                                                                            // 23171
                                                                                                                       // 23172
          function expectNoErrors() {                                                                                  // 23173
            getAndClearSevereErrors().then(function(filteredLog) {                                                     // 23174
              expect(filteredLog.length).toEqual(0);                                                                   // 23175
              if (filteredLog.length) {                                                                                // 23176
                console.log('browser console errors: ' + util.inspect(filteredLog));                                   // 23177
              }                                                                                                        // 23178
            });                                                                                                        // 23179
          }                                                                                                            // 23180
                                                                                                                       // 23181
          function expectError(regex) {                                                                                // 23182
            getAndClearSevereErrors().then(function(filteredLog) {                                                     // 23183
              var found = false;                                                                                       // 23184
              filteredLog.forEach(function(log) {                                                                      // 23185
                if (log.message.match(regex)) {                                                                        // 23186
                  found = true;                                                                                        // 23187
                }                                                                                                      // 23188
              });                                                                                                      // 23189
              if (!found) {                                                                                            // 23190
                throw new Error('expected an error that matches ' + regex);                                            // 23191
              }                                                                                                        // 23192
            });                                                                                                        // 23193
          }                                                                                                            // 23194
                                                                                                                       // 23195
          beforeEach(function() {                                                                                      // 23196
            util = require('util');                                                                                    // 23197
            webdriver = require('protractor/node_modules/selenium-webdriver');                                         // 23198
          });                                                                                                          // 23199
                                                                                                                       // 23200
          // For now, we only test on Chrome,                                                                          // 23201
          // as Safari does not load the page with Protractor's injected scripts,                                      // 23202
          // and Firefox webdriver always disables content security policy (#6358)                                     // 23203
          if (browser.params.browser !== 'chrome') {                                                                   // 23204
            return;                                                                                                    // 23205
          }                                                                                                            // 23206
                                                                                                                       // 23207
          it('should not report errors when the page is loaded', function() {                                          // 23208
            // clear errors so we are not dependent on previous tests                                                  // 23209
            clearErrors();                                                                                             // 23210
            // Need to reload the page as the page is already loaded when                                              // 23211
            // we come here                                                                                            // 23212
            browser.driver.getCurrentUrl().then(function(url) {                                                        // 23213
              browser.get(url);                                                                                        // 23214
            });                                                                                                        // 23215
            expectNoErrors();                                                                                          // 23216
          });                                                                                                          // 23217
                                                                                                                       // 23218
          it('should evaluate expressions', function() {                                                               // 23219
            expect(counter.getText()).toEqual('0');                                                                    // 23220
            incBtn.click();                                                                                            // 23221
            expect(counter.getText()).toEqual('1');                                                                    // 23222
            expectNoErrors();                                                                                          // 23223
          });                                                                                                          // 23224
                                                                                                                       // 23225
          it('should throw and report an error when using "eval"', function() {                                        // 23226
            evilBtn.click();                                                                                           // 23227
            expect(evilError.getText()).toMatch(/Content Security Policy/);                                            // 23228
            expectError(/Content Security Policy/);                                                                    // 23229
          });                                                                                                          // 23230
        </file>                                                                                                        // 23231
      </example>                                                                                                       // 23232
  */                                                                                                                   // 23233
                                                                                                                       // 23234
// ngCsp is not implemented as a proper directive any more, because we need it be processed while we                   // 23235
// bootstrap the system (before $parse is instantiated), for this reason we just have                                  // 23236
// the csp.isActive() fn that looks for ng-csp attribute anywhere in the current doc                                   // 23237
                                                                                                                       // 23238
/**                                                                                                                    // 23239
 * @ngdoc directive                                                                                                    // 23240
 * @name ngClick                                                                                                       // 23241
 *                                                                                                                     // 23242
 * @description                                                                                                        // 23243
 * The ngClick directive allows you to specify custom behavior when                                                    // 23244
 * an element is clicked.                                                                                              // 23245
 *                                                                                                                     // 23246
 * @element ANY                                                                                                        // 23247
 * @priority 0                                                                                                         // 23248
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon                                    // 23249
 * click. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 23250
 *                                                                                                                     // 23251
 * @example                                                                                                            // 23252
   <example>                                                                                                           // 23253
     <file name="index.html">                                                                                          // 23254
      <button ng-click="count = count + 1" ng-init="count=0">                                                          // 23255
        Increment                                                                                                      // 23256
      </button>                                                                                                        // 23257
      <span>                                                                                                           // 23258
        count: {{count}}                                                                                               // 23259
      </span>                                                                                                          // 23260
     </file>                                                                                                           // 23261
     <file name="protractor.js" type="protractor">                                                                     // 23262
       it('should check ng-click', function() {                                                                        // 23263
         expect(element(by.binding('count')).getText()).toMatch('0');                                                  // 23264
         element(by.css('button')).click();                                                                            // 23265
         expect(element(by.binding('count')).getText()).toMatch('1');                                                  // 23266
       });                                                                                                             // 23267
     </file>                                                                                                           // 23268
   </example>                                                                                                          // 23269
 */                                                                                                                    // 23270
/*                                                                                                                     // 23271
 * A collection of directives that allows creation of custom event handlers that are defined as                        // 23272
 * angular expressions and are compiled and executed within the current scope.                                         // 23273
 */                                                                                                                    // 23274
var ngEventDirectives = {};                                                                                            // 23275
                                                                                                                       // 23276
// For events that might fire synchronously during DOM manipulation                                                    // 23277
// we need to execute their event handlers asynchronously using $evalAsync,                                            // 23278
// so that they are not executed in an inconsistent state.                                                             // 23279
var forceAsyncEvents = {                                                                                               // 23280
  'blur': true,                                                                                                        // 23281
  'focus': true                                                                                                        // 23282
};                                                                                                                     // 23283
forEach(                                                                                                               // 23284
  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
  function(eventName) {                                                                                                // 23286
    var directiveName = directiveNormalize('ng-' + eventName);                                                         // 23287
    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {                         // 23288
      return {                                                                                                         // 23289
        restrict: 'A',                                                                                                 // 23290
        compile: function($element, attr) {                                                                            // 23291
          // We expose the powerful $event object on the scope that provides access to the Window,                     // 23292
          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better                      // 23293
          // checks at the cost of speed since event handler expressions are not executed as                           // 23294
          // frequently as regular change detection.                                                                   // 23295
          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);                  // 23296
          return function ngEventHandler(scope, element) {                                                             // 23297
            element.on(eventName, function(event) {                                                                    // 23298
              var callback = function() {                                                                              // 23299
                fn(scope, {$event:event});                                                                             // 23300
              };                                                                                                       // 23301
              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {                                                 // 23302
                scope.$evalAsync(callback);                                                                            // 23303
              } else {                                                                                                 // 23304
                scope.$apply(callback);                                                                                // 23305
              }                                                                                                        // 23306
            });                                                                                                        // 23307
          };                                                                                                           // 23308
        }                                                                                                              // 23309
      };                                                                                                               // 23310
    }];                                                                                                                // 23311
  }                                                                                                                    // 23312
);                                                                                                                     // 23313
                                                                                                                       // 23314
/**                                                                                                                    // 23315
 * @ngdoc directive                                                                                                    // 23316
 * @name ngDblclick                                                                                                    // 23317
 *                                                                                                                     // 23318
 * @description                                                                                                        // 23319
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.                               // 23320
 *                                                                                                                     // 23321
 * @element ANY                                                                                                        // 23322
 * @priority 0                                                                                                         // 23323
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon                                 // 23324
 * a dblclick. (The Event object is available as `$event`)                                                             // 23325
 *                                                                                                                     // 23326
 * @example                                                                                                            // 23327
   <example>                                                                                                           // 23328
     <file name="index.html">                                                                                          // 23329
      <button ng-dblclick="count = count + 1" ng-init="count=0">                                                       // 23330
        Increment (on double click)                                                                                    // 23331
      </button>                                                                                                        // 23332
      count: {{count}}                                                                                                 // 23333
     </file>                                                                                                           // 23334
   </example>                                                                                                          // 23335
 */                                                                                                                    // 23336
                                                                                                                       // 23337
                                                                                                                       // 23338
/**                                                                                                                    // 23339
 * @ngdoc directive                                                                                                    // 23340
 * @name ngMousedown                                                                                                   // 23341
 *                                                                                                                     // 23342
 * @description                                                                                                        // 23343
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.                                 // 23344
 *                                                                                                                     // 23345
 * @element ANY                                                                                                        // 23346
 * @priority 0                                                                                                         // 23347
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon                                // 23348
 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23349
 *                                                                                                                     // 23350
 * @example                                                                                                            // 23351
   <example>                                                                                                           // 23352
     <file name="index.html">                                                                                          // 23353
      <button ng-mousedown="count = count + 1" ng-init="count=0">                                                      // 23354
        Increment (on mouse down)                                                                                      // 23355
      </button>                                                                                                        // 23356
      count: {{count}}                                                                                                 // 23357
     </file>                                                                                                           // 23358
   </example>                                                                                                          // 23359
 */                                                                                                                    // 23360
                                                                                                                       // 23361
                                                                                                                       // 23362
/**                                                                                                                    // 23363
 * @ngdoc directive                                                                                                    // 23364
 * @name ngMouseup                                                                                                     // 23365
 *                                                                                                                     // 23366
 * @description                                                                                                        // 23367
 * Specify custom behavior on mouseup event.                                                                           // 23368
 *                                                                                                                     // 23369
 * @element ANY                                                                                                        // 23370
 * @priority 0                                                                                                         // 23371
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon                                  // 23372
 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})                                   // 23373
 *                                                                                                                     // 23374
 * @example                                                                                                            // 23375
   <example>                                                                                                           // 23376
     <file name="index.html">                                                                                          // 23377
      <button ng-mouseup="count = count + 1" ng-init="count=0">                                                        // 23378
        Increment (on mouse up)                                                                                        // 23379
      </button>                                                                                                        // 23380
      count: {{count}}                                                                                                 // 23381
     </file>                                                                                                           // 23382
   </example>                                                                                                          // 23383
 */                                                                                                                    // 23384
                                                                                                                       // 23385
/**                                                                                                                    // 23386
 * @ngdoc directive                                                                                                    // 23387
 * @name ngMouseover                                                                                                   // 23388
 *                                                                                                                     // 23389
 * @description                                                                                                        // 23390
 * Specify custom behavior on mouseover event.                                                                         // 23391
 *                                                                                                                     // 23392
 * @element ANY                                                                                                        // 23393
 * @priority 0                                                                                                         // 23394
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon                                // 23395
 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23396
 *                                                                                                                     // 23397
 * @example                                                                                                            // 23398
   <example>                                                                                                           // 23399
     <file name="index.html">                                                                                          // 23400
      <button ng-mouseover="count = count + 1" ng-init="count=0">                                                      // 23401
        Increment (when mouse is over)                                                                                 // 23402
      </button>                                                                                                        // 23403
      count: {{count}}                                                                                                 // 23404
     </file>                                                                                                           // 23405
   </example>                                                                                                          // 23406
 */                                                                                                                    // 23407
                                                                                                                       // 23408
                                                                                                                       // 23409
/**                                                                                                                    // 23410
 * @ngdoc directive                                                                                                    // 23411
 * @name ngMouseenter                                                                                                  // 23412
 *                                                                                                                     // 23413
 * @description                                                                                                        // 23414
 * Specify custom behavior on mouseenter event.                                                                        // 23415
 *                                                                                                                     // 23416
 * @element ANY                                                                                                        // 23417
 * @priority 0                                                                                                         // 23418
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon                               // 23419
 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})                                // 23420
 *                                                                                                                     // 23421
 * @example                                                                                                            // 23422
   <example>                                                                                                           // 23423
     <file name="index.html">                                                                                          // 23424
      <button ng-mouseenter="count = count + 1" ng-init="count=0">                                                     // 23425
        Increment (when mouse enters)                                                                                  // 23426
      </button>                                                                                                        // 23427
      count: {{count}}                                                                                                 // 23428
     </file>                                                                                                           // 23429
   </example>                                                                                                          // 23430
 */                                                                                                                    // 23431
                                                                                                                       // 23432
                                                                                                                       // 23433
/**                                                                                                                    // 23434
 * @ngdoc directive                                                                                                    // 23435
 * @name ngMouseleave                                                                                                  // 23436
 *                                                                                                                     // 23437
 * @description                                                                                                        // 23438
 * Specify custom behavior on mouseleave event.                                                                        // 23439
 *                                                                                                                     // 23440
 * @element ANY                                                                                                        // 23441
 * @priority 0                                                                                                         // 23442
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon                               // 23443
 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})                                // 23444
 *                                                                                                                     // 23445
 * @example                                                                                                            // 23446
   <example>                                                                                                           // 23447
     <file name="index.html">                                                                                          // 23448
      <button ng-mouseleave="count = count + 1" ng-init="count=0">                                                     // 23449
        Increment (when mouse leaves)                                                                                  // 23450
      </button>                                                                                                        // 23451
      count: {{count}}                                                                                                 // 23452
     </file>                                                                                                           // 23453
   </example>                                                                                                          // 23454
 */                                                                                                                    // 23455
                                                                                                                       // 23456
                                                                                                                       // 23457
/**                                                                                                                    // 23458
 * @ngdoc directive                                                                                                    // 23459
 * @name ngMousemove                                                                                                   // 23460
 *                                                                                                                     // 23461
 * @description                                                                                                        // 23462
 * Specify custom behavior on mousemove event.                                                                         // 23463
 *                                                                                                                     // 23464
 * @element ANY                                                                                                        // 23465
 * @priority 0                                                                                                         // 23466
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon                                // 23467
 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23468
 *                                                                                                                     // 23469
 * @example                                                                                                            // 23470
   <example>                                                                                                           // 23471
     <file name="index.html">                                                                                          // 23472
      <button ng-mousemove="count = count + 1" ng-init="count=0">                                                      // 23473
        Increment (when mouse moves)                                                                                   // 23474
      </button>                                                                                                        // 23475
      count: {{count}}                                                                                                 // 23476
     </file>                                                                                                           // 23477
   </example>                                                                                                          // 23478
 */                                                                                                                    // 23479
                                                                                                                       // 23480
                                                                                                                       // 23481
/**                                                                                                                    // 23482
 * @ngdoc directive                                                                                                    // 23483
 * @name ngKeydown                                                                                                     // 23484
 *                                                                                                                     // 23485
 * @description                                                                                                        // 23486
 * Specify custom behavior on keydown event.                                                                           // 23487
 *                                                                                                                     // 23488
 * @element ANY                                                                                                        // 23489
 * @priority 0                                                                                                         // 23490
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon                                  // 23491
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)                  // 23492
 *                                                                                                                     // 23493
 * @example                                                                                                            // 23494
   <example>                                                                                                           // 23495
     <file name="index.html">                                                                                          // 23496
      <input ng-keydown="count = count + 1" ng-init="count=0">                                                         // 23497
      key down count: {{count}}                                                                                        // 23498
     </file>                                                                                                           // 23499
   </example>                                                                                                          // 23500
 */                                                                                                                    // 23501
                                                                                                                       // 23502
                                                                                                                       // 23503
/**                                                                                                                    // 23504
 * @ngdoc directive                                                                                                    // 23505
 * @name ngKeyup                                                                                                       // 23506
 *                                                                                                                     // 23507
 * @description                                                                                                        // 23508
 * Specify custom behavior on keyup event.                                                                             // 23509
 *                                                                                                                     // 23510
 * @element ANY                                                                                                        // 23511
 * @priority 0                                                                                                         // 23512
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon                                    // 23513
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)                    // 23514
 *                                                                                                                     // 23515
 * @example                                                                                                            // 23516
   <example>                                                                                                           // 23517
     <file name="index.html">                                                                                          // 23518
       <p>Typing in the input box below updates the key count</p>                                                      // 23519
       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}                                  // 23520
                                                                                                                       // 23521
       <p>Typing in the input box below updates the keycode</p>                                                        // 23522
       <input ng-keyup="event=$event">                                                                                 // 23523
       <p>event keyCode: {{ event.keyCode }}</p>                                                                       // 23524
       <p>event altKey: {{ event.altKey }}</p>                                                                         // 23525
     </file>                                                                                                           // 23526
   </example>                                                                                                          // 23527
 */                                                                                                                    // 23528
                                                                                                                       // 23529
                                                                                                                       // 23530
/**                                                                                                                    // 23531
 * @ngdoc directive                                                                                                    // 23532
 * @name ngKeypress                                                                                                    // 23533
 *                                                                                                                     // 23534
 * @description                                                                                                        // 23535
 * Specify custom behavior on keypress event.                                                                          // 23536
 *                                                                                                                     // 23537
 * @element ANY                                                                                                        // 23538
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon                                 // 23539
 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}                                   // 23540
 * and can be interrogated for keyCode, altKey, etc.)                                                                  // 23541
 *                                                                                                                     // 23542
 * @example                                                                                                            // 23543
   <example>                                                                                                           // 23544
     <file name="index.html">                                                                                          // 23545
      <input ng-keypress="count = count + 1" ng-init="count=0">                                                        // 23546
      key press count: {{count}}                                                                                       // 23547
     </file>                                                                                                           // 23548
   </example>                                                                                                          // 23549
 */                                                                                                                    // 23550
                                                                                                                       // 23551
                                                                                                                       // 23552
/**                                                                                                                    // 23553
 * @ngdoc directive                                                                                                    // 23554
 * @name ngSubmit                                                                                                      // 23555
 *                                                                                                                     // 23556
 * @description                                                                                                        // 23557
 * Enables binding angular expressions to onsubmit events.                                                             // 23558
 *                                                                                                                     // 23559
 * Additionally it prevents the default action (which for form means sending the request to the                        // 23560
 * server and reloading the current page), but only if the form does not contain `action`,                             // 23561
 * `data-action`, or `x-action` attributes.                                                                            // 23562
 *                                                                                                                     // 23563
 * <div class="alert alert-warning">                                                                                   // 23564
 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and                            // 23565
 * `ngSubmit` handlers together. See the                                                                               // 23566
 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}                     // 23567
 * for a detailed discussion of when `ngSubmit` may be triggered.                                                      // 23568
 * </div>                                                                                                              // 23569
 *                                                                                                                     // 23570
 * @element form                                                                                                       // 23571
 * @priority 0                                                                                                         // 23572
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.                                           // 23573
 * ({@link guide/expression#-event- Event object is available as `$event`})                                            // 23574
 *                                                                                                                     // 23575
 * @example                                                                                                            // 23576
   <example module="submitExample">                                                                                    // 23577
     <file name="index.html">                                                                                          // 23578
      <script>                                                                                                         // 23579
        angular.module('submitExample', [])                                                                            // 23580
          .controller('ExampleController', ['$scope', function($scope) {                                               // 23581
            $scope.list = [];                                                                                          // 23582
            $scope.text = 'hello';                                                                                     // 23583
            $scope.submit = function() {                                                                               // 23584
              if ($scope.text) {                                                                                       // 23585
                $scope.list.push(this.text);                                                                           // 23586
                $scope.text = '';                                                                                      // 23587
              }                                                                                                        // 23588
            };                                                                                                         // 23589
          }]);                                                                                                         // 23590
      </script>                                                                                                        // 23591
      <form ng-submit="submit()" ng-controller="ExampleController">                                                    // 23592
        Enter text and hit enter:                                                                                      // 23593
        <input type="text" ng-model="text" name="text" />                                                              // 23594
        <input type="submit" id="submit" value="Submit" />                                                             // 23595
        <pre>list={{list}}</pre>                                                                                       // 23596
      </form>                                                                                                          // 23597
     </file>                                                                                                           // 23598
     <file name="protractor.js" type="protractor">                                                                     // 23599
       it('should check ng-submit', function() {                                                                       // 23600
         expect(element(by.binding('list')).getText()).toBe('list=[]');                                                // 23601
         element(by.css('#submit')).click();                                                                           // 23602
         expect(element(by.binding('list')).getText()).toContain('hello');                                             // 23603
         expect(element(by.model('text')).getAttribute('value')).toBe('');                                             // 23604
       });                                                                                                             // 23605
       it('should ignore empty strings', function() {                                                                  // 23606
         expect(element(by.binding('list')).getText()).toBe('list=[]');                                                // 23607
         element(by.css('#submit')).click();                                                                           // 23608
         element(by.css('#submit')).click();                                                                           // 23609
         expect(element(by.binding('list')).getText()).toContain('hello');                                             // 23610
        });                                                                                                            // 23611
     </file>                                                                                                           // 23612
   </example>                                                                                                          // 23613
 */                                                                                                                    // 23614
                                                                                                                       // 23615
/**                                                                                                                    // 23616
 * @ngdoc directive                                                                                                    // 23617
 * @name ngFocus                                                                                                       // 23618
 *                                                                                                                     // 23619
 * @description                                                                                                        // 23620
 * Specify custom behavior on focus event.                                                                             // 23621
 *                                                                                                                     // 23622
 * Note: As the `focus` event is executed synchronously when calling `input.focus()`                                   // 23623
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired                                    // 23624
 * during an `$apply` to ensure a consistent state.                                                                    // 23625
 *                                                                                                                     // 23626
 * @element window, input, select, textarea, a                                                                         // 23627
 * @priority 0                                                                                                         // 23628
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon                                    // 23629
 * focus. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 23630
 *                                                                                                                     // 23631
 * @example                                                                                                            // 23632
 * See {@link ng.directive:ngClick ngClick}                                                                            // 23633
 */                                                                                                                    // 23634
                                                                                                                       // 23635
/**                                                                                                                    // 23636
 * @ngdoc directive                                                                                                    // 23637
 * @name ngBlur                                                                                                        // 23638
 *                                                                                                                     // 23639
 * @description                                                                                                        // 23640
 * Specify custom behavior on blur event.                                                                              // 23641
 *                                                                                                                     // 23642
 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when                                 // 23643
 * an element has lost focus.                                                                                          // 23644
 *                                                                                                                     // 23645
 * Note: As the `blur` event is executed synchronously also during DOM manipulations                                   // 23646
 * (e.g. removing a focussed input),                                                                                   // 23647
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired                                    // 23648
 * during an `$apply` to ensure a consistent state.                                                                    // 23649
 *                                                                                                                     // 23650
 * @element window, input, select, textarea, a                                                                         // 23651
 * @priority 0                                                                                                         // 23652
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon                                     // 23653
 * blur. ({@link guide/expression#-event- Event object is available as `$event`})                                      // 23654
 *                                                                                                                     // 23655
 * @example                                                                                                            // 23656
 * See {@link ng.directive:ngClick ngClick}                                                                            // 23657
 */                                                                                                                    // 23658
                                                                                                                       // 23659
/**                                                                                                                    // 23660
 * @ngdoc directive                                                                                                    // 23661
 * @name ngCopy                                                                                                        // 23662
 *                                                                                                                     // 23663
 * @description                                                                                                        // 23664
 * Specify custom behavior on copy event.                                                                              // 23665
 *                                                                                                                     // 23666
 * @element window, input, select, textarea, a                                                                         // 23667
 * @priority 0                                                                                                         // 23668
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon                                     // 23669
 * copy. ({@link guide/expression#-event- Event object is available as `$event`})                                      // 23670
 *                                                                                                                     // 23671
 * @example                                                                                                            // 23672
   <example>                                                                                                           // 23673
     <file name="index.html">                                                                                          // 23674
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">                           // 23675
      copied: {{copied}}                                                                                               // 23676
     </file>                                                                                                           // 23677
   </example>                                                                                                          // 23678
 */                                                                                                                    // 23679
                                                                                                                       // 23680
/**                                                                                                                    // 23681
 * @ngdoc directive                                                                                                    // 23682
 * @name ngCut                                                                                                         // 23683
 *                                                                                                                     // 23684
 * @description                                                                                                        // 23685
 * Specify custom behavior on cut event.                                                                               // 23686
 *                                                                                                                     // 23687
 * @element window, input, select, textarea, a                                                                         // 23688
 * @priority 0                                                                                                         // 23689
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon                                      // 23690
 * cut. ({@link guide/expression#-event- Event object is available as `$event`})                                       // 23691
 *                                                                                                                     // 23692
 * @example                                                                                                            // 23693
   <example>                                                                                                           // 23694
     <file name="index.html">                                                                                          // 23695
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">                                   // 23696
      cut: {{cut}}                                                                                                     // 23697
     </file>                                                                                                           // 23698
   </example>                                                                                                          // 23699
 */                                                                                                                    // 23700
                                                                                                                       // 23701
/**                                                                                                                    // 23702
 * @ngdoc directive                                                                                                    // 23703
 * @name ngPaste                                                                                                       // 23704
 *                                                                                                                     // 23705
 * @description                                                                                                        // 23706
 * Specify custom behavior on paste event.                                                                             // 23707
 *                                                                                                                     // 23708
 * @element window, input, select, textarea, a                                                                         // 23709
 * @priority 0                                                                                                         // 23710
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon                                    // 23711
 * paste. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 23712
 *                                                                                                                     // 23713
 * @example                                                                                                            // 23714
   <example>                                                                                                           // 23715
     <file name="index.html">                                                                                          // 23716
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>                                     // 23717
      pasted: {{paste}}                                                                                                // 23718
     </file>                                                                                                           // 23719
   </example>                                                                                                          // 23720
 */                                                                                                                    // 23721
                                                                                                                       // 23722
/**                                                                                                                    // 23723
 * @ngdoc directive                                                                                                    // 23724
 * @name ngIf                                                                                                          // 23725
 * @restrict A                                                                                                         // 23726
 * @multiElement                                                                                                       // 23727
 *                                                                                                                     // 23728
 * @description                                                                                                        // 23729
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an                                     // 23730
 * {expression}. If the expression assigned to `ngIf` evaluates to a false                                             // 23731
 * value then the element is removed from the DOM, otherwise a clone of the                                            // 23732
 * element is reinserted into the DOM.                                                                                 // 23733
 *                                                                                                                     // 23734
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the                       // 23735
 * element in the DOM rather than changing its visibility via the `display` css property.  A common                    // 23736
 * case when this difference is significant is when using css selectors that rely on an element's                      // 23737
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.                                // 23738
 *                                                                                                                     // 23739
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope                            // 23740
 * is created when the element is restored.  The scope created within `ngIf` inherits from                             // 23741
 * its parent scope using                                                                                              // 23742
 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to                                   // 23744
 * a javascript primitive defined in the parent scope. In this case any modifications made to the                      // 23745
 * variable within the child scope will override (hide) the value in the parent scope.                                 // 23746
 *                                                                                                                     // 23747
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior                             // 23748
 * is if an element's class attribute is directly modified after it's compiled, using something like                   // 23749
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element                  // 23750
 * the added class will be lost because the original compiled state is used to regenerate the element.                 // 23751
 *                                                                                                                     // 23752
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`                          // 23753
 * and `leave` effects.                                                                                                // 23754
 *                                                                                                                     // 23755
 * @animations                                                                                                         // 23756
 * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
 * leave - happens just before the `ngIf` contents are removed from the DOM                                            // 23758
 *                                                                                                                     // 23759
 * @element ANY                                                                                                        // 23760
 * @scope                                                                                                              // 23761
 * @priority 600                                                                                                       // 23762
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then                                   // 23763
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled                                // 23764
 *     element is added to the DOM tree.                                                                               // 23765
 *                                                                                                                     // 23766
 * @example                                                                                                            // 23767
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 23768
    <file name="index.html">                                                                                           // 23769
      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>                // 23770
      Show when checked:                                                                                               // 23771
      <span ng-if="checked" class="animate-if">                                                                        // 23772
        This is removed when the checkbox is unchecked.                                                                // 23773
      </span>                                                                                                          // 23774
    </file>                                                                                                            // 23775
    <file name="animations.css">                                                                                       // 23776
      .animate-if {                                                                                                    // 23777
        background:white;                                                                                              // 23778
        border:1px solid black;                                                                                        // 23779
        padding:10px;                                                                                                  // 23780
      }                                                                                                                // 23781
                                                                                                                       // 23782
      .animate-if.ng-enter, .animate-if.ng-leave {                                                                     // 23783
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                          // 23784
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 23785
      }                                                                                                                // 23786
                                                                                                                       // 23787
      .animate-if.ng-enter,                                                                                            // 23788
      .animate-if.ng-leave.ng-leave-active {                                                                           // 23789
        opacity:0;                                                                                                     // 23790
      }                                                                                                                // 23791
                                                                                                                       // 23792
      .animate-if.ng-leave,                                                                                            // 23793
      .animate-if.ng-enter.ng-enter-active {                                                                           // 23794
        opacity:1;                                                                                                     // 23795
      }                                                                                                                // 23796
    </file>                                                                                                            // 23797
  </example>                                                                                                           // 23798
 */                                                                                                                    // 23799
var ngIfDirective = ['$animate', function($animate) {                                                                  // 23800
  return {                                                                                                             // 23801
    multiElement: true,                                                                                                // 23802
    transclude: 'element',                                                                                             // 23803
    priority: 600,                                                                                                     // 23804
    terminal: true,                                                                                                    // 23805
    restrict: 'A',                                                                                                     // 23806
    $$tlb: true,                                                                                                       // 23807
    link: function($scope, $element, $attr, ctrl, $transclude) {                                                       // 23808
        var block, childScope, previousElements;                                                                       // 23809
        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {                                                    // 23810
                                                                                                                       // 23811
          if (value) {                                                                                                 // 23812
            if (!childScope) {                                                                                         // 23813
              $transclude(function(clone, newScope) {                                                                  // 23814
                childScope = newScope;                                                                                 // 23815
                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');                      // 23816
                // Note: We only need the first/last node of the cloned nodes.                                         // 23817
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later           // 23818
                // by a directive with templateUrl when its template arrives.                                          // 23819
                block = {                                                                                              // 23820
                  clone: clone                                                                                         // 23821
                };                                                                                                     // 23822
                $animate.enter(clone, $element.parent(), $element);                                                    // 23823
              });                                                                                                      // 23824
            }                                                                                                          // 23825
          } else {                                                                                                     // 23826
            if (previousElements) {                                                                                    // 23827
              previousElements.remove();                                                                               // 23828
              previousElements = null;                                                                                 // 23829
            }                                                                                                          // 23830
            if (childScope) {                                                                                          // 23831
              childScope.$destroy();                                                                                   // 23832
              childScope = null;                                                                                       // 23833
            }                                                                                                          // 23834
            if (block) {                                                                                               // 23835
              previousElements = getBlockNodes(block.clone);                                                           // 23836
              $animate.leave(previousElements).then(function() {                                                       // 23837
                previousElements = null;                                                                               // 23838
              });                                                                                                      // 23839
              block = null;                                                                                            // 23840
            }                                                                                                          // 23841
          }                                                                                                            // 23842
        });                                                                                                            // 23843
    }                                                                                                                  // 23844
  };                                                                                                                   // 23845
}];                                                                                                                    // 23846
                                                                                                                       // 23847
/**                                                                                                                    // 23848
 * @ngdoc directive                                                                                                    // 23849
 * @name ngInclude                                                                                                     // 23850
 * @restrict ECA                                                                                                       // 23851
 *                                                                                                                     // 23852
 * @description                                                                                                        // 23853
 * Fetches, compiles and includes an external HTML fragment.                                                           // 23854
 *                                                                                                                     // 23855
 * By default, the template URL is restricted to the same domain and protocol as the                                   // 23856
 * application document. This is done by calling {@link $sce#getTrustedResourceUrl                                     // 23857
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols                                // 23858
 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or                               // 23859
 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link                              // 23860
 * ng.$sce Strict Contextual Escaping}.                                                                                // 23861
 *                                                                                                                     // 23862
 * In addition, the browser's                                                                                          // 23863
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)         // 23864
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)                                              // 23865
 * policy may further restrict whether the template is successfully loaded.                                            // 23866
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`                     // 23867
 * access on some browsers.                                                                                            // 23868
 *                                                                                                                     // 23869
 * @animations                                                                                                         // 23870
 * enter - animation is used to bring new content into the browser.                                                    // 23871
 * leave - animation is used to animate existing content away.                                                         // 23872
 *                                                                                                                     // 23873
 * The enter and leave animation occur concurrently.                                                                   // 23874
 *                                                                                                                     // 23875
 * @scope                                                                                                              // 23876
 * @priority 400                                                                                                       // 23877
 *                                                                                                                     // 23878
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,             // 23879
 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.                  // 23880
 * @param {string=} onload Expression to evaluate when a new partial is loaded.                                        // 23881
 *                                                                                                                     // 23882
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll                                 // 23883
 *                  $anchorScroll} to scroll the viewport after the content is loaded.                                 // 23884
 *                                                                                                                     // 23885
 *                  - If the attribute is not set, disable scrolling.                                                  // 23886
 *                  - If the attribute is set without value, enable scrolling.                                         // 23887
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.                     // 23888
 *                                                                                                                     // 23889
 * @example                                                                                                            // 23890
  <example module="includeExample" deps="angular-animate.js" animations="true">                                        // 23891
    <file name="index.html">                                                                                           // 23892
     <div ng-controller="ExampleController">                                                                           // 23893
       <select ng-model="template" ng-options="t.name for t in templates">                                             // 23894
        <option value="">(blank)</option>                                                                              // 23895
       </select>                                                                                                       // 23896
       url of the template: <code>{{template.url}}</code>                                                              // 23897
       <hr/>                                                                                                           // 23898
       <div class="slide-animate-container">                                                                           // 23899
         <div class="slide-animate" ng-include="template.url"></div>                                                   // 23900
       </div>                                                                                                          // 23901
     </div>                                                                                                            // 23902
    </file>                                                                                                            // 23903
    <file name="script.js">                                                                                            // 23904
      angular.module('includeExample', ['ngAnimate'])                                                                  // 23905
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 23906
          $scope.templates =                                                                                           // 23907
            [ { name: 'template1.html', url: 'template1.html'},                                                        // 23908
              { name: 'template2.html', url: 'template2.html'} ];                                                      // 23909
          $scope.template = $scope.templates[0];                                                                       // 23910
        }]);                                                                                                           // 23911
     </file>                                                                                                           // 23912
    <file name="template1.html">                                                                                       // 23913
      Content of template1.html                                                                                        // 23914
    </file>                                                                                                            // 23915
    <file name="template2.html">                                                                                       // 23916
      Content of template2.html                                                                                        // 23917
    </file>                                                                                                            // 23918
    <file name="animations.css">                                                                                       // 23919
      .slide-animate-container {                                                                                       // 23920
        position:relative;                                                                                             // 23921
        background:white;                                                                                              // 23922
        border:1px solid black;                                                                                        // 23923
        height:40px;                                                                                                   // 23924
        overflow:hidden;                                                                                               // 23925
      }                                                                                                                // 23926
                                                                                                                       // 23927
      .slide-animate {                                                                                                 // 23928
        padding:10px;                                                                                                  // 23929
      }                                                                                                                // 23930
                                                                                                                       // 23931
      .slide-animate.ng-enter, .slide-animate.ng-leave {                                                               // 23932
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                          // 23933
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 23934
                                                                                                                       // 23935
        position:absolute;                                                                                             // 23936
        top:0;                                                                                                         // 23937
        left:0;                                                                                                        // 23938
        right:0;                                                                                                       // 23939
        bottom:0;                                                                                                      // 23940
        display:block;                                                                                                 // 23941
        padding:10px;                                                                                                  // 23942
      }                                                                                                                // 23943
                                                                                                                       // 23944
      .slide-animate.ng-enter {                                                                                        // 23945
        top:-50px;                                                                                                     // 23946
      }                                                                                                                // 23947
      .slide-animate.ng-enter.ng-enter-active {                                                                        // 23948
        top:0;                                                                                                         // 23949
      }                                                                                                                // 23950
                                                                                                                       // 23951
      .slide-animate.ng-leave {                                                                                        // 23952
        top:0;                                                                                                         // 23953
      }                                                                                                                // 23954
      .slide-animate.ng-leave.ng-leave-active {                                                                        // 23955
        top:50px;                                                                                                      // 23956
      }                                                                                                                // 23957
    </file>                                                                                                            // 23958
    <file name="protractor.js" type="protractor">                                                                      // 23959
      var templateSelect = element(by.model('template'));                                                              // 23960
      var includeElem = element(by.css('[ng-include]'));                                                               // 23961
                                                                                                                       // 23962
      it('should load template1.html', function() {                                                                    // 23963
        expect(includeElem.getText()).toMatch(/Content of template1.html/);                                            // 23964
      });                                                                                                              // 23965
                                                                                                                       // 23966
      it('should load template2.html', function() {                                                                    // 23967
        if (browser.params.browser == 'firefox') {                                                                     // 23968
          // Firefox can't handle using selects                                                                        // 23969
          // See https://github.com/angular/protractor/issues/480                                                      // 23970
          return;                                                                                                      // 23971
        }                                                                                                              // 23972
        templateSelect.click();                                                                                        // 23973
        templateSelect.all(by.css('option')).get(2).click();                                                           // 23974
        expect(includeElem.getText()).toMatch(/Content of template2.html/);                                            // 23975
      });                                                                                                              // 23976
                                                                                                                       // 23977
      it('should change to blank', function() {                                                                        // 23978
        if (browser.params.browser == 'firefox') {                                                                     // 23979
          // Firefox can't handle using selects                                                                        // 23980
          return;                                                                                                      // 23981
        }                                                                                                              // 23982
        templateSelect.click();                                                                                        // 23983
        templateSelect.all(by.css('option')).get(0).click();                                                           // 23984
        expect(includeElem.isPresent()).toBe(false);                                                                   // 23985
      });                                                                                                              // 23986
    </file>                                                                                                            // 23987
  </example>                                                                                                           // 23988
 */                                                                                                                    // 23989
                                                                                                                       // 23990
                                                                                                                       // 23991
/**                                                                                                                    // 23992
 * @ngdoc event                                                                                                        // 23993
 * @name ngInclude#$includeContentRequested                                                                            // 23994
 * @eventType emit on the scope ngInclude was declared in                                                              // 23995
 * @description                                                                                                        // 23996
 * Emitted every time the ngInclude content is requested.                                                              // 23997
 *                                                                                                                     // 23998
 * @param {Object} angularEvent Synthetic event object.                                                                // 23999
 * @param {String} src URL of content to load.                                                                         // 24000
 */                                                                                                                    // 24001
                                                                                                                       // 24002
                                                                                                                       // 24003
/**                                                                                                                    // 24004
 * @ngdoc event                                                                                                        // 24005
 * @name ngInclude#$includeContentLoaded                                                                               // 24006
 * @eventType emit on the current ngInclude scope                                                                      // 24007
 * @description                                                                                                        // 24008
 * Emitted every time the ngInclude content is reloaded.                                                               // 24009
 *                                                                                                                     // 24010
 * @param {Object} angularEvent Synthetic event object.                                                                // 24011
 * @param {String} src URL of content to load.                                                                         // 24012
 */                                                                                                                    // 24013
                                                                                                                       // 24014
                                                                                                                       // 24015
/**                                                                                                                    // 24016
 * @ngdoc event                                                                                                        // 24017
 * @name ngInclude#$includeContentError                                                                                // 24018
 * @eventType emit on the scope ngInclude was declared in                                                              // 24019
 * @description                                                                                                        // 24020
 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)                    // 24021
 *                                                                                                                     // 24022
 * @param {Object} angularEvent Synthetic event object.                                                                // 24023
 * @param {String} src URL of content to load.                                                                         // 24024
 */                                                                                                                    // 24025
var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',                                             // 24026
                  function($templateRequest,   $anchorScroll,   $animate) {                                            // 24027
  return {                                                                                                             // 24028
    restrict: 'ECA',                                                                                                   // 24029
    priority: 400,                                                                                                     // 24030
    terminal: true,                                                                                                    // 24031
    transclude: 'element',                                                                                             // 24032
    controller: angular.noop,                                                                                          // 24033
    compile: function(element, attr) {                                                                                 // 24034
      var srcExp = attr.ngInclude || attr.src,                                                                         // 24035
          onloadExp = attr.onload || '',                                                                               // 24036
          autoScrollExp = attr.autoscroll;                                                                             // 24037
                                                                                                                       // 24038
      return function(scope, $element, $attr, ctrl, $transclude) {                                                     // 24039
        var changeCounter = 0,                                                                                         // 24040
            currentScope,                                                                                              // 24041
            previousElement,                                                                                           // 24042
            currentElement;                                                                                            // 24043
                                                                                                                       // 24044
        var cleanupLastIncludeContent = function() {                                                                   // 24045
          if (previousElement) {                                                                                       // 24046
            previousElement.remove();                                                                                  // 24047
            previousElement = null;                                                                                    // 24048
          }                                                                                                            // 24049
          if (currentScope) {                                                                                          // 24050
            currentScope.$destroy();                                                                                   // 24051
            currentScope = null;                                                                                       // 24052
          }                                                                                                            // 24053
          if (currentElement) {                                                                                        // 24054
            $animate.leave(currentElement).then(function() {                                                           // 24055
              previousElement = null;                                                                                  // 24056
            });                                                                                                        // 24057
            previousElement = currentElement;                                                                          // 24058
            currentElement = null;                                                                                     // 24059
          }                                                                                                            // 24060
        };                                                                                                             // 24061
                                                                                                                       // 24062
        scope.$watch(srcExp, function ngIncludeWatchAction(src) {                                                      // 24063
          var afterAnimation = function() {                                                                            // 24064
            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {                          // 24065
              $anchorScroll();                                                                                         // 24066
            }                                                                                                          // 24067
          };                                                                                                           // 24068
          var thisChangeId = ++changeCounter;                                                                          // 24069
                                                                                                                       // 24070
          if (src) {                                                                                                   // 24071
            //set the 2nd param to true to ignore the template request error so that the inner                         // 24072
            //contents and scope can be cleaned up.                                                                    // 24073
            $templateRequest(src, true).then(function(response) {                                                      // 24074
              if (thisChangeId !== changeCounter) return;                                                              // 24075
              var newScope = scope.$new();                                                                             // 24076
              ctrl.template = response;                                                                                // 24077
                                                                                                                       // 24078
              // Note: This will also link all children of ng-include that were contained in the original              // 24079
              // html. If that content contains controllers, ... they could pollute/change the scope.                  // 24080
              // However, using ng-include on an element with additional content does not make sense...                // 24081
              // Note: We can't remove them in the cloneAttchFn of $transclude as that                                 // 24082
              // function is called before linking the content, which would apply child                                // 24083
              // directives to non existing elements.                                                                  // 24084
              var clone = $transclude(newScope, function(clone) {                                                      // 24085
                cleanupLastIncludeContent();                                                                           // 24086
                $animate.enter(clone, null, $element).then(afterAnimation);                                            // 24087
              });                                                                                                      // 24088
                                                                                                                       // 24089
              currentScope = newScope;                                                                                 // 24090
              currentElement = clone;                                                                                  // 24091
                                                                                                                       // 24092
              currentScope.$emit('$includeContentLoaded', src);                                                        // 24093
              scope.$eval(onloadExp);                                                                                  // 24094
            }, function() {                                                                                            // 24095
              if (thisChangeId === changeCounter) {                                                                    // 24096
                cleanupLastIncludeContent();                                                                           // 24097
                scope.$emit('$includeContentError', src);                                                              // 24098
              }                                                                                                        // 24099
            });                                                                                                        // 24100
            scope.$emit('$includeContentRequested', src);                                                              // 24101
          } else {                                                                                                     // 24102
            cleanupLastIncludeContent();                                                                               // 24103
            ctrl.template = null;                                                                                      // 24104
          }                                                                                                            // 24105
        });                                                                                                            // 24106
      };                                                                                                               // 24107
    }                                                                                                                  // 24108
  };                                                                                                                   // 24109
}];                                                                                                                    // 24110
                                                                                                                       // 24111
// This directive is called during the $transclude call of the first `ngInclude` directive.                            // 24112
// It will replace and compile the content of the element with the loaded template.                                    // 24113
// We need this directive so that the element content is already filled when                                           // 24114
// the link function of another directive on the same element as ngInclude                                             // 24115
// is called.                                                                                                          // 24116
var ngIncludeFillContentDirective = ['$compile',                                                                       // 24117
  function($compile) {                                                                                                 // 24118
    return {                                                                                                           // 24119
      restrict: 'ECA',                                                                                                 // 24120
      priority: -400,                                                                                                  // 24121
      require: 'ngInclude',                                                                                            // 24122
      link: function(scope, $element, $attr, ctrl) {                                                                   // 24123
        if (/SVG/.test($element[0].toString())) {                                                                      // 24124
          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not                            // 24125
          // support innerHTML, so detect this here and try to generate the contents                                   // 24126
          // specially.                                                                                                // 24127
          $element.empty();                                                                                            // 24128
          $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope,                                     // 24129
              function namespaceAdaptedClone(clone) {                                                                  // 24130
            $element.append(clone);                                                                                    // 24131
          }, {futureParentElement: $element});                                                                         // 24132
          return;                                                                                                      // 24133
        }                                                                                                              // 24134
                                                                                                                       // 24135
        $element.html(ctrl.template);                                                                                  // 24136
        $compile($element.contents())(scope);                                                                          // 24137
      }                                                                                                                // 24138
    };                                                                                                                 // 24139
  }];                                                                                                                  // 24140
                                                                                                                       // 24141
/**                                                                                                                    // 24142
 * @ngdoc directive                                                                                                    // 24143
 * @name ngInit                                                                                                        // 24144
 * @restrict AC                                                                                                        // 24145
 *                                                                                                                     // 24146
 * @description                                                                                                        // 24147
 * The `ngInit` directive allows you to evaluate an expression in the                                                  // 24148
 * current scope.                                                                                                      // 24149
 *                                                                                                                     // 24150
 * <div class="alert alert-danger">                                                                                    // 24151
 * The only appropriate use of `ngInit` is for aliasing special properties of                                          // 24152
 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you                         // 24153
 * should use {@link guide/controller controllers} rather than `ngInit`                                                // 24154
 * to initialize values on a scope.                                                                                    // 24155
 * </div>                                                                                                              // 24156
 * <div class="alert alert-warning">                                                                                   // 24157
 * **Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make                          // 24158
 * sure you have parenthesis for correct precedence:                                                                   // 24159
 * <pre class="prettyprint">                                                                                           // 24160
 * `<div ng-init="test1 = (data | orderBy:'name')"></div>`                                                             // 24161
 * </pre>                                                                                                              // 24162
 * </div>                                                                                                              // 24163
 *                                                                                                                     // 24164
 * @priority 450                                                                                                       // 24165
 *                                                                                                                     // 24166
 * @element ANY                                                                                                        // 24167
 * @param {expression} ngInit {@link guide/expression Expression} to eval.                                             // 24168
 *                                                                                                                     // 24169
 * @example                                                                                                            // 24170
   <example module="initExample">                                                                                      // 24171
     <file name="index.html">                                                                                          // 24172
   <script>                                                                                                            // 24173
     angular.module('initExample', [])                                                                                 // 24174
       .controller('ExampleController', ['$scope', function($scope) {                                                  // 24175
         $scope.list = [['a', 'b'], ['c', 'd']];                                                                       // 24176
       }]);                                                                                                            // 24177
   </script>                                                                                                           // 24178
   <div ng-controller="ExampleController">                                                                             // 24179
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">                                                 // 24180
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">                                              // 24181
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>                      // 24182
       </div>                                                                                                          // 24183
     </div>                                                                                                            // 24184
   </div>                                                                                                              // 24185
     </file>                                                                                                           // 24186
     <file name="protractor.js" type="protractor">                                                                     // 24187
       it('should alias index positions', function() {                                                                 // 24188
         var elements = element.all(by.css('.example-init'));                                                          // 24189
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');                                                // 24190
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');                                                // 24191
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');                                                // 24192
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');                                                // 24193
       });                                                                                                             // 24194
     </file>                                                                                                           // 24195
   </example>                                                                                                          // 24196
 */                                                                                                                    // 24197
var ngInitDirective = ngDirective({                                                                                    // 24198
  priority: 450,                                                                                                       // 24199
  compile: function() {                                                                                                // 24200
    return {                                                                                                           // 24201
      pre: function(scope, element, attrs) {                                                                           // 24202
        scope.$eval(attrs.ngInit);                                                                                     // 24203
      }                                                                                                                // 24204
    };                                                                                                                 // 24205
  }                                                                                                                    // 24206
});                                                                                                                    // 24207
                                                                                                                       // 24208
/**                                                                                                                    // 24209
 * @ngdoc directive                                                                                                    // 24210
 * @name ngList                                                                                                        // 24211
 *                                                                                                                     // 24212
 * @description                                                                                                        // 24213
 * Text input that converts between a delimited string and an array of strings. The default                            // 24214
 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom                   // 24215
 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.                                    // 24216
 *                                                                                                                     // 24217
 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.                                    // 24218
 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each                                // 24219
 *   list item is respected. This implies that the user of the directive is responsible for                            // 24220
 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a                           // 24221
 *   tab or newline character.                                                                                         // 24222
 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected                     // 24223
 *   when joining the list items back together) and whitespace around each list item is stripped                       // 24224
 *   before it is added to the model.                                                                                  // 24225
 *                                                                                                                     // 24226
 * ### Example with Validation                                                                                         // 24227
 *                                                                                                                     // 24228
 * <example name="ngList-directive" module="listExample">                                                              // 24229
 *   <file name="app.js">                                                                                              // 24230
 *      angular.module('listExample', [])                                                                              // 24231
 *        .controller('ExampleController', ['$scope', function($scope) {                                               // 24232
 *          $scope.names = ['morpheus', 'neo', 'trinity'];                                                             // 24233
 *        }]);                                                                                                         // 24234
 *   </file>                                                                                                           // 24235
 *   <file name="index.html">                                                                                          // 24236
 *    <form name="myForm" ng-controller="ExampleController">                                                           // 24237
 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>                               // 24238
 *      <span role="alert">                                                                                            // 24239
 *        <span class="error" ng-show="myForm.namesInput.$error.required">                                             // 24240
 *        Required!</span>                                                                                             // 24241
 *      </span>                                                                                                        // 24242
 *      <br>                                                                                                           // 24243
 *      <tt>names = {{names}}</tt><br/>                                                                                // 24244
 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>                                          // 24245
 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>                                          // 24246
 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 24247
 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 24248
 *     </form>                                                                                                         // 24249
 *   </file>                                                                                                           // 24250
 *   <file name="protractor.js" type="protractor">                                                                     // 24251
 *     var listInput = element(by.model('names'));                                                                     // 24252
 *     var names = element(by.exactBinding('names'));                                                                  // 24253
 *     var valid = element(by.binding('myForm.namesInput.$valid'));                                                    // 24254
 *     var error = element(by.css('span.error'));                                                                      // 24255
 *                                                                                                                     // 24256
 *     it('should initialize to model', function() {                                                                   // 24257
 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');                                            // 24258
 *       expect(valid.getText()).toContain('true');                                                                    // 24259
 *       expect(error.getCssValue('display')).toBe('none');                                                            // 24260
 *     });                                                                                                             // 24261
 *                                                                                                                     // 24262
 *     it('should be invalid if empty', function() {                                                                   // 24263
 *       listInput.clear();                                                                                            // 24264
 *       listInput.sendKeys('');                                                                                       // 24265
 *                                                                                                                     // 24266
 *       expect(names.getText()).toContain('');                                                                        // 24267
 *       expect(valid.getText()).toContain('false');                                                                   // 24268
 *       expect(error.getCssValue('display')).not.toBe('none');                                                        // 24269
 *     });                                                                                                             // 24270
 *   </file>                                                                                                           // 24271
 * </example>                                                                                                          // 24272
 *                                                                                                                     // 24273
 * ### Example - splitting on whitespace                                                                               // 24274
 * <example name="ngList-directive-newlines">                                                                          // 24275
 *   <file name="index.html">                                                                                          // 24276
 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>                                            // 24277
 *    <pre>{{ list | json }}</pre>                                                                                     // 24278
 *   </file>                                                                                                           // 24279
 *   <file name="protractor.js" type="protractor">                                                                     // 24280
 *     it("should split the text by newlines", function() {                                                            // 24281
 *       var listInput = element(by.model('list'));                                                                    // 24282
 *       var output = element(by.binding('list | json'));                                                              // 24283
 *       listInput.sendKeys('abc\ndef\nghi');                                                                          // 24284
 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');                                      // 24285
 *     });                                                                                                             // 24286
 *   </file>                                                                                                           // 24287
 * </example>                                                                                                          // 24288
 *                                                                                                                     // 24289
 * @element input                                                                                                      // 24290
 * @param {string=} ngList optional delimiter that should be used to split the value.                                  // 24291
 */                                                                                                                    // 24292
var ngListDirective = function() {                                                                                     // 24293
  return {                                                                                                             // 24294
    restrict: 'A',                                                                                                     // 24295
    priority: 100,                                                                                                     // 24296
    require: 'ngModel',                                                                                                // 24297
    link: function(scope, element, attr, ctrl) {                                                                       // 24298
      // We want to control whitespace trimming so we use this convoluted approach                                     // 24299
      // to access the ngList attribute, which doesn't pre-trim the attribute                                          // 24300
      var ngList = element.attr(attr.$attr.ngList) || ', ';                                                            // 24301
      var trimValues = attr.ngTrim !== 'false';                                                                        // 24302
      var separator = trimValues ? trim(ngList) : ngList;                                                              // 24303
                                                                                                                       // 24304
      var parse = function(viewValue) {                                                                                // 24305
        // If the viewValue is invalid (say required but empty) it will be `undefined`                                 // 24306
        if (isUndefined(viewValue)) return;                                                                            // 24307
                                                                                                                       // 24308
        var list = [];                                                                                                 // 24309
                                                                                                                       // 24310
        if (viewValue) {                                                                                               // 24311
          forEach(viewValue.split(separator), function(value) {                                                        // 24312
            if (value) list.push(trimValues ? trim(value) : value);                                                    // 24313
          });                                                                                                          // 24314
        }                                                                                                              // 24315
                                                                                                                       // 24316
        return list;                                                                                                   // 24317
      };                                                                                                               // 24318
                                                                                                                       // 24319
      ctrl.$parsers.push(parse);                                                                                       // 24320
      ctrl.$formatters.push(function(value) {                                                                          // 24321
        if (isArray(value)) {                                                                                          // 24322
          return value.join(ngList);                                                                                   // 24323
        }                                                                                                              // 24324
                                                                                                                       // 24325
        return undefined;                                                                                              // 24326
      });                                                                                                              // 24327
                                                                                                                       // 24328
      // Override the standard $isEmpty because an empty array means the input is empty.                               // 24329
      ctrl.$isEmpty = function(value) {                                                                                // 24330
        return !value || !value.length;                                                                                // 24331
      };                                                                                                               // 24332
    }                                                                                                                  // 24333
  };                                                                                                                   // 24334
};                                                                                                                     // 24335
                                                                                                                       // 24336
/* global VALID_CLASS: true,                                                                                           // 24337
  INVALID_CLASS: true,                                                                                                 // 24338
  PRISTINE_CLASS: true,                                                                                                // 24339
  DIRTY_CLASS: true,                                                                                                   // 24340
  UNTOUCHED_CLASS: true,                                                                                               // 24341
  TOUCHED_CLASS: true,                                                                                                 // 24342
*/                                                                                                                     // 24343
                                                                                                                       // 24344
var VALID_CLASS = 'ng-valid',                                                                                          // 24345
    INVALID_CLASS = 'ng-invalid',                                                                                      // 24346
    PRISTINE_CLASS = 'ng-pristine',                                                                                    // 24347
    DIRTY_CLASS = 'ng-dirty',                                                                                          // 24348
    UNTOUCHED_CLASS = 'ng-untouched',                                                                                  // 24349
    TOUCHED_CLASS = 'ng-touched',                                                                                      // 24350
    PENDING_CLASS = 'ng-pending';                                                                                      // 24351
                                                                                                                       // 24352
                                                                                                                       // 24353
var $ngModelMinErr = new minErr('ngModel');                                                                            // 24354
                                                                                                                       // 24355
/**                                                                                                                    // 24356
 * @ngdoc type                                                                                                         // 24357
 * @name ngModel.NgModelController                                                                                     // 24358
 *                                                                                                                     // 24359
 * @property {string} $viewValue Actual string value in the view.                                                      // 24360
 * @property {*} $modelValue The value in the model that the control is bound to.                                      // 24361
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever                        // 24362
       the control reads value from the DOM. The functions are called in array order, each passing                     // 24363
       its return value through to the next. The last return value is forwarded to the                                 // 24364
       {@link ngModel.NgModelController#$validators `$validators`} collection.                                         // 24365
                                                                                                                       // 24366
Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue                                 // 24367
`$viewValue`}.                                                                                                         // 24368
                                                                                                                       // 24369
Returning `undefined` from a parser means a parse error occurred. In that case,                                        // 24370
no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`                              // 24371
will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}                                 // 24372
is set to `true`. The parse error is stored in `ngModel.$error.parse`.                                                 // 24373
                                                                                                                       // 24374
 *                                                                                                                     // 24375
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever                     // 24376
       the model value changes. The functions are called in reverse array order, each passing the value through to the // 24377
       next. The last return value is used as the actual DOM value.                                                    // 24378
       Used to format / convert values for display in the control.                                                     // 24379
 * ```js                                                                                                               // 24380
 * function formatter(value) {                                                                                         // 24381
 *   if (value) {                                                                                                      // 24382
 *     return value.toUpperCase();                                                                                     // 24383
 *   }                                                                                                                 // 24384
 * }                                                                                                                   // 24385
 * ngModel.$formatters.push(formatter);                                                                                // 24386
 * ```                                                                                                                 // 24387
 *                                                                                                                     // 24388
 * @property {Object.<string, function>} $validators A collection of validators that are applied                       // 24389
 *      whenever the model value changes. The key value within the object refers to the name of the                    // 24390
 *      validator while the function refers to the validation operation. The validation operation is                   // 24391
 *      provided with the model value as an argument and must return a true or false value depending                   // 24392
 *      on the response of that validation.                                                                            // 24393
 *                                                                                                                     // 24394
 * ```js                                                                                                               // 24395
 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {                                             // 24396
 *   var value = modelValue || viewValue;                                                                              // 24397
 *   return /[0-9]+/.test(value) &&                                                                                    // 24398
 *          /[a-z]+/.test(value) &&                                                                                    // 24399
 *          /[A-Z]+/.test(value) &&                                                                                    // 24400
 *          /\W+/.test(value);                                                                                         // 24401
 * };                                                                                                                  // 24402
 * ```                                                                                                                 // 24403
 *                                                                                                                     // 24404
 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to             // 24405
 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided             // 24406
 *      is expected to return a promise when it is run during the model validation process. Once the promise           // 24407
 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.            // 24408
 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model      // 24409
 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator       // 24410
 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
 *      will only run once all synchronous validators have passed.                                                     // 24412
 *                                                                                                                     // 24413
 * Please note that if $http is used then it is important that the server returns a success HTTP response code         // 24414
 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.                   // 24415
 *                                                                                                                     // 24416
 * ```js                                                                                                               // 24417
 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {                                         // 24418
 *   var value = modelValue || viewValue;                                                                              // 24419
 *                                                                                                                     // 24420
 *   // Lookup user by username                                                                                        // 24421
 *   return $http.get('/api/users/' + value).                                                                          // 24422
 *      then(function resolved() {                                                                                     // 24423
 *        //username exists, this means validation fails                                                               // 24424
 *        return $q.reject('exists');                                                                                  // 24425
 *      }, function rejected() {                                                                                       // 24426
 *        //username does not exist, therefore this validation passes                                                  // 24427
 *        return true;                                                                                                 // 24428
 *      });                                                                                                            // 24429
 * };                                                                                                                  // 24430
 * ```                                                                                                                 // 24431
 *                                                                                                                     // 24432
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the                        // 24433
 *     view value has changed. It is called with no arguments, and its return value is ignored.                        // 24434
 *     This can be used in place of additional $watches against the model value.                                       // 24435
 *                                                                                                                     // 24436
 * @property {Object} $error An object hash with all failing validator ids as keys.                                    // 24437
 * @property {Object} $pending An object hash with all pending validator ids as keys.                                  // 24438
 *                                                                                                                     // 24439
 * @property {boolean} $untouched True if control has not lost focus yet.                                              // 24440
 * @property {boolean} $touched True if control has lost focus.                                                        // 24441
 * @property {boolean} $pristine True if user has not interacted with the control yet.                                 // 24442
 * @property {boolean} $dirty True if user has already interacted with the control.                                    // 24443
 * @property {boolean} $valid True if there is no error.                                                               // 24444
 * @property {boolean} $invalid True if at least one error on the control.                                             // 24445
 * @property {string} $name The name attribute of the control.                                                         // 24446
 *                                                                                                                     // 24447
 * @description                                                                                                        // 24448
 *                                                                                                                     // 24449
 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.                                       // 24450
 * The controller contains services for data-binding, validation, CSS updates, and value formatting                    // 24451
 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or                           // 24452
 * listening to DOM events.                                                                                            // 24453
 * Such DOM related logic should be provided by other directives which make use of                                     // 24454
 * `NgModelController` for data-binding to control elements.                                                           // 24455
 * Angular provides this DOM logic for most {@link input `input`} elements.                                            // 24456
 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example                      // 24457
 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.                        // 24458
 *                                                                                                                     // 24459
 * @example                                                                                                            // 24460
 * ### Custom Control Example                                                                                          // 24461
 * This example shows how to use `NgModelController` with a custom control to achieve                                  // 24462
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)                       // 24463
 * collaborate together to achieve the desired result.                                                                 // 24464
 *                                                                                                                     // 24465
 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element                                 // 24466
 * contents be edited in place by the user.                                                                            // 24467
 *                                                                                                                     // 24468
 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}             // 24469
 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).              // 24470
 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks                    // 24471
 * that content using the `$sce` service.                                                                              // 24472
 *                                                                                                                     // 24473
 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">                                // 24474
    <file name="style.css">                                                                                            // 24475
      [contenteditable] {                                                                                              // 24476
        border: 1px solid black;                                                                                       // 24477
        background-color: white;                                                                                       // 24478
        min-height: 20px;                                                                                              // 24479
      }                                                                                                                // 24480
                                                                                                                       // 24481
      .ng-invalid {                                                                                                    // 24482
        border: 1px solid red;                                                                                         // 24483
      }                                                                                                                // 24484
                                                                                                                       // 24485
    </file>                                                                                                            // 24486
    <file name="script.js">                                                                                            // 24487
      angular.module('customControl', ['ngSanitize']).                                                                 // 24488
        directive('contenteditable', ['$sce', function($sce) {                                                         // 24489
          return {                                                                                                     // 24490
            restrict: 'A', // only activate on element attribute                                                       // 24491
            require: '?ngModel', // get a hold of NgModelController                                                    // 24492
            link: function(scope, element, attrs, ngModel) {                                                           // 24493
              if (!ngModel) return; // do nothing if no ng-model                                                       // 24494
                                                                                                                       // 24495
              // Specify how UI should be updated                                                                      // 24496
              ngModel.$render = function() {                                                                           // 24497
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));                                           // 24498
              };                                                                                                       // 24499
                                                                                                                       // 24500
              // Listen for change events to enable binding                                                            // 24501
              element.on('blur keyup change', function() {                                                             // 24502
                scope.$evalAsync(read);                                                                                // 24503
              });                                                                                                      // 24504
              read(); // initialize                                                                                    // 24505
                                                                                                                       // 24506
              // Write data to the model                                                                               // 24507
              function read() {                                                                                        // 24508
                var html = element.html();                                                                             // 24509
                // When we clear the content editable the browser leaves a <br> behind                                 // 24510
                // If strip-br attribute is provided then we strip this out                                            // 24511
                if ( attrs.stripBr && html == '<br>' ) {                                                               // 24512
                  html = '';                                                                                           // 24513
                }                                                                                                      // 24514
                ngModel.$setViewValue(html);                                                                           // 24515
              }                                                                                                        // 24516
            }                                                                                                          // 24517
          };                                                                                                           // 24518
        }]);                                                                                                           // 24519
    </file>                                                                                                            // 24520
    <file name="index.html">                                                                                           // 24521
      <form name="myForm">                                                                                             // 24522
       <div contenteditable                                                                                            // 24523
            name="myWidget" ng-model="userContent"                                                                     // 24524
            strip-br="true"                                                                                            // 24525
            required>Change me!</div>                                                                                  // 24526
        <span ng-show="myForm.myWidget.$error.required">Required!</span>                                               // 24527
       <hr>                                                                                                            // 24528
       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>                                      // 24529
      </form>                                                                                                          // 24530
    </file>                                                                                                            // 24531
    <file name="protractor.js" type="protractor">                                                                      // 24532
    it('should data-bind and become invalid', function() {                                                             // 24533
      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {                                 // 24534
        // SafariDriver can't handle contenteditable                                                                   // 24535
        // and Firefox driver can't clear contenteditables very well                                                   // 24536
        return;                                                                                                        // 24537
      }                                                                                                                // 24538
      var contentEditable = element(by.css('[contenteditable]'));                                                      // 24539
      var content = 'Change me!';                                                                                      // 24540
                                                                                                                       // 24541
      expect(contentEditable.getText()).toEqual(content);                                                              // 24542
                                                                                                                       // 24543
      contentEditable.clear();                                                                                         // 24544
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);                                                             // 24545
      expect(contentEditable.getText()).toEqual('');                                                                   // 24546
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);                                    // 24547
    });                                                                                                                // 24548
    </file>                                                                                                            // 24549
 * </example>                                                                                                          // 24550
 *                                                                                                                     // 24551
 *                                                                                                                     // 24552
 */                                                                                                                    // 24553
var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {   // 24555
  this.$viewValue = Number.NaN;                                                                                        // 24556
  this.$modelValue = Number.NaN;                                                                                       // 24557
  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.     // 24558
  this.$validators = {};                                                                                               // 24559
  this.$asyncValidators = {};                                                                                          // 24560
  this.$parsers = [];                                                                                                  // 24561
  this.$formatters = [];                                                                                               // 24562
  this.$viewChangeListeners = [];                                                                                      // 24563
  this.$untouched = true;                                                                                              // 24564
  this.$touched = false;                                                                                               // 24565
  this.$pristine = true;                                                                                               // 24566
  this.$dirty = false;                                                                                                 // 24567
  this.$valid = true;                                                                                                  // 24568
  this.$invalid = false;                                                                                               // 24569
  this.$error = {}; // keep invalid keys here                                                                          // 24570
  this.$$success = {}; // keep valid keys here                                                                         // 24571
  this.$pending = undefined; // keep pending keys here                                                                 // 24572
  this.$name = $interpolate($attr.name || '', false)($scope);                                                          // 24573
                                                                                                                       // 24574
                                                                                                                       // 24575
  var parsedNgModel = $parse($attr.ngModel),                                                                           // 24576
      parsedNgModelAssign = parsedNgModel.assign,                                                                      // 24577
      ngModelGet = parsedNgModel,                                                                                      // 24578
      ngModelSet = parsedNgModelAssign,                                                                                // 24579
      pendingDebounce = null,                                                                                          // 24580
      parserValid,                                                                                                     // 24581
      ctrl = this;                                                                                                     // 24582
                                                                                                                       // 24583
  this.$$setOptions = function(options) {                                                                              // 24584
    ctrl.$options = options;                                                                                           // 24585
    if (options && options.getterSetter) {                                                                             // 24586
      var invokeModelGetter = $parse($attr.ngModel + '()'),                                                            // 24587
          invokeModelSetter = $parse($attr.ngModel + '($$$p)');                                                        // 24588
                                                                                                                       // 24589
      ngModelGet = function($scope) {                                                                                  // 24590
        var modelValue = parsedNgModel($scope);                                                                        // 24591
        if (isFunction(modelValue)) {                                                                                  // 24592
          modelValue = invokeModelGetter($scope);                                                                      // 24593
        }                                                                                                              // 24594
        return modelValue;                                                                                             // 24595
      };                                                                                                               // 24596
      ngModelSet = function($scope, newValue) {                                                                        // 24597
        if (isFunction(parsedNgModel($scope))) {                                                                       // 24598
          invokeModelSetter($scope, {$$$p: ctrl.$modelValue});                                                         // 24599
        } else {                                                                                                       // 24600
          parsedNgModelAssign($scope, ctrl.$modelValue);                                                               // 24601
        }                                                                                                              // 24602
      };                                                                                                               // 24603
    } else if (!parsedNgModel.assign) {                                                                                // 24604
      throw $ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",                            // 24605
          $attr.ngModel, startingTag($element));                                                                       // 24606
    }                                                                                                                  // 24607
  };                                                                                                                   // 24608
                                                                                                                       // 24609
  /**                                                                                                                  // 24610
   * @ngdoc method                                                                                                     // 24611
   * @name ngModel.NgModelController#$render                                                                           // 24612
   *                                                                                                                   // 24613
   * @description                                                                                                      // 24614
   * Called when the view needs to be updated. It is expected that the user of the ng-model                            // 24615
   * directive will implement this method.                                                                             // 24616
   *                                                                                                                   // 24617
   * The `$render()` method is invoked in the following situations:                                                    // 24618
   *                                                                                                                   // 24619
   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last                            // 24620
   *   committed value then `$render()` is called to update the input control.                                         // 24621
   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and                   // 24622
   *   the `$viewValue` are different from last time.                                                                  // 24623
   *                                                                                                                   // 24624
   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of                           // 24625
   * `$modelValue` and `$viewValue` are actually different from their previous value. If `$modelValue`                 // 24626
   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be                         // 24627
   * invoked if you only change a property on the objects.                                                             // 24628
   */                                                                                                                  // 24629
  this.$render = noop;                                                                                                 // 24630
                                                                                                                       // 24631
  /**                                                                                                                  // 24632
   * @ngdoc method                                                                                                     // 24633
   * @name ngModel.NgModelController#$isEmpty                                                                          // 24634
   *                                                                                                                   // 24635
   * @description                                                                                                      // 24636
   * This is called when we need to determine if the value of an input is empty.                                       // 24637
   *                                                                                                                   // 24638
   * For instance, the required directive does this to work out if the input has data or not.                          // 24639
   *                                                                                                                   // 24640
   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.                   // 24641
   *                                                                                                                   // 24642
   * You can override this for input directives whose concept of being empty is different from the                     // 24643
   * default. The `checkboxInputType` directive does this because in its case a value of `false`                       // 24644
   * implies empty.                                                                                                    // 24645
   *                                                                                                                   // 24646
   * @param {*} value The value of the input to check for emptiness.                                                   // 24647
   * @returns {boolean} True if `value` is "empty".                                                                    // 24648
   */                                                                                                                  // 24649
  this.$isEmpty = function(value) {                                                                                    // 24650
    return isUndefined(value) || value === '' || value === null || value !== value;                                    // 24651
  };                                                                                                                   // 24652
                                                                                                                       // 24653
  var parentForm = $element.inheritedData('$formController') || nullFormCtrl,                                          // 24654
      currentValidationRunId = 0;                                                                                      // 24655
                                                                                                                       // 24656
  /**                                                                                                                  // 24657
   * @ngdoc method                                                                                                     // 24658
   * @name ngModel.NgModelController#$setValidity                                                                      // 24659
   *                                                                                                                   // 24660
   * @description                                                                                                      // 24661
   * Change the validity state, and notify the form.                                                                   // 24662
   *                                                                                                                   // 24663
   * This method can be called within $parsers/$formatters or a custom validation implementation.                      // 24664
   * However, in most cases it should be sufficient to use the `ngModel.$validators` and                               // 24665
   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.                              // 24666
   *                                                                                                                   // 24667
   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned               // 24668
   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`                                   // 24669
   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.                            // 24670
   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case                      // 24671
   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`            // 24672
   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .                                  // 24673
   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),         // 24674
   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.                   // 24675
   *                          Skipped is used by Angular when validators do not run because of parse errors and        // 24676
   *                          when `$asyncValidators` do not run because any of the `$validators` failed.              // 24677
   */                                                                                                                  // 24678
  addSetValidityMethod({                                                                                               // 24679
    ctrl: this,                                                                                                        // 24680
    $element: $element,                                                                                                // 24681
    set: function(object, property) {                                                                                  // 24682
      object[property] = true;                                                                                         // 24683
    },                                                                                                                 // 24684
    unset: function(object, property) {                                                                                // 24685
      delete object[property];                                                                                         // 24686
    },                                                                                                                 // 24687
    parentForm: parentForm,                                                                                            // 24688
    $animate: $animate                                                                                                 // 24689
  });                                                                                                                  // 24690
                                                                                                                       // 24691
  /**                                                                                                                  // 24692
   * @ngdoc method                                                                                                     // 24693
   * @name ngModel.NgModelController#$setPristine                                                                      // 24694
   *                                                                                                                   // 24695
   * @description                                                                                                      // 24696
   * Sets the control to its pristine state.                                                                           // 24697
   *                                                                                                                   // 24698
   * This method can be called to remove the `ng-dirty` class and set the control to its pristine                      // 24699
   * state (`ng-pristine` class). A model is considered to be pristine when the control                                // 24700
   * has not been changed from when first compiled.                                                                    // 24701
   */                                                                                                                  // 24702
  this.$setPristine = function() {                                                                                     // 24703
    ctrl.$dirty = false;                                                                                               // 24704
    ctrl.$pristine = true;                                                                                             // 24705
    $animate.removeClass($element, DIRTY_CLASS);                                                                       // 24706
    $animate.addClass($element, PRISTINE_CLASS);                                                                       // 24707
  };                                                                                                                   // 24708
                                                                                                                       // 24709
  /**                                                                                                                  // 24710
   * @ngdoc method                                                                                                     // 24711
   * @name ngModel.NgModelController#$setDirty                                                                         // 24712
   *                                                                                                                   // 24713
   * @description                                                                                                      // 24714
   * Sets the control to its dirty state.                                                                              // 24715
   *                                                                                                                   // 24716
   * This method can be called to remove the `ng-pristine` class and set the control to its dirty                      // 24717
   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed                     // 24718
   * from when first compiled.                                                                                         // 24719
   */                                                                                                                  // 24720
  this.$setDirty = function() {                                                                                        // 24721
    ctrl.$dirty = true;                                                                                                // 24722
    ctrl.$pristine = false;                                                                                            // 24723
    $animate.removeClass($element, PRISTINE_CLASS);                                                                    // 24724
    $animate.addClass($element, DIRTY_CLASS);                                                                          // 24725
    parentForm.$setDirty();                                                                                            // 24726
  };                                                                                                                   // 24727
                                                                                                                       // 24728
  /**                                                                                                                  // 24729
   * @ngdoc method                                                                                                     // 24730
   * @name ngModel.NgModelController#$setUntouched                                                                     // 24731
   *                                                                                                                   // 24732
   * @description                                                                                                      // 24733
   * Sets the control to its untouched state.                                                                          // 24734
   *                                                                                                                   // 24735
   * This method can be called to remove the `ng-touched` class and set the control to its                             // 24736
   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched                             // 24737
   * by default, however this function can be used to restore that state if the model has                              // 24738
   * already been touched by the user.                                                                                 // 24739
   */                                                                                                                  // 24740
  this.$setUntouched = function() {                                                                                    // 24741
    ctrl.$touched = false;                                                                                             // 24742
    ctrl.$untouched = true;                                                                                            // 24743
    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);                                                       // 24744
  };                                                                                                                   // 24745
                                                                                                                       // 24746
  /**                                                                                                                  // 24747
   * @ngdoc method                                                                                                     // 24748
   * @name ngModel.NgModelController#$setTouched                                                                       // 24749
   *                                                                                                                   // 24750
   * @description                                                                                                      // 24751
   * Sets the control to its touched state.                                                                            // 24752
   *                                                                                                                   // 24753
   * This method can be called to remove the `ng-untouched` class and set the control to its                           // 24754
   * touched state (`ng-touched` class). A model is considered to be touched when the user has                         // 24755
   * first focused the control element and then shifted focus away from the control (blur event).                      // 24756
   */                                                                                                                  // 24757
  this.$setTouched = function() {                                                                                      // 24758
    ctrl.$touched = true;                                                                                              // 24759
    ctrl.$untouched = false;                                                                                           // 24760
    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);                                                       // 24761
  };                                                                                                                   // 24762
                                                                                                                       // 24763
  /**                                                                                                                  // 24764
   * @ngdoc method                                                                                                     // 24765
   * @name ngModel.NgModelController#$rollbackViewValue                                                                // 24766
   *                                                                                                                   // 24767
   * @description                                                                                                      // 24768
   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,                   // 24769
   * which may be caused by a pending debounced event or because the input is waiting for a some                       // 24770
   * future event.                                                                                                     // 24771
   *                                                                                                                   // 24772
   * If you have an input that uses `ng-model-options` to set up debounced events or events such                       // 24773
   * as blur you can have a situation where there is a period when the `$viewValue`                                    // 24774
   * is out of synch with the ngModel's `$modelValue`.                                                                 // 24775
   *                                                                                                                   // 24776
   * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`                      // 24777
   * programmatically before these debounced/future events have resolved/occurred, because Angular's                   // 24778
   * dirty checking mechanism is not able to tell whether the model has actually changed or not.                       // 24779
   *                                                                                                                   // 24780
   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an               // 24781
   * input which may have such events pending. This is important in order to make sure that the                        // 24782
   * input field will be updated with the new model value and any pending operations are cancelled.                    // 24783
   *                                                                                                                   // 24784
   * <example name="ng-model-cancel-update" module="cancel-update-example">                                            // 24785
   *   <file name="app.js">                                                                                            // 24786
   *     angular.module('cancel-update-example', [])                                                                   // 24787
   *                                                                                                                   // 24788
   *     .controller('CancelUpdateController', ['$scope', function($scope) {                                           // 24789
   *       $scope.resetWithCancel = function(e) {                                                                      // 24790
   *         if (e.keyCode == 27) {                                                                                    // 24791
   *           $scope.myForm.myInput1.$rollbackViewValue();                                                            // 24792
   *           $scope.myValue = '';                                                                                    // 24793
   *         }                                                                                                         // 24794
   *       };                                                                                                          // 24795
   *       $scope.resetWithoutCancel = function(e) {                                                                   // 24796
   *         if (e.keyCode == 27) {                                                                                    // 24797
   *           $scope.myValue = '';                                                                                    // 24798
   *         }                                                                                                         // 24799
   *       };                                                                                                          // 24800
   *     }]);                                                                                                          // 24801
   *   </file>                                                                                                         // 24802
   *   <file name="index.html">                                                                                        // 24803
   *     <div ng-controller="CancelUpdateController">                                                                  // 24804
   *       <p>Try typing something in each input.  See that the model only updates when you                            // 24805
   *          blur off the input.                                                                                      // 24806
   *        </p>                                                                                                       // 24807
   *        <p>Now see what happens if you start typing then press the Escape key</p>                                  // 24808
   *                                                                                                                   // 24809
   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">                                                // 24810
   *         <p id="inputDescription1">With $rollbackViewValue()</p>                                                   // 24811
   *         <input name="myInput1" aria-describedby="inputDescription1" ng-model="myValue"                            // 24812
   *                ng-keydown="resetWithCancel($event)"><br/>                                                         // 24813
   *         myValue: "{{ myValue }}"                                                                                  // 24814
   *                                                                                                                   // 24815
   *         <p id="inputDescription2">Without $rollbackViewValue()</p>                                                // 24816
   *         <input name="myInput2" aria-describedby="inputDescription2" ng-model="myValue"                            // 24817
   *                ng-keydown="resetWithoutCancel($event)"><br/>                                                      // 24818
   *         myValue: "{{ myValue }}"                                                                                  // 24819
   *       </form>                                                                                                     // 24820
   *     </div>                                                                                                        // 24821
   *   </file>                                                                                                         // 24822
   * </example>                                                                                                        // 24823
   */                                                                                                                  // 24824
  this.$rollbackViewValue = function() {                                                                               // 24825
    $timeout.cancel(pendingDebounce);                                                                                  // 24826
    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;                                                                   // 24827
    ctrl.$render();                                                                                                    // 24828
  };                                                                                                                   // 24829
                                                                                                                       // 24830
  /**                                                                                                                  // 24831
   * @ngdoc method                                                                                                     // 24832
   * @name ngModel.NgModelController#$validate                                                                         // 24833
   *                                                                                                                   // 24834
   * @description                                                                                                      // 24835
   * Runs each of the registered validators (first synchronous validators and then                                     // 24836
   * asynchronous validators).                                                                                         // 24837
   * If the validity changes to invalid, the model will be set to `undefined`,                                         // 24838
   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.                                            // 24839
   * If the validity changes to valid, it will set the model to the last available valid                               // 24840
   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.                            // 24841
   */                                                                                                                  // 24842
  this.$validate = function() {                                                                                        // 24843
    // ignore $validate before model is initialized                                                                    // 24844
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {                                                       // 24845
      return;                                                                                                          // 24846
    }                                                                                                                  // 24847
                                                                                                                       // 24848
    var viewValue = ctrl.$$lastCommittedViewValue;                                                                     // 24849
    // Note: we use the $$rawModelValue as $modelValue might have been                                                 // 24850
    // set to undefined during a view -> model update that found validation                                            // 24851
    // errors. We can't parse the view here, since that could change                                                   // 24852
    // the model although neither viewValue nor the model on the scope changed                                         // 24853
    var modelValue = ctrl.$$rawModelValue;                                                                             // 24854
                                                                                                                       // 24855
    var prevValid = ctrl.$valid;                                                                                       // 24856
    var prevModelValue = ctrl.$modelValue;                                                                             // 24857
                                                                                                                       // 24858
    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;                                                    // 24859
                                                                                                                       // 24860
    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {                                                   // 24861
      // If there was no change in validity, don't update the model                                                    // 24862
      // This prevents changing an invalid modelValue to undefined                                                     // 24863
      if (!allowInvalid && prevValid !== allValid) {                                                                   // 24864
        // Note: Don't check ctrl.$valid here, as we could have                                                        // 24865
        // external validators (e.g. calculated on the server),                                                        // 24866
        // that just call $setValidity and need the model value                                                        // 24867
        // to calculate their validity.                                                                                // 24868
        ctrl.$modelValue = allValid ? modelValue : undefined;                                                          // 24869
                                                                                                                       // 24870
        if (ctrl.$modelValue !== prevModelValue) {                                                                     // 24871
          ctrl.$$writeModelToScope();                                                                                  // 24872
        }                                                                                                              // 24873
      }                                                                                                                // 24874
    });                                                                                                                // 24875
                                                                                                                       // 24876
  };                                                                                                                   // 24877
                                                                                                                       // 24878
  this.$$runValidators = function(modelValue, viewValue, doneCallback) {                                               // 24879
    currentValidationRunId++;                                                                                          // 24880
    var localValidationRunId = currentValidationRunId;                                                                 // 24881
                                                                                                                       // 24882
    // check parser error                                                                                              // 24883
    if (!processParseErrors()) {                                                                                       // 24884
      validationDone(false);                                                                                           // 24885
      return;                                                                                                          // 24886
    }                                                                                                                  // 24887
    if (!processSyncValidators()) {                                                                                    // 24888
      validationDone(false);                                                                                           // 24889
      return;                                                                                                          // 24890
    }                                                                                                                  // 24891
    processAsyncValidators();                                                                                          // 24892
                                                                                                                       // 24893
    function processParseErrors() {                                                                                    // 24894
      var errorKey = ctrl.$$parserName || 'parse';                                                                     // 24895
      if (parserValid === undefined) {                                                                                 // 24896
        setValidity(errorKey, null);                                                                                   // 24897
      } else {                                                                                                         // 24898
        if (!parserValid) {                                                                                            // 24899
          forEach(ctrl.$validators, function(v, name) {                                                                // 24900
            setValidity(name, null);                                                                                   // 24901
          });                                                                                                          // 24902
          forEach(ctrl.$asyncValidators, function(v, name) {                                                           // 24903
            setValidity(name, null);                                                                                   // 24904
          });                                                                                                          // 24905
        }                                                                                                              // 24906
        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName                   // 24907
        setValidity(errorKey, parserValid);                                                                            // 24908
        return parserValid;                                                                                            // 24909
      }                                                                                                                // 24910
      return true;                                                                                                     // 24911
    }                                                                                                                  // 24912
                                                                                                                       // 24913
    function processSyncValidators() {                                                                                 // 24914
      var syncValidatorsValid = true;                                                                                  // 24915
      forEach(ctrl.$validators, function(validator, name) {                                                            // 24916
        var result = validator(modelValue, viewValue);                                                                 // 24917
        syncValidatorsValid = syncValidatorsValid && result;                                                           // 24918
        setValidity(name, result);                                                                                     // 24919
      });                                                                                                              // 24920
      if (!syncValidatorsValid) {                                                                                      // 24921
        forEach(ctrl.$asyncValidators, function(v, name) {                                                             // 24922
          setValidity(name, null);                                                                                     // 24923
        });                                                                                                            // 24924
        return false;                                                                                                  // 24925
      }                                                                                                                // 24926
      return true;                                                                                                     // 24927
    }                                                                                                                  // 24928
                                                                                                                       // 24929
    function processAsyncValidators() {                                                                                // 24930
      var validatorPromises = [];                                                                                      // 24931
      var allValid = true;                                                                                             // 24932
      forEach(ctrl.$asyncValidators, function(validator, name) {                                                       // 24933
        var promise = validator(modelValue, viewValue);                                                                // 24934
        if (!isPromiseLike(promise)) {                                                                                 // 24935
          throw $ngModelMinErr("$asyncValidators",                                                                     // 24936
            "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);                    // 24937
        }                                                                                                              // 24938
        setValidity(name, undefined);                                                                                  // 24939
        validatorPromises.push(promise.then(function() {                                                               // 24940
          setValidity(name, true);                                                                                     // 24941
        }, function(error) {                                                                                           // 24942
          allValid = false;                                                                                            // 24943
          setValidity(name, false);                                                                                    // 24944
        }));                                                                                                           // 24945
      });                                                                                                              // 24946
      if (!validatorPromises.length) {                                                                                 // 24947
        validationDone(true);                                                                                          // 24948
      } else {                                                                                                         // 24949
        $q.all(validatorPromises).then(function() {                                                                    // 24950
          validationDone(allValid);                                                                                    // 24951
        }, noop);                                                                                                      // 24952
      }                                                                                                                // 24953
    }                                                                                                                  // 24954
                                                                                                                       // 24955
    function setValidity(name, isValid) {                                                                              // 24956
      if (localValidationRunId === currentValidationRunId) {                                                           // 24957
        ctrl.$setValidity(name, isValid);                                                                              // 24958
      }                                                                                                                // 24959
    }                                                                                                                  // 24960
                                                                                                                       // 24961
    function validationDone(allValid) {                                                                                // 24962
      if (localValidationRunId === currentValidationRunId) {                                                           // 24963
                                                                                                                       // 24964
        doneCallback(allValid);                                                                                        // 24965
      }                                                                                                                // 24966
    }                                                                                                                  // 24967
  };                                                                                                                   // 24968
                                                                                                                       // 24969
  /**                                                                                                                  // 24970
   * @ngdoc method                                                                                                     // 24971
   * @name ngModel.NgModelController#$commitViewValue                                                                  // 24972
   *                                                                                                                   // 24973
   * @description                                                                                                      // 24974
   * Commit a pending update to the `$modelValue`.                                                                     // 24975
   *                                                                                                                   // 24976
   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 24977
   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`                          // 24978
   * usually handles calling this in response to input events.                                                         // 24979
   */                                                                                                                  // 24980
  this.$commitViewValue = function() {                                                                                 // 24981
    var viewValue = ctrl.$viewValue;                                                                                   // 24982
                                                                                                                       // 24983
    $timeout.cancel(pendingDebounce);                                                                                  // 24984
                                                                                                                       // 24985
    // If the view value has not changed then we should just exit, except in the case where there is                   // 24986
    // a native validator on the element. In this case the validation state may have changed even though               // 24987
    // the viewValue has stayed empty.                                                                                 // 24988
    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {            // 24989
      return;                                                                                                          // 24990
    }                                                                                                                  // 24991
    ctrl.$$lastCommittedViewValue = viewValue;                                                                         // 24992
                                                                                                                       // 24993
    // change to dirty                                                                                                 // 24994
    if (ctrl.$pristine) {                                                                                              // 24995
      this.$setDirty();                                                                                                // 24996
    }                                                                                                                  // 24997
    this.$$parseAndValidate();                                                                                         // 24998
  };                                                                                                                   // 24999
                                                                                                                       // 25000
  this.$$parseAndValidate = function() {                                                                               // 25001
    var viewValue = ctrl.$$lastCommittedViewValue;                                                                     // 25002
    var modelValue = viewValue;                                                                                        // 25003
    parserValid = isUndefined(modelValue) ? undefined : true;                                                          // 25004
                                                                                                                       // 25005
    if (parserValid) {                                                                                                 // 25006
      for (var i = 0; i < ctrl.$parsers.length; i++) {                                                                 // 25007
        modelValue = ctrl.$parsers[i](modelValue);                                                                     // 25008
        if (isUndefined(modelValue)) {                                                                                 // 25009
          parserValid = false;                                                                                         // 25010
          break;                                                                                                       // 25011
        }                                                                                                              // 25012
      }                                                                                                                // 25013
    }                                                                                                                  // 25014
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {                                                       // 25015
      // ctrl.$modelValue has not been touched yet...                                                                  // 25016
      ctrl.$modelValue = ngModelGet($scope);                                                                           // 25017
    }                                                                                                                  // 25018
    var prevModelValue = ctrl.$modelValue;                                                                             // 25019
    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;                                                    // 25020
    ctrl.$$rawModelValue = modelValue;                                                                                 // 25021
                                                                                                                       // 25022
    if (allowInvalid) {                                                                                                // 25023
      ctrl.$modelValue = modelValue;                                                                                   // 25024
      writeToModelIfNeeded();                                                                                          // 25025
    }                                                                                                                  // 25026
                                                                                                                       // 25027
    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.                      // 25028
    // This can happen if e.g. $setViewValue is called from inside a parser                                            // 25029
    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {                               // 25030
      if (!allowInvalid) {                                                                                             // 25031
        // Note: Don't check ctrl.$valid here, as we could have                                                        // 25032
        // external validators (e.g. calculated on the server),                                                        // 25033
        // that just call $setValidity and need the model value                                                        // 25034
        // to calculate their validity.                                                                                // 25035
        ctrl.$modelValue = allValid ? modelValue : undefined;                                                          // 25036
        writeToModelIfNeeded();                                                                                        // 25037
      }                                                                                                                // 25038
    });                                                                                                                // 25039
                                                                                                                       // 25040
    function writeToModelIfNeeded() {                                                                                  // 25041
      if (ctrl.$modelValue !== prevModelValue) {                                                                       // 25042
        ctrl.$$writeModelToScope();                                                                                    // 25043
      }                                                                                                                // 25044
    }                                                                                                                  // 25045
  };                                                                                                                   // 25046
                                                                                                                       // 25047
  this.$$writeModelToScope = function() {                                                                              // 25048
    ngModelSet($scope, ctrl.$modelValue);                                                                              // 25049
    forEach(ctrl.$viewChangeListeners, function(listener) {                                                            // 25050
      try {                                                                                                            // 25051
        listener();                                                                                                    // 25052
      } catch (e) {                                                                                                    // 25053
        $exceptionHandler(e);                                                                                          // 25054
      }                                                                                                                // 25055
    });                                                                                                                // 25056
  };                                                                                                                   // 25057
                                                                                                                       // 25058
  /**                                                                                                                  // 25059
   * @ngdoc method                                                                                                     // 25060
   * @name ngModel.NgModelController#$setViewValue                                                                     // 25061
   *                                                                                                                   // 25062
   * @description                                                                                                      // 25063
   * Update the view value.                                                                                            // 25064
   *                                                                                                                   // 25065
   * This method should be called when an input directive want to change the view value; typically,                    // 25066
   * this is done from within a DOM event handler.                                                                     // 25067
   *                                                                                                                   // 25068
   * For example {@link ng.directive:input input} calls it when the value of the input changes and                     // 25069
   * {@link ng.directive:select select} calls it when an option is selected.                                           // 25070
   *                                                                                                                   // 25071
   * If the new `value` is an object (rather than a string or a number), we should make a copy of the                  // 25072
   * object before passing it to `$setViewValue`.  This is because `ngModel` does not perform a deep                   // 25073
   * watch of objects, it only looks for a change of identity. If you only change the property of                      // 25074
   * the object then ngModel will not realise that the object has changed and will not invoke the                      // 25075
   * `$parsers` and `$validators` pipelines.                                                                           // 25076
   *                                                                                                                   // 25077
   * For this reason, you should not change properties of the copy once it has been passed to                          // 25078
   * `$setViewValue`. Otherwise you may cause the model value on the scope to change incorrectly.                      // 25079
   *                                                                                                                   // 25080
   * When this method is called, the new `value` will be staged for committing through the `$parsers`                  // 25081
   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged             // 25082
   * value sent directly for processing, finally to be applied to `$modelValue` and then the                           // 25083
   * **expression** specified in the `ng-model` attribute.                                                             // 25084
   *                                                                                                                   // 25085
   * Lastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.                      // 25086
   *                                                                                                                   // 25087
   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`                  // 25088
   * and the `default` trigger is not listed, all those actions will remain pending until one of the                   // 25089
   * `updateOn` events is triggered on the DOM element.                                                                // 25090
   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}                     // 25091
   * directive is used with a custom debounce for this particular event.                                               // 25092
   *                                                                                                                   // 25093
   * Note that calling this function does not trigger a `$digest`.                                                     // 25094
   *                                                                                                                   // 25095
   * @param {string} value Value from the view.                                                                        // 25096
   * @param {string} trigger Event that triggered the update.                                                          // 25097
   */                                                                                                                  // 25098
  this.$setViewValue = function(value, trigger) {                                                                      // 25099
    ctrl.$viewValue = value;                                                                                           // 25100
    if (!ctrl.$options || ctrl.$options.updateOnDefault) {                                                             // 25101
      ctrl.$$debounceViewValueCommit(trigger);                                                                         // 25102
    }                                                                                                                  // 25103
  };                                                                                                                   // 25104
                                                                                                                       // 25105
  this.$$debounceViewValueCommit = function(trigger) {                                                                 // 25106
    var debounceDelay = 0,                                                                                             // 25107
        options = ctrl.$options,                                                                                       // 25108
        debounce;                                                                                                      // 25109
                                                                                                                       // 25110
    if (options && isDefined(options.debounce)) {                                                                      // 25111
      debounce = options.debounce;                                                                                     // 25112
      if (isNumber(debounce)) {                                                                                        // 25113
        debounceDelay = debounce;                                                                                      // 25114
      } else if (isNumber(debounce[trigger])) {                                                                        // 25115
        debounceDelay = debounce[trigger];                                                                             // 25116
      } else if (isNumber(debounce['default'])) {                                                                      // 25117
        debounceDelay = debounce['default'];                                                                           // 25118
      }                                                                                                                // 25119
    }                                                                                                                  // 25120
                                                                                                                       // 25121
    $timeout.cancel(pendingDebounce);                                                                                  // 25122
    if (debounceDelay) {                                                                                               // 25123
      pendingDebounce = $timeout(function() {                                                                          // 25124
        ctrl.$commitViewValue();                                                                                       // 25125
      }, debounceDelay);                                                                                               // 25126
    } else if ($rootScope.$$phase) {                                                                                   // 25127
      ctrl.$commitViewValue();                                                                                         // 25128
    } else {                                                                                                           // 25129
      $scope.$apply(function() {                                                                                       // 25130
        ctrl.$commitViewValue();                                                                                       // 25131
      });                                                                                                              // 25132
    }                                                                                                                  // 25133
  };                                                                                                                   // 25134
                                                                                                                       // 25135
  // model -> value                                                                                                    // 25136
  // Note: we cannot use a normal scope.$watch as we want to detect the following:                                     // 25137
  // 1. scope value is 'a'                                                                                             // 25138
  // 2. user enters 'b'                                                                                                // 25139
  // 3. ng-change kicks in and reverts scope value to 'a'                                                              // 25140
  //    -> scope value did not change since the last digest as                                                         // 25141
  //       ng-change executes in apply phase                                                                           // 25142
  // 4. view should be changed back to 'a'                                                                             // 25143
  $scope.$watch(function ngModelWatch() {                                                                              // 25144
    var modelValue = ngModelGet($scope);                                                                               // 25145
                                                                                                                       // 25146
    // if scope model value and ngModel value are out of sync                                                          // 25147
    // TODO(perf): why not move this to the action fn?                                                                 // 25148
    if (modelValue !== ctrl.$modelValue &&                                                                             // 25149
       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator                    // 25150
       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)                                            // 25151
    ) {                                                                                                                // 25152
      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;                                                            // 25153
      parserValid = undefined;                                                                                         // 25154
                                                                                                                       // 25155
      var formatters = ctrl.$formatters,                                                                               // 25156
          idx = formatters.length;                                                                                     // 25157
                                                                                                                       // 25158
      var viewValue = modelValue;                                                                                      // 25159
      while (idx--) {                                                                                                  // 25160
        viewValue = formatters[idx](viewValue);                                                                        // 25161
      }                                                                                                                // 25162
      if (ctrl.$viewValue !== viewValue) {                                                                             // 25163
        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;                                                   // 25164
        ctrl.$render();                                                                                                // 25165
                                                                                                                       // 25166
        ctrl.$$runValidators(modelValue, viewValue, noop);                                                             // 25167
      }                                                                                                                // 25168
    }                                                                                                                  // 25169
                                                                                                                       // 25170
    return modelValue;                                                                                                 // 25171
  });                                                                                                                  // 25172
}];                                                                                                                    // 25173
                                                                                                                       // 25174
                                                                                                                       // 25175
/**                                                                                                                    // 25176
 * @ngdoc directive                                                                                                    // 25177
 * @name ngModel                                                                                                       // 25178
 *                                                                                                                     // 25179
 * @element input                                                                                                      // 25180
 * @priority 1                                                                                                         // 25181
 *                                                                                                                     // 25182
 * @description                                                                                                        // 25183
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a                         // 25184
 * property on the scope using {@link ngModel.NgModelController NgModelController},                                    // 25185
 * which is created and exposed by this directive.                                                                     // 25186
 *                                                                                                                     // 25187
 * `ngModel` is responsible for:                                                                                       // 25188
 *                                                                                                                     // 25189
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`                   // 25190
 *   require.                                                                                                          // 25191
 * - Providing validation behavior (i.e. required, number, email, url).                                                // 25192
 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).           // 25193
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.
 * - Registering the control with its parent {@link ng.directive:form form}.                                           // 25195
 *                                                                                                                     // 25196
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the                          // 25197
 * current scope. If the property doesn't already exist on this scope, it will be created                              // 25198
 * implicitly and added to the scope.                                                                                  // 25199
 *                                                                                                                     // 25200
 * For best practices on using `ngModel`, see:                                                                         // 25201
 *                                                                                                                     // 25202
 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)                          // 25203
 *                                                                                                                     // 25204
 * For basic examples, how to use `ngModel`, see:                                                                      // 25205
 *                                                                                                                     // 25206
 *  - {@link ng.directive:input input}                                                                                 // 25207
 *    - {@link input[text] text}                                                                                       // 25208
 *    - {@link input[checkbox] checkbox}                                                                               // 25209
 *    - {@link input[radio] radio}                                                                                     // 25210
 *    - {@link input[number] number}                                                                                   // 25211
 *    - {@link input[email] email}                                                                                     // 25212
 *    - {@link input[url] url}                                                                                         // 25213
 *    - {@link input[date] date}                                                                                       // 25214
 *    - {@link input[datetime-local] datetime-local}                                                                   // 25215
 *    - {@link input[time] time}                                                                                       // 25216
 *    - {@link input[month] month}                                                                                     // 25217
 *    - {@link input[week] week}                                                                                       // 25218
 *  - {@link ng.directive:select select}                                                                               // 25219
 *  - {@link ng.directive:textarea textarea}                                                                           // 25220
 *                                                                                                                     // 25221
 * # CSS classes                                                                                                       // 25222
 * The following CSS classes are added and removed on the associated input/select/textarea element                     // 25223
 * depending on the validity of the model.                                                                             // 25224
 *                                                                                                                     // 25225
 *  - `ng-valid`: the model is valid                                                                                   // 25226
 *  - `ng-invalid`: the model is invalid                                                                               // 25227
 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`                                                     // 25228
 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`                                                 // 25229
 *  - `ng-pristine`: the control hasn't been interacted with yet                                                       // 25230
 *  - `ng-dirty`: the control has been interacted with                                                                 // 25231
 *  - `ng-touched`: the control has been blurred                                                                       // 25232
 *  - `ng-untouched`: the control hasn't been blurred                                                                  // 25233
 *  - `ng-pending`: any `$asyncValidators` are unfulfilled                                                             // 25234
 *                                                                                                                     // 25235
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.                                // 25236
 *                                                                                                                     // 25237
 * ## Animation Hooks                                                                                                  // 25238
 *                                                                                                                     // 25239
 * Animations within models are triggered when any of the associated CSS classes are added and removed                 // 25240
 * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,                // 25241
 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.              // 25242
 * The animations that are triggered within ngModel are similar to how they work in ngClass and                        // 25243
 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.                            // 25244
 *                                                                                                                     // 25245
 * The following example shows a simple way to utilize CSS transitions to style an input element                       // 25246
 * that has been rendered as invalid after it has been validated:                                                      // 25247
 *                                                                                                                     // 25248
 * <pre>                                                                                                               // 25249
 * //be sure to include ngAnimate as a module to hook into more                                                        // 25250
 * //advanced animations                                                                                               // 25251
 * .my-input {                                                                                                         // 25252
 *   transition:0.5s linear all;                                                                                       // 25253
 *   background: white;                                                                                                // 25254
 * }                                                                                                                   // 25255
 * .my-input.ng-invalid {                                                                                              // 25256
 *   background: red;                                                                                                  // 25257
 *   color:white;                                                                                                      // 25258
 * }                                                                                                                   // 25259
 * </pre>                                                                                                              // 25260
 *                                                                                                                     // 25261
 * @example                                                                                                            // 25262
 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">                          // 25263
     <file name="index.html">                                                                                          // 25264
       <script>                                                                                                        // 25265
        angular.module('inputExample', [])                                                                             // 25266
          .controller('ExampleController', ['$scope', function($scope) {                                               // 25267
            $scope.val = '1';                                                                                          // 25268
          }]);                                                                                                         // 25269
       </script>                                                                                                       // 25270
       <style>                                                                                                         // 25271
         .my-input {                                                                                                   // 25272
           -webkit-transition:all linear 0.5s;                                                                         // 25273
           transition:all linear 0.5s;                                                                                 // 25274
           background: transparent;                                                                                    // 25275
         }                                                                                                             // 25276
         .my-input.ng-invalid {                                                                                        // 25277
           color:white;                                                                                                // 25278
           background: red;                                                                                            // 25279
         }                                                                                                             // 25280
       </style>                                                                                                        // 25281
       <p id="inputDescription">                                                                                       // 25282
        Update input to see transitions when valid/invalid.                                                            // 25283
        Integer is a valid value.                                                                                      // 25284
       </p>                                                                                                            // 25285
       <form name="testForm" ng-controller="ExampleController">                                                        // 25286
         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"                                       // 25287
                aria-describedby="inputDescription" />                                                                 // 25288
       </form>                                                                                                         // 25289
     </file>                                                                                                           // 25290
 * </example>                                                                                                          // 25291
 *                                                                                                                     // 25292
 * ## Binding to a getter/setter                                                                                       // 25293
 *                                                                                                                     // 25294
 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a                         // 25295
 * function that returns a representation of the model when called with zero arguments, and sets                       // 25296
 * the internal state of a model when called with an argument. It's sometimes useful to use this                       // 25297
 * for models that have an internal representation that's different from what the model exposes                        // 25298
 * to the view.                                                                                                        // 25299
 *                                                                                                                     // 25300
 * <div class="alert alert-success">                                                                                   // 25301
 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more                       // 25302
 * frequently than other parts of your code.                                                                           // 25303
 * </div>                                                                                                              // 25304
 *                                                                                                                     // 25305
 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that                      // 25306
 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to                      // 25307
 * a `<form>`, which will enable this behavior for all `<input>`s within it. See                                       // 25308
 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.                                                      // 25309
 *                                                                                                                     // 25310
 * The following example shows how to use `ngModel` with a getter/setter:                                              // 25311
 *                                                                                                                     // 25312
 * @example                                                                                                            // 25313
 * <example name="ngModel-getter-setter" module="getterSetterExample">                                                 // 25314
     <file name="index.html">                                                                                          // 25315
       <div ng-controller="ExampleController">                                                                         // 25316
         <form name="userForm">                                                                                        // 25317
           <label>Name:                                                                                                // 25318
             <input type="text" name="userName"                                                                        // 25319
                    ng-model="user.name"                                                                               // 25320
                    ng-model-options="{ getterSetter: true }" />                                                       // 25321
           </label>                                                                                                    // 25322
         </form>                                                                                                       // 25323
         <pre>user.name = <span ng-bind="user.name()"></span></pre>                                                    // 25324
       </div>                                                                                                          // 25325
     </file>                                                                                                           // 25326
     <file name="app.js">                                                                                              // 25327
       angular.module('getterSetterExample', [])                                                                       // 25328
         .controller('ExampleController', ['$scope', function($scope) {                                                // 25329
           var _name = 'Brian';                                                                                        // 25330
           $scope.user = {                                                                                             // 25331
             name: function(newName) {                                                                                 // 25332
              // Note that newName can be undefined for two reasons:                                                   // 25333
              // 1. Because it is called as a getter and thus called with no arguments                                 // 25334
              // 2. Because the property should actually be set to undefined. This happens e.g. if the                 // 25335
              //    input is invalid                                                                                   // 25336
              return arguments.length ? (_name = newName) : _name;                                                     // 25337
             }                                                                                                         // 25338
           };                                                                                                          // 25339
         }]);                                                                                                          // 25340
     </file>                                                                                                           // 25341
 * </example>                                                                                                          // 25342
 */                                                                                                                    // 25343
var ngModelDirective = ['$rootScope', function($rootScope) {                                                           // 25344
  return {                                                                                                             // 25345
    restrict: 'A',                                                                                                     // 25346
    require: ['ngModel', '^?form', '^?ngModelOptions'],                                                                // 25347
    controller: NgModelController,                                                                                     // 25348
    // Prelink needs to run before any input directive                                                                 // 25349
    // so that we can set the NgModelOptions in NgModelController                                                      // 25350
    // before anyone else uses it.                                                                                     // 25351
    priority: 1,                                                                                                       // 25352
    compile: function ngModelCompile(element) {                                                                        // 25353
      // Setup initial state of the control                                                                            // 25354
      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);                                // 25355
                                                                                                                       // 25356
      return {                                                                                                         // 25357
        pre: function ngModelPreLink(scope, element, attr, ctrls) {                                                    // 25358
          var modelCtrl = ctrls[0],                                                                                    // 25359
              formCtrl = ctrls[1] || nullFormCtrl;                                                                     // 25360
                                                                                                                       // 25361
          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);                                                       // 25362
                                                                                                                       // 25363
          // notify others, especially parent forms                                                                    // 25364
          formCtrl.$addControl(modelCtrl);                                                                             // 25365
                                                                                                                       // 25366
          attr.$observe('name', function(newValue) {                                                                   // 25367
            if (modelCtrl.$name !== newValue) {                                                                        // 25368
              formCtrl.$$renameControl(modelCtrl, newValue);                                                           // 25369
            }                                                                                                          // 25370
          });                                                                                                          // 25371
                                                                                                                       // 25372
          scope.$on('$destroy', function() {                                                                           // 25373
            formCtrl.$removeControl(modelCtrl);                                                                        // 25374
          });                                                                                                          // 25375
        },                                                                                                             // 25376
        post: function ngModelPostLink(scope, element, attr, ctrls) {                                                  // 25377
          var modelCtrl = ctrls[0];                                                                                    // 25378
          if (modelCtrl.$options && modelCtrl.$options.updateOn) {                                                     // 25379
            element.on(modelCtrl.$options.updateOn, function(ev) {                                                     // 25380
              modelCtrl.$$debounceViewValueCommit(ev && ev.type);                                                      // 25381
            });                                                                                                        // 25382
          }                                                                                                            // 25383
                                                                                                                       // 25384
          element.on('blur', function(ev) {                                                                            // 25385
            if (modelCtrl.$touched) return;                                                                            // 25386
                                                                                                                       // 25387
            if ($rootScope.$$phase) {                                                                                  // 25388
              scope.$evalAsync(modelCtrl.$setTouched);                                                                 // 25389
            } else {                                                                                                   // 25390
              scope.$apply(modelCtrl.$setTouched);                                                                     // 25391
            }                                                                                                          // 25392
          });                                                                                                          // 25393
        }                                                                                                              // 25394
      };                                                                                                               // 25395
    }                                                                                                                  // 25396
  };                                                                                                                   // 25397
}];                                                                                                                    // 25398
                                                                                                                       // 25399
var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;                                                                          // 25400
                                                                                                                       // 25401
/**                                                                                                                    // 25402
 * @ngdoc directive                                                                                                    // 25403
 * @name ngModelOptions                                                                                                // 25404
 *                                                                                                                     // 25405
 * @description                                                                                                        // 25406
 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of                   // 25407
 * events that will trigger a model update and/or a debouncing delay so that the actual update only                    // 25408
 * takes place when a timer expires; this timer will be reset after another change takes place.                        // 25409
 *                                                                                                                     // 25410
 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might                     // 25411
 * be different from the value in the actual model. This means that if you update the model you                        // 25412
 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in            // 25413
 * order to make sure it is synchronized with the model and that any debounced action is canceled.                     // 25414
 *                                                                                                                     // 25415
 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}                   // 25416
 * method is by making sure the input is placed inside a form that has a `name` attribute. This is                     // 25417
 * important because `form` controllers are published to the related scope under the name in their                     // 25418
 * `name` attribute.                                                                                                   // 25419
 *                                                                                                                     // 25420
 * Any pending changes will take place immediately when an enclosing form is submitted via the                         // 25421
 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`                   // 25422
 * to have access to the updated model.                                                                                // 25423
 *                                                                                                                     // 25424
 * `ngModelOptions` has an effect on the element it's declared on and its descendants.                                 // 25425
 *                                                                                                                     // 25426
 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:                               // 25427
 *   - `updateOn`: string specifying which event should the input be bound to. You can set several                     // 25428
 *     events using an space delimited list. There is a special event called `default` that                            // 25429
 *     matches the default events belonging of the control.                                                            // 25430
 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A                     // 25431
 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a                    // 25432
 *     custom value for each event. For example:                                                                       // 25433
 *     `ng-model-options="{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }"`                      // 25434
 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did                    // 25435
 *     not validate correctly instead of the default behavior of setting the model to undefined.                       // 25436
 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to                       // 25437
       `ngModel` as getters/setters.                                                                                   // 25438
 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for                  // 25439
 *     `<input type="date">`, `<input type="time">`, ... . It understands UTC/GMT and the                              // 25440
 *     continental US time zone abbreviations, but for general use, use a time zone offset, for                        // 25441
 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)                                         // 25442
 *     If not specified, the timezone of the browser will be used.                                                     // 25443
 *                                                                                                                     // 25444
 * @example                                                                                                            // 25445
                                                                                                                       // 25446
  The following example shows how to override immediate updates. Changes on the inputs within the                      // 25447
  form will update the model only when the control loses focus (blur event). If `escape` key is                        // 25448
  pressed while the input field is focused, the value is reset to the value in the current model.                      // 25449
                                                                                                                       // 25450
  <example name="ngModelOptions-directive-blur" module="optionsExample">                                               // 25451
    <file name="index.html">                                                                                           // 25452
      <div ng-controller="ExampleController">                                                                          // 25453
        <form name="userForm">                                                                                         // 25454
          <label>Name:                                                                                                 // 25455
            <input type="text" name="userName"                                                                         // 25456
                   ng-model="user.name"                                                                                // 25457
                   ng-model-options="{ updateOn: 'blur' }"                                                             // 25458
                   ng-keyup="cancel($event)" />                                                                        // 25459
          </label><br />                                                                                               // 25460
          <label>Other data:                                                                                           // 25461
            <input type="text" ng-model="user.data" />                                                                 // 25462
          </label><br />                                                                                               // 25463
        </form>                                                                                                        // 25464
        <pre>user.name = <span ng-bind="user.name"></span></pre>                                                       // 25465
      </div>                                                                                                           // 25466
    </file>                                                                                                            // 25467
    <file name="app.js">                                                                                               // 25468
      angular.module('optionsExample', [])                                                                             // 25469
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25470
          $scope.user = { name: 'say', data: '' };                                                                     // 25471
                                                                                                                       // 25472
          $scope.cancel = function(e) {                                                                                // 25473
            if (e.keyCode == 27) {                                                                                     // 25474
              $scope.userForm.userName.$rollbackViewValue();                                                           // 25475
            }                                                                                                          // 25476
          };                                                                                                           // 25477
        }]);                                                                                                           // 25478
    </file>                                                                                                            // 25479
    <file name="protractor.js" type="protractor">                                                                      // 25480
      var model = element(by.binding('user.name'));                                                                    // 25481
      var input = element(by.model('user.name'));                                                                      // 25482
      var other = element(by.model('user.data'));                                                                      // 25483
                                                                                                                       // 25484
      it('should allow custom events', function() {                                                                    // 25485
        input.sendKeys(' hello');                                                                                      // 25486
        input.click();                                                                                                 // 25487
        expect(model.getText()).toEqual('say');                                                                        // 25488
        other.click();                                                                                                 // 25489
        expect(model.getText()).toEqual('say hello');                                                                  // 25490
      });                                                                                                              // 25491
                                                                                                                       // 25492
      it('should $rollbackViewValue when model changes', function() {                                                  // 25493
        input.sendKeys(' hello');                                                                                      // 25494
        expect(input.getAttribute('value')).toEqual('say hello');                                                      // 25495
        input.sendKeys(protractor.Key.ESCAPE);                                                                         // 25496
        expect(input.getAttribute('value')).toEqual('say');                                                            // 25497
        other.click();                                                                                                 // 25498
        expect(model.getText()).toEqual('say');                                                                        // 25499
      });                                                                                                              // 25500
    </file>                                                                                                            // 25501
  </example>                                                                                                           // 25502
                                                                                                                       // 25503
  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.                    // 25504
  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.                      // 25505
                                                                                                                       // 25506
  <example name="ngModelOptions-directive-debounce" module="optionsExample">                                           // 25507
    <file name="index.html">                                                                                           // 25508
      <div ng-controller="ExampleController">                                                                          // 25509
        <form name="userForm">                                                                                         // 25510
          <label>Name:                                                                                                 // 25511
            <input type="text" name="userName"                                                                         // 25512
                   ng-model="user.name"                                                                                // 25513
                   ng-model-options="{ debounce: 1000 }" />                                                            // 25514
          </label>                                                                                                     // 25515
          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button>                       // 25516
          <br />                                                                                                       // 25517
        </form>                                                                                                        // 25518
        <pre>user.name = <span ng-bind="user.name"></span></pre>                                                       // 25519
      </div>                                                                                                           // 25520
    </file>                                                                                                            // 25521
    <file name="app.js">                                                                                               // 25522
      angular.module('optionsExample', [])                                                                             // 25523
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25524
          $scope.user = { name: 'say' };                                                                               // 25525
        }]);                                                                                                           // 25526
    </file>                                                                                                            // 25527
  </example>                                                                                                           // 25528
                                                                                                                       // 25529
  This one shows how to bind to getter/setters:                                                                        // 25530
                                                                                                                       // 25531
  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">                                 // 25532
    <file name="index.html">                                                                                           // 25533
      <div ng-controller="ExampleController">                                                                          // 25534
        <form name="userForm">                                                                                         // 25535
          <label>Name:                                                                                                 // 25536
            <input type="text" name="userName"                                                                         // 25537
                   ng-model="user.name"                                                                                // 25538
                   ng-model-options="{ getterSetter: true }" />                                                        // 25539
          </label>                                                                                                     // 25540
        </form>                                                                                                        // 25541
        <pre>user.name = <span ng-bind="user.name()"></span></pre>                                                     // 25542
      </div>                                                                                                           // 25543
    </file>                                                                                                            // 25544
    <file name="app.js">                                                                                               // 25545
      angular.module('getterSetterExample', [])                                                                        // 25546
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25547
          var _name = 'Brian';                                                                                         // 25548
          $scope.user = {                                                                                              // 25549
            name: function(newName) {                                                                                  // 25550
              // Note that newName can be undefined for two reasons:                                                   // 25551
              // 1. Because it is called as a getter and thus called with no arguments                                 // 25552
              // 2. Because the property should actually be set to undefined. This happens e.g. if the                 // 25553
              //    input is invalid                                                                                   // 25554
              return arguments.length ? (_name = newName) : _name;                                                     // 25555
            }                                                                                                          // 25556
          };                                                                                                           // 25557
        }]);                                                                                                           // 25558
    </file>                                                                                                            // 25559
  </example>                                                                                                           // 25560
 */                                                                                                                    // 25561
var ngModelOptionsDirective = function() {                                                                             // 25562
  return {                                                                                                             // 25563
    restrict: 'A',                                                                                                     // 25564
    controller: ['$scope', '$attrs', function($scope, $attrs) {                                                        // 25565
      var that = this;                                                                                                 // 25566
      this.$options = copy($scope.$eval($attrs.ngModelOptions));                                                       // 25567
      // Allow adding/overriding bound events                                                                          // 25568
      if (this.$options.updateOn !== undefined) {                                                                      // 25569
        this.$options.updateOnDefault = false;                                                                         // 25570
        // extract "default" pseudo-event from list of events that can trigger a model update                          // 25571
        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {                      // 25572
          that.$options.updateOnDefault = true;                                                                        // 25573
          return ' ';                                                                                                  // 25574
        }));                                                                                                           // 25575
      } else {                                                                                                         // 25576
        this.$options.updateOnDefault = true;                                                                          // 25577
      }                                                                                                                // 25578
    }]                                                                                                                 // 25579
  };                                                                                                                   // 25580
};                                                                                                                     // 25581
                                                                                                                       // 25582
                                                                                                                       // 25583
                                                                                                                       // 25584
// helper methods                                                                                                      // 25585
function addSetValidityMethod(context) {                                                                               // 25586
  var ctrl = context.ctrl,                                                                                             // 25587
      $element = context.$element,                                                                                     // 25588
      classCache = {},                                                                                                 // 25589
      set = context.set,                                                                                               // 25590
      unset = context.unset,                                                                                           // 25591
      parentForm = context.parentForm,                                                                                 // 25592
      $animate = context.$animate;                                                                                     // 25593
                                                                                                                       // 25594
  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));                             // 25595
                                                                                                                       // 25596
  ctrl.$setValidity = setValidity;                                                                                     // 25597
                                                                                                                       // 25598
  function setValidity(validationErrorKey, state, controller) {                                                        // 25599
    if (state === undefined) {                                                                                         // 25600
      createAndSet('$pending', validationErrorKey, controller);                                                        // 25601
    } else {                                                                                                           // 25602
      unsetAndCleanup('$pending', validationErrorKey, controller);                                                     // 25603
    }                                                                                                                  // 25604
    if (!isBoolean(state)) {                                                                                           // 25605
      unset(ctrl.$error, validationErrorKey, controller);                                                              // 25606
      unset(ctrl.$$success, validationErrorKey, controller);                                                           // 25607
    } else {                                                                                                           // 25608
      if (state) {                                                                                                     // 25609
        unset(ctrl.$error, validationErrorKey, controller);                                                            // 25610
        set(ctrl.$$success, validationErrorKey, controller);                                                           // 25611
      } else {                                                                                                         // 25612
        set(ctrl.$error, validationErrorKey, controller);                                                              // 25613
        unset(ctrl.$$success, validationErrorKey, controller);                                                         // 25614
      }                                                                                                                // 25615
    }                                                                                                                  // 25616
    if (ctrl.$pending) {                                                                                               // 25617
      cachedToggleClass(PENDING_CLASS, true);                                                                          // 25618
      ctrl.$valid = ctrl.$invalid = undefined;                                                                         // 25619
      toggleValidationCss('', null);                                                                                   // 25620
    } else {                                                                                                           // 25621
      cachedToggleClass(PENDING_CLASS, false);                                                                         // 25622
      ctrl.$valid = isObjectEmpty(ctrl.$error);                                                                        // 25623
      ctrl.$invalid = !ctrl.$valid;                                                                                    // 25624
      toggleValidationCss('', ctrl.$valid);                                                                            // 25625
    }                                                                                                                  // 25626
                                                                                                                       // 25627
    // re-read the state as the set/unset methods could have                                                           // 25628
    // combined state in ctrl.$error[validationError] (used for forms),                                                // 25629
    // where setting/unsetting only increments/decrements the value,                                                   // 25630
    // and does not replace it.                                                                                        // 25631
    var combinedState;                                                                                                 // 25632
    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {                                                          // 25633
      combinedState = undefined;                                                                                       // 25634
    } else if (ctrl.$error[validationErrorKey]) {                                                                      // 25635
      combinedState = false;                                                                                           // 25636
    } else if (ctrl.$$success[validationErrorKey]) {                                                                   // 25637
      combinedState = true;                                                                                            // 25638
    } else {                                                                                                           // 25639
      combinedState = null;                                                                                            // 25640
    }                                                                                                                  // 25641
                                                                                                                       // 25642
    toggleValidationCss(validationErrorKey, combinedState);                                                            // 25643
    parentForm.$setValidity(validationErrorKey, combinedState, ctrl);                                                  // 25644
  }                                                                                                                    // 25645
                                                                                                                       // 25646
  function createAndSet(name, value, controller) {                                                                     // 25647
    if (!ctrl[name]) {                                                                                                 // 25648
      ctrl[name] = {};                                                                                                 // 25649
    }                                                                                                                  // 25650
    set(ctrl[name], value, controller);                                                                                // 25651
  }                                                                                                                    // 25652
                                                                                                                       // 25653
  function unsetAndCleanup(name, value, controller) {                                                                  // 25654
    if (ctrl[name]) {                                                                                                  // 25655
      unset(ctrl[name], value, controller);                                                                            // 25656
    }                                                                                                                  // 25657
    if (isObjectEmpty(ctrl[name])) {                                                                                   // 25658
      ctrl[name] = undefined;                                                                                          // 25659
    }                                                                                                                  // 25660
  }                                                                                                                    // 25661
                                                                                                                       // 25662
  function cachedToggleClass(className, switchValue) {                                                                 // 25663
    if (switchValue && !classCache[className]) {                                                                       // 25664
      $animate.addClass($element, className);                                                                          // 25665
      classCache[className] = true;                                                                                    // 25666
    } else if (!switchValue && classCache[className]) {                                                                // 25667
      $animate.removeClass($element, className);                                                                       // 25668
      classCache[className] = false;                                                                                   // 25669
    }                                                                                                                  // 25670
  }                                                                                                                    // 25671
                                                                                                                       // 25672
  function toggleValidationCss(validationErrorKey, isValid) {                                                          // 25673
    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';                          // 25674
                                                                                                                       // 25675
    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);                                             // 25676
    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);                                          // 25677
  }                                                                                                                    // 25678
}                                                                                                                      // 25679
                                                                                                                       // 25680
function isObjectEmpty(obj) {                                                                                          // 25681
  if (obj) {                                                                                                           // 25682
    for (var prop in obj) {                                                                                            // 25683
      if (obj.hasOwnProperty(prop)) {                                                                                  // 25684
        return false;                                                                                                  // 25685
      }                                                                                                                // 25686
    }                                                                                                                  // 25687
  }                                                                                                                    // 25688
  return true;                                                                                                         // 25689
}                                                                                                                      // 25690
                                                                                                                       // 25691
/**                                                                                                                    // 25692
 * @ngdoc directive                                                                                                    // 25693
 * @name ngNonBindable                                                                                                 // 25694
 * @restrict AC                                                                                                        // 25695
 * @priority 1000                                                                                                      // 25696
 *                                                                                                                     // 25697
 * @description                                                                                                        // 25698
 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current                      // 25699
 * DOM element. This is useful if the element contains what appears to be Angular directives and                       // 25700
 * bindings but which should be ignored by Angular. This could be the case if you have a site that                     // 25701
 * displays snippets of code, for instance.                                                                            // 25702
 *                                                                                                                     // 25703
 * @element ANY                                                                                                        // 25704
 *                                                                                                                     // 25705
 * @example                                                                                                            // 25706
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,                   // 25707
 * but the one wrapped in `ngNonBindable` is left alone.                                                               // 25708
 *                                                                                                                     // 25709
 * @example                                                                                                            // 25710
    <example>                                                                                                          // 25711
      <file name="index.html">                                                                                         // 25712
        <div>Normal: {{1 + 2}}</div>                                                                                   // 25713
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>                                                                  // 25714
      </file>                                                                                                          // 25715
      <file name="protractor.js" type="protractor">                                                                    // 25716
       it('should check ng-non-bindable', function() {                                                                 // 25717
         expect(element(by.binding('1 + 2')).getText()).toContain('3');                                                // 25718
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);                                        // 25719
       });                                                                                                             // 25720
      </file>                                                                                                          // 25721
    </example>                                                                                                         // 25722
 */                                                                                                                    // 25723
var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });                                          // 25724
                                                                                                                       // 25725
/* global jqLiteRemove */                                                                                              // 25726
                                                                                                                       // 25727
var ngOptionsMinErr = minErr('ngOptions');                                                                             // 25728
                                                                                                                       // 25729
/**                                                                                                                    // 25730
 * @ngdoc directive                                                                                                    // 25731
 * @name ngOptions                                                                                                     // 25732
 * @restrict A                                                                                                         // 25733
 *                                                                                                                     // 25734
 * @description                                                                                                        // 25735
 *                                                                                                                     // 25736
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`                                  // 25737
 * elements for the `<select>` element using the array or object obtained by evaluating the                            // 25738
 * `ngOptions` comprehension expression.                                                                               // 25739
 *                                                                                                                     // 25740
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a                    // 25741
 * similar result. However, `ngOptions` provides some benefits such as reducing memory and                             // 25742
 * increasing speed by not creating a new scope for each repeated instance, as well as providing                       // 25743
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the                    // 25744
 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound                    // 25745
 *  to a non-string value. This is because an option element can only be bound to string values at                     // 25746
 * present.                                                                                                            // 25747
 *                                                                                                                     // 25748
 * When an item in the `<select>` menu is selected, the array element or object property                               // 25749
 * represented by the selected option will be bound to the model identified by the `ngModel`                           // 25750
 * directive.                                                                                                          // 25751
 *                                                                                                                     // 25752
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can                      // 25753
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"                // 25754
 * option. See example below for demonstration.                                                                        // 25755
 *                                                                                                                     // 25756
 * ## Complex Models (objects or collections)                                                                          // 25757
 *                                                                                                                     // 25758
 * **Note:** By default, `ngModel` watches the model by reference, not value. This is important when                   // 25759
 * binding any input directive to a model that is an object or a collection.                                           // 25760
 *                                                                                                                     // 25761
 * Since this is a common situation for `ngOptions` the directive additionally watches the model using                 // 25762
 * `$watchCollection` when the select has the `multiple` attribute or when there is a `track by` clause in             // 25763
 * the options expression. This allows ngOptions to trigger a re-rendering of the options even if the actual           // 25764
 * object/collection has not changed identity but only a property on the object or an item in the collection           // 25765
 * changes.                                                                                                            // 25766
 *                                                                                                                     // 25767
 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
 * if the model is an array). This means that changing a property deeper inside the object/collection that the         // 25769
 * first level will not trigger a re-rendering.                                                                        // 25770
 *                                                                                                                     // 25771
 *                                                                                                                     // 25772
 * ## `select` **`as`**                                                                                                // 25773
 *                                                                                                                     // 25774
 * Using `select` **`as`** will bind the result of the `select` expression to the model, but                           // 25775
 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)          // 25776
 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression       // 25777
 * is used, the result of that expression will be set as the value of the `option` and `select` elements.              // 25778
 *                                                                                                                     // 25779
 *                                                                                                                     // 25780
 * ### `select` **`as`** and **`track by`**                                                                            // 25781
 *                                                                                                                     // 25782
 * <div class="alert alert-warning">                                                                                   // 25783
 * Do not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.     // 25784
 * </div>                                                                                                              // 25785
 *                                                                                                                     // 25786
 * Consider the following example:                                                                                     // 25787
 *                                                                                                                     // 25788
 * ```html                                                                                                             // 25789
 * <select ng-options="item.subItem as item.label for item in values track by item.id" ng-model="selected">            // 25790
 * ```                                                                                                                 // 25791
 *                                                                                                                     // 25792
 * ```js                                                                                                               // 25793
 * $scope.values = [{                                                                                                  // 25794
 *   id: 1,                                                                                                            // 25795
 *   label: 'aLabel',                                                                                                  // 25796
 *   subItem: { name: 'aSubItem' }                                                                                     // 25797
 * }, {                                                                                                                // 25798
 *   id: 2,                                                                                                            // 25799
 *   label: 'bLabel',                                                                                                  // 25800
 *   subItem: { name: 'bSubItem' }                                                                                     // 25801
 * }];                                                                                                                 // 25802
 *                                                                                                                     // 25803
 * $scope.selected = { name: 'aSubItem' };                                                                             // 25804
 * ```                                                                                                                 // 25805
 *                                                                                                                     // 25806
 * With the purpose of preserving the selection, the **`track by`** expression is always applied to the element        // 25807
 * of the data source (to `item` in this example). To calculate whether an element is selected, we do the              // 25808
 * following:                                                                                                          // 25809
 *                                                                                                                     // 25810
 * 1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`                                      // 25811
 * 2. Apply **`track by`** to the already selected value in `ngModel`.                                                 // 25812
 *    In the example: this is not possible as **`track by`** refers to `item.id`, but the selected                     // 25813
 *    value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to                     // 25814
 *    a wrong object, the selected element can't be found, `<select>` is always reset to the "not                      // 25815
 *    selected" option.                                                                                                // 25816
 *                                                                                                                     // 25817
 *                                                                                                                     // 25818
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 25819
 * @param {string=} name Property name of the form under which the control is published.                               // 25820
 * @param {string=} required The control is considered valid only if value is entered.                                 // 25821
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                       // 25822
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                        // 25823
 *    `required` when you want to data-bind to the `required` attribute.                                               // 25824
 * @param {comprehension_expression=} ngOptions in one of the following forms:                                         // 25825
 *                                                                                                                     // 25826
 *   * for array data sources:                                                                                         // 25827
 *     * `label` **`for`** `value` **`in`** `array`                                                                    // 25828
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`                                                  // 25829
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`                                             // 25830
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`                                       // 25831
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`                  // 25832
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`            // 25833
 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`                   // 25834
 *        (for including a filter with `track by`)                                                                     // 25835
 *   * for object data sources:                                                                                        // 25836
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`                                                   // 25837
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`                                 // 25838
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`                             // 25839
 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`                       // 25840
 *     * `select` **`as`** `label` **`group by`** `group`                                                              // 25841
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`                                                        // 25842
 *     * `select` **`as`** `label` **`disable when`** `disable`                                                        // 25843
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`                                                        // 25844
 *                                                                                                                     // 25845
 * Where:                                                                                                              // 25846
 *                                                                                                                     // 25847
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.                         // 25848
 *   * `value`: local variable which will refer to each item in the `array` or each property value                     // 25849
 *      of `object` during iteration.                                                                                  // 25850
 *   * `key`: local variable which will refer to a property name in `object` during iteration.                         // 25851
 *   * `label`: The result of this expression will be the label for `<option>` element. The                            // 25852
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).                        // 25853
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`                     // 25854
 *      element. If not specified, `select` expression will default to `value`.                                        // 25855
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`                     // 25856
 *      DOM element.                                                                                                   // 25857
 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`                        // 25858
 *      element. Return `true` to disable.                                                                             // 25859
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be                  // 25860
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the                       // 25861
 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved                              // 25862
 *      even when the options are recreated (e.g. reloaded from the server).                                           // 25863
 *                                                                                                                     // 25864
 * @example                                                                                                            // 25865
    <example module="selectExample">                                                                                   // 25866
      <file name="index.html">                                                                                         // 25867
        <script>                                                                                                       // 25868
        angular.module('selectExample', [])                                                                            // 25869
          .controller('ExampleController', ['$scope', function($scope) {                                               // 25870
            $scope.colors = [                                                                                          // 25871
              {name:'black', shade:'dark'},                                                                            // 25872
              {name:'white', shade:'light', notAnOption: true},                                                        // 25873
              {name:'red', shade:'dark'},                                                                              // 25874
              {name:'blue', shade:'dark', notAnOption: true},                                                          // 25875
              {name:'yellow', shade:'light', notAnOption: false}                                                       // 25876
            ];                                                                                                         // 25877
            $scope.myColor = $scope.colors[2]; // red                                                                  // 25878
          }]);                                                                                                         // 25879
        </script>                                                                                                      // 25880
        <div ng-controller="ExampleController">                                                                        // 25881
          <ul>                                                                                                         // 25882
            <li ng-repeat="color in colors">                                                                           // 25883
              <label>Name: <input ng-model="color.name"></label>                                                       // 25884
              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>                            // 25885
              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>                               // 25886
            </li>                                                                                                      // 25887
            <li>                                                                                                       // 25888
              <button ng-click="colors.push({})">add</button>                                                          // 25889
            </li>                                                                                                      // 25890
          </ul>                                                                                                        // 25891
          <hr/>                                                                                                        // 25892
          <label>Color (null not allowed):                                                                             // 25893
            <select ng-model="myColor" ng-options="color.name for color in colors"></select>                           // 25894
          </label><br/>                                                                                                // 25895
          <label>Color (null allowed):                                                                                 // 25896
          <span  class="nullable">                                                                                     // 25897
            <select ng-model="myColor" ng-options="color.name for color in colors">                                    // 25898
              <option value="">-- choose color --</option>                                                             // 25899
            </select>                                                                                                  // 25900
          </span></label><br/>                                                                                         // 25901
                                                                                                                       // 25902
          <label>Color grouped by shade:                                                                               // 25903
            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">               // 25904
            </select>                                                                                                  // 25905
          </label><br/>                                                                                                // 25906
                                                                                                                       // 25907
          <label>Color grouped by shade, with some disabled:                                                           // 25908
            <select ng-model="myColor"                                                                                 // 25909
                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">     // 25910
            </select>                                                                                                  // 25911
          </label><br/>                                                                                                // 25912
                                                                                                                       // 25913
                                                                                                                       // 25914
                                                                                                                       // 25915
          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.                   // 25916
          <br/>                                                                                                        // 25917
          <hr/>                                                                                                        // 25918
          Currently selected: {{ {selected_color:myColor} }}                                                           // 25919
          <div style="border:solid 1px black; height:20px"                                                             // 25920
               ng-style="{'background-color':myColor.name}">                                                           // 25921
          </div>                                                                                                       // 25922
        </div>                                                                                                         // 25923
      </file>                                                                                                          // 25924
      <file name="protractor.js" type="protractor">                                                                    // 25925
         it('should check ng-options', function() {                                                                    // 25926
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');                           // 25927
           element.all(by.model('myColor')).first().click();                                                           // 25928
           element.all(by.css('select[ng-model="myColor"] option')).first().click();                                   // 25929
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');                         // 25930
           element(by.css('.nullable select[ng-model="myColor"]')).click();                                            // 25931
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();                         // 25932
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');                          // 25933
         });                                                                                                           // 25934
      </file>                                                                                                          // 25935
    </example>                                                                                                         // 25936
 */                                                                                                                    // 25937
                                                                                                                       // 25938
// jshint maxlen: false                                                                                                // 25939
//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999
var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
                        // 1: value expression (valueFn)                                                               // 25942
                        // 2: label expression (displayFn)                                                             // 25943
                        // 3: group by expression (groupByFn)                                                          // 25944
                        // 4: disable when expression (disableWhenFn)                                                  // 25945
                        // 5: array item variable name                                                                 // 25946
                        // 6: object item key variable name                                                            // 25947
                        // 7: object item value variable name                                                          // 25948
                        // 8: collection expression                                                                    // 25949
                        // 9: track by expression                                                                      // 25950
// jshint maxlen: 100                                                                                                  // 25951
                                                                                                                       // 25952
                                                                                                                       // 25953
var ngOptionsDirective = ['$compile', '$parse', function($compile, $parse) {                                           // 25954
                                                                                                                       // 25955
  function parseOptionsExpression(optionsExp, selectElement, scope) {                                                  // 25956
                                                                                                                       // 25957
    var match = optionsExp.match(NG_OPTIONS_REGEXP);                                                                   // 25958
    if (!(match)) {                                                                                                    // 25959
      throw ngOptionsMinErr('iexp',                                                                                    // 25960
        "Expected expression in form of " +                                                                            // 25961
        "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +                                              // 25962
        " but got '{0}'. Element: {1}",                                                                                // 25963
        optionsExp, startingTag(selectElement));                                                                       // 25964
    }                                                                                                                  // 25965
                                                                                                                       // 25966
    // Extract the parts from the ngOptions expression                                                                 // 25967
                                                                                                                       // 25968
    // The variable name for the value of the item in the collection                                                   // 25969
    var valueName = match[5] || match[7];                                                                              // 25970
    // The variable name for the key of the item in the collection                                                     // 25971
    var keyName = match[6];                                                                                            // 25972
                                                                                                                       // 25973
    // An expression that generates the viewValue for an option if there is a label expression                         // 25974
    var selectAs = / as /.test(match[0]) && match[1];                                                                  // 25975
    // An expression that is used to track the id of each object in the options collection                             // 25976
    var trackBy = match[9];                                                                                            // 25977
    // An expression that generates the viewValue for an option if there is no label expression                        // 25978
    var valueFn = $parse(match[2] ? match[1] : valueName);                                                             // 25979
    var selectAsFn = selectAs && $parse(selectAs);                                                                     // 25980
    var viewValueFn = selectAsFn || valueFn;                                                                           // 25981
    var trackByFn = trackBy && $parse(trackBy);                                                                        // 25982
                                                                                                                       // 25983
    // Get the value by which we are going to track the option                                                         // 25984
    // if we have a trackFn then use that (passing scope and locals)                                                   // 25985
    // otherwise just hash the given viewValue                                                                         // 25986
    var getTrackByValueFn = trackBy ?                                                                                  // 25987
                              function(value, locals) { return trackByFn(scope, locals); } :                           // 25988
                              function getHashOfValue(value) { return hashKey(value); };                               // 25989
    var getTrackByValue = function(value, key) {                                                                       // 25990
      return getTrackByValueFn(value, getLocals(value, key));                                                          // 25991
    };                                                                                                                 // 25992
                                                                                                                       // 25993
    var displayFn = $parse(match[2] || match[1]);                                                                      // 25994
    var groupByFn = $parse(match[3] || '');                                                                            // 25995
    var disableWhenFn = $parse(match[4] || '');                                                                        // 25996
    var valuesFn = $parse(match[8]);                                                                                   // 25997
                                                                                                                       // 25998
    var locals = {};                                                                                                   // 25999
    var getLocals = keyName ? function(value, key) {                                                                   // 26000
      locals[keyName] = key;                                                                                           // 26001
      locals[valueName] = value;                                                                                       // 26002
      return locals;                                                                                                   // 26003
    } : function(value) {                                                                                              // 26004
      locals[valueName] = value;                                                                                       // 26005
      return locals;                                                                                                   // 26006
    };                                                                                                                 // 26007
                                                                                                                       // 26008
                                                                                                                       // 26009
    function Option(selectValue, viewValue, label, group, disabled) {                                                  // 26010
      this.selectValue = selectValue;                                                                                  // 26011
      this.viewValue = viewValue;                                                                                      // 26012
      this.label = label;                                                                                              // 26013
      this.group = group;                                                                                              // 26014
      this.disabled = disabled;                                                                                        // 26015
    }                                                                                                                  // 26016
                                                                                                                       // 26017
    function getOptionValuesKeys(optionValues) {                                                                       // 26018
      var optionValuesKeys;                                                                                            // 26019
                                                                                                                       // 26020
      if (!keyName && isArrayLike(optionValues)) {                                                                     // 26021
        optionValuesKeys = optionValues;                                                                               // 26022
      } else {                                                                                                         // 26023
        // if object, extract keys, in enumeration order, unsorted                                                     // 26024
        optionValuesKeys = [];                                                                                         // 26025
        for (var itemKey in optionValues) {                                                                            // 26026
          if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {                                     // 26027
            optionValuesKeys.push(itemKey);                                                                            // 26028
          }                                                                                                            // 26029
        }                                                                                                              // 26030
      }                                                                                                                // 26031
      return optionValuesKeys;                                                                                         // 26032
    }                                                                                                                  // 26033
                                                                                                                       // 26034
    return {                                                                                                           // 26035
      trackBy: trackBy,                                                                                                // 26036
      getTrackByValue: getTrackByValue,                                                                                // 26037
      getWatchables: $parse(valuesFn, function(optionValues) {                                                         // 26038
        // Create a collection of things that we would like to watch (watchedArray)                                    // 26039
        // so that they can all be watched using a single $watchCollection                                             // 26040
        // that only runs the handler once if anything changes                                                         // 26041
        var watchedArray = [];                                                                                         // 26042
        optionValues = optionValues || [];                                                                             // 26043
                                                                                                                       // 26044
        var optionValuesKeys = getOptionValuesKeys(optionValues);                                                      // 26045
        var optionValuesLength = optionValuesKeys.length;                                                              // 26046
        for (var index = 0; index < optionValuesLength; index++) {                                                     // 26047
          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];                             // 26048
          var value = optionValues[key];                                                                               // 26049
                                                                                                                       // 26050
          var locals = getLocals(optionValues[key], key);                                                              // 26051
          var selectValue = getTrackByValueFn(optionValues[key], locals);                                              // 26052
          watchedArray.push(selectValue);                                                                              // 26053
                                                                                                                       // 26054
          // Only need to watch the displayFn if there is a specific label expression                                  // 26055
          if (match[2] || match[1]) {                                                                                  // 26056
            var label = displayFn(scope, locals);                                                                      // 26057
            watchedArray.push(label);                                                                                  // 26058
          }                                                                                                            // 26059
                                                                                                                       // 26060
          // Only need to watch the disableWhenFn if there is a specific disable expression                            // 26061
          if (match[4]) {                                                                                              // 26062
            var disableWhen = disableWhenFn(scope, locals);                                                            // 26063
            watchedArray.push(disableWhen);                                                                            // 26064
          }                                                                                                            // 26065
        }                                                                                                              // 26066
        return watchedArray;                                                                                           // 26067
      }),                                                                                                              // 26068
                                                                                                                       // 26069
      getOptions: function() {                                                                                         // 26070
                                                                                                                       // 26071
        var optionItems = [];                                                                                          // 26072
        var selectValueMap = {};                                                                                       // 26073
                                                                                                                       // 26074
        // The option values were already computed in the `getWatchables` fn,                                          // 26075
        // which must have been called to trigger `getOptions`                                                         // 26076
        var optionValues = valuesFn(scope) || [];                                                                      // 26077
        var optionValuesKeys = getOptionValuesKeys(optionValues);                                                      // 26078
        var optionValuesLength = optionValuesKeys.length;                                                              // 26079
                                                                                                                       // 26080
        for (var index = 0; index < optionValuesLength; index++) {                                                     // 26081
          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];                             // 26082
          var value = optionValues[key];                                                                               // 26083
          var locals = getLocals(value, key);                                                                          // 26084
          var viewValue = viewValueFn(scope, locals);                                                                  // 26085
          var selectValue = getTrackByValueFn(viewValue, locals);                                                      // 26086
          var label = displayFn(scope, locals);                                                                        // 26087
          var group = groupByFn(scope, locals);                                                                        // 26088
          var disabled = disableWhenFn(scope, locals);                                                                 // 26089
          var optionItem = new Option(selectValue, viewValue, label, group, disabled);                                 // 26090
                                                                                                                       // 26091
          optionItems.push(optionItem);                                                                                // 26092
          selectValueMap[selectValue] = optionItem;                                                                    // 26093
        }                                                                                                              // 26094
                                                                                                                       // 26095
        return {                                                                                                       // 26096
          items: optionItems,                                                                                          // 26097
          selectValueMap: selectValueMap,                                                                              // 26098
          getOptionFromViewValue: function(value) {                                                                    // 26099
            return selectValueMap[getTrackByValue(value)];                                                             // 26100
          },                                                                                                           // 26101
          getViewValueFromOption: function(option) {                                                                   // 26102
            // If the viewValue could be an object that may be mutated by the application,                             // 26103
            // we need to make a copy and not return the reference to the value on the option.                         // 26104
            return trackBy ? angular.copy(option.viewValue) : option.viewValue;                                        // 26105
          }                                                                                                            // 26106
        };                                                                                                             // 26107
      }                                                                                                                // 26108
    };                                                                                                                 // 26109
  }                                                                                                                    // 26110
                                                                                                                       // 26111
                                                                                                                       // 26112
  // we can't just jqLite('<option>') since jqLite is not smart enough                                                 // 26113
  // to create it in <select> and IE barfs otherwise.                                                                  // 26114
  var optionTemplate = document.createElement('option'),                                                               // 26115
      optGroupTemplate = document.createElement('optgroup');                                                           // 26116
                                                                                                                       // 26117
  return {                                                                                                             // 26118
    restrict: 'A',                                                                                                     // 26119
    terminal: true,                                                                                                    // 26120
    require: ['select', '?ngModel'],                                                                                   // 26121
    link: function(scope, selectElement, attr, ctrls) {                                                                // 26122
                                                                                                                       // 26123
      // if ngModel is not defined, we don't need to do anything                                                       // 26124
      var ngModelCtrl = ctrls[1];                                                                                      // 26125
      if (!ngModelCtrl) return;                                                                                        // 26126
                                                                                                                       // 26127
      var selectCtrl = ctrls[0];                                                                                       // 26128
      var multiple = attr.multiple;                                                                                    // 26129
                                                                                                                       // 26130
      // The emptyOption allows the application developer to provide their own custom "empty"                          // 26131
      // option when the viewValue does not match any of the option values.                                            // 26132
      var emptyOption;                                                                                                 // 26133
      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {                        // 26134
        if (children[i].value === '') {                                                                                // 26135
          emptyOption = children.eq(i);                                                                                // 26136
          break;                                                                                                       // 26137
        }                                                                                                              // 26138
      }                                                                                                                // 26139
                                                                                                                       // 26140
      var providedEmptyOption = !!emptyOption;                                                                         // 26141
                                                                                                                       // 26142
      var unknownOption = jqLite(optionTemplate.cloneNode(false));                                                     // 26143
      unknownOption.val('?');                                                                                          // 26144
                                                                                                                       // 26145
      var options;                                                                                                     // 26146
      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);                                    // 26147
                                                                                                                       // 26148
                                                                                                                       // 26149
      var renderEmptyOption = function() {                                                                             // 26150
        if (!providedEmptyOption) {                                                                                    // 26151
          selectElement.prepend(emptyOption);                                                                          // 26152
        }                                                                                                              // 26153
        selectElement.val('');                                                                                         // 26154
        emptyOption.prop('selected', true); // needed for IE                                                           // 26155
        emptyOption.attr('selected', true);                                                                            // 26156
      };                                                                                                               // 26157
                                                                                                                       // 26158
      var removeEmptyOption = function() {                                                                             // 26159
        if (!providedEmptyOption) {                                                                                    // 26160
          emptyOption.remove();                                                                                        // 26161
        }                                                                                                              // 26162
      };                                                                                                               // 26163
                                                                                                                       // 26164
                                                                                                                       // 26165
      var renderUnknownOption = function() {                                                                           // 26166
        selectElement.prepend(unknownOption);                                                                          // 26167
        selectElement.val('?');                                                                                        // 26168
        unknownOption.prop('selected', true); // needed for IE                                                         // 26169
        unknownOption.attr('selected', true);                                                                          // 26170
      };                                                                                                               // 26171
                                                                                                                       // 26172
      var removeUnknownOption = function() {                                                                           // 26173
        unknownOption.remove();                                                                                        // 26174
      };                                                                                                               // 26175
                                                                                                                       // 26176
                                                                                                                       // 26177
      // Update the controller methods for multiple selectable options                                                 // 26178
      if (!multiple) {                                                                                                 // 26179
                                                                                                                       // 26180
        selectCtrl.writeValue = function writeNgOptionsValue(value) {                                                  // 26181
          var option = options.getOptionFromViewValue(value);                                                          // 26182
                                                                                                                       // 26183
          if (option && !option.disabled) {                                                                            // 26184
            if (selectElement[0].value !== option.selectValue) {                                                       // 26185
              removeUnknownOption();                                                                                   // 26186
              removeEmptyOption();                                                                                     // 26187
                                                                                                                       // 26188
              selectElement[0].value = option.selectValue;                                                             // 26189
              option.element.selected = true;                                                                          // 26190
              option.element.setAttribute('selected', 'selected');                                                     // 26191
            }                                                                                                          // 26192
          } else {                                                                                                     // 26193
            if (value === null || providedEmptyOption) {                                                               // 26194
              removeUnknownOption();                                                                                   // 26195
              renderEmptyOption();                                                                                     // 26196
            } else {                                                                                                   // 26197
              removeEmptyOption();                                                                                     // 26198
              renderUnknownOption();                                                                                   // 26199
            }                                                                                                          // 26200
          }                                                                                                            // 26201
        };                                                                                                             // 26202
                                                                                                                       // 26203
        selectCtrl.readValue = function readNgOptionsValue() {                                                         // 26204
                                                                                                                       // 26205
          var selectedOption = options.selectValueMap[selectElement.val()];                                            // 26206
                                                                                                                       // 26207
          if (selectedOption && !selectedOption.disabled) {                                                            // 26208
            removeEmptyOption();                                                                                       // 26209
            removeUnknownOption();                                                                                     // 26210
            return options.getViewValueFromOption(selectedOption);                                                     // 26211
          }                                                                                                            // 26212
          return null;                                                                                                 // 26213
        };                                                                                                             // 26214
                                                                                                                       // 26215
        // If we are using `track by` then we must watch the tracked value on the model                                // 26216
        // since ngModel only watches for object identity change                                                       // 26217
        if (ngOptions.trackBy) {                                                                                       // 26218
          scope.$watch(                                                                                                // 26219
            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },                                  // 26220
            function() { ngModelCtrl.$render(); }                                                                      // 26221
          );                                                                                                           // 26222
        }                                                                                                              // 26223
                                                                                                                       // 26224
      } else {                                                                                                         // 26225
                                                                                                                       // 26226
        ngModelCtrl.$isEmpty = function(value) {                                                                       // 26227
          return !value || value.length === 0;                                                                         // 26228
        };                                                                                                             // 26229
                                                                                                                       // 26230
                                                                                                                       // 26231
        selectCtrl.writeValue = function writeNgOptionsMultiple(value) {                                               // 26232
          options.items.forEach(function(option) {                                                                     // 26233
            option.element.selected = false;                                                                           // 26234
          });                                                                                                          // 26235
                                                                                                                       // 26236
          if (value) {                                                                                                 // 26237
            value.forEach(function(item) {                                                                             // 26238
              var option = options.getOptionFromViewValue(item);                                                       // 26239
              if (option && !option.disabled) option.element.selected = true;                                          // 26240
            });                                                                                                        // 26241
          }                                                                                                            // 26242
        };                                                                                                             // 26243
                                                                                                                       // 26244
                                                                                                                       // 26245
        selectCtrl.readValue = function readNgOptionsMultiple() {                                                      // 26246
          var selectedValues = selectElement.val() || [],                                                              // 26247
              selections = [];                                                                                         // 26248
                                                                                                                       // 26249
          forEach(selectedValues, function(value) {                                                                    // 26250
            var option = options.selectValueMap[value];                                                                // 26251
            if (!option.disabled) selections.push(options.getViewValueFromOption(option));                             // 26252
          });                                                                                                          // 26253
                                                                                                                       // 26254
          return selections;                                                                                           // 26255
        };                                                                                                             // 26256
                                                                                                                       // 26257
        // If we are using `track by` then we must watch these tracked values on the model                             // 26258
        // since ngModel only watches for object identity change                                                       // 26259
        if (ngOptions.trackBy) {                                                                                       // 26260
                                                                                                                       // 26261
          scope.$watchCollection(function() {                                                                          // 26262
            if (isArray(ngModelCtrl.$viewValue)) {                                                                     // 26263
              return ngModelCtrl.$viewValue.map(function(value) {                                                      // 26264
                return ngOptions.getTrackByValue(value);                                                               // 26265
              });                                                                                                      // 26266
            }                                                                                                          // 26267
          }, function() {                                                                                              // 26268
            ngModelCtrl.$render();                                                                                     // 26269
          });                                                                                                          // 26270
                                                                                                                       // 26271
        }                                                                                                              // 26272
      }                                                                                                                // 26273
                                                                                                                       // 26274
                                                                                                                       // 26275
      if (providedEmptyOption) {                                                                                       // 26276
                                                                                                                       // 26277
        // we need to remove it before calling selectElement.empty() because otherwise IE will                         // 26278
        // remove the label from the element. wtf?                                                                     // 26279
        emptyOption.remove();                                                                                          // 26280
                                                                                                                       // 26281
        // compile the element since there might be bindings in it                                                     // 26282
        $compile(emptyOption)(scope);                                                                                  // 26283
                                                                                                                       // 26284
        // remove the class, which is added automatically because we recompile the element and it                      // 26285
        // becomes the compilation root                                                                                // 26286
        emptyOption.removeClass('ng-scope');                                                                           // 26287
      } else {                                                                                                         // 26288
        emptyOption = jqLite(optionTemplate.cloneNode(false));                                                         // 26289
      }                                                                                                                // 26290
                                                                                                                       // 26291
      // We need to do this here to ensure that the options object is defined                                          // 26292
      // when we first hit it in writeNgOptionsValue                                                                   // 26293
      updateOptions();                                                                                                 // 26294
                                                                                                                       // 26295
      // We will re-render the option elements if the option values or labels change                                   // 26296
      scope.$watchCollection(ngOptions.getWatchables, updateOptions);                                                  // 26297
                                                                                                                       // 26298
      // ------------------------------------------------------------------ //                                         // 26299
                                                                                                                       // 26300
                                                                                                                       // 26301
      function updateOptionElement(option, element) {                                                                  // 26302
        option.element = element;                                                                                      // 26303
        element.disabled = option.disabled;                                                                            // 26304
        if (option.value !== element.value) element.value = option.selectValue;                                        // 26305
        if (option.label !== element.label) {                                                                          // 26306
          element.label = option.label;                                                                                // 26307
          element.textContent = option.label;                                                                          // 26308
        }                                                                                                              // 26309
      }                                                                                                                // 26310
                                                                                                                       // 26311
      function addOrReuseElement(parent, current, type, templateElement) {                                             // 26312
        var element;                                                                                                   // 26313
        // Check whether we can reuse the next element                                                                 // 26314
        if (current && lowercase(current.nodeName) === type) {                                                         // 26315
          // The next element is the right type so reuse it                                                            // 26316
          element = current;                                                                                           // 26317
        } else {                                                                                                       // 26318
          // The next element is not the right type so create a new one                                                // 26319
          element = templateElement.cloneNode(false);                                                                  // 26320
          if (!current) {                                                                                              // 26321
            // There are no more elements so just append it to the select                                              // 26322
            parent.appendChild(element);                                                                               // 26323
          } else {                                                                                                     // 26324
            // The next element is not a group so insert the new one                                                   // 26325
            parent.insertBefore(element, current);                                                                     // 26326
          }                                                                                                            // 26327
        }                                                                                                              // 26328
        return element;                                                                                                // 26329
      }                                                                                                                // 26330
                                                                                                                       // 26331
                                                                                                                       // 26332
      function removeExcessElements(current) {                                                                         // 26333
        var next;                                                                                                      // 26334
        while (current) {                                                                                              // 26335
          next = current.nextSibling;                                                                                  // 26336
          jqLiteRemove(current);                                                                                       // 26337
          current = next;                                                                                              // 26338
        }                                                                                                              // 26339
      }                                                                                                                // 26340
                                                                                                                       // 26341
                                                                                                                       // 26342
      function skipEmptyAndUnknownOptions(current) {                                                                   // 26343
        var emptyOption_ = emptyOption && emptyOption[0];                                                              // 26344
        var unknownOption_ = unknownOption && unknownOption[0];                                                        // 26345
                                                                                                                       // 26346
        if (emptyOption_ || unknownOption_) {                                                                          // 26347
          while (current &&                                                                                            // 26348
                (current === emptyOption_ ||                                                                           // 26349
                current === unknownOption_)) {                                                                         // 26350
            current = current.nextSibling;                                                                             // 26351
          }                                                                                                            // 26352
        }                                                                                                              // 26353
        return current;                                                                                                // 26354
      }                                                                                                                // 26355
                                                                                                                       // 26356
                                                                                                                       // 26357
      function updateOptions() {                                                                                       // 26358
                                                                                                                       // 26359
        var previousValue = options && selectCtrl.readValue();                                                         // 26360
                                                                                                                       // 26361
        options = ngOptions.getOptions();                                                                              // 26362
                                                                                                                       // 26363
        var groupMap = {};                                                                                             // 26364
        var currentElement = selectElement[0].firstChild;                                                              // 26365
                                                                                                                       // 26366
        // Ensure that the empty option is always there if it was explicitly provided                                  // 26367
        if (providedEmptyOption) {                                                                                     // 26368
          selectElement.prepend(emptyOption);                                                                          // 26369
        }                                                                                                              // 26370
                                                                                                                       // 26371
        currentElement = skipEmptyAndUnknownOptions(currentElement);                                                   // 26372
                                                                                                                       // 26373
        options.items.forEach(function updateOption(option) {                                                          // 26374
          var group;                                                                                                   // 26375
          var groupElement;                                                                                            // 26376
          var optionElement;                                                                                           // 26377
                                                                                                                       // 26378
          if (option.group) {                                                                                          // 26379
                                                                                                                       // 26380
            // This option is to live in a group                                                                       // 26381
            // See if we have already created this group                                                               // 26382
            group = groupMap[option.group];                                                                            // 26383
                                                                                                                       // 26384
            if (!group) {                                                                                              // 26385
                                                                                                                       // 26386
              // We have not already created this group                                                                // 26387
              groupElement = addOrReuseElement(selectElement[0],                                                       // 26388
                                               currentElement,                                                         // 26389
                                               'optgroup',                                                             // 26390
                                               optGroupTemplate);                                                      // 26391
              // Move to the next element                                                                              // 26392
              currentElement = groupElement.nextSibling;                                                               // 26393
                                                                                                                       // 26394
              // Update the label on the group element                                                                 // 26395
              groupElement.label = option.group;                                                                       // 26396
                                                                                                                       // 26397
              // Store it for use later                                                                                // 26398
              group = groupMap[option.group] = {                                                                       // 26399
                groupElement: groupElement,                                                                            // 26400
                currentOptionElement: groupElement.firstChild                                                          // 26401
              };                                                                                                       // 26402
                                                                                                                       // 26403
            }                                                                                                          // 26404
                                                                                                                       // 26405
            // So now we have a group for this option we add the option to the group                                   // 26406
            optionElement = addOrReuseElement(group.groupElement,                                                      // 26407
                                              group.currentOptionElement,                                              // 26408
                                              'option',                                                                // 26409
                                              optionTemplate);                                                         // 26410
            updateOptionElement(option, optionElement);                                                                // 26411
            // Move to the next element                                                                                // 26412
            group.currentOptionElement = optionElement.nextSibling;                                                    // 26413
                                                                                                                       // 26414
          } else {                                                                                                     // 26415
                                                                                                                       // 26416
            // This option is not in a group                                                                           // 26417
            optionElement = addOrReuseElement(selectElement[0],                                                        // 26418
                                              currentElement,                                                          // 26419
                                              'option',                                                                // 26420
                                              optionTemplate);                                                         // 26421
            updateOptionElement(option, optionElement);                                                                // 26422
            // Move to the next element                                                                                // 26423
            currentElement = optionElement.nextSibling;                                                                // 26424
          }                                                                                                            // 26425
        });                                                                                                            // 26426
                                                                                                                       // 26427
                                                                                                                       // 26428
        // Now remove all excess options and group                                                                     // 26429
        Object.keys(groupMap).forEach(function(key) {                                                                  // 26430
          removeExcessElements(groupMap[key].currentOptionElement);                                                    // 26431
        });                                                                                                            // 26432
        removeExcessElements(currentElement);                                                                          // 26433
                                                                                                                       // 26434
        ngModelCtrl.$render();                                                                                         // 26435
                                                                                                                       // 26436
        // Check to see if the value has changed due to the update to the options                                      // 26437
        if (!ngModelCtrl.$isEmpty(previousValue)) {                                                                    // 26438
          var nextValue = selectCtrl.readValue();                                                                      // 26439
          if (ngOptions.trackBy ? !equals(previousValue, nextValue) : previousValue !== nextValue) {                   // 26440
            ngModelCtrl.$setViewValue(nextValue);                                                                      // 26441
            ngModelCtrl.$render();                                                                                     // 26442
          }                                                                                                            // 26443
        }                                                                                                              // 26444
                                                                                                                       // 26445
      }                                                                                                                // 26446
                                                                                                                       // 26447
    }                                                                                                                  // 26448
  };                                                                                                                   // 26449
}];                                                                                                                    // 26450
                                                                                                                       // 26451
/**                                                                                                                    // 26452
 * @ngdoc directive                                                                                                    // 26453
 * @name ngPluralize                                                                                                   // 26454
 * @restrict EA                                                                                                        // 26455
 *                                                                                                                     // 26456
 * @description                                                                                                        // 26457
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.                          // 26458
 * These rules are bundled with angular.js, but can be overridden                                                      // 26459
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive                                // 26460
 * by specifying the mappings between                                                                                  // 26461
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)           // 26462
 * and the strings to be displayed.                                                                                    // 26463
 *                                                                                                                     // 26464
 * # Plural categories and explicit number rules                                                                       // 26465
 * There are two                                                                                                       // 26466
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)           // 26467
 * in Angular's default en-US locale: "one" and "other".                                                               // 26468
 *                                                                                                                     // 26469
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match                     // 26470
 * any number that is not 1), an explicit number rule can only match one number. For example, the                      // 26471
 * explicit number rule for "3" matches the number 3. There are examples of plural categories                          // 26472
 * and explicit number rules throughout the rest of this documentation.                                                // 26473
 *                                                                                                                     // 26474
 * # Configuring ngPluralize                                                                                           // 26475
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.                                            // 26476
 * You can also provide an optional attribute, `offset`.                                                               // 26477
 *                                                                                                                     // 26478
 * The value of the `count` attribute can be either a string or an {@link guide/expression                             // 26479
 * Angular expression}; these are evaluated on the current scope for its bound value.                                  // 26480
 *                                                                                                                     // 26481
 * The `when` attribute specifies the mappings between plural categories and the actual                                // 26482
 * string to be displayed. The value of the attribute should be a JSON object.                                         // 26483
 *                                                                                                                     // 26484
 * The following example shows how to configure ngPluralize:                                                           // 26485
 *                                                                                                                     // 26486
 * ```html                                                                                                             // 26487
 * <ng-pluralize count="personCount"                                                                                   // 26488
                 when="{'0': 'Nobody is viewing.',                                                                     // 26489
 *                      'one': '1 person is viewing.',                                                                 // 26490
 *                      'other': '{} people are viewing.'}">                                                           // 26491
 * </ng-pluralize>                                                                                                     // 26492
 *```                                                                                                                  // 26493
 *                                                                                                                     // 26494
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not                                // 26495
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"                            // 26496
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for                          // 26497
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can                          // 26498
 * show "a dozen people are viewing".                                                                                  // 26499
 *                                                                                                                     // 26500
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted                 // 26501
 * into pluralized strings. In the previous example, Angular will replace `{}` with                                    // 26502
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder                             // 26503
 * for <span ng-non-bindable>{{numberExpression}}</span>.                                                              // 26504
 *                                                                                                                     // 26505
 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.                 // 26506
 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.  // 26507
 *                                                                                                                     // 26508
 * # Configuring ngPluralize with offset                                                                               // 26509
 * The `offset` attribute allows further customization of pluralized text, which can result in                         // 26510
 * a better user experience. For example, instead of the message "4 people are viewing this document",                 // 26511
 * you might display "John, Kate and 2 others are viewing this document".                                              // 26512
 * The offset attribute allows you to offset a number by any desired value.                                            // 26513
 * Let's take a look at an example:                                                                                    // 26514
 *                                                                                                                     // 26515
 * ```html                                                                                                             // 26516
 * <ng-pluralize count="personCount" offset=2                                                                          // 26517
 *               when="{'0': 'Nobody is viewing.',                                                                     // 26518
 *                      '1': '{{person1}} is viewing.',                                                                // 26519
 *                      '2': '{{person1}} and {{person2}} are viewing.',                                               // 26520
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',                           // 26521
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">                        // 26522
 * </ng-pluralize>                                                                                                     // 26523
 * ```                                                                                                                 // 26524
 *                                                                                                                     // 26525
 * Notice that we are still using two plural categories(one, other), but we added                                      // 26526
 * three explicit number rules 0, 1 and 2.                                                                             // 26527
 * When one person, perhaps John, views the document, "John is viewing" will be shown.                                 // 26528
 * When three people view the document, no explicit number rule is found, so                                           // 26529
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.                                    // 26530
 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"                    // 26531
 * is shown.                                                                                                           // 26532
 *                                                                                                                     // 26533
 * Note that when you specify offsets, you must provide explicit number rules for                                      // 26534
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,                              // 26535
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for                  // 26536
 * plural categories "one" and "other".                                                                                // 26537
 *                                                                                                                     // 26538
 * @param {string|expression} count The variable to be bound to.                                                       // 26539
 * @param {string} when The mapping between plural category to its corresponding strings.                              // 26540
 * @param {number=} offset Offset to deduct from the total number.                                                     // 26541
 *                                                                                                                     // 26542
 * @example                                                                                                            // 26543
    <example module="pluralizeExample">                                                                                // 26544
      <file name="index.html">                                                                                         // 26545
        <script>                                                                                                       // 26546
          angular.module('pluralizeExample', [])                                                                       // 26547
            .controller('ExampleController', ['$scope', function($scope) {                                             // 26548
              $scope.person1 = 'Igor';                                                                                 // 26549
              $scope.person2 = 'Misko';                                                                                // 26550
              $scope.personCount = 1;                                                                                  // 26551
            }]);                                                                                                       // 26552
        </script>                                                                                                      // 26553
        <div ng-controller="ExampleController">                                                                        // 26554
          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>                           // 26555
          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>                          // 26556
          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>                  // 26557
                                                                                                                       // 26558
          <!--- Example with simple pluralization rules for en locale --->                                             // 26559
          Without Offset:                                                                                              // 26560
          <ng-pluralize count="personCount"                                                                            // 26561
                        when="{'0': 'Nobody is viewing.',                                                              // 26562
                               'one': '1 person is viewing.',                                                          // 26563
                               'other': '{} people are viewing.'}">                                                    // 26564
          </ng-pluralize><br>                                                                                          // 26565
                                                                                                                       // 26566
          <!--- Example with offset --->                                                                               // 26567
          With Offset(2):                                                                                              // 26568
          <ng-pluralize count="personCount" offset=2                                                                   // 26569
                        when="{'0': 'Nobody is viewing.',                                                              // 26570
                               '1': '{{person1}} is viewing.',                                                         // 26571
                               '2': '{{person1}} and {{person2}} are viewing.',                                        // 26572
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',                    // 26573
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">                 // 26574
          </ng-pluralize>                                                                                              // 26575
        </div>                                                                                                         // 26576
      </file>                                                                                                          // 26577
      <file name="protractor.js" type="protractor">                                                                    // 26578
        it('should show correct pluralized string', function() {                                                       // 26579
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);                                              // 26580
          var withOffset = element.all(by.css('ng-pluralize')).get(1);                                                 // 26581
          var countInput = element(by.model('personCount'));                                                           // 26582
                                                                                                                       // 26583
          expect(withoutOffset.getText()).toEqual('1 person is viewing.');                                             // 26584
          expect(withOffset.getText()).toEqual('Igor is viewing.');                                                    // 26585
                                                                                                                       // 26586
          countInput.clear();                                                                                          // 26587
          countInput.sendKeys('0');                                                                                    // 26588
                                                                                                                       // 26589
          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');                                               // 26590
          expect(withOffset.getText()).toEqual('Nobody is viewing.');                                                  // 26591
                                                                                                                       // 26592
          countInput.clear();                                                                                          // 26593
          countInput.sendKeys('2');                                                                                    // 26594
                                                                                                                       // 26595
          expect(withoutOffset.getText()).toEqual('2 people are viewing.');                                            // 26596
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');                                         // 26597
                                                                                                                       // 26598
          countInput.clear();                                                                                          // 26599
          countInput.sendKeys('3');                                                                                    // 26600
                                                                                                                       // 26601
          expect(withoutOffset.getText()).toEqual('3 people are viewing.');                                            // 26602
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');                       // 26603
                                                                                                                       // 26604
          countInput.clear();                                                                                          // 26605
          countInput.sendKeys('4');                                                                                    // 26606
                                                                                                                       // 26607
          expect(withoutOffset.getText()).toEqual('4 people are viewing.');                                            // 26608
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');                         // 26609
        });                                                                                                            // 26610
        it('should show data-bound names', function() {                                                                // 26611
          var withOffset = element.all(by.css('ng-pluralize')).get(1);                                                 // 26612
          var personCount = element(by.model('personCount'));                                                          // 26613
          var person1 = element(by.model('person1'));                                                                  // 26614
          var person2 = element(by.model('person2'));                                                                  // 26615
          personCount.clear();                                                                                         // 26616
          personCount.sendKeys('4');                                                                                   // 26617
          person1.clear();                                                                                             // 26618
          person1.sendKeys('Di');                                                                                      // 26619
          person2.clear();                                                                                             // 26620
          person2.sendKeys('Vojta');                                                                                   // 26621
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');                           // 26622
        });                                                                                                            // 26623
      </file>                                                                                                          // 26624
    </example>                                                                                                         // 26625
 */                                                                                                                    // 26626
var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {                 // 26627
  var BRACE = /{}/g,                                                                                                   // 26628
      IS_WHEN = /^when(Minus)?(.+)$/;                                                                                  // 26629
                                                                                                                       // 26630
  return {                                                                                                             // 26631
    link: function(scope, element, attr) {                                                                             // 26632
      var numberExp = attr.count,                                                                                      // 26633
          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs                         // 26634
          offset = attr.offset || 0,                                                                                   // 26635
          whens = scope.$eval(whenExp) || {},                                                                          // 26636
          whensExpFns = {},                                                                                            // 26637
          startSymbol = $interpolate.startSymbol(),                                                                    // 26638
          endSymbol = $interpolate.endSymbol(),                                                                        // 26639
          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,                                       // 26640
          watchRemover = angular.noop,                                                                                 // 26641
          lastCount;                                                                                                   // 26642
                                                                                                                       // 26643
      forEach(attr, function(expression, attributeName) {                                                              // 26644
        var tmpMatch = IS_WHEN.exec(attributeName);                                                                    // 26645
        if (tmpMatch) {                                                                                                // 26646
          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);                                             // 26647
          whens[whenKey] = element.attr(attr.$attr[attributeName]);                                                    // 26648
        }                                                                                                              // 26649
      });                                                                                                              // 26650
      forEach(whens, function(expression, key) {                                                                       // 26651
        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));                                  // 26652
                                                                                                                       // 26653
      });                                                                                                              // 26654
                                                                                                                       // 26655
      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {                                                // 26656
        var count = parseFloat(newVal);                                                                                // 26657
        var countIsNaN = isNaN(count);                                                                                 // 26658
                                                                                                                       // 26659
        if (!countIsNaN && !(count in whens)) {                                                                        // 26660
          // If an explicit number rule such as 1, 2, 3... is defined, just use it.                                    // 26661
          // Otherwise, check it against pluralization rules in $locale service.                                       // 26662
          count = $locale.pluralCat(count - offset);                                                                   // 26663
        }                                                                                                              // 26664
                                                                                                                       // 26665
        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.                              // 26666
        // In JS `NaN !== NaN`, so we have to exlicitly check.                                                         // 26667
        if ((count !== lastCount) && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {                       // 26668
          watchRemover();                                                                                              // 26669
          var whenExpFn = whensExpFns[count];                                                                          // 26670
          if (isUndefined(whenExpFn)) {                                                                                // 26671
            if (newVal != null) {                                                                                      // 26672
              $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);                            // 26673
            }                                                                                                          // 26674
            watchRemover = noop;                                                                                       // 26675
            updateElementText();                                                                                       // 26676
          } else {                                                                                                     // 26677
            watchRemover = scope.$watch(whenExpFn, updateElementText);                                                 // 26678
          }                                                                                                            // 26679
          lastCount = count;                                                                                           // 26680
        }                                                                                                              // 26681
      });                                                                                                              // 26682
                                                                                                                       // 26683
      function updateElementText(newText) {                                                                            // 26684
        element.text(newText || '');                                                                                   // 26685
      }                                                                                                                // 26686
    }                                                                                                                  // 26687
  };                                                                                                                   // 26688
}];                                                                                                                    // 26689
                                                                                                                       // 26690
/**                                                                                                                    // 26691
 * @ngdoc directive                                                                                                    // 26692
 * @name ngRepeat                                                                                                      // 26693
 * @multiElement                                                                                                       // 26694
 *                                                                                                                     // 26695
 * @description                                                                                                        // 26696
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template                     // 26697
 * instance gets its own scope, where the given loop variable is set to the current collection item,                   // 26698
 * and `$index` is set to the item index or key.                                                                       // 26699
 *                                                                                                                     // 26700
 * Special properties are exposed on the local scope of each template instance, including:                             // 26701
 *                                                                                                                     // 26702
 * | Variable  | Type            | Details                                                                     |       // 26703
 * |-----------|-----------------|-----------------------------------------------------------------------------|       // 26704
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |       // 26705
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |       // 26706
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |       // 26707
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |       // 26708
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |       // 26709
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |       // 26710
 *                                                                                                                     // 26711
 * Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.                        // 26712
 * This may be useful when, for instance, nesting ngRepeats.                                                           // 26713
 *                                                                                                                     // 26714
 *                                                                                                                     // 26715
 * # Iterating over object properties                                                                                  // 26716
 *                                                                                                                     // 26717
 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following                    // 26718
 * syntax:                                                                                                             // 26719
 *                                                                                                                     // 26720
 * ```js                                                                                                               // 26721
 * <div ng-repeat="(key, value) in myObj"> ... </div>                                                                  // 26722
 * ```                                                                                                                 // 26723
 *                                                                                                                     // 26724
 * You need to be aware that the JavaScript specification does not define the order of keys                            // 26725
 * returned for an object. (To mitigate this in Angular 1.3 the `ngRepeat` directive                                   // 26726
 * used to sort the keys alphabetically.)                                                                              // 26727
 *                                                                                                                     // 26728
 * Version 1.4 removed the alphabetic sorting. We now rely on the order returned by the browser                        // 26729
 * when running `for key in myObj`. It seems that browsers generally follow the strategy of providing                  // 26730
 * keys in the order in which they were defined, although there are exceptions when keys are deleted                   // 26731
 * and reinstated. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_issues
 *                                                                                                                     // 26733
 * If this is not desired, the recommended workaround is to convert your object into an array                          // 26734
 * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could                         // 26735
 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)                   // 26736
 * or implement a `$watch` on the object yourself.                                                                     // 26737
 *                                                                                                                     // 26738
 *                                                                                                                     // 26739
 * # Tracking and Duplicates                                                                                           // 26740
 *                                                                                                                     // 26741
 * When the contents of the collection change, `ngRepeat` makes the corresponding changes to the DOM:                  // 26742
 *                                                                                                                     // 26743
 * * When an item is added, a new instance of the template is added to the DOM.                                        // 26744
 * * When an item is removed, its template instance is removed from the DOM.                                           // 26745
 * * When items are reordered, their respective templates are reordered in the DOM.                                    // 26746
 *                                                                                                                     // 26747
 * By default, `ngRepeat` does not allow duplicate items in arrays. This is because when                               // 26748
 * there are duplicates, it is not possible to maintain a one-to-one mapping between collection                        // 26749
 * items and DOM elements.                                                                                             // 26750
 *                                                                                                                     // 26751
 * If you do need to repeat duplicate items, you can substitute the default tracking behavior                          // 26752
 * with your own using the `track by` expression.                                                                      // 26753
 *                                                                                                                     // 26754
 * For example, you may track items by the index of each item in the collection, using the                             // 26755
 * special scope property `$index`:                                                                                    // 26756
 * ```html                                                                                                             // 26757
 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">                                                          // 26758
 *      {{n}}                                                                                                          // 26759
 *    </div>                                                                                                           // 26760
 * ```                                                                                                                 // 26761
 *                                                                                                                     // 26762
 * You may use arbitrary expressions in `track by`, including references to custom functions                           // 26763
 * on the scope:                                                                                                       // 26764
 * ```html                                                                                                             // 26765
 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">                                           // 26766
 *      {{n}}                                                                                                          // 26767
 *    </div>                                                                                                           // 26768
 * ```                                                                                                                 // 26769
 *                                                                                                                     // 26770
 * If you are working with objects that have an identifier property, you can track                                     // 26771
 * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`                        // 26772
 * will not have to rebuild the DOM elements for items it has already rendered, even if the                            // 26773
 * JavaScript objects in the collection have been substituted for new ones:                                            // 26774
 * ```html                                                                                                             // 26775
 *    <div ng-repeat="model in collection track by model.id">                                                          // 26776
 *      {{model.name}}                                                                                                 // 26777
 *    </div>                                                                                                           // 26778
 * ```                                                                                                                 // 26779
 *                                                                                                                     // 26780
 * When no `track by` expression is provided, it is equivalent to tracking by the built-in                             // 26781
 * `$id` function, which tracks items by their identity:                                                               // 26782
 * ```html                                                                                                             // 26783
 *    <div ng-repeat="obj in collection track by $id(obj)">                                                            // 26784
 *      {{obj.prop}}                                                                                                   // 26785
 *    </div>                                                                                                           // 26786
 * ```                                                                                                                 // 26787
 *                                                                                                                     // 26788
 * <div class="alert alert-warning">                                                                                   // 26789
 * **Note:** `track by` must always be the last expression:                                                            // 26790
 * </div>                                                                                                              // 26791
 * ```                                                                                                                 // 26792
 * <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">                          // 26793
 *     {{model.name}}                                                                                                  // 26794
 * </div>                                                                                                              // 26795
 * ```                                                                                                                 // 26796
 *                                                                                                                     // 26797
 * # Special repeat start and end points                                                                               // 26798
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.                                          // 26802
 *                                                                                                                     // 26803
 * The example below makes use of this feature:                                                                        // 26804
 * ```html                                                                                                             // 26805
 *   <header ng-repeat-start="item in items">                                                                          // 26806
 *     Header {{ item }}                                                                                               // 26807
 *   </header>                                                                                                         // 26808
 *   <div class="body">                                                                                                // 26809
 *     Body {{ item }}                                                                                                 // 26810
 *   </div>                                                                                                            // 26811
 *   <footer ng-repeat-end>                                                                                            // 26812
 *     Footer {{ item }}                                                                                               // 26813
 *   </footer>                                                                                                         // 26814
 * ```                                                                                                                 // 26815
 *                                                                                                                     // 26816
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:    // 26817
 * ```html                                                                                                             // 26818
 *   <header>                                                                                                          // 26819
 *     Header A                                                                                                        // 26820
 *   </header>                                                                                                         // 26821
 *   <div class="body">                                                                                                // 26822
 *     Body A                                                                                                          // 26823
 *   </div>                                                                                                            // 26824
 *   <footer>                                                                                                          // 26825
 *     Footer A                                                                                                        // 26826
 *   </footer>                                                                                                         // 26827
 *   <header>                                                                                                          // 26828
 *     Header B                                                                                                        // 26829
 *   </header>                                                                                                         // 26830
 *   <div class="body">                                                                                                // 26831
 *     Body B                                                                                                          // 26832
 *   </div>                                                                                                            // 26833
 *   <footer>                                                                                                          // 26834
 *     Footer B                                                                                                        // 26835
 *   </footer>                                                                                                         // 26836
 * ```                                                                                                                 // 26837
 *                                                                                                                     // 26838
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).                                        // 26840
 *                                                                                                                     // 26841
 * @animations                                                                                                         // 26842
 * **.enter** - when a new item is added to the list or when an item is revealed after a filter                        // 26843
 *                                                                                                                     // 26844
 * **.leave** - when an item is removed from the list or when an item is filtered out                                  // 26845
 *                                                                                                                     // 26846
 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered         // 26847
 *                                                                                                                     // 26848
 * @element ANY                                                                                                        // 26849
 * @scope                                                                                                              // 26850
 * @priority 1000                                                                                                      // 26851
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These                  // 26852
 *   formats are currently supported:                                                                                  // 26853
 *                                                                                                                     // 26854
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`                    // 26855
 *     is a scope expression giving the collection to enumerate.                                                       // 26856
 *                                                                                                                     // 26857
 *     For example: `album in artist.albums`.                                                                          // 26858
 *                                                                                                                     // 26859
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,                     // 26860
 *     and `expression` is the scope expression giving the collection to enumerate.                                    // 26861
 *                                                                                                                     // 26862
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.                                                         // 26863
 *                                                                                                                     // 26864
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression    // 26865
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression   // 26866
 *     is specified, ng-repeat associates elements by identity. It is an error to have                                 // 26867
 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are // 26868
 *     mapped to the same DOM element, which is not possible.)                                                         // 26869
 *                                                                                                                     // 26870
 *     Note that the tracking expression must come last, after any filters, and the alias expression.                  // 26871
 *                                                                                                                     // 26872
 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
 *     will be associated by item identity in the array.                                                               // 26874
 *                                                                                                                     // 26875
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique     // 26876
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements  // 26877
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM        // 26878
 *     element in the same way in the DOM.                                                                             // 26879
 *                                                                                                                     // 26880
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`           // 26882
 *     property is same.                                                                                               // 26883
 *                                                                                                                     // 26884
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.                                                             // 26886
 *                                                                                                                     // 26887
 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
 *     when a filter is active on the repeater, but the filtered result set is empty.                                  // 26890
 *                                                                                                                     // 26891
 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
 *     the items have been processed through the filter.                                                               // 26893
 *                                                                                                                     // 26894
 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
 *     (and not as operator, inside an expression).                                                                    // 26896
 *                                                                                                                     // 26897
 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .                      // 26898
 *                                                                                                                     // 26899
 * @example                                                                                                            // 26900
 * This example initializes the scope to a list of names and                                                           // 26901
 * then uses `ngRepeat` to display every person:                                                                       // 26902
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 26903
    <file name="index.html">                                                                                           // 26904
      <div ng-init="friends = [                                                                                        // 26905
        {name:'John', age:25, gender:'boy'},                                                                           // 26906
        {name:'Jessie', age:30, gender:'girl'},                                                                        // 26907
        {name:'Johanna', age:28, gender:'girl'},                                                                       // 26908
        {name:'Joy', age:15, gender:'girl'},                                                                           // 26909
        {name:'Mary', age:28, gender:'girl'},                                                                          // 26910
        {name:'Peter', age:95, gender:'boy'},                                                                          // 26911
        {name:'Sebastian', age:50, gender:'boy'},                                                                      // 26912
        {name:'Erika', age:27, gender:'girl'},                                                                         // 26913
        {name:'Patrick', age:40, gender:'boy'},                                                                        // 26914
        {name:'Samantha', age:60, gender:'girl'}                                                                       // 26915
      ]">                                                                                                              // 26916
        I have {{friends.length}} friends. They are:                                                                   // 26917
        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />               // 26918
        <ul class="example-animate-container">                                                                         // 26919
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">                              // 26920
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.                                          // 26921
          </li>                                                                                                        // 26922
          <li class="animate-repeat" ng-if="results.length == 0">                                                      // 26923
            <strong>No results found...</strong>                                                                       // 26924
          </li>                                                                                                        // 26925
        </ul>                                                                                                          // 26926
      </div>                                                                                                           // 26927
    </file>                                                                                                            // 26928
    <file name="animations.css">                                                                                       // 26929
      .example-animate-container {                                                                                     // 26930
        background:white;                                                                                              // 26931
        border:1px solid black;                                                                                        // 26932
        list-style:none;                                                                                               // 26933
        margin:0;                                                                                                      // 26934
        padding:0 10px;                                                                                                // 26935
      }                                                                                                                // 26936
                                                                                                                       // 26937
      .animate-repeat {                                                                                                // 26938
        line-height:40px;                                                                                              // 26939
        list-style:none;                                                                                               // 26940
        box-sizing:border-box;                                                                                         // 26941
      }                                                                                                                // 26942
                                                                                                                       // 26943
      .animate-repeat.ng-move,                                                                                         // 26944
      .animate-repeat.ng-enter,                                                                                        // 26945
      .animate-repeat.ng-leave {                                                                                       // 26946
        -webkit-transition:all linear 0.5s;                                                                            // 26947
        transition:all linear 0.5s;                                                                                    // 26948
      }                                                                                                                // 26949
                                                                                                                       // 26950
      .animate-repeat.ng-leave.ng-leave-active,                                                                        // 26951
      .animate-repeat.ng-move,                                                                                         // 26952
      .animate-repeat.ng-enter {                                                                                       // 26953
        opacity:0;                                                                                                     // 26954
        max-height:0;                                                                                                  // 26955
      }                                                                                                                // 26956
                                                                                                                       // 26957
      .animate-repeat.ng-leave,                                                                                        // 26958
      .animate-repeat.ng-move.ng-move-active,                                                                          // 26959
      .animate-repeat.ng-enter.ng-enter-active {                                                                       // 26960
        opacity:1;                                                                                                     // 26961
        max-height:40px;                                                                                               // 26962
      }                                                                                                                // 26963
    </file>                                                                                                            // 26964
    <file name="protractor.js" type="protractor">                                                                      // 26965
      var friends = element.all(by.repeater('friend in friends'));                                                     // 26966
                                                                                                                       // 26967
      it('should render initial data set', function() {                                                                // 26968
        expect(friends.count()).toBe(10);                                                                              // 26969
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');                                     // 26970
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');                                   // 26971
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');                                // 26972
        expect(element(by.binding('friends.length')).getText())                                                        // 26973
            .toMatch("I have 10 friends. They are:");                                                                  // 26974
      });                                                                                                              // 26975
                                                                                                                       // 26976
       it('should update repeater when filter predicate changes', function() {                                         // 26977
         expect(friends.count()).toBe(10);                                                                             // 26978
                                                                                                                       // 26979
         element(by.model('q')).sendKeys('ma');                                                                        // 26980
                                                                                                                       // 26981
         expect(friends.count()).toBe(2);                                                                              // 26982
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');                                    // 26983
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');                                // 26984
       });                                                                                                             // 26985
      </file>                                                                                                          // 26986
    </example>                                                                                                         // 26987
 */                                                                                                                    // 26988
var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {                                            // 26989
  var NG_REMOVED = '$$NG_REMOVED';                                                                                     // 26990
  var ngRepeatMinErr = minErr('ngRepeat');                                                                             // 26991
                                                                                                                       // 26992
  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {                  // 26993
    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%                                                       // 26994
    scope[valueIdentifier] = value;                                                                                    // 26995
    if (keyIdentifier) scope[keyIdentifier] = key;                                                                     // 26996
    scope.$index = index;                                                                                              // 26997
    scope.$first = (index === 0);                                                                                      // 26998
    scope.$last = (index === (arrayLength - 1));                                                                       // 26999
    scope.$middle = !(scope.$first || scope.$last);                                                                    // 27000
    // jshint bitwise: false                                                                                           // 27001
    scope.$odd = !(scope.$even = (index&1) === 0);                                                                     // 27002
    // jshint bitwise: true                                                                                            // 27003
  };                                                                                                                   // 27004
                                                                                                                       // 27005
  var getBlockStart = function(block) {                                                                                // 27006
    return block.clone[0];                                                                                             // 27007
  };                                                                                                                   // 27008
                                                                                                                       // 27009
  var getBlockEnd = function(block) {                                                                                  // 27010
    return block.clone[block.clone.length - 1];                                                                        // 27011
  };                                                                                                                   // 27012
                                                                                                                       // 27013
                                                                                                                       // 27014
  return {                                                                                                             // 27015
    restrict: 'A',                                                                                                     // 27016
    multiElement: true,                                                                                                // 27017
    transclude: 'element',                                                                                             // 27018
    priority: 1000,                                                                                                    // 27019
    terminal: true,                                                                                                    // 27020
    $$tlb: true,                                                                                                       // 27021
    compile: function ngRepeatCompile($element, $attr) {                                                               // 27022
      var expression = $attr.ngRepeat;                                                                                 // 27023
      var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');                           // 27024
                                                                                                                       // 27025
      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
                                                                                                                       // 27027
      if (!match) {                                                                                                    // 27028
        throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
            expression);                                                                                               // 27030
      }                                                                                                                // 27031
                                                                                                                       // 27032
      var lhs = match[1];                                                                                              // 27033
      var rhs = match[2];                                                                                              // 27034
      var aliasAs = match[3];                                                                                          // 27035
      var trackByExp = match[4];                                                                                       // 27036
                                                                                                                       // 27037
      match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);                                     // 27038
                                                                                                                       // 27039
      if (!match) {                                                                                                    // 27040
        throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
            lhs);                                                                                                      // 27042
      }                                                                                                                // 27043
      var valueIdentifier = match[3] || match[1];                                                                      // 27044
      var keyIdentifier = match[2];                                                                                    // 27045
                                                                                                                       // 27046
      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||                                                   // 27047
          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
        throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
          aliasAs);                                                                                                    // 27050
      }                                                                                                                // 27051
                                                                                                                       // 27052
      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;                                          // 27053
      var hashFnLocals = {$id: hashKey};                                                                               // 27054
                                                                                                                       // 27055
      if (trackByExp) {                                                                                                // 27056
        trackByExpGetter = $parse(trackByExp);                                                                         // 27057
      } else {                                                                                                         // 27058
        trackByIdArrayFn = function(key, value) {                                                                      // 27059
          return hashKey(value);                                                                                       // 27060
        };                                                                                                             // 27061
        trackByIdObjFn = function(key) {                                                                               // 27062
          return key;                                                                                                  // 27063
        };                                                                                                             // 27064
      }                                                                                                                // 27065
                                                                                                                       // 27066
      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {                                       // 27067
                                                                                                                       // 27068
        if (trackByExpGetter) {                                                                                        // 27069
          trackByIdExpFn = function(key, value, index) {                                                               // 27070
            // assign key, value, and $index to the locals so that they can be used in hash functions                  // 27071
            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;                                                      // 27072
            hashFnLocals[valueIdentifier] = value;                                                                     // 27073
            hashFnLocals.$index = index;                                                                               // 27074
            return trackByExpGetter($scope, hashFnLocals);                                                             // 27075
          };                                                                                                           // 27076
        }                                                                                                              // 27077
                                                                                                                       // 27078
        // Store a list of elements from previous run. This is a hash where key is the item from the                   // 27079
        // iterator, and the value is objects with following properties.                                               // 27080
        //   - scope: bound scope                                                                                      // 27081
        //   - element: previous element.                                                                              // 27082
        //   - index: position                                                                                         // 27083
        //                                                                                                             // 27084
        // We are using no-proto object so that we don't need to guard against inherited props via                     // 27085
        // hasOwnProperty.                                                                                             // 27086
        var lastBlockMap = createMap();                                                                                // 27087
                                                                                                                       // 27088
        //watch props                                                                                                  // 27089
        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {                                             // 27090
          var index, length,                                                                                           // 27091
              previousNode = $element[0],     // node that cloned nodes should be inserted after                       // 27092
                                              // initialized to the comment node anchor                                // 27093
              nextNode,                                                                                                // 27094
              // Same as lastBlockMap but it has the current state. It will become the                                 // 27095
              // lastBlockMap on the next iteration.                                                                   // 27096
              nextBlockMap = createMap(),                                                                              // 27097
              collectionLength,                                                                                        // 27098
              key, value, // key/value of iteration                                                                    // 27099
              trackById,                                                                                               // 27100
              trackByIdFn,                                                                                             // 27101
              collectionKeys,                                                                                          // 27102
              block,       // last object information {scope, element, id}                                             // 27103
              nextBlockOrder,                                                                                          // 27104
              elementsToRemove;                                                                                        // 27105
                                                                                                                       // 27106
          if (aliasAs) {                                                                                               // 27107
            $scope[aliasAs] = collection;                                                                              // 27108
          }                                                                                                            // 27109
                                                                                                                       // 27110
          if (isArrayLike(collection)) {                                                                               // 27111
            collectionKeys = collection;                                                                               // 27112
            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;                                                          // 27113
          } else {                                                                                                     // 27114
            trackByIdFn = trackByIdExpFn || trackByIdObjFn;                                                            // 27115
            // if object, extract keys, in enumeration order, unsorted                                                 // 27116
            collectionKeys = [];                                                                                       // 27117
            for (var itemKey in collection) {                                                                          // 27118
              if (collection.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {                                   // 27119
                collectionKeys.push(itemKey);                                                                          // 27120
              }                                                                                                        // 27121
            }                                                                                                          // 27122
          }                                                                                                            // 27123
                                                                                                                       // 27124
          collectionLength = collectionKeys.length;                                                                    // 27125
          nextBlockOrder = new Array(collectionLength);                                                                // 27126
                                                                                                                       // 27127
          // locate existing items                                                                                     // 27128
          for (index = 0; index < collectionLength; index++) {                                                         // 27129
            key = (collection === collectionKeys) ? index : collectionKeys[index];                                     // 27130
            value = collection[key];                                                                                   // 27131
            trackById = trackByIdFn(key, value, index);                                                                // 27132
            if (lastBlockMap[trackById]) {                                                                             // 27133
              // found previously seen block                                                                           // 27134
              block = lastBlockMap[trackById];                                                                         // 27135
              delete lastBlockMap[trackById];                                                                          // 27136
              nextBlockMap[trackById] = block;                                                                         // 27137
              nextBlockOrder[index] = block;                                                                           // 27138
            } else if (nextBlockMap[trackById]) {                                                                      // 27139
              // if collision detected. restore lastBlockMap and throw an error                                        // 27140
              forEach(nextBlockOrder, function(block) {                                                                // 27141
                if (block && block.scope) lastBlockMap[block.id] = block;                                              // 27142
              });                                                                                                      // 27143
              throw ngRepeatMinErr('dupes',                                                                            // 27144
                  "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
                  expression, trackById, value);                                                                       // 27146
            } else {                                                                                                   // 27147
              // new never before seen block                                                                           // 27148
              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};                             // 27149
              nextBlockMap[trackById] = true;                                                                          // 27150
            }                                                                                                          // 27151
          }                                                                                                            // 27152
                                                                                                                       // 27153
          // remove leftover items                                                                                     // 27154
          for (var blockKey in lastBlockMap) {                                                                         // 27155
            block = lastBlockMap[blockKey];                                                                            // 27156
            elementsToRemove = getBlockNodes(block.clone);                                                             // 27157
            $animate.leave(elementsToRemove);                                                                          // 27158
            if (elementsToRemove[0].parentNode) {                                                                      // 27159
              // if the element was not removed yet because of pending animation, mark it as deleted                   // 27160
              // so that we can ignore it later                                                                        // 27161
              for (index = 0, length = elementsToRemove.length; index < length; index++) {                             // 27162
                elementsToRemove[index][NG_REMOVED] = true;                                                            // 27163
              }                                                                                                        // 27164
            }                                                                                                          // 27165
            block.scope.$destroy();                                                                                    // 27166
          }                                                                                                            // 27167
                                                                                                                       // 27168
          // we are not using forEach for perf reasons (trying to avoid #call)                                         // 27169
          for (index = 0; index < collectionLength; index++) {                                                         // 27170
            key = (collection === collectionKeys) ? index : collectionKeys[index];                                     // 27171
            value = collection[key];                                                                                   // 27172
            block = nextBlockOrder[index];                                                                             // 27173
                                                                                                                       // 27174
            if (block.scope) {                                                                                         // 27175
              // if we have already seen this object, then we need to reuse the                                        // 27176
              // associated scope/element                                                                              // 27177
                                                                                                                       // 27178
              nextNode = previousNode;                                                                                 // 27179
                                                                                                                       // 27180
              // skip nodes that are already pending removal via leave animation                                       // 27181
              do {                                                                                                     // 27182
                nextNode = nextNode.nextSibling;                                                                       // 27183
              } while (nextNode && nextNode[NG_REMOVED]);                                                              // 27184
                                                                                                                       // 27185
              if (getBlockStart(block) != nextNode) {                                                                  // 27186
                // existing item which got moved                                                                       // 27187
                $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));                                 // 27188
              }                                                                                                        // 27189
              previousNode = getBlockEnd(block);                                                                       // 27190
              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);           // 27191
            } else {                                                                                                   // 27192
              // new item which we don't know about                                                                    // 27193
              $transclude(function ngRepeatTransclude(clone, scope) {                                                  // 27194
                block.scope = scope;                                                                                   // 27195
                // http://jsperf.com/clone-vs-createcomment                                                            // 27196
                var endNode = ngRepeatEndComment.cloneNode(false);                                                     // 27197
                clone[clone.length++] = endNode;                                                                       // 27198
                                                                                                                       // 27199
                // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?              // 27200
                $animate.enter(clone, null, jqLite(previousNode));                                                     // 27201
                previousNode = endNode;                                                                                // 27202
                // Note: We only need the first/last node of the cloned nodes.                                         // 27203
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later           // 27204
                // by a directive with templateUrl when its template arrives.                                          // 27205
                block.clone = clone;                                                                                   // 27206
                nextBlockMap[block.id] = block;                                                                        // 27207
                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);         // 27208
              });                                                                                                      // 27209
            }                                                                                                          // 27210
          }                                                                                                            // 27211
          lastBlockMap = nextBlockMap;                                                                                 // 27212
        });                                                                                                            // 27213
      };                                                                                                               // 27214
    }                                                                                                                  // 27215
  };                                                                                                                   // 27216
}];                                                                                                                    // 27217
                                                                                                                       // 27218
var NG_HIDE_CLASS = 'ng-hide';                                                                                         // 27219
var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';                                                                     // 27220
/**                                                                                                                    // 27221
 * @ngdoc directive                                                                                                    // 27222
 * @name ngShow                                                                                                        // 27223
 * @multiElement                                                                                                       // 27224
 *                                                                                                                     // 27225
 * @description                                                                                                        // 27226
 * The `ngShow` directive shows or hides the given HTML element based on the expression                                // 27227
 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding                            // 27228
 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined                                   // 27229
 * in AngularJS and sets the display style to none (using an !important flag).                                         // 27230
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 27231
 *                                                                                                                     // 27232
 * ```html                                                                                                             // 27233
 * <!-- when $scope.myValue is truthy (element is visible) -->                                                         // 27234
 * <div ng-show="myValue"></div>                                                                                       // 27235
 *                                                                                                                     // 27236
 * <!-- when $scope.myValue is falsy (element is hidden) -->                                                           // 27237
 * <div ng-show="myValue" class="ng-hide"></div>                                                                       // 27238
 * ```                                                                                                                 // 27239
 *                                                                                                                     // 27240
 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class         // 27241
 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed              // 27242
 * from the element causing the element not to appear hidden.                                                          // 27243
 *                                                                                                                     // 27244
 * ## Why is !important used?                                                                                          // 27245
 *                                                                                                                     // 27246
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector   // 27247
 * can be easily overridden by heavier selectors. For example, something as simple                                     // 27248
 * as changing the display style on a HTML list item would make hidden elements appear visible.                        // 27249
 * This also becomes a bigger issue when dealing with CSS frameworks.                                                  // 27250
 *                                                                                                                     // 27251
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector        // 27252
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the        // 27253
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.        // 27254
 *                                                                                                                     // 27255
 * ### Overriding `.ng-hide`                                                                                           // 27256
 *                                                                                                                     // 27257
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change       // 27258
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`           // 27259
 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope        // 27260
 * with extra animation classes that can be added.                                                                     // 27261
 *                                                                                                                     // 27262
 * ```css                                                                                                              // 27263
 * .ng-hide:not(.ng-hide-animate) {                                                                                    // 27264
 *   /&#42; this is just another form of hiding an element &#42;/                                                      // 27265
 *   display: block!important;                                                                                         // 27266
 *   position: absolute;                                                                                               // 27267
 *   top: -9999px;                                                                                                     // 27268
 *   left: -9999px;                                                                                                    // 27269
 * }                                                                                                                   // 27270
 * ```                                                                                                                 // 27271
 *                                                                                                                     // 27272
 * By default you don't need to override in CSS anything and the animations will work around the display style.        // 27273
 *                                                                                                                     // 27274
 * ## A note about animations with `ngShow`                                                                            // 27275
 *                                                                                                                     // 27276
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression     // 27277
 * is true and false. This system works like the animation system present with ngClass except that                     // 27278
 * you must also include the !important flag to override the display property                                          // 27279
 * so that you can perform an animation when the element is hidden during the time of the animation.                   // 27280
 *                                                                                                                     // 27281
 * ```css                                                                                                              // 27282
 * //                                                                                                                  // 27283
 * //a working example can be found at the bottom of this page                                                         // 27284
 * //                                                                                                                  // 27285
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {                                                               // 27286
 *   /&#42; this is required as of 1.3x to properly                                                                    // 27287
 *      apply all styling in a show/hide animation &#42;/                                                              // 27288
 *   transition: 0s linear all;                                                                                        // 27289
 * }                                                                                                                   // 27290
 *                                                                                                                     // 27291
 * .my-element.ng-hide-add-active,                                                                                     // 27292
 * .my-element.ng-hide-remove-active {                                                                                 // 27293
 *   /&#42; the transition is defined in the active class &#42;/                                                       // 27294
 *   transition: 1s linear all;                                                                                        // 27295
 * }                                                                                                                   // 27296
 *                                                                                                                     // 27297
 * .my-element.ng-hide-add { ... }                                                                                     // 27298
 * .my-element.ng-hide-add.ng-hide-add-active { ... }                                                                  // 27299
 * .my-element.ng-hide-remove { ... }                                                                                  // 27300
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }                                                            // 27301
 * ```                                                                                                                 // 27302
 *                                                                                                                     // 27303
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display                    // 27304
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.          // 27305
 *                                                                                                                     // 27306
 * @animations                                                                                                         // 27307
 * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
 * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
 *                                                                                                                     // 27310
 * @element ANY                                                                                                        // 27311
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy                                     // 27312
 *     then the element is shown or hidden respectively.                                                               // 27313
 *                                                                                                                     // 27314
 * @example                                                                                                            // 27315
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 27316
    <file name="index.html">                                                                                           // 27317
      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>                             // 27318
      <div>                                                                                                            // 27319
        Show:                                                                                                          // 27320
        <div class="check-element animate-show" ng-show="checked">                                                     // 27321
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.                 // 27322
        </div>                                                                                                         // 27323
      </div>                                                                                                           // 27324
      <div>                                                                                                            // 27325
        Hide:                                                                                                          // 27326
        <div class="check-element animate-show" ng-hide="checked">                                                     // 27327
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.                  // 27328
        </div>                                                                                                         // 27329
      </div>                                                                                                           // 27330
    </file>                                                                                                            // 27331
    <file name="glyphicons.css">                                                                                       // 27332
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);                                                 // 27333
    </file>                                                                                                            // 27334
    <file name="animations.css">                                                                                       // 27335
      .animate-show {                                                                                                  // 27336
        line-height: 20px;                                                                                             // 27337
        opacity: 1;                                                                                                    // 27338
        padding: 10px;                                                                                                 // 27339
        border: 1px solid black;                                                                                       // 27340
        background: white;                                                                                             // 27341
      }                                                                                                                // 27342
                                                                                                                       // 27343
      .animate-show.ng-hide-add.ng-hide-add-active,                                                                    // 27344
      .animate-show.ng-hide-remove.ng-hide-remove-active {                                                             // 27345
        -webkit-transition: all linear 0.5s;                                                                           // 27346
        transition: all linear 0.5s;                                                                                   // 27347
      }                                                                                                                // 27348
                                                                                                                       // 27349
      .animate-show.ng-hide {                                                                                          // 27350
        line-height: 0;                                                                                                // 27351
        opacity: 0;                                                                                                    // 27352
        padding: 0 10px;                                                                                               // 27353
      }                                                                                                                // 27354
                                                                                                                       // 27355
      .check-element {                                                                                                 // 27356
        padding: 10px;                                                                                                 // 27357
        border: 1px solid black;                                                                                       // 27358
        background: white;                                                                                             // 27359
      }                                                                                                                // 27360
    </file>                                                                                                            // 27361
    <file name="protractor.js" type="protractor">                                                                      // 27362
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));                                                      // 27363
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));                                                  // 27364
                                                                                                                       // 27365
      it('should check ng-show / ng-hide', function() {                                                                // 27366
        expect(thumbsUp.isDisplayed()).toBeFalsy();                                                                    // 27367
        expect(thumbsDown.isDisplayed()).toBeTruthy();                                                                 // 27368
                                                                                                                       // 27369
        element(by.model('checked')).click();                                                                          // 27370
                                                                                                                       // 27371
        expect(thumbsUp.isDisplayed()).toBeTruthy();                                                                   // 27372
        expect(thumbsDown.isDisplayed()).toBeFalsy();                                                                  // 27373
      });                                                                                                              // 27374
    </file>                                                                                                            // 27375
  </example>                                                                                                           // 27376
 */                                                                                                                    // 27377
var ngShowDirective = ['$animate', function($animate) {                                                                // 27378
  return {                                                                                                             // 27379
    restrict: 'A',                                                                                                     // 27380
    multiElement: true,                                                                                                // 27381
    link: function(scope, element, attr) {                                                                             // 27382
      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {                                                    // 27383
        // we're adding a temporary, animation-specific class for ng-hide since this way                               // 27384
        // we can control when the element is actually displayed on screen without having                              // 27385
        // to have a global/greedy CSS selector that breaks when other animations are run.                             // 27386
        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845                               // 27387
        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {                                         // 27388
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS                                                                       // 27389
        });                                                                                                            // 27390
      });                                                                                                              // 27391
    }                                                                                                                  // 27392
  };                                                                                                                   // 27393
}];                                                                                                                    // 27394
                                                                                                                       // 27395
                                                                                                                       // 27396
/**                                                                                                                    // 27397
 * @ngdoc directive                                                                                                    // 27398
 * @name ngHide                                                                                                        // 27399
 * @multiElement                                                                                                       // 27400
 *                                                                                                                     // 27401
 * @description                                                                                                        // 27402
 * The `ngHide` directive shows or hides the given HTML element based on the expression                                // 27403
 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding                            // 27404
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined                                    // 27405
 * in AngularJS and sets the display style to none (using an !important flag).                                         // 27406
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 27407
 *                                                                                                                     // 27408
 * ```html                                                                                                             // 27409
 * <!-- when $scope.myValue is truthy (element is hidden) -->                                                          // 27410
 * <div ng-hide="myValue" class="ng-hide"></div>                                                                       // 27411
 *                                                                                                                     // 27412
 * <!-- when $scope.myValue is falsy (element is visible) -->                                                          // 27413
 * <div ng-hide="myValue"></div>                                                                                       // 27414
 * ```                                                                                                                 // 27415
 *                                                                                                                     // 27416
 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class        // 27417
 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed               // 27418
 * from the element causing the element not to appear hidden.                                                          // 27419
 *                                                                                                                     // 27420
 * ## Why is !important used?                                                                                          // 27421
 *                                                                                                                     // 27422
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector   // 27423
 * can be easily overridden by heavier selectors. For example, something as simple                                     // 27424
 * as changing the display style on a HTML list item would make hidden elements appear visible.                        // 27425
 * This also becomes a bigger issue when dealing with CSS frameworks.                                                  // 27426
 *                                                                                                                     // 27427
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector        // 27428
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the        // 27429
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.        // 27430
 *                                                                                                                     // 27431
 * ### Overriding `.ng-hide`                                                                                           // 27432
 *                                                                                                                     // 27433
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change       // 27434
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`           // 27435
 * class in CSS:                                                                                                       // 27436
 *                                                                                                                     // 27437
 * ```css                                                                                                              // 27438
 * .ng-hide {                                                                                                          // 27439
 *   /&#42; this is just another form of hiding an element &#42;/                                                      // 27440
 *   display: block!important;                                                                                         // 27441
 *   position: absolute;                                                                                               // 27442
 *   top: -9999px;                                                                                                     // 27443
 *   left: -9999px;                                                                                                    // 27444
 * }                                                                                                                   // 27445
 * ```                                                                                                                 // 27446
 *                                                                                                                     // 27447
 * By default you don't need to override in CSS anything and the animations will work around the display style.        // 27448
 *                                                                                                                     // 27449
 * ## A note about animations with `ngHide`                                                                            // 27450
 *                                                                                                                     // 27451
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression     // 27452
 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`     // 27453
 * CSS class is added and removed for you instead of your own CSS class.                                               // 27454
 *                                                                                                                     // 27455
 * ```css                                                                                                              // 27456
 * //                                                                                                                  // 27457
 * //a working example can be found at the bottom of this page                                                         // 27458
 * //                                                                                                                  // 27459
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {                                                               // 27460
 *   transition: 0.5s linear all;                                                                                      // 27461
 * }                                                                                                                   // 27462
 *                                                                                                                     // 27463
 * .my-element.ng-hide-add { ... }                                                                                     // 27464
 * .my-element.ng-hide-add.ng-hide-add-active { ... }                                                                  // 27465
 * .my-element.ng-hide-remove { ... }                                                                                  // 27466
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }                                                            // 27467
 * ```                                                                                                                 // 27468
 *                                                                                                                     // 27469
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display                    // 27470
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.          // 27471
 *                                                                                                                     // 27472
 * @animations                                                                                                         // 27473
 * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
 * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
 *                                                                                                                     // 27476
 * @element ANY                                                                                                        // 27477
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then                                // 27478
 *     the element is shown or hidden respectively.                                                                    // 27479
 *                                                                                                                     // 27480
 * @example                                                                                                            // 27481
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 27482
    <file name="index.html">                                                                                           // 27483
      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>                             // 27484
      <div>                                                                                                            // 27485
        Show:                                                                                                          // 27486
        <div class="check-element animate-hide" ng-show="checked">                                                     // 27487
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.                 // 27488
        </div>                                                                                                         // 27489
      </div>                                                                                                           // 27490
      <div>                                                                                                            // 27491
        Hide:                                                                                                          // 27492
        <div class="check-element animate-hide" ng-hide="checked">                                                     // 27493
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.                  // 27494
        </div>                                                                                                         // 27495
      </div>                                                                                                           // 27496
    </file>                                                                                                            // 27497
    <file name="glyphicons.css">                                                                                       // 27498
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);                                                 // 27499
    </file>                                                                                                            // 27500
    <file name="animations.css">                                                                                       // 27501
      .animate-hide {                                                                                                  // 27502
        -webkit-transition: all linear 0.5s;                                                                           // 27503
        transition: all linear 0.5s;                                                                                   // 27504
        line-height: 20px;                                                                                             // 27505
        opacity: 1;                                                                                                    // 27506
        padding: 10px;                                                                                                 // 27507
        border: 1px solid black;                                                                                       // 27508
        background: white;                                                                                             // 27509
      }                                                                                                                // 27510
                                                                                                                       // 27511
      .animate-hide.ng-hide {                                                                                          // 27512
        line-height: 0;                                                                                                // 27513
        opacity: 0;                                                                                                    // 27514
        padding: 0 10px;                                                                                               // 27515
      }                                                                                                                // 27516
                                                                                                                       // 27517
      .check-element {                                                                                                 // 27518
        padding: 10px;                                                                                                 // 27519
        border: 1px solid black;                                                                                       // 27520
        background: white;                                                                                             // 27521
      }                                                                                                                // 27522
    </file>                                                                                                            // 27523
    <file name="protractor.js" type="protractor">                                                                      // 27524
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));                                                      // 27525
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));                                                  // 27526
                                                                                                                       // 27527
      it('should check ng-show / ng-hide', function() {                                                                // 27528
        expect(thumbsUp.isDisplayed()).toBeFalsy();                                                                    // 27529
        expect(thumbsDown.isDisplayed()).toBeTruthy();                                                                 // 27530
                                                                                                                       // 27531
        element(by.model('checked')).click();                                                                          // 27532
                                                                                                                       // 27533
        expect(thumbsUp.isDisplayed()).toBeTruthy();                                                                   // 27534
        expect(thumbsDown.isDisplayed()).toBeFalsy();                                                                  // 27535
      });                                                                                                              // 27536
    </file>                                                                                                            // 27537
  </example>                                                                                                           // 27538
 */                                                                                                                    // 27539
var ngHideDirective = ['$animate', function($animate) {                                                                // 27540
  return {                                                                                                             // 27541
    restrict: 'A',                                                                                                     // 27542
    multiElement: true,                                                                                                // 27543
    link: function(scope, element, attr) {                                                                             // 27544
      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {                                                    // 27545
        // The comment inside of the ngShowDirective explains why we add and                                           // 27546
        // remove a temporary class for the show/hide animation                                                        // 27547
        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {                                          // 27548
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS                                                                       // 27549
        });                                                                                                            // 27550
      });                                                                                                              // 27551
    }                                                                                                                  // 27552
  };                                                                                                                   // 27553
}];                                                                                                                    // 27554
                                                                                                                       // 27555
/**                                                                                                                    // 27556
 * @ngdoc directive                                                                                                    // 27557
 * @name ngStyle                                                                                                       // 27558
 * @restrict AC                                                                                                        // 27559
 *                                                                                                                     // 27560
 * @description                                                                                                        // 27561
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.                               // 27562
 *                                                                                                                     // 27563
 * @element ANY                                                                                                        // 27564
 * @param {expression} ngStyle                                                                                         // 27565
 *                                                                                                                     // 27566
 * {@link guide/expression Expression} which evals to an                                                               // 27567
 * object whose keys are CSS style names and values are corresponding values for those CSS                             // 27568
 * keys.                                                                                                               // 27569
 *                                                                                                                     // 27570
 * Since some CSS style names are not valid keys for an object, they must be quoted.                                   // 27571
 * See the 'background-color' style in the example below.                                                              // 27572
 *                                                                                                                     // 27573
 * @example                                                                                                            // 27574
   <example>                                                                                                           // 27575
     <file name="index.html">                                                                                          // 27576
        <input type="button" value="set color" ng-click="myStyle={color:'red'}">                                       // 27577
        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">                    // 27578
        <input type="button" value="clear" ng-click="myStyle={}">                                                      // 27579
        <br/>                                                                                                          // 27580
        <span ng-style="myStyle">Sample Text</span>                                                                    // 27581
        <pre>myStyle={{myStyle}}</pre>                                                                                 // 27582
     </file>                                                                                                           // 27583
     <file name="style.css">                                                                                           // 27584
       span {                                                                                                          // 27585
         color: black;                                                                                                 // 27586
       }                                                                                                               // 27587
     </file>                                                                                                           // 27588
     <file name="protractor.js" type="protractor">                                                                     // 27589
       var colorSpan = element(by.css('span'));                                                                        // 27590
                                                                                                                       // 27591
       it('should check ng-style', function() {                                                                        // 27592
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');                                              // 27593
         element(by.css('input[value=\'set color\']')).click();                                                        // 27594
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');                                            // 27595
         element(by.css('input[value=clear]')).click();                                                                // 27596
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');                                              // 27597
       });                                                                                                             // 27598
     </file>                                                                                                           // 27599
   </example>                                                                                                          // 27600
 */                                                                                                                    // 27601
var ngStyleDirective = ngDirective(function(scope, element, attr) {                                                    // 27602
  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {                                       // 27603
    if (oldStyles && (newStyles !== oldStyles)) {                                                                      // 27604
      forEach(oldStyles, function(val, style) { element.css(style, '');});                                             // 27605
    }                                                                                                                  // 27606
    if (newStyles) element.css(newStyles);                                                                             // 27607
  }, true);                                                                                                            // 27608
});                                                                                                                    // 27609
                                                                                                                       // 27610
/**                                                                                                                    // 27611
 * @ngdoc directive                                                                                                    // 27612
 * @name ngSwitch                                                                                                      // 27613
 * @restrict EA                                                                                                        // 27614
 *                                                                                                                     // 27615
 * @description                                                                                                        // 27616
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.  // 27617
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.                                                                                       // 27619
 *                                                                                                                     // 27620
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it       // 27621
 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element            // 27623
 * (where you place the directive), place an expression on the **`on="..."` attribute**                                // 27624
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place               // 27625
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on    // 27626
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.                                                                                             // 27628
 *                                                                                                                     // 27629
 * <div class="alert alert-info">                                                                                      // 27630
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted                     // 27631
 * as literal string values to match against.                                                                          // 27632
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the               // 27633
 * value of the expression `$scope.someVal`.                                                                           // 27634
 * </div>                                                                                                              // 27635
                                                                                                                       // 27636
 * @animations                                                                                                         // 27637
 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container     // 27638
 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
 *                                                                                                                     // 27640
 * @usage                                                                                                              // 27641
 *                                                                                                                     // 27642
 * ```                                                                                                                 // 27643
 * <ANY ng-switch="expression">                                                                                        // 27644
 *   <ANY ng-switch-when="matchValue1">...</ANY>                                                                       // 27645
 *   <ANY ng-switch-when="matchValue2">...</ANY>                                                                       // 27646
 *   <ANY ng-switch-default>...</ANY>                                                                                  // 27647
 * </ANY>                                                                                                              // 27648
 * ```                                                                                                                 // 27649
 *                                                                                                                     // 27650
 *                                                                                                                     // 27651
 * @scope                                                                                                              // 27652
 * @priority 1200                                                                                                      // 27653
 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.                                     // 27654
 * On child elements add:                                                                                              // 27655
 *                                                                                                                     // 27656
 * * `ngSwitchWhen`: the case statement to match against. If match then this                                           // 27657
 *   case will be displayed. If the same match appears multiple times, all the                                         // 27658
 *   elements will be displayed.                                                                                       // 27659
 * * `ngSwitchDefault`: the default case when no other case match. If there                                            // 27660
 *   are multiple default cases, all of them will be displayed when no other                                           // 27661
 *   case match.                                                                                                       // 27662
 *                                                                                                                     // 27663
 *                                                                                                                     // 27664
 * @example                                                                                                            // 27665
  <example module="switchExample" deps="angular-animate.js" animations="true">                                         // 27666
    <file name="index.html">                                                                                           // 27667
      <div ng-controller="ExampleController">                                                                          // 27668
        <select ng-model="selection" ng-options="item for item in items">                                              // 27669
        </select>                                                                                                      // 27670
        <code>selection={{selection}}</code>                                                                           // 27671
        <hr/>                                                                                                          // 27672
        <div class="animate-switch-container"                                                                          // 27673
          ng-switch on="selection">                                                                                    // 27674
            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>                                   // 27675
            <div class="animate-switch" ng-switch-when="home">Home Span</div>                                          // 27676
            <div class="animate-switch" ng-switch-default>default</div>                                                // 27677
        </div>                                                                                                         // 27678
      </div>                                                                                                           // 27679
    </file>                                                                                                            // 27680
    <file name="script.js">                                                                                            // 27681
      angular.module('switchExample', ['ngAnimate'])                                                                   // 27682
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 27683
          $scope.items = ['settings', 'home', 'other'];                                                                // 27684
          $scope.selection = $scope.items[0];                                                                          // 27685
        }]);                                                                                                           // 27686
    </file>                                                                                                            // 27687
    <file name="animations.css">                                                                                       // 27688
      .animate-switch-container {                                                                                      // 27689
        position:relative;                                                                                             // 27690
        background:white;                                                                                              // 27691
        border:1px solid black;                                                                                        // 27692
        height:40px;                                                                                                   // 27693
        overflow:hidden;                                                                                               // 27694
      }                                                                                                                // 27695
                                                                                                                       // 27696
      .animate-switch {                                                                                                // 27697
        padding:10px;                                                                                                  // 27698
      }                                                                                                                // 27699
                                                                                                                       // 27700
      .animate-switch.ng-animate {                                                                                     // 27701
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                          // 27702
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 27703
                                                                                                                       // 27704
        position:absolute;                                                                                             // 27705
        top:0;                                                                                                         // 27706
        left:0;                                                                                                        // 27707
        right:0;                                                                                                       // 27708
        bottom:0;                                                                                                      // 27709
      }                                                                                                                // 27710
                                                                                                                       // 27711
      .animate-switch.ng-leave.ng-leave-active,                                                                        // 27712
      .animate-switch.ng-enter {                                                                                       // 27713
        top:-50px;                                                                                                     // 27714
      }                                                                                                                // 27715
      .animate-switch.ng-leave,                                                                                        // 27716
      .animate-switch.ng-enter.ng-enter-active {                                                                       // 27717
        top:0;                                                                                                         // 27718
      }                                                                                                                // 27719
    </file>                                                                                                            // 27720
    <file name="protractor.js" type="protractor">                                                                      // 27721
      var switchElem = element(by.css('[ng-switch]'));                                                                 // 27722
      var select = element(by.model('selection'));                                                                     // 27723
                                                                                                                       // 27724
      it('should start in settings', function() {                                                                      // 27725
        expect(switchElem.getText()).toMatch(/Settings Div/);                                                          // 27726
      });                                                                                                              // 27727
      it('should change to home', function() {                                                                         // 27728
        select.all(by.css('option')).get(1).click();                                                                   // 27729
        expect(switchElem.getText()).toMatch(/Home Span/);                                                             // 27730
      });                                                                                                              // 27731
      it('should select default', function() {                                                                         // 27732
        select.all(by.css('option')).get(2).click();                                                                   // 27733
        expect(switchElem.getText()).toMatch(/default/);                                                               // 27734
      });                                                                                                              // 27735
    </file>                                                                                                            // 27736
  </example>                                                                                                           // 27737
 */                                                                                                                    // 27738
var ngSwitchDirective = ['$animate', function($animate) {                                                              // 27739
  return {                                                                                                             // 27740
    require: 'ngSwitch',                                                                                               // 27741
                                                                                                                       // 27742
    // asks for $scope to fool the BC controller module                                                                // 27743
    controller: ['$scope', function ngSwitchController() {                                                             // 27744
     this.cases = {};                                                                                                  // 27745
    }],                                                                                                                // 27746
    link: function(scope, element, attr, ngSwitchController) {                                                         // 27747
      var watchExpr = attr.ngSwitch || attr.on,                                                                        // 27748
          selectedTranscludes = [],                                                                                    // 27749
          selectedElements = [],                                                                                       // 27750
          previousLeaveAnimations = [],                                                                                // 27751
          selectedScopes = [];                                                                                         // 27752
                                                                                                                       // 27753
      var spliceFactory = function(array, index) {                                                                     // 27754
          return function() { array.splice(index, 1); };                                                               // 27755
      };                                                                                                               // 27756
                                                                                                                       // 27757
      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {                                                    // 27758
        var i, ii;                                                                                                     // 27759
        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {                                                // 27760
          $animate.cancel(previousLeaveAnimations[i]);                                                                 // 27761
        }                                                                                                              // 27762
        previousLeaveAnimations.length = 0;                                                                            // 27763
                                                                                                                       // 27764
        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {                                                         // 27765
          var selected = getBlockNodes(selectedElements[i].clone);                                                     // 27766
          selectedScopes[i].$destroy();                                                                                // 27767
          var promise = previousLeaveAnimations[i] = $animate.leave(selected);                                         // 27768
          promise.then(spliceFactory(previousLeaveAnimations, i));                                                     // 27769
        }                                                                                                              // 27770
                                                                                                                       // 27771
        selectedElements.length = 0;                                                                                   // 27772
        selectedScopes.length = 0;                                                                                     // 27773
                                                                                                                       // 27774
        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {          // 27775
          forEach(selectedTranscludes, function(selectedTransclude) {                                                  // 27776
            selectedTransclude.transclude(function(caseElement, selectedScope) {                                       // 27777
              selectedScopes.push(selectedScope);                                                                      // 27778
              var anchor = selectedTransclude.element;                                                                 // 27779
              caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');                       // 27780
              var block = { clone: caseElement };                                                                      // 27781
                                                                                                                       // 27782
              selectedElements.push(block);                                                                            // 27783
              $animate.enter(caseElement, anchor.parent(), anchor);                                                    // 27784
            });                                                                                                        // 27785
          });                                                                                                          // 27786
        }                                                                                                              // 27787
      });                                                                                                              // 27788
    }                                                                                                                  // 27789
  };                                                                                                                   // 27790
}];                                                                                                                    // 27791
                                                                                                                       // 27792
var ngSwitchWhenDirective = ngDirective({                                                                              // 27793
  transclude: 'element',                                                                                               // 27794
  priority: 1200,                                                                                                      // 27795
  require: '^ngSwitch',                                                                                                // 27796
  multiElement: true,                                                                                                  // 27797
  link: function(scope, element, attrs, ctrl, $transclude) {                                                           // 27798
    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);                               // 27799
    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });                          // 27800
  }                                                                                                                    // 27801
});                                                                                                                    // 27802
                                                                                                                       // 27803
var ngSwitchDefaultDirective = ngDirective({                                                                           // 27804
  transclude: 'element',                                                                                               // 27805
  priority: 1200,                                                                                                      // 27806
  require: '^ngSwitch',                                                                                                // 27807
  multiElement: true,                                                                                                  // 27808
  link: function(scope, element, attr, ctrl, $transclude) {                                                            // 27809
    ctrl.cases['?'] = (ctrl.cases['?'] || []);                                                                         // 27810
    ctrl.cases['?'].push({ transclude: $transclude, element: element });                                               // 27811
   }                                                                                                                   // 27812
});                                                                                                                    // 27813
                                                                                                                       // 27814
/**                                                                                                                    // 27815
 * @ngdoc directive                                                                                                    // 27816
 * @name ngTransclude                                                                                                  // 27817
 * @restrict EAC                                                                                                       // 27818
 *                                                                                                                     // 27819
 * @description                                                                                                        // 27820
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *                                                                                                                     // 27822
 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
 *                                                                                                                     // 27824
 * @element ANY                                                                                                        // 27825
 *                                                                                                                     // 27826
 * @example                                                                                                            // 27827
   <example module="transcludeExample">                                                                                // 27828
     <file name="index.html">                                                                                          // 27829
       <script>                                                                                                        // 27830
         angular.module('transcludeExample', [])                                                                       // 27831
          .directive('pane', function(){                                                                               // 27832
             return {                                                                                                  // 27833
               restrict: 'E',                                                                                          // 27834
               transclude: true,                                                                                       // 27835
               scope: { title:'@' },                                                                                   // 27836
               template: '<div style="border: 1px solid black;">' +                                                    // 27837
                           '<div style="background-color: gray">{{title}}</div>' +                                     // 27838
                           '<ng-transclude></ng-transclude>' +                                                         // 27839
                         '</div>'                                                                                      // 27840
             };                                                                                                        // 27841
         })                                                                                                            // 27842
         .controller('ExampleController', ['$scope', function($scope) {                                                // 27843
           $scope.title = 'Lorem Ipsum';                                                                               // 27844
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';                                   // 27845
         }]);                                                                                                          // 27846
       </script>                                                                                                       // 27847
       <div ng-controller="ExampleController">                                                                         // 27848
         <input ng-model="title" aria-label="title"> <br/>                                                             // 27849
         <textarea ng-model="text" aria-label="text"></textarea> <br/>                                                 // 27850
         <pane title="{{title}}">{{text}}</pane>                                                                       // 27851
       </div>                                                                                                          // 27852
     </file>                                                                                                           // 27853
     <file name="protractor.js" type="protractor">                                                                     // 27854
        it('should have transcluded', function() {                                                                     // 27855
          var titleElement = element(by.model('title'));                                                               // 27856
          titleElement.clear();                                                                                        // 27857
          titleElement.sendKeys('TITLE');                                                                              // 27858
          var textElement = element(by.model('text'));                                                                 // 27859
          textElement.clear();                                                                                         // 27860
          textElement.sendKeys('TEXT');                                                                                // 27861
          expect(element(by.binding('title')).getText()).toEqual('TITLE');                                             // 27862
          expect(element(by.binding('text')).getText()).toEqual('TEXT');                                               // 27863
        });                                                                                                            // 27864
     </file>                                                                                                           // 27865
   </example>                                                                                                          // 27866
 *                                                                                                                     // 27867
 */                                                                                                                    // 27868
var ngTranscludeDirective = ngDirective({                                                                              // 27869
  restrict: 'EAC',                                                                                                     // 27870
  link: function($scope, $element, $attrs, controller, $transclude) {                                                  // 27871
    if (!$transclude) {                                                                                                // 27872
      throw minErr('ngTransclude')('orphan',                                                                           // 27873
       'Illegal use of ngTransclude directive in the template! ' +                                                     // 27874
       'No parent directive that requires a transclusion found. ' +                                                    // 27875
       'Element: {0}',                                                                                                 // 27876
       startingTag($element));                                                                                         // 27877
    }                                                                                                                  // 27878
                                                                                                                       // 27879
    $transclude(function(clone) {                                                                                      // 27880
      $element.empty();                                                                                                // 27881
      $element.append(clone);                                                                                          // 27882
    });                                                                                                                // 27883
  }                                                                                                                    // 27884
});                                                                                                                    // 27885
                                                                                                                       // 27886
/**                                                                                                                    // 27887
 * @ngdoc directive                                                                                                    // 27888
 * @name script                                                                                                        // 27889
 * @restrict E                                                                                                         // 27890
 *                                                                                                                     // 27891
 * @description                                                                                                        // 27892
 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the               // 27893
 * template can be used by {@link ng.directive:ngInclude `ngInclude`},                                                 // 27894
 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the                   // 27895
 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be               // 27896
 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.                         // 27897
 *                                                                                                                     // 27898
 * @param {string} type Must be set to `'text/ng-template'`.                                                           // 27899
 * @param {string} id Cache name of the template.                                                                      // 27900
 *                                                                                                                     // 27901
 * @example                                                                                                            // 27902
  <example>                                                                                                            // 27903
    <file name="index.html">                                                                                           // 27904
      <script type="text/ng-template" id="/tpl.html">                                                                  // 27905
        Content of the template.                                                                                       // 27906
      </script>                                                                                                        // 27907
                                                                                                                       // 27908
      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>                                     // 27909
      <div id="tpl-content" ng-include src="currentTpl"></div>                                                         // 27910
    </file>                                                                                                            // 27911
    <file name="protractor.js" type="protractor">                                                                      // 27912
      it('should load template defined inside script tag', function() {                                                // 27913
        element(by.css('#tpl-link')).click();                                                                          // 27914
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);                          // 27915
      });                                                                                                              // 27916
    </file>                                                                                                            // 27917
  </example>                                                                                                           // 27918
 */                                                                                                                    // 27919
var scriptDirective = ['$templateCache', function($templateCache) {                                                    // 27920
  return {                                                                                                             // 27921
    restrict: 'E',                                                                                                     // 27922
    terminal: true,                                                                                                    // 27923
    compile: function(element, attr) {                                                                                 // 27924
      if (attr.type == 'text/ng-template') {                                                                           // 27925
        var templateUrl = attr.id,                                                                                     // 27926
            text = element[0].text;                                                                                    // 27927
                                                                                                                       // 27928
        $templateCache.put(templateUrl, text);                                                                         // 27929
      }                                                                                                                // 27930
    }                                                                                                                  // 27931
  };                                                                                                                   // 27932
}];                                                                                                                    // 27933
                                                                                                                       // 27934
var noopNgModelController = { $setViewValue: noop, $render: noop };                                                    // 27935
                                                                                                                       // 27936
/**                                                                                                                    // 27937
 * @ngdoc type                                                                                                         // 27938
 * @name  select.SelectController                                                                                      // 27939
 * @description                                                                                                        // 27940
 * The controller for the `<select>` directive. This provides support for reading                                      // 27941
 * and writing the selected value(s) of the control and also coordinates dynamically                                   // 27942
 * added `<option>` elements, perhaps by an `ngRepeat` directive.                                                      // 27943
 */                                                                                                                    // 27944
var SelectController =                                                                                                 // 27945
        ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {                                          // 27946
                                                                                                                       // 27947
  var self = this,                                                                                                     // 27948
      optionsMap = new HashMap();                                                                                      // 27949
                                                                                                                       // 27950
  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors                           // 27951
  self.ngModelCtrl = noopNgModelController;                                                                            // 27952
                                                                                                                       // 27953
  // The "unknown" option is one that is prepended to the list if the viewValue                                        // 27954
  // does not match any of the options. When it is rendered the value of the unknown                                   // 27955
  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.                                      // 27956
  //                                                                                                                   // 27957
  // We can't just jqLite('<option>') since jqLite is not smart enough                                                 // 27958
  // to create it in <select> and IE barfs otherwise.                                                                  // 27959
  self.unknownOption = jqLite(document.createElement('option'));                                                       // 27960
  self.renderUnknownOption = function(val) {                                                                           // 27961
    var unknownVal = '? ' + hashKey(val) + ' ?';                                                                       // 27962
    self.unknownOption.val(unknownVal);                                                                                // 27963
    $element.prepend(self.unknownOption);                                                                              // 27964
    $element.val(unknownVal);                                                                                          // 27965
  };                                                                                                                   // 27966
                                                                                                                       // 27967
  $scope.$on('$destroy', function() {                                                                                  // 27968
    // disable unknown option so that we don't do work when the whole select is being destroyed                        // 27969
    self.renderUnknownOption = noop;                                                                                   // 27970
  });                                                                                                                  // 27971
                                                                                                                       // 27972
  self.removeUnknownOption = function() {                                                                              // 27973
    if (self.unknownOption.parent()) self.unknownOption.remove();                                                      // 27974
  };                                                                                                                   // 27975
                                                                                                                       // 27976
                                                                                                                       // 27977
  // Read the value of the select control, the implementation of this changes depending                                // 27978
  // upon whether the select can have multiple values and whether ngOptions is at work.                                // 27979
  self.readValue = function readSingleValue() {                                                                        // 27980
    self.removeUnknownOption();                                                                                        // 27981
    return $element.val();                                                                                             // 27982
  };                                                                                                                   // 27983
                                                                                                                       // 27984
                                                                                                                       // 27985
  // Write the value to the select control, the implementation of this changes depending                               // 27986
  // upon whether the select can have multiple values and whether ngOptions is at work.                                // 27987
  self.writeValue = function writeSingleValue(value) {                                                                 // 27988
    if (self.hasOption(value)) {                                                                                       // 27989
      self.removeUnknownOption();                                                                                      // 27990
      $element.val(value);                                                                                             // 27991
      if (value === '') self.emptyOption.prop('selected', true); // to make IE9 happy                                  // 27992
    } else {                                                                                                           // 27993
      if (value == null && self.emptyOption) {                                                                         // 27994
        self.removeUnknownOption();                                                                                    // 27995
        $element.val('');                                                                                              // 27996
      } else {                                                                                                         // 27997
        self.renderUnknownOption(value);                                                                               // 27998
      }                                                                                                                // 27999
    }                                                                                                                  // 28000
  };                                                                                                                   // 28001
                                                                                                                       // 28002
                                                                                                                       // 28003
  // Tell the select control that an option, with the given value, has been added                                      // 28004
  self.addOption = function(value, element) {                                                                          // 28005
    assertNotHasOwnProperty(value, '"option value"');                                                                  // 28006
    if (value === '') {                                                                                                // 28007
      self.emptyOption = element;                                                                                      // 28008
    }                                                                                                                  // 28009
    var count = optionsMap.get(value) || 0;                                                                            // 28010
    optionsMap.put(value, count + 1);                                                                                  // 28011
  };                                                                                                                   // 28012
                                                                                                                       // 28013
  // Tell the select control that an option, with the given value, has been removed                                    // 28014
  self.removeOption = function(value) {                                                                                // 28015
    var count = optionsMap.get(value);                                                                                 // 28016
    if (count) {                                                                                                       // 28017
      if (count === 1) {                                                                                               // 28018
        optionsMap.remove(value);                                                                                      // 28019
        if (value === '') {                                                                                            // 28020
          self.emptyOption = undefined;                                                                                // 28021
        }                                                                                                              // 28022
      } else {                                                                                                         // 28023
        optionsMap.put(value, count - 1);                                                                              // 28024
      }                                                                                                                // 28025
    }                                                                                                                  // 28026
  };                                                                                                                   // 28027
                                                                                                                       // 28028
  // Check whether the select control has an option matching the given value                                           // 28029
  self.hasOption = function(value) {                                                                                   // 28030
    return !!optionsMap.get(value);                                                                                    // 28031
  };                                                                                                                   // 28032
}];                                                                                                                    // 28033
                                                                                                                       // 28034
/**                                                                                                                    // 28035
 * @ngdoc directive                                                                                                    // 28036
 * @name select                                                                                                        // 28037
 * @restrict E                                                                                                         // 28038
 *                                                                                                                     // 28039
 * @description                                                                                                        // 28040
 * HTML `SELECT` element with angular data-binding.                                                                    // 28041
 *                                                                                                                     // 28042
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions               // 28043
 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits such as reducing                // 28044
 * memory and increasing speed by not creating a new scope for each repeated instance, as well as providing            // 28045
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the                    // 28046
 * comprehension expression.                                                                                           // 28047
 *                                                                                                                     // 28048
 * When an item in the `<select>` menu is selected, the array element or object property                               // 28049
 * represented by the selected option will be bound to the model identified by the `ngModel`                           // 28050
 * directive.                                                                                                          // 28051
 *                                                                                                                     // 28052
 * If the viewValue contains a value that doesn't match any of the options then the control                            // 28053
 * will automatically add an "unknown" option, which it then removes when this is resolved.                            // 28054
 *                                                                                                                     // 28055
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can                      // 28056
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"                // 28057
 * option. See example below for demonstration.                                                                        // 28058
 *                                                                                                                     // 28059
 * <div class="alert alert-info">                                                                                      // 28060
 * The value of a `select` directive used without `ngOptions` is always a string.                                      // 28061
 * When the model needs to be bound to a non-string value, you must either explictly convert it                        // 28062
 * using a directive (see example below) or use `ngOptions` to specify the set of options.                             // 28063
 * This is because an option element can only be bound to string values at present.                                    // 28064
 * </div>                                                                                                              // 28065
 *                                                                                                                     // 28066
 * ### Example (binding `select` to a non-string value)                                                                // 28067
 *                                                                                                                     // 28068
 * <example name="select-with-non-string-options" module="nonStringSelect">                                            // 28069
 *   <file name="index.html">                                                                                          // 28070
 *     <select ng-model="model.id" convert-to-number>                                                                  // 28071
 *       <option value="0">Zero</option>                                                                               // 28072
 *       <option value="1">One</option>                                                                                // 28073
 *       <option value="2">Two</option>                                                                                // 28074
 *     </select>                                                                                                       // 28075
 *     {{ model }}                                                                                                     // 28076
 *   </file>                                                                                                           // 28077
 *   <file name="app.js">                                                                                              // 28078
 *     angular.module('nonStringSelect', [])                                                                           // 28079
 *       .run(function($rootScope) {                                                                                   // 28080
 *         $rootScope.model = { id: 2 };                                                                               // 28081
 *       })                                                                                                            // 28082
 *       .directive('convertToNumber', function() {                                                                    // 28083
 *         return {                                                                                                    // 28084
 *           require: 'ngModel',                                                                                       // 28085
 *           link: function(scope, element, attrs, ngModel) {                                                          // 28086
 *             ngModel.$parsers.push(function(val) {                                                                   // 28087
 *               return parseInt(val, 10);                                                                             // 28088
 *             });                                                                                                     // 28089
 *             ngModel.$formatters.push(function(val) {                                                                // 28090
 *               return '' + val;                                                                                      // 28091
 *             });                                                                                                     // 28092
 *           }                                                                                                         // 28093
 *         };                                                                                                          // 28094
 *       });                                                                                                           // 28095
 *   </file>                                                                                                           // 28096
 *   <file name="protractor.js" type="protractor">                                                                     // 28097
 *     it('should initialize to model', function() {                                                                   // 28098
 *       var select = element(by.css('select'));                                                                       // 28099
 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');                           // 28100
 *     });                                                                                                             // 28101
 *   </file>                                                                                                           // 28102
 * </example>                                                                                                          // 28103
 *                                                                                                                     // 28104
 */                                                                                                                    // 28105
var selectDirective = function() {                                                                                     // 28106
                                                                                                                       // 28107
  return {                                                                                                             // 28108
    restrict: 'E',                                                                                                     // 28109
    require: ['select', '?ngModel'],                                                                                   // 28110
    controller: SelectController,                                                                                      // 28111
    link: function(scope, element, attr, ctrls) {                                                                      // 28112
                                                                                                                       // 28113
      // if ngModel is not defined, we don't need to do anything                                                       // 28114
      var ngModelCtrl = ctrls[1];                                                                                      // 28115
      if (!ngModelCtrl) return;                                                                                        // 28116
                                                                                                                       // 28117
      var selectCtrl = ctrls[0];                                                                                       // 28118
                                                                                                                       // 28119
      selectCtrl.ngModelCtrl = ngModelCtrl;                                                                            // 28120
                                                                                                                       // 28121
      // We delegate rendering to the `writeValue` method, which can be changed                                        // 28122
      // if the select can have multiple selected values or if the options are being                                   // 28123
      // generated by `ngOptions`                                                                                      // 28124
      ngModelCtrl.$render = function() {                                                                               // 28125
        selectCtrl.writeValue(ngModelCtrl.$viewValue);                                                                 // 28126
      };                                                                                                               // 28127
                                                                                                                       // 28128
      // When the selected item(s) changes we delegate getting the value of the select control                         // 28129
      // to the `readValue` method, which can be changed if the select can have multiple                               // 28130
      // selected values or if the options are being generated by `ngOptions`                                          // 28131
      element.on('change', function() {                                                                                // 28132
        scope.$apply(function() {                                                                                      // 28133
          ngModelCtrl.$setViewValue(selectCtrl.readValue());                                                           // 28134
        });                                                                                                            // 28135
      });                                                                                                              // 28136
                                                                                                                       // 28137
      // If the select allows multiple values then we need to modify how we read and write                             // 28138
      // values from and to the control; also what it means for the value to be empty and                              // 28139
      // we have to add an extra watch since ngModel doesn't work well with arrays - it                                // 28140
      // doesn't trigger rendering if only an item in the array changes.                                               // 28141
      if (attr.multiple) {                                                                                             // 28142
                                                                                                                       // 28143
        // Read value now needs to check each option to see if it is selected                                          // 28144
        selectCtrl.readValue = function readMultipleValue() {                                                          // 28145
          var array = [];                                                                                              // 28146
          forEach(element.find('option'), function(option) {                                                           // 28147
            if (option.selected) {                                                                                     // 28148
              array.push(option.value);                                                                                // 28149
            }                                                                                                          // 28150
          });                                                                                                          // 28151
          return array;                                                                                                // 28152
        };                                                                                                             // 28153
                                                                                                                       // 28154
        // Write value now needs to set the selected property of each matching option                                  // 28155
        selectCtrl.writeValue = function writeMultipleValue(value) {                                                   // 28156
          var items = new HashMap(value);                                                                              // 28157
          forEach(element.find('option'), function(option) {                                                           // 28158
            option.selected = isDefined(items.get(option.value));                                                      // 28159
          });                                                                                                          // 28160
        };                                                                                                             // 28161
                                                                                                                       // 28162
        // we have to do it on each watch since ngModel watches reference, but                                         // 28163
        // we need to work of an array, so we need to see if anything was inserted/removed                             // 28164
        var lastView, lastViewRef = NaN;                                                                               // 28165
        scope.$watch(function selectMultipleWatch() {                                                                  // 28166
          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {                   // 28167
            lastView = shallowCopy(ngModelCtrl.$viewValue);                                                            // 28168
            ngModelCtrl.$render();                                                                                     // 28169
          }                                                                                                            // 28170
          lastViewRef = ngModelCtrl.$viewValue;                                                                        // 28171
        });                                                                                                            // 28172
                                                                                                                       // 28173
        // If we are a multiple select then value is now a collection                                                  // 28174
        // so the meaning of $isEmpty changes                                                                          // 28175
        ngModelCtrl.$isEmpty = function(value) {                                                                       // 28176
          return !value || value.length === 0;                                                                         // 28177
        };                                                                                                             // 28178
                                                                                                                       // 28179
      }                                                                                                                // 28180
    }                                                                                                                  // 28181
  };                                                                                                                   // 28182
};                                                                                                                     // 28183
                                                                                                                       // 28184
                                                                                                                       // 28185
// The option directive is purely designed to communicate the existence (or lack of)                                   // 28186
// of dynamically created (and destroyed) option elements to their containing select                                   // 28187
// directive via its controller.                                                                                       // 28188
var optionDirective = ['$interpolate', function($interpolate) {                                                        // 28189
                                                                                                                       // 28190
  function chromeHack(optionElement) {                                                                                 // 28191
    // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459                                       // 28192
    // Adding an <option selected="selected"> element to a <select required="required"> should                         // 28193
    // automatically select the new element                                                                            // 28194
    if (optionElement[0].hasAttribute('selected')) {                                                                   // 28195
      optionElement[0].selected = true;                                                                                // 28196
    }                                                                                                                  // 28197
  }                                                                                                                    // 28198
                                                                                                                       // 28199
  return {                                                                                                             // 28200
    restrict: 'E',                                                                                                     // 28201
    priority: 100,                                                                                                     // 28202
    compile: function(element, attr) {                                                                                 // 28203
                                                                                                                       // 28204
      // If the value attribute is not defined then we fall back to the                                                // 28205
      // text content of the option element, which may be interpolated                                                 // 28206
      if (isUndefined(attr.value)) {                                                                                   // 28207
        var interpolateFn = $interpolate(element.text(), true);                                                        // 28208
        if (!interpolateFn) {                                                                                          // 28209
          attr.$set('value', element.text());                                                                          // 28210
        }                                                                                                              // 28211
      }                                                                                                                // 28212
                                                                                                                       // 28213
      return function(scope, element, attr) {                                                                          // 28214
                                                                                                                       // 28215
        // This is an optimization over using ^^ since we don't want to have to search                                 // 28216
        // all the way to the root of the DOM for every single option element                                          // 28217
        var selectCtrlName = '$selectController',                                                                      // 28218
            parent = element.parent(),                                                                                 // 28219
            selectCtrl = parent.data(selectCtrlName) ||                                                                // 28220
              parent.parent().data(selectCtrlName); // in case we are in optgroup                                      // 28221
                                                                                                                       // 28222
        // Only update trigger option updates if this is an option within a `select`                                   // 28223
        // that also has `ngModel` attached                                                                            // 28224
        if (selectCtrl && selectCtrl.ngModelCtrl) {                                                                    // 28225
                                                                                                                       // 28226
          if (interpolateFn) {                                                                                         // 28227
            scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {                              // 28228
              attr.$set('value', newVal);                                                                              // 28229
              if (oldVal !== newVal) {                                                                                 // 28230
                selectCtrl.removeOption(oldVal);                                                                       // 28231
              }                                                                                                        // 28232
              selectCtrl.addOption(newVal, element);                                                                   // 28233
              selectCtrl.ngModelCtrl.$render();                                                                        // 28234
              chromeHack(element);                                                                                     // 28235
            });                                                                                                        // 28236
          } else {                                                                                                     // 28237
            selectCtrl.addOption(attr.value, element);                                                                 // 28238
            selectCtrl.ngModelCtrl.$render();                                                                          // 28239
            chromeHack(element);                                                                                       // 28240
          }                                                                                                            // 28241
                                                                                                                       // 28242
          element.on('$destroy', function() {                                                                          // 28243
            selectCtrl.removeOption(attr.value);                                                                       // 28244
            selectCtrl.ngModelCtrl.$render();                                                                          // 28245
          });                                                                                                          // 28246
        }                                                                                                              // 28247
      };                                                                                                               // 28248
    }                                                                                                                  // 28249
  };                                                                                                                   // 28250
}];                                                                                                                    // 28251
                                                                                                                       // 28252
var styleDirective = valueFn({                                                                                         // 28253
  restrict: 'E',                                                                                                       // 28254
  terminal: false                                                                                                      // 28255
});                                                                                                                    // 28256
                                                                                                                       // 28257
var requiredDirective = function() {                                                                                   // 28258
  return {                                                                                                             // 28259
    restrict: 'A',                                                                                                     // 28260
    require: '?ngModel',                                                                                               // 28261
    link: function(scope, elm, attr, ctrl) {                                                                           // 28262
      if (!ctrl) return;                                                                                               // 28263
      attr.required = true; // force truthy in case we are on non input element                                        // 28264
                                                                                                                       // 28265
      ctrl.$validators.required = function(modelValue, viewValue) {                                                    // 28266
        return !attr.required || !ctrl.$isEmpty(viewValue);                                                            // 28267
      };                                                                                                               // 28268
                                                                                                                       // 28269
      attr.$observe('required', function() {                                                                           // 28270
        ctrl.$validate();                                                                                              // 28271
      });                                                                                                              // 28272
    }                                                                                                                  // 28273
  };                                                                                                                   // 28274
};                                                                                                                     // 28275
                                                                                                                       // 28276
                                                                                                                       // 28277
var patternDirective = function() {                                                                                    // 28278
  return {                                                                                                             // 28279
    restrict: 'A',                                                                                                     // 28280
    require: '?ngModel',                                                                                               // 28281
    link: function(scope, elm, attr, ctrl) {                                                                           // 28282
      if (!ctrl) return;                                                                                               // 28283
                                                                                                                       // 28284
      var regexp, patternExp = attr.ngPattern || attr.pattern;                                                         // 28285
      attr.$observe('pattern', function(regex) {                                                                       // 28286
        if (isString(regex) && regex.length > 0) {                                                                     // 28287
          regex = new RegExp('^' + regex + '$');                                                                       // 28288
        }                                                                                                              // 28289
                                                                                                                       // 28290
        if (regex && !regex.test) {                                                                                    // 28291
          throw minErr('ngPattern')('noregexp',                                                                        // 28292
            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,                                       // 28293
            regex, startingTag(elm));                                                                                  // 28294
        }                                                                                                              // 28295
                                                                                                                       // 28296
        regexp = regex || undefined;                                                                                   // 28297
        ctrl.$validate();                                                                                              // 28298
      });                                                                                                              // 28299
                                                                                                                       // 28300
      ctrl.$validators.pattern = function(value) {                                                                     // 28301
        return ctrl.$isEmpty(value) || isUndefined(regexp) || regexp.test(value);                                      // 28302
      };                                                                                                               // 28303
    }                                                                                                                  // 28304
  };                                                                                                                   // 28305
};                                                                                                                     // 28306
                                                                                                                       // 28307
                                                                                                                       // 28308
var maxlengthDirective = function() {                                                                                  // 28309
  return {                                                                                                             // 28310
    restrict: 'A',                                                                                                     // 28311
    require: '?ngModel',                                                                                               // 28312
    link: function(scope, elm, attr, ctrl) {                                                                           // 28313
      if (!ctrl) return;                                                                                               // 28314
                                                                                                                       // 28315
      var maxlength = -1;                                                                                              // 28316
      attr.$observe('maxlength', function(value) {                                                                     // 28317
        var intVal = toInt(value);                                                                                     // 28318
        maxlength = isNaN(intVal) ? -1 : intVal;                                                                       // 28319
        ctrl.$validate();                                                                                              // 28320
      });                                                                                                              // 28321
      ctrl.$validators.maxlength = function(modelValue, viewValue) {                                                   // 28322
        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);                         // 28323
      };                                                                                                               // 28324
    }                                                                                                                  // 28325
  };                                                                                                                   // 28326
};                                                                                                                     // 28327
                                                                                                                       // 28328
var minlengthDirective = function() {                                                                                  // 28329
  return {                                                                                                             // 28330
    restrict: 'A',                                                                                                     // 28331
    require: '?ngModel',                                                                                               // 28332
    link: function(scope, elm, attr, ctrl) {                                                                           // 28333
      if (!ctrl) return;                                                                                               // 28334
                                                                                                                       // 28335
      var minlength = 0;                                                                                               // 28336
      attr.$observe('minlength', function(value) {                                                                     // 28337
        minlength = toInt(value) || 0;                                                                                 // 28338
        ctrl.$validate();                                                                                              // 28339
      });                                                                                                              // 28340
      ctrl.$validators.minlength = function(modelValue, viewValue) {                                                   // 28341
        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;                                              // 28342
      };                                                                                                               // 28343
    }                                                                                                                  // 28344
  };                                                                                                                   // 28345
};                                                                                                                     // 28346
                                                                                                                       // 28347
  if (window.angular.bootstrap) {                                                                                      // 28348
    //AngularJS is already loaded, so we can return here...                                                            // 28349
    console.log('WARNING: Tried to load angular more than once.');                                                     // 28350
    return;                                                                                                            // 28351
  }                                                                                                                    // 28352
                                                                                                                       // 28353
  //try to bind to jquery now so that one can write jqLite(document).ready()                                           // 28354
  //but we will rebind on bootstrap again.                                                                             // 28355
  bindJQuery();                                                                                                        // 28356
                                                                                                                       // 28357
  publishExternalAPI(angular);                                                                                         // 28358
                                                                                                                       // 28359
  jqLite(document).ready(function() {                                                                                  // 28360
    angularInit(document, bootstrap);                                                                                  // 28361
  });                                                                                                                  // 28362
                                                                                                                       // 28363
})(window, document);                                                                                                  // 28364
                                                                                                                       // 28365
!window.angular.$$csp() && window.angular.element(document).find('head').prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['angular:angular'] = {};

})();
